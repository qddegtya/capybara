/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class BatchOTOQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOTOQueryRequest extends $tea.Model {
    processQueryKey?: string;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOTOQueryResponseBody extends $tea.Model {
    messageReadInfoList?: BatchOTOQueryResponseBodyMessageReadInfoList[];
    sendStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOTOQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchOTOQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallGroupRequest extends $tea.Model {
    chatbotId?: string;
    openConversationId?: string;
    processQueryKeys?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallGroupResponseBody extends $tea.Model {
    failedResult?: {
        [key: string]: string;
    };
    successResult?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchRecallGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallOTOHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallOTORequest extends $tea.Model {
    processQueryKeys?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallOTOResponseBody extends $tea.Model {
    failedResult?: {
        [key: string]: string;
    };
    successResult?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallOTOResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchRecallOTOResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallPrivateChatHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallPrivateChatRequest extends $tea.Model {
    openConversationId?: string;
    processQueryKeys?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallPrivateChatResponseBody extends $tea.Model {
    failedResult?: {
        [key: string]: string;
    };
    successResult?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRecallPrivateChatResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchRecallPrivateChatResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOTOHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOTORequest extends $tea.Model {
    msgKey?: string;
    msgParam?: string;
    robotCode?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOTOResponseBody extends $tea.Model {
    flowControlledStaffIdList?: string[];
    invalidStaffIdList?: string[];
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOTOResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchSendOTOResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRobotPluginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRobotPluginRequest extends $tea.Model {
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRobotPluginResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRobotPluginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ClearRobotPluginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteRobotAiSkillHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteRobotAiSkillRequest extends $tea.Model {
    context?: {
        [key: string]: any;
    };
    input?: string;
    robotCode?: string;
    skillId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteRobotAiSkillResponseBody extends $tea.Model {
    result?: string;
    skillExecuteId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteRobotAiSkillResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExecuteRobotAiSkillResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBotListInGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBotListInGroupRequest extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBotListInGroupResponseBody extends $tea.Model {
    chatbotInstanceVOList?: GetBotListInGroupResponseBodyChatbotInstanceVOList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBotListInGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetBotListInGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageSingleChatRobotStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageSingleChatRobotStatusRequest extends $tea.Model {
    robotCode?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageSingleChatRobotStatusResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ManageSingleChatRobotStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ManageSingleChatRobotStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupQueryRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    openConversationId?: string;
    processQueryKey?: string;
    robotCode?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupQueryResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    readUserIds?: string[];
    sendStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OrgGroupQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupRecallHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupRecallRequest extends $tea.Model {
    openConversationId?: string;
    processQueryKeys?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupRecallResponseBody extends $tea.Model {
    failedResult?: {
        [key: string]: string;
    };
    successResult?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupRecallResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OrgGroupRecallResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupSendHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupSendRequest extends $tea.Model {
    coolAppCode?: string;
    msgKey?: string;
    msgParam?: string;
    openConversationId?: string;
    robotCode?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupSendResponseBody extends $tea.Model {
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrgGroupSendResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OrgGroupSendResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrivateChatQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrivateChatQueryRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    openConversationId?: string;
    processQueryKey?: string;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrivateChatQueryResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    readUserIds?: string[];
    sendStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrivateChatQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PrivateChatQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrivateChatSendHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrivateChatSendRequest extends $tea.Model {
    coolAppCode?: string;
    msgKey?: string;
    msgParam?: string;
    openConversationId?: string;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrivateChatSendResponseBody extends $tea.Model {
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PrivateChatSendResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PrivateChatSendResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBotInstanceInGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBotInstanceInGroupInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBotInstanceInGroupInfoResponseBody extends $tea.Model {
    hasMore?: boolean;
    openConversationIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBotInstanceInGroupInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryBotInstanceInGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRobotPluginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRobotPluginRequest extends $tea.Model {
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRobotPluginResponseBody extends $tea.Model {
    pluginInfoList?: QueryRobotPluginResponseBodyPluginInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRobotPluginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryRobotPluginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotMessageFileDownloadHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotMessageFileDownloadRequest extends $tea.Model {
    downloadCode?: string;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotMessageFileDownloadResponseBody extends $tea.Model {
    downloadUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotMessageFileDownloadResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RobotMessageFileDownloadResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotRecallDingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotRecallDingRequest extends $tea.Model {
    openDingId?: string;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotRecallDingResponseBody extends $tea.Model {
    openDingId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotRecallDingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RobotRecallDingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotSendDingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotSendDingRequest extends $tea.Model {
    content?: string;
    receiverUserIdList?: string[];
    remindType?: number;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotSendDingResponseBody extends $tea.Model {
    failedList?: {
        [key: string]: any;
    };
    openDingId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RobotSendDingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RobotSendDingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotDingMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotDingMessageRequest extends $tea.Model {
    contentParams?: {
        [key: string]: string;
    };
    dingTemplateId?: string;
    openConversationId?: string;
    receiverUserIdList?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotDingMessageResponseBody extends $tea.Model {
    dingSendResultId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotDingMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendRobotDingMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotPluginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotPluginRequest extends $tea.Model {
    pluginInfoList?: SetRobotPluginRequestPluginInfoList[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotPluginResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotPluginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetRobotPluginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstalledRobotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstalledRobotRequest extends $tea.Model {
    brief?: string;
    description?: string;
    icon?: string;
    name?: string;
    robotCode?: string;
    updateType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstalledRobotResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstalledRobotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateInstalledRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOTOQueryResponseBodyMessageReadInfoList extends $tea.Model {
    name?: string;
    readStatus?: string;
    readTimestamp?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBotListInGroupResponseBodyChatbotInstanceVOList extends $tea.Model {
    downloadIconURL?: string;
    name?: string;
    openRobotType?: number;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRobotPluginResponseBodyPluginInfoList extends $tea.Model {
    icon?: string;
    mobileUrl?: string;
    name?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRobotPluginRequestPluginInfoList extends $tea.Model {
    icon?: string;
    mobileUrl?: string;
    name?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 批量查询人与机器人会话机器人消息是否已读
     *
     * @param request BatchOTOQueryRequest
     * @param headers BatchOTOQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchOTOQueryResponse
     */
    batchOTOQueryWithOptions(request: BatchOTOQueryRequest, headers: BatchOTOQueryHeaders, runtime: $Util.RuntimeOptions): Promise<BatchOTOQueryResponse>;
    /**
     * @summary 批量查询人与机器人会话机器人消息是否已读
     *
     * @param request BatchOTOQueryRequest
     * @return BatchOTOQueryResponse
     */
    batchOTOQuery(request: BatchOTOQueryRequest): Promise<BatchOTOQueryResponse>;
    /**
     * @summary 批量撤回群聊机器人消息
     *
     * @param request BatchRecallGroupRequest
     * @param headers BatchRecallGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchRecallGroupResponse
     */
    batchRecallGroupWithOptions(request: BatchRecallGroupRequest, headers: BatchRecallGroupHeaders, runtime: $Util.RuntimeOptions): Promise<BatchRecallGroupResponse>;
    /**
     * @summary 批量撤回群聊机器人消息
     *
     * @param request BatchRecallGroupRequest
     * @return BatchRecallGroupResponse
     */
    batchRecallGroup(request: BatchRecallGroupRequest): Promise<BatchRecallGroupResponse>;
    /**
     * @summary 批量撤回人与机器人会话中机器人消息
     *
     * @param request BatchRecallOTORequest
     * @param headers BatchRecallOTOHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchRecallOTOResponse
     */
    batchRecallOTOWithOptions(request: BatchRecallOTORequest, headers: BatchRecallOTOHeaders, runtime: $Util.RuntimeOptions): Promise<BatchRecallOTOResponse>;
    /**
     * @summary 批量撤回人与机器人会话中机器人消息
     *
     * @param request BatchRecallOTORequest
     * @return BatchRecallOTOResponse
     */
    batchRecallOTO(request: BatchRecallOTORequest): Promise<BatchRecallOTOResponse>;
    /**
     * @summary 批量撤回人与人会话中机器人消息
     *
     * @param request BatchRecallPrivateChatRequest
     * @param headers BatchRecallPrivateChatHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchRecallPrivateChatResponse
     */
    batchRecallPrivateChatWithOptions(request: BatchRecallPrivateChatRequest, headers: BatchRecallPrivateChatHeaders, runtime: $Util.RuntimeOptions): Promise<BatchRecallPrivateChatResponse>;
    /**
     * @summary 批量撤回人与人会话中机器人消息
     *
     * @param request BatchRecallPrivateChatRequest
     * @return BatchRecallPrivateChatResponse
     */
    batchRecallPrivateChat(request: BatchRecallPrivateChatRequest): Promise<BatchRecallPrivateChatResponse>;
    /**
     * @summary 批量发送人与机器人会话中机器人消息
     *
     * @param request BatchSendOTORequest
     * @param headers BatchSendOTOHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchSendOTOResponse
     */
    batchSendOTOWithOptions(request: BatchSendOTORequest, headers: BatchSendOTOHeaders, runtime: $Util.RuntimeOptions): Promise<BatchSendOTOResponse>;
    /**
     * @summary 批量发送人与机器人会话中机器人消息
     *
     * @param request BatchSendOTORequest
     * @return BatchSendOTOResponse
     */
    batchSendOTO(request: BatchSendOTORequest): Promise<BatchSendOTOResponse>;
    /**
     * @summary 清空单聊机器人快捷入口
     *
     * @param request ClearRobotPluginRequest
     * @param headers ClearRobotPluginHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ClearRobotPluginResponse
     */
    clearRobotPluginWithOptions(request: ClearRobotPluginRequest, headers: ClearRobotPluginHeaders, runtime: $Util.RuntimeOptions): Promise<ClearRobotPluginResponse>;
    /**
     * @summary 清空单聊机器人快捷入口
     *
     * @param request ClearRobotPluginRequest
     * @return ClearRobotPluginResponse
     */
    clearRobotPlugin(request: ClearRobotPluginRequest): Promise<ClearRobotPluginResponse>;
    /**
     * @summary 执行机器人的AI技能
     *
     * @param request ExecuteRobotAiSkillRequest
     * @param headers ExecuteRobotAiSkillHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExecuteRobotAiSkillResponse
     */
    executeRobotAiSkillWithOptions(request: ExecuteRobotAiSkillRequest, headers: ExecuteRobotAiSkillHeaders, runtime: $Util.RuntimeOptions): Promise<ExecuteRobotAiSkillResponse>;
    /**
     * @summary 执行机器人的AI技能
     *
     * @param request ExecuteRobotAiSkillRequest
     * @return ExecuteRobotAiSkillResponse
     */
    executeRobotAiSkill(request: ExecuteRobotAiSkillRequest): Promise<ExecuteRobotAiSkillResponse>;
    /**
     * @summary 查询群内的机器人列表
     *
     * @param request GetBotListInGroupRequest
     * @param headers GetBotListInGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBotListInGroupResponse
     */
    getBotListInGroupWithOptions(request: GetBotListInGroupRequest, headers: GetBotListInGroupHeaders, runtime: $Util.RuntimeOptions): Promise<GetBotListInGroupResponse>;
    /**
     * @summary 查询群内的机器人列表
     *
     * @param request GetBotListInGroupRequest
     * @return GetBotListInGroupResponse
     */
    getBotListInGroup(request: GetBotListInGroupRequest): Promise<GetBotListInGroupResponse>;
    /**
     * @summary 管理机器人启用，停用状态
     *
     * @param request ManageSingleChatRobotStatusRequest
     * @param headers ManageSingleChatRobotStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ManageSingleChatRobotStatusResponse
     */
    manageSingleChatRobotStatusWithOptions(request: ManageSingleChatRobotStatusRequest, headers: ManageSingleChatRobotStatusHeaders, runtime: $Util.RuntimeOptions): Promise<ManageSingleChatRobotStatusResponse>;
    /**
     * @summary 管理机器人启用，停用状态
     *
     * @param request ManageSingleChatRobotStatusRequest
     * @return ManageSingleChatRobotStatusResponse
     */
    manageSingleChatRobotStatus(request: ManageSingleChatRobotStatusRequest): Promise<ManageSingleChatRobotStatusResponse>;
    /**
     * @summary 查询企业机器人群聊消息用户已读状态
     *
     * @param request OrgGroupQueryRequest
     * @param headers OrgGroupQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return OrgGroupQueryResponse
     */
    orgGroupQueryWithOptions(request: OrgGroupQueryRequest, headers: OrgGroupQueryHeaders, runtime: $Util.RuntimeOptions): Promise<OrgGroupQueryResponse>;
    /**
     * @summary 查询企业机器人群聊消息用户已读状态
     *
     * @param request OrgGroupQueryRequest
     * @return OrgGroupQueryResponse
     */
    orgGroupQuery(request: OrgGroupQueryRequest): Promise<OrgGroupQueryResponse>;
    /**
     * @summary 企业机器人撤回内部群消息
     *
     * @param request OrgGroupRecallRequest
     * @param headers OrgGroupRecallHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return OrgGroupRecallResponse
     */
    orgGroupRecallWithOptions(request: OrgGroupRecallRequest, headers: OrgGroupRecallHeaders, runtime: $Util.RuntimeOptions): Promise<OrgGroupRecallResponse>;
    /**
     * @summary 企业机器人撤回内部群消息
     *
     * @param request OrgGroupRecallRequest
     * @return OrgGroupRecallResponse
     */
    orgGroupRecall(request: OrgGroupRecallRequest): Promise<OrgGroupRecallResponse>;
    /**
     * @summary 机器人发送群聊消息
     *
     * @param request OrgGroupSendRequest
     * @param headers OrgGroupSendHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return OrgGroupSendResponse
     */
    orgGroupSendWithOptions(request: OrgGroupSendRequest, headers: OrgGroupSendHeaders, runtime: $Util.RuntimeOptions): Promise<OrgGroupSendResponse>;
    /**
     * @summary 机器人发送群聊消息
     *
     * @param request OrgGroupSendRequest
     * @return OrgGroupSendResponse
     */
    orgGroupSend(request: OrgGroupSendRequest): Promise<OrgGroupSendResponse>;
    /**
     * @summary 查询人与人会话中机器人已读消息
     *
     * @param request PrivateChatQueryRequest
     * @param headers PrivateChatQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PrivateChatQueryResponse
     */
    privateChatQueryWithOptions(request: PrivateChatQueryRequest, headers: PrivateChatQueryHeaders, runtime: $Util.RuntimeOptions): Promise<PrivateChatQueryResponse>;
    /**
     * @summary 查询人与人会话中机器人已读消息
     *
     * @param request PrivateChatQueryRequest
     * @return PrivateChatQueryResponse
     */
    privateChatQuery(request: PrivateChatQueryRequest): Promise<PrivateChatQueryResponse>;
    /**
     * @summary 人与人会话中机器人发送普通消息
     *
     * @param request PrivateChatSendRequest
     * @param headers PrivateChatSendHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PrivateChatSendResponse
     */
    privateChatSendWithOptions(request: PrivateChatSendRequest, headers: PrivateChatSendHeaders, runtime: $Util.RuntimeOptions): Promise<PrivateChatSendResponse>;
    /**
     * @summary 人与人会话中机器人发送普通消息
     *
     * @param request PrivateChatSendRequest
     * @return PrivateChatSendResponse
     */
    privateChatSend(request: PrivateChatSendRequest): Promise<PrivateChatSendResponse>;
    /**
     * @summary 获取机器人所在群信息
     *
     * @param request QueryBotInstanceInGroupInfoRequest
     * @param headers QueryBotInstanceInGroupInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryBotInstanceInGroupInfoResponse
     */
    queryBotInstanceInGroupInfoWithOptions(request: QueryBotInstanceInGroupInfoRequest, headers: QueryBotInstanceInGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryBotInstanceInGroupInfoResponse>;
    /**
     * @summary 获取机器人所在群信息
     *
     * @param request QueryBotInstanceInGroupInfoRequest
     * @return QueryBotInstanceInGroupInfoResponse
     */
    queryBotInstanceInGroupInfo(request: QueryBotInstanceInGroupInfoRequest): Promise<QueryBotInstanceInGroupInfoResponse>;
    /**
     * @summary 查询单聊机器人快捷入口
     *
     * @param request QueryRobotPluginRequest
     * @param headers QueryRobotPluginHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRobotPluginResponse
     */
    queryRobotPluginWithOptions(request: QueryRobotPluginRequest, headers: QueryRobotPluginHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRobotPluginResponse>;
    /**
     * @summary 查询单聊机器人快捷入口
     *
     * @param request QueryRobotPluginRequest
     * @return QueryRobotPluginResponse
     */
    queryRobotPlugin(request: QueryRobotPluginRequest): Promise<QueryRobotPluginResponse>;
    /**
     * @summary 获取机器人消息中文件下载链接
     *
     * @param request RobotMessageFileDownloadRequest
     * @param headers RobotMessageFileDownloadHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RobotMessageFileDownloadResponse
     */
    robotMessageFileDownloadWithOptions(request: RobotMessageFileDownloadRequest, headers: RobotMessageFileDownloadHeaders, runtime: $Util.RuntimeOptions): Promise<RobotMessageFileDownloadResponse>;
    /**
     * @summary 获取机器人消息中文件下载链接
     *
     * @param request RobotMessageFileDownloadRequest
     * @return RobotMessageFileDownloadResponse
     */
    robotMessageFileDownload(request: RobotMessageFileDownloadRequest): Promise<RobotMessageFileDownloadResponse>;
    /**
     * @summary 撤回已经发送的DING消息
     *
     * @param request RobotRecallDingRequest
     * @param headers RobotRecallDingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RobotRecallDingResponse
     */
    robotRecallDingWithOptions(request: RobotRecallDingRequest, headers: RobotRecallDingHeaders, runtime: $Util.RuntimeOptions): Promise<RobotRecallDingResponse>;
    /**
     * @summary 撤回已经发送的DING消息
     *
     * @param request RobotRecallDingRequest
     * @return RobotRecallDingResponse
     */
    robotRecallDing(request: RobotRecallDingRequest): Promise<RobotRecallDingResponse>;
    /**
     * @summary 发送DING消息
     *
     * @param request RobotSendDingRequest
     * @param headers RobotSendDingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RobotSendDingResponse
     */
    robotSendDingWithOptions(request: RobotSendDingRequest, headers: RobotSendDingHeaders, runtime: $Util.RuntimeOptions): Promise<RobotSendDingResponse>;
    /**
     * @summary 发送DING消息
     *
     * @param request RobotSendDingRequest
     * @return RobotSendDingResponse
     */
    robotSendDing(request: RobotSendDingRequest): Promise<RobotSendDingResponse>;
    /**
     * @summary 机器人发送DING消息
     *
     * @param request SendRobotDingMessageRequest
     * @param headers SendRobotDingMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendRobotDingMessageResponse
     */
    sendRobotDingMessageWithOptions(request: SendRobotDingMessageRequest, headers: SendRobotDingMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendRobotDingMessageResponse>;
    /**
     * @summary 机器人发送DING消息
     *
     * @param request SendRobotDingMessageRequest
     * @return SendRobotDingMessageResponse
     */
    sendRobotDingMessage(request: SendRobotDingMessageRequest): Promise<SendRobotDingMessageResponse>;
    /**
     * @summary 设置单聊机器人快捷入口
     *
     * @param request SetRobotPluginRequest
     * @param headers SetRobotPluginHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetRobotPluginResponse
     */
    setRobotPluginWithOptions(request: SetRobotPluginRequest, headers: SetRobotPluginHeaders, runtime: $Util.RuntimeOptions): Promise<SetRobotPluginResponse>;
    /**
     * @summary 设置单聊机器人快捷入口
     *
     * @param request SetRobotPluginRequest
     * @return SetRobotPluginResponse
     */
    setRobotPlugin(request: SetRobotPluginRequest): Promise<SetRobotPluginResponse>;
    /**
     * @summary 更新安装到组织的机器人信息
     *
     * @param request UpdateInstalledRobotRequest
     * @param headers UpdateInstalledRobotHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateInstalledRobotResponse
     */
    updateInstalledRobotWithOptions(request: UpdateInstalledRobotRequest, headers: UpdateInstalledRobotHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateInstalledRobotResponse>;
    /**
     * @summary 更新安装到组织的机器人信息
     *
     * @param request UpdateInstalledRobotRequest
     * @return UpdateInstalledRobotResponse
     */
    updateInstalledRobot(request: UpdateInstalledRobotRequest): Promise<UpdateInstalledRobotResponse>;
}
