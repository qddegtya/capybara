/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class MetricMapValue extends $tea.Model {
    timestamp?: number;
    sendBitRate?: string;
    recvBitRate?: string;
    lostRate?: string;
    roundTripTime?: string;
    audioSendBitRate?: string;
    audioRecvBitRate?: string;
    audioRecLevel?: string;
    audioPlayLevel?: string;
    cameraSendBitRate?: string;
    cameraRecvBitRate?: string;
    cameraSendResolutionActual?: string;
    cameraRecvResolutionActual?: string;
    cameraSendFrame?: string;
    screenSendBitRate?: string;
    cameraRecvFrame?: string;
    screenRecvBitRate?: string;
    screenSendResolutionActual?: string;
    screenRecvResolutionActual?: string;
    screenSendFrame?: string;
    screenRecvFrame?: string;
    audioJitterMax?: string;
    audioJitterAvg?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MemberModelMapValue extends $tea.Model {
    unionId?: string;
    conferenceId?: string;
    userNick?: string;
    joinTime?: number;
    leaveTime?: number;
    duration?: number;
    attendStatus?: number;
    host?: boolean;
    coHost?: boolean;
    outerOrgMember?: boolean;
    pstnJoin?: boolean;
    deviceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelScheduleConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelScheduleConferenceRequest extends $tea.Model {
    creatorUnionId?: string;
    scheduleConferenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelScheduleConferenceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelScheduleConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CancelScheduleConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseVideoConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseVideoConferenceRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseVideoConferenceResponseBody extends $tea.Model {
    cause?: string;
    code?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseVideoConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CloseVideoConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CohostsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CohostsRequest extends $tea.Model {
    action?: string;
    userList?: CohostsRequestUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CohostsResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CohostsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CohostsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomShortLinkHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomShortLinkRequest extends $tea.Model {
    coolAppCode?: string;
    creatorUnionId?: string;
    extensionAppBizData?: string;
    scheduleConferenceId?: string;
    useExtensionApp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomShortLinkResponseBody extends $tea.Model {
    result?: CreateCustomShortLinkResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomShortLinkResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCustomShortLinkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateScheduleConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateScheduleConferenceRequest extends $tea.Model {
    creatorUnionId?: string;
    endTime?: number;
    startTime?: number;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateScheduleConferenceResponseBody extends $tea.Model {
    phones?: string[];
    requestId?: string;
    roomCode?: string;
    scheduleConferenceId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateScheduleConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateScheduleConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVideoConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVideoConferenceRequest extends $tea.Model {
    confTitle?: string;
    inviteCaller?: boolean;
    inviteUserIds?: string[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVideoConferenceResponseBody extends $tea.Model {
    conferenceId?: string;
    conferencePassword?: string;
    externalLinkUrl?: string;
    hostPassword?: string;
    phoneNumbers?: string[];
    roomCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVideoConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateVideoConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FocusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FocusRequest extends $tea.Model {
    action?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FocusResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FocusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FocusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfDataByConferenceIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfDataByConferenceIdRequest extends $tea.Model {
    realData?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfDataByConferenceIdResponseBody extends $tea.Model {
    conferenceId?: string;
    creatorId?: string;
    creatorNick?: string;
    deptName?: string;
    endTime?: number;
    freeType?: string;
    scene?: string;
    startTime?: number;
    timeLength?: number;
    title?: string;
    userCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfDataByConferenceIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConfDataByConferenceIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfDetailDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfDetailDataRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    nick?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfDetailDataResponseBody extends $tea.Model {
    list?: GetConfDetailDataResponseBodyList[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfDetailDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConfDetailDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetHistoryConfDataListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetHistoryConfDataListRequest extends $tea.Model {
    creatorNike?: string;
    endTime?: number;
    freeType?: string;
    maxResults?: number;
    nextToken?: string;
    realData?: boolean;
    scene?: string;
    startTime?: number;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetHistoryConfDataListResponseBody extends $tea.Model {
    list?: GetHistoryConfDataListResponseBodyList[];
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetHistoryConfDataListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetHistoryConfDataListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserLastMetricHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserLastMetricRequest extends $tea.Model {
    unionIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserLastMetricResponseBody extends $tea.Model {
    metricMap?: {
        [key: string]: MetricMapValue;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserLastMetricResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserLastMetricResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserMetricDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserMetricDataRequest extends $tea.Model {
    beginTime?: number;
    endTime?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserMetricDataResponseBody extends $tea.Model {
    metricDataList?: GetUserMetricDataResponseBodyMetricDataList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserMetricDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserMetricDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InviteUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InviteUsersRequest extends $tea.Model {
    inviteeList?: InviteUsersRequestInviteeList[];
    phoneInviteeList?: InviteUsersRequestPhoneInviteeList[];
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InviteUsersResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InviteUsersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InviteUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickMembersRequest extends $tea.Model {
    forbiddenRejoin?: boolean;
    userList?: KickMembersRequestUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickMembersResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: KickMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockConferenceRequest extends $tea.Model {
    action?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockConferenceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LockConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LockConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MuteAllHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MuteAllRequest extends $tea.Model {
    action?: string;
    forceMute?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MuteAllResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MuteAllResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MuteAllResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MuteMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MuteMembersRequest extends $tea.Model {
    action?: string;
    userList?: MuteMembersRequestUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MuteMembersResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MuteMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MuteMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordTextHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordTextRequest extends $tea.Model {
    direction?: string;
    maxResults?: number;
    nextToken?: number;
    startTime?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordTextResponseBody extends $tea.Model {
    hasMore?: boolean;
    paragraphList?: QueryCloudRecordTextResponseBodyParagraphList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordTextResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCloudRecordTextResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordVideoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordVideoRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordVideoResponseBody extends $tea.Model {
    videoList?: QueryCloudRecordVideoResponseBodyVideoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordVideoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCloudRecordVideoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordVideoPlayInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordVideoPlayInfoRequest extends $tea.Model {
    mediaId?: string;
    regionId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordVideoPlayInfoResponseBody extends $tea.Model {
    duration?: number;
    fileSize?: number;
    mp4FileUrl?: string;
    playUrl?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordVideoPlayInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCloudRecordVideoPlayInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoResponseBody extends $tea.Model {
    confInfo?: QueryConferenceInfoResponseBodyConfInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryConferenceInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoBatchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoBatchRequest extends $tea.Model {
    conferenceIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoBatchResponseBody extends $tea.Model {
    infos?: QueryConferenceInfoBatchResponseBodyInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoBatchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryConferenceInfoBatchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceMembersRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceMembersResponseBody extends $tea.Model {
    memberModels?: QueryConferenceMembersResponseBodyMemberModels[];
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryConferenceMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConfSettingsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConfSettingsRequest extends $tea.Model {
    scheduleConferenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConfSettingsResponseBody extends $tea.Model {
    scheduleConfSettingModel?: QueryScheduleConfSettingsResponseBodyScheduleConfSettingModel;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConfSettingsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryScheduleConfSettingsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConferenceRequest extends $tea.Model {
    requestUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConferenceResponseBody extends $tea.Model {
    endTime?: number;
    phones?: string[];
    requestId?: string;
    roomCode?: string;
    scheduleConferenceId?: string;
    startTime?: number;
    title?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryScheduleConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConferenceInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConferenceInfoRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConferenceInfoResponseBody extends $tea.Model {
    conferenceList?: QueryScheduleConferenceInfoResponseBodyConferenceList[];
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConferenceInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryScheduleConferenceInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserOnGoingConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserOnGoingConferenceRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserOnGoingConferenceResponseBody extends $tea.Model {
    memberModelMap?: {
        [key: string]: MemberModelMapValue;
    };
    onGoingConfIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserOnGoingConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserOnGoingConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudRecordRequest extends $tea.Model {
    mode?: string;
    smallWindowPosition?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudRecordResponseBody extends $tea.Model {
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StartCloudRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartStreamOutHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartStreamOutRequest extends $tea.Model {
    mode?: string;
    needHostJoin?: boolean;
    smallWindowPosition?: string;
    streamName?: string;
    streamUrlList?: string[];
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartStreamOutResponseBody extends $tea.Model {
    failStreamMap?: {
        [key: string]: any;
    };
    successStreamMap?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartStreamOutResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StartStreamOutResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudRecordRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudRecordResponseBody extends $tea.Model {
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StopCloudRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopStreamOutHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopStreamOutRequest extends $tea.Model {
    stopAllStream?: boolean;
    streamId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopStreamOutResponseBody extends $tea.Model {
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopStreamOutResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StopStreamOutResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConfSettingsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConfSettingsRequest extends $tea.Model {
    creatorUnionId?: string;
    scheduleConfSettingModel?: UpdateScheduleConfSettingsRequestScheduleConfSettingModel;
    scheduleConferenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConfSettingsResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConfSettingsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateScheduleConfSettingsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConferenceRequest extends $tea.Model {
    creatorUnionId?: string;
    endTime?: number;
    scheduleConferenceId?: string;
    startTime?: number;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConferenceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateScheduleConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVideoConferenceExtInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVideoConferenceExtInfoResponseBody extends $tea.Model {
    case?: string;
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVideoConferenceExtInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateVideoConferenceExtInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVideoConferenceSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVideoConferenceSettingRequest extends $tea.Model {
    allowUnmuteSelf?: boolean;
    autoTransferHost?: boolean;
    forbiddenShareScreen?: boolean;
    lockConference?: boolean;
    muteAll?: boolean;
    onlyInternalEmployeesJoin?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVideoConferenceSettingResponseBody extends $tea.Model {
    case?: string;
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVideoConferenceSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateVideoConferenceSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CohostsRequestUserList extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomShortLinkResponseBodyResult extends $tea.Model {
    customShortLink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConfDetailDataResponseBodyList extends $tea.Model {
    belongOrg?: string;
    conferenceId?: string;
    deviceType?: string;
    duration?: number;
    joinTime?: number;
    leaveTime?: number;
    networkQuality?: string;
    nick?: string;
    role?: string;
    sessionId?: string;
    status?: string;
    unionId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetHistoryConfDataListResponseBodyList extends $tea.Model {
    conferenceId?: string;
    creatorId?: string;
    creatorNick?: string;
    deptName?: string;
    endTime?: number;
    freeType?: string;
    scene?: string;
    startTime?: number;
    timeLength?: number;
    title?: string;
    userCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserMetricDataResponseBodyMetricDataList extends $tea.Model {
    audioPlayLevel?: string;
    audioRecLevel?: string;
    audioRecvBitRate?: string;
    audioSendBitRate?: string;
    cameraRecvBitRate?: string;
    cameraRecvFrame?: string;
    cameraRecvResolutionActual?: string;
    cameraSendBitRate?: string;
    cameraSendFrame?: string;
    cameraSendResolutionActual?: string;
    lostRate?: string;
    recvBitRate?: string;
    roundTripTime?: string;
    screenRecvBitRate?: string;
    screenRecvFrame?: string;
    screenRecvResolutionActual?: string;
    screenSendBitRate?: string;
    screenSendFrame?: string;
    screenSendResolutionActual?: string;
    sendBitRate?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InviteUsersRequestInviteeList extends $tea.Model {
    nick?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InviteUsersRequestPhoneInviteeList extends $tea.Model {
    nick?: string;
    phoneNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickMembersRequestUserList extends $tea.Model {
    participantId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MuteMembersRequestUserList extends $tea.Model {
    participantId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList extends $tea.Model {
    endTime?: number;
    startTime?: number;
    word?: string;
    wordId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordTextResponseBodyParagraphListSentenceList extends $tea.Model {
    endTime?: number;
    sentence?: string;
    startTime?: number;
    unionId?: string;
    wordList?: QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordTextResponseBodyParagraphList extends $tea.Model {
    endTime?: number;
    nextTtoken?: number;
    nickName?: string;
    paragraph?: string;
    recordId?: number;
    sentenceList?: QueryCloudRecordTextResponseBodyParagraphListSentenceList[];
    startTime?: number;
    status?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCloudRecordVideoResponseBodyVideoList extends $tea.Model {
    duration?: number;
    endTime?: number;
    fileSize?: number;
    mediaId?: string;
    recordId?: string;
    recordType?: number;
    regionId?: string;
    startTime?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoResponseBodyConfInfo extends $tea.Model {
    activeNum?: number;
    attendNum?: number;
    confDuration?: number;
    conferenceId?: string;
    creatorId?: string;
    creatorNick?: string;
    endTime?: number;
    externalLinkUrl?: string;
    invitedNum?: number;
    roomCode?: string;
    startTime?: number;
    status?: number;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoBatchResponseBodyInfosUserList extends $tea.Model {
    attendStatus?: number;
    cameraStatus?: number;
    micStatus?: number;
    nick?: string;
    rejectDescription?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceInfoBatchResponseBodyInfos extends $tea.Model {
    conferenceId?: string;
    mediaStatus?: number;
    startTime?: number;
    status?: number;
    title?: string;
    userList?: QueryConferenceInfoBatchResponseBodyInfosUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConferenceMembersResponseBodyMemberModels extends $tea.Model {
    attendStatus?: number;
    coHost?: boolean;
    conferenceId?: string;
    duration?: number;
    host?: boolean;
    joinTime?: number;
    leaveTime?: number;
    outerOrgMember?: boolean;
    pstnJoin?: boolean;
    unionId?: string;
    userNick?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConfSettingsResponseBodyScheduleConfSettingModelMoziConfVirtualExtraSettingMoziConfExtensionAppSettings extends $tea.Model {
    autoOpenMode?: string;
    clientId?: string;
    coolAppCode?: string;
    extensionAppBizData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConfSettingsResponseBodyScheduleConfSettingModelMoziConfVirtualExtraSetting extends $tea.Model {
    enableChat?: number;
    enableWebAnonymousJoin?: boolean;
    joinBeforeHost?: number;
    lockMediaStatusMicMute?: number;
    lockNick?: number;
    moziConfExtensionAppSettings?: QueryScheduleConfSettingsResponseBodyScheduleConfSettingModelMoziConfVirtualExtraSettingMoziConfExtensionAppSettings[];
    waitingRoom?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConfSettingsResponseBodyScheduleConfSettingModel extends $tea.Model {
    cohostUnionIds?: string[];
    confAllowedCorpId?: string;
    hostUnionId?: string;
    lockRoom?: number;
    moziConfVirtualExtraSetting?: QueryScheduleConfSettingsResponseBodyScheduleConfSettingModelMoziConfVirtualExtraSetting;
    muteOnJoin?: number;
    screenShareForbidden?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryScheduleConferenceInfoResponseBodyConferenceList extends $tea.Model {
    conferenceId?: string;
    endTime?: number;
    roomCode?: string;
    startTime?: number;
    status?: number;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSettingMoziConfExtensionAppSettings extends $tea.Model {
    autoOpenMode?: number;
    coolAppCode?: string;
    extensionAppBizData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting extends $tea.Model {
    enableChat?: number;
    enableWebAnonymousJoin?: boolean;
    joinBeforeHost?: number;
    lockMediaStatusMicMute?: number;
    lockNick?: number;
    moziConfExtensionAppSettings?: UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSettingMoziConfExtensionAppSettings[];
    waitingRoom?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateScheduleConfSettingsRequestScheduleConfSettingModel extends $tea.Model {
    cohostUnionIds?: string[];
    confAllowedCorpId?: string;
    hostUnionId?: string;
    lockRoom?: number;
    moziConfVirtualExtraSetting?: UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting;
    muteOnJoin?: number;
    screenShareForbidden?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 取消预约会议
     *
     * @param request CancelScheduleConferenceRequest
     * @param headers CancelScheduleConferenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CancelScheduleConferenceResponse
     */
    cancelScheduleConferenceWithOptions(request: CancelScheduleConferenceRequest, headers: CancelScheduleConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<CancelScheduleConferenceResponse>;
    /**
     * @summary 取消预约会议
     *
     * @param request CancelScheduleConferenceRequest
     * @return CancelScheduleConferenceResponse
     */
    cancelScheduleConference(request: CancelScheduleConferenceRequest): Promise<CancelScheduleConferenceResponse>;
    /**
     * @summary 关闭视频会议
     *
     * @param request CloseVideoConferenceRequest
     * @param headers CloseVideoConferenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CloseVideoConferenceResponse
     */
    closeVideoConferenceWithOptions(conferenceId: string, request: CloseVideoConferenceRequest, headers: CloseVideoConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<CloseVideoConferenceResponse>;
    /**
     * @summary 关闭视频会议
     *
     * @param request CloseVideoConferenceRequest
     * @return CloseVideoConferenceResponse
     */
    closeVideoConference(conferenceId: string, request: CloseVideoConferenceRequest): Promise<CloseVideoConferenceResponse>;
    /**
     * @summary 设置联席主持人
     *
     * @param request CohostsRequest
     * @param headers CohostsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CohostsResponse
     */
    cohostsWithOptions(conferenceId: string, request: CohostsRequest, headers: CohostsHeaders, runtime: $Util.RuntimeOptions): Promise<CohostsResponse>;
    /**
     * @summary 设置联席主持人
     *
     * @param request CohostsRequest
     * @return CohostsResponse
     */
    cohosts(conferenceId: string, request: CohostsRequest): Promise<CohostsResponse>;
    /**
     * @summary 创建专属短链
     *
     * @param request CreateCustomShortLinkRequest
     * @param headers CreateCustomShortLinkHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCustomShortLinkResponse
     */
    createCustomShortLinkWithOptions(request: CreateCustomShortLinkRequest, headers: CreateCustomShortLinkHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCustomShortLinkResponse>;
    /**
     * @summary 创建专属短链
     *
     * @param request CreateCustomShortLinkRequest
     * @return CreateCustomShortLinkResponse
     */
    createCustomShortLink(request: CreateCustomShortLinkRequest): Promise<CreateCustomShortLinkResponse>;
    /**
     * @summary 创建预约会议
     *
     * @param request CreateScheduleConferenceRequest
     * @param headers CreateScheduleConferenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateScheduleConferenceResponse
     */
    createScheduleConferenceWithOptions(request: CreateScheduleConferenceRequest, headers: CreateScheduleConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateScheduleConferenceResponse>;
    /**
     * @summary 创建预约会议
     *
     * @param request CreateScheduleConferenceRequest
     * @return CreateScheduleConferenceResponse
     */
    createScheduleConference(request: CreateScheduleConferenceRequest): Promise<CreateScheduleConferenceResponse>;
    /**
     * @summary 创建视频会议
     *
     * @param request CreateVideoConferenceRequest
     * @param headers CreateVideoConferenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateVideoConferenceResponse
     */
    createVideoConferenceWithOptions(request: CreateVideoConferenceRequest, headers: CreateVideoConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateVideoConferenceResponse>;
    /**
     * @summary 创建视频会议
     *
     * @param request CreateVideoConferenceRequest
     * @return CreateVideoConferenceResponse
     */
    createVideoConference(request: CreateVideoConferenceRequest): Promise<CreateVideoConferenceResponse>;
    /**
     * @summary 设置全员看他
     *
     * @param request FocusRequest
     * @param headers FocusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return FocusResponse
     */
    focusWithOptions(conferenceId: string, request: FocusRequest, headers: FocusHeaders, runtime: $Util.RuntimeOptions): Promise<FocusResponse>;
    /**
     * @summary 设置全员看他
     *
     * @param request FocusRequest
     * @return FocusResponse
     */
    focus(conferenceId: string, request: FocusRequest): Promise<FocusResponse>;
    /**
     * @summary 通过conferenceId获取指定音视频会议信息
     *
     * @param request GetConfDataByConferenceIdRequest
     * @param headers GetConfDataByConferenceIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetConfDataByConferenceIdResponse
     */
    getConfDataByConferenceIdWithOptions(conferenceId: string, request: GetConfDataByConferenceIdRequest, headers: GetConfDataByConferenceIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetConfDataByConferenceIdResponse>;
    /**
     * @summary 通过conferenceId获取指定音视频会议信息
     *
     * @param request GetConfDataByConferenceIdRequest
     * @return GetConfDataByConferenceIdResponse
     */
    getConfDataByConferenceId(conferenceId: string, request: GetConfDataByConferenceIdRequest): Promise<GetConfDataByConferenceIdResponse>;
    /**
     * @summary 通过conferenceId获取指定音视频会议成员信息
     *
     * @param request GetConfDetailDataRequest
     * @param headers GetConfDetailDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetConfDetailDataResponse
     */
    getConfDetailDataWithOptions(conferenceId: string, request: GetConfDetailDataRequest, headers: GetConfDetailDataHeaders, runtime: $Util.RuntimeOptions): Promise<GetConfDetailDataResponse>;
    /**
     * @summary 通过conferenceId获取指定音视频会议成员信息
     *
     * @param request GetConfDetailDataRequest
     * @return GetConfDetailDataResponse
     */
    getConfDetailData(conferenceId: string, request: GetConfDetailDataRequest): Promise<GetConfDetailDataResponse>;
    /**
     * @summary 获取音视频会议列表数据
     *
     * @param request GetHistoryConfDataListRequest
     * @param headers GetHistoryConfDataListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHistoryConfDataListResponse
     */
    getHistoryConfDataListWithOptions(request: GetHistoryConfDataListRequest, headers: GetHistoryConfDataListHeaders, runtime: $Util.RuntimeOptions): Promise<GetHistoryConfDataListResponse>;
    /**
     * @summary 获取音视频会议列表数据
     *
     * @param request GetHistoryConfDataListRequest
     * @return GetHistoryConfDataListResponse
     */
    getHistoryConfDataList(request: GetHistoryConfDataListRequest): Promise<GetHistoryConfDataListResponse>;
    /**
     * @summary 通过conferenceId和unionId获取最新会议质量数据
     *
     * @param request GetUserLastMetricRequest
     * @param headers GetUserLastMetricHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserLastMetricResponse
     */
    getUserLastMetricWithOptions(conferenceId: string, request: GetUserLastMetricRequest, headers: GetUserLastMetricHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserLastMetricResponse>;
    /**
     * @summary 通过conferenceId和unionId获取最新会议质量数据
     *
     * @param request GetUserLastMetricRequest
     * @return GetUserLastMetricResponse
     */
    getUserLastMetric(conferenceId: string, request: GetUserLastMetricRequest): Promise<GetUserLastMetricResponse>;
    /**
     * @summary 通过conferenceId和unionId获取指定音视频会议人员的会议质量数据
     *
     * @param request GetUserMetricDataRequest
     * @param headers GetUserMetricDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserMetricDataResponse
     */
    getUserMetricDataWithOptions(conferenceId: string, request: GetUserMetricDataRequest, headers: GetUserMetricDataHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserMetricDataResponse>;
    /**
     * @summary 通过conferenceId和unionId获取指定音视频会议人员的会议质量数据
     *
     * @param request GetUserMetricDataRequest
     * @return GetUserMetricDataResponse
     */
    getUserMetricData(conferenceId: string, request: GetUserMetricDataRequest): Promise<GetUserMetricDataResponse>;
    /**
     * @summary 邀请其他人员
     *
     * @param request InviteUsersRequest
     * @param headers InviteUsersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InviteUsersResponse
     */
    inviteUsersWithOptions(conferenceId: string, request: InviteUsersRequest, headers: InviteUsersHeaders, runtime: $Util.RuntimeOptions): Promise<InviteUsersResponse>;
    /**
     * @summary 邀请其他人员
     *
     * @param request InviteUsersRequest
     * @return InviteUsersResponse
     */
    inviteUsers(conferenceId: string, request: InviteUsersRequest): Promise<InviteUsersResponse>;
    /**
     * @summary 会议踢出成员
     *
     * @param request KickMembersRequest
     * @param headers KickMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return KickMembersResponse
     */
    kickMembersWithOptions(conferenceId: string, request: KickMembersRequest, headers: KickMembersHeaders, runtime: $Util.RuntimeOptions): Promise<KickMembersResponse>;
    /**
     * @summary 会议踢出成员
     *
     * @param request KickMembersRequest
     * @return KickMembersResponse
     */
    kickMembers(conferenceId: string, request: KickMembersRequest): Promise<KickMembersResponse>;
    /**
     * @summary 锁定会议
     *
     * @param request LockConferenceRequest
     * @param headers LockConferenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LockConferenceResponse
     */
    lockConferenceWithOptions(conferenceId: string, request: LockConferenceRequest, headers: LockConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<LockConferenceResponse>;
    /**
     * @summary 锁定会议
     *
     * @param request LockConferenceRequest
     * @return LockConferenceResponse
     */
    lockConference(conferenceId: string, request: LockConferenceRequest): Promise<LockConferenceResponse>;
    /**
     * @summary 会议全员静音或解除静音
     *
     * @param request MuteAllRequest
     * @param headers MuteAllHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MuteAllResponse
     */
    muteAllWithOptions(conferenceId: string, request: MuteAllRequest, headers: MuteAllHeaders, runtime: $Util.RuntimeOptions): Promise<MuteAllResponse>;
    /**
     * @summary 会议全员静音或解除静音
     *
     * @param request MuteAllRequest
     * @return MuteAllResponse
     */
    muteAll(conferenceId: string, request: MuteAllRequest): Promise<MuteAllResponse>;
    /**
     * @summary 指定人员静音或取消静音
     *
     * @param request MuteMembersRequest
     * @param headers MuteMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MuteMembersResponse
     */
    muteMembersWithOptions(conferenceId: string, request: MuteMembersRequest, headers: MuteMembersHeaders, runtime: $Util.RuntimeOptions): Promise<MuteMembersResponse>;
    /**
     * @summary 指定人员静音或取消静音
     *
     * @param request MuteMembersRequest
     * @return MuteMembersResponse
     */
    muteMembers(conferenceId: string, request: MuteMembersRequest): Promise<MuteMembersResponse>;
    /**
     * @summary 查询云录制文本信息
     *
     * @param request QueryCloudRecordTextRequest
     * @param headers QueryCloudRecordTextHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCloudRecordTextResponse
     */
    queryCloudRecordTextWithOptions(conferenceId: string, request: QueryCloudRecordTextRequest, headers: QueryCloudRecordTextHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCloudRecordTextResponse>;
    /**
     * @summary 查询云录制文本信息
     *
     * @param request QueryCloudRecordTextRequest
     * @return QueryCloudRecordTextResponse
     */
    queryCloudRecordText(conferenceId: string, request: QueryCloudRecordTextRequest): Promise<QueryCloudRecordTextResponse>;
    /**
     * @summary 查询云录制视频
     *
     * @param request QueryCloudRecordVideoRequest
     * @param headers QueryCloudRecordVideoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCloudRecordVideoResponse
     */
    queryCloudRecordVideoWithOptions(conferenceId: string, request: QueryCloudRecordVideoRequest, headers: QueryCloudRecordVideoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCloudRecordVideoResponse>;
    /**
     * @summary 查询云录制视频
     *
     * @param request QueryCloudRecordVideoRequest
     * @return QueryCloudRecordVideoResponse
     */
    queryCloudRecordVideo(conferenceId: string, request: QueryCloudRecordVideoRequest): Promise<QueryCloudRecordVideoResponse>;
    /**
     * @summary 查询云录制视频播放信息
     *
     * @param request QueryCloudRecordVideoPlayInfoRequest
     * @param headers QueryCloudRecordVideoPlayInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCloudRecordVideoPlayInfoResponse
     */
    queryCloudRecordVideoPlayInfoWithOptions(conferenceId: string, request: QueryCloudRecordVideoPlayInfoRequest, headers: QueryCloudRecordVideoPlayInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCloudRecordVideoPlayInfoResponse>;
    /**
     * @summary 查询云录制视频播放信息
     *
     * @param request QueryCloudRecordVideoPlayInfoRequest
     * @return QueryCloudRecordVideoPlayInfoResponse
     */
    queryCloudRecordVideoPlayInfo(conferenceId: string, request: QueryCloudRecordVideoPlayInfoRequest): Promise<QueryCloudRecordVideoPlayInfoResponse>;
    /**
     * @summary 查询视频会议信息
     *
     * @param headers QueryConferenceInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryConferenceInfoResponse
     */
    queryConferenceInfoWithOptions(conferenceId: string, headers: QueryConferenceInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryConferenceInfoResponse>;
    /**
     * @summary 查询视频会议信息
     *
     * @return QueryConferenceInfoResponse
     */
    queryConferenceInfo(conferenceId: string): Promise<QueryConferenceInfoResponse>;
    /**
     * @summary 批量查询视频会议信息
     *
     * @param request QueryConferenceInfoBatchRequest
     * @param headers QueryConferenceInfoBatchHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryConferenceInfoBatchResponse
     */
    queryConferenceInfoBatchWithOptions(request: QueryConferenceInfoBatchRequest, headers: QueryConferenceInfoBatchHeaders, runtime: $Util.RuntimeOptions): Promise<QueryConferenceInfoBatchResponse>;
    /**
     * @summary 批量查询视频会议信息
     *
     * @param request QueryConferenceInfoBatchRequest
     * @return QueryConferenceInfoBatchResponse
     */
    queryConferenceInfoBatch(request: QueryConferenceInfoBatchRequest): Promise<QueryConferenceInfoBatchResponse>;
    /**
     * @summary 查询视频会议成员
     *
     * @param request QueryConferenceMembersRequest
     * @param headers QueryConferenceMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryConferenceMembersResponse
     */
    queryConferenceMembersWithOptions(conferenceId: string, request: QueryConferenceMembersRequest, headers: QueryConferenceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<QueryConferenceMembersResponse>;
    /**
     * @summary 查询视频会议成员
     *
     * @param request QueryConferenceMembersRequest
     * @return QueryConferenceMembersResponse
     */
    queryConferenceMembers(conferenceId: string, request: QueryConferenceMembersRequest): Promise<QueryConferenceMembersResponse>;
    /**
     * @summary 查询预约会议设置
     *
     * @param request QueryScheduleConfSettingsRequest
     * @param headers QueryScheduleConfSettingsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryScheduleConfSettingsResponse
     */
    queryScheduleConfSettingsWithOptions(request: QueryScheduleConfSettingsRequest, headers: QueryScheduleConfSettingsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryScheduleConfSettingsResponse>;
    /**
     * @summary 查询预约会议设置
     *
     * @param request QueryScheduleConfSettingsRequest
     * @return QueryScheduleConfSettingsResponse
     */
    queryScheduleConfSettings(request: QueryScheduleConfSettingsRequest): Promise<QueryScheduleConfSettingsResponse>;
    /**
     * @summary 查询预约会议信息
     *
     * @param request QueryScheduleConferenceRequest
     * @param headers QueryScheduleConferenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryScheduleConferenceResponse
     */
    queryScheduleConferenceWithOptions(scheduleConferenceId: string, request: QueryScheduleConferenceRequest, headers: QueryScheduleConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryScheduleConferenceResponse>;
    /**
     * @summary 查询预约会议信息
     *
     * @param request QueryScheduleConferenceRequest
     * @return QueryScheduleConferenceResponse
     */
    queryScheduleConference(scheduleConferenceId: string, request: QueryScheduleConferenceRequest): Promise<QueryScheduleConferenceResponse>;
    /**
     * @summary 分页获取预约会议历史会议信息，当前仅返回最后一次的会议信息
     *
     * @param request QueryScheduleConferenceInfoRequest
     * @param headers QueryScheduleConferenceInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryScheduleConferenceInfoResponse
     */
    queryScheduleConferenceInfoWithOptions(scheduleConferenceId: string, request: QueryScheduleConferenceInfoRequest, headers: QueryScheduleConferenceInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryScheduleConferenceInfoResponse>;
    /**
     * @summary 分页获取预约会议历史会议信息，当前仅返回最后一次的会议信息
     *
     * @param request QueryScheduleConferenceInfoRequest
     * @return QueryScheduleConferenceInfoResponse
     */
    queryScheduleConferenceInfo(scheduleConferenceId: string, request: QueryScheduleConferenceInfoRequest): Promise<QueryScheduleConferenceInfoResponse>;
    /**
     * @summary 查询用户进行中会议
     *
     * @param request QueryUserOnGoingConferenceRequest
     * @param headers QueryUserOnGoingConferenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserOnGoingConferenceResponse
     */
    queryUserOnGoingConferenceWithOptions(request: QueryUserOnGoingConferenceRequest, headers: QueryUserOnGoingConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserOnGoingConferenceResponse>;
    /**
     * @summary 查询用户进行中会议
     *
     * @param request QueryUserOnGoingConferenceRequest
     * @return QueryUserOnGoingConferenceResponse
     */
    queryUserOnGoingConference(request: QueryUserOnGoingConferenceRequest): Promise<QueryUserOnGoingConferenceResponse>;
    /**
     * @summary 开启云录制
     *
     * @param request StartCloudRecordRequest
     * @param headers StartCloudRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartCloudRecordResponse
     */
    startCloudRecordWithOptions(conferenceId: string, request: StartCloudRecordRequest, headers: StartCloudRecordHeaders, runtime: $Util.RuntimeOptions): Promise<StartCloudRecordResponse>;
    /**
     * @summary 开启云录制
     *
     * @param request StartCloudRecordRequest
     * @return StartCloudRecordResponse
     */
    startCloudRecord(conferenceId: string, request: StartCloudRecordRequest): Promise<StartCloudRecordResponse>;
    /**
     * @summary 会议开始直播推流
     *
     * @param request StartStreamOutRequest
     * @param headers StartStreamOutHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartStreamOutResponse
     */
    startStreamOutWithOptions(conferenceId: string, request: StartStreamOutRequest, headers: StartStreamOutHeaders, runtime: $Util.RuntimeOptions): Promise<StartStreamOutResponse>;
    /**
     * @summary 会议开始直播推流
     *
     * @param request StartStreamOutRequest
     * @return StartStreamOutResponse
     */
    startStreamOut(conferenceId: string, request: StartStreamOutRequest): Promise<StartStreamOutResponse>;
    /**
     * @summary 关闭云录制
     *
     * @param request StopCloudRecordRequest
     * @param headers StopCloudRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StopCloudRecordResponse
     */
    stopCloudRecordWithOptions(conferenceId: string, request: StopCloudRecordRequest, headers: StopCloudRecordHeaders, runtime: $Util.RuntimeOptions): Promise<StopCloudRecordResponse>;
    /**
     * @summary 关闭云录制
     *
     * @param request StopCloudRecordRequest
     * @return StopCloudRecordResponse
     */
    stopCloudRecord(conferenceId: string, request: StopCloudRecordRequest): Promise<StopCloudRecordResponse>;
    /**
     * @summary 会议停止直播推流
     *
     * @param request StopStreamOutRequest
     * @param headers StopStreamOutHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StopStreamOutResponse
     */
    stopStreamOutWithOptions(conferenceId: string, request: StopStreamOutRequest, headers: StopStreamOutHeaders, runtime: $Util.RuntimeOptions): Promise<StopStreamOutResponse>;
    /**
     * @summary 会议停止直播推流
     *
     * @param request StopStreamOutRequest
     * @return StopStreamOutResponse
     */
    stopStreamOut(conferenceId: string, request: StopStreamOutRequest): Promise<StopStreamOutResponse>;
    /**
     * @summary 更新预约会议设置
     *
     * @param request UpdateScheduleConfSettingsRequest
     * @param headers UpdateScheduleConfSettingsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateScheduleConfSettingsResponse
     */
    updateScheduleConfSettingsWithOptions(request: UpdateScheduleConfSettingsRequest, headers: UpdateScheduleConfSettingsHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateScheduleConfSettingsResponse>;
    /**
     * @summary 更新预约会议设置
     *
     * @param request UpdateScheduleConfSettingsRequest
     * @return UpdateScheduleConfSettingsResponse
     */
    updateScheduleConfSettings(request: UpdateScheduleConfSettingsRequest): Promise<UpdateScheduleConfSettingsResponse>;
    /**
     * @summary 更新预约会议
     *
     * @param request UpdateScheduleConferenceRequest
     * @param headers UpdateScheduleConferenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateScheduleConferenceResponse
     */
    updateScheduleConferenceWithOptions(request: UpdateScheduleConferenceRequest, headers: UpdateScheduleConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateScheduleConferenceResponse>;
    /**
     * @summary 更新预约会议
     *
     * @param request UpdateScheduleConferenceRequest
     * @return UpdateScheduleConferenceResponse
     */
    updateScheduleConference(request: UpdateScheduleConferenceRequest): Promise<UpdateScheduleConferenceResponse>;
    /**
     * @summary 更新会议额外信息
     *
     * @param headers UpdateVideoConferenceExtInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateVideoConferenceExtInfoResponse
     */
    updateVideoConferenceExtInfoWithOptions(conferenceId: string, headers: UpdateVideoConferenceExtInfoHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateVideoConferenceExtInfoResponse>;
    /**
     * @summary 更新会议额外信息
     *
     * @return UpdateVideoConferenceExtInfoResponse
     */
    updateVideoConferenceExtInfo(conferenceId: string): Promise<UpdateVideoConferenceExtInfoResponse>;
    /**
     * @summary 设置会议中的会议属性
     *
     * @param request UpdateVideoConferenceSettingRequest
     * @param headers UpdateVideoConferenceSettingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateVideoConferenceSettingResponse
     */
    updateVideoConferenceSettingWithOptions(conferenceId: string, request: UpdateVideoConferenceSettingRequest, headers: UpdateVideoConferenceSettingHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateVideoConferenceSettingResponse>;
    /**
     * @summary 设置会议中的会议属性
     *
     * @param request UpdateVideoConferenceSettingRequest
     * @return UpdateVideoConferenceSettingResponse
     */
    updateVideoConferenceSetting(conferenceId: string, request: UpdateVideoConferenceSettingRequest): Promise<UpdateVideoConferenceSettingResponse>;
}
