/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AbandonCustomerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AbandonCustomerRequest extends $tea.Model {
    customTrackDesc?: string;
    instanceIdList?: string[];
    operatorUserId?: string;
    optType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AbandonCustomerResponseBody extends $tea.Model {
    instanceIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AbandonCustomerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AbandonCustomerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCrmPersonalCustomerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCrmPersonalCustomerRequest extends $tea.Model {
    action?: string;
    creatorNick?: string;
    creatorUserId?: string;
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    permission?: AddCrmPersonalCustomerRequestPermission;
    relationType?: string;
    skipDuplicateCheck?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCrmPersonalCustomerResponseBody extends $tea.Model {
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCrmPersonalCustomerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddCrmPersonalCustomerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomerTrackHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomerTrackRequest extends $tea.Model {
    content?: string;
    customerId?: string;
    extraBizInfo?: string;
    idempotentKey?: string;
    maskedContent?: string;
    operatorUserId?: string;
    relationType?: string;
    title?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomerTrackResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCustomerTrackResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddCustomerTrackResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeadsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeadsRequest extends $tea.Model {
    assignTimestamp?: number;
    assignUserId?: string;
    assignedUserId?: string;
    leads?: AddLeadsRequestLeads[];
    outTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeadsResponseBody extends $tea.Model {
    outTaskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeadsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddLeadsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRelationMetaFieldHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRelationMetaFieldRequest extends $tea.Model {
    fieldDTOList?: AddRelationMetaFieldRequestFieldDTOList[];
    operatorUserId?: string;
    relationType?: string;
    tenant?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRelationMetaFieldResponseBody extends $tea.Model {
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRelationMetaFieldResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddRelationMetaFieldResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddContactsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddContactsRequest extends $tea.Model {
    operatorUserId?: string;
    relationList?: BatchAddContactsRequestRelationList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddContactsResponseBody extends $tea.Model {
    results?: BatchAddContactsResponseBodyResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddContactsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchAddContactsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddFollowRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddFollowRecordsRequest extends $tea.Model {
    instanceList?: BatchAddFollowRecordsRequestInstanceList[];
    operatorUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddFollowRecordsResponseBody extends $tea.Model {
    results?: BatchAddFollowRecordsResponseBodyResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddFollowRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchAddFollowRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddRelationDatasHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddRelationDatasRequest extends $tea.Model {
    operatorUserId?: string;
    relationList?: BatchAddRelationDatasRequestRelationList[];
    relationType?: string;
    skipDuplicateCheck?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddRelationDatasResponseBody extends $tea.Model {
    results?: BatchAddRelationDatasResponseBodyResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddRelationDatasResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchAddRelationDatasResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateClueDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateClueDataRequest extends $tea.Model {
    dataList?: BatchCreateClueDataRequestDataList[];
    privateSeas?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateClueDataResponseBody extends $tea.Model {
    requestId?: string;
    result?: BatchCreateClueDataResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateClueDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchCreateClueDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRemoveFollowRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRemoveFollowRecordsRequest extends $tea.Model {
    instanceIds?: string[];
    operatorUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRemoveFollowRecordsResponseBody extends $tea.Model {
    results?: BatchRemoveFollowRecordsResponseBodyResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRemoveFollowRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchRemoveFollowRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageRequest extends $tea.Model {
    accountId?: string;
    bizId?: string;
    detail?: BatchSendOfficialAccountOTOMessageRequestDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageResponseBody extends $tea.Model {
    requestId?: string;
    result?: BatchSendOfficialAccountOTOMessageResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchSendOfficialAccountOTOMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateContactsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateContactsRequest extends $tea.Model {
    operatorUserId?: string;
    relationList?: BatchUpdateContactsRequestRelationList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateContactsResponseBody extends $tea.Model {
    results?: BatchUpdateContactsResponseBodyResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateContactsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchUpdateContactsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFollowRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFollowRecordsRequest extends $tea.Model {
    instanceList?: BatchUpdateFollowRecordsRequestInstanceList[];
    operatorUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFollowRecordsResponseBody extends $tea.Model {
    results?: BatchUpdateFollowRecordsResponseBodyResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFollowRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchUpdateFollowRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateRelationDatasHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateRelationDatasRequest extends $tea.Model {
    operatorUserId?: string;
    relationList?: BatchUpdateRelationDatasRequestRelationList[];
    relationType?: string;
    skipDuplicateCheck?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateRelationDatasResponseBody extends $tea.Model {
    results?: BatchUpdateRelationDatasResponseBodyResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateRelationDatasResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchUpdateRelationDatasResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomerRequest extends $tea.Model {
    contacts?: CreateCustomerRequestContacts[];
    creatorUserId?: string;
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    instanceId?: string;
    objectType?: string;
    permission?: CreateCustomerRequestPermission;
    saveOption?: CreateCustomerRequestSaveOption;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomerResponseBody extends $tea.Model {
    contacts?: CreateCustomerResponseBodyContacts[];
    customerInstanceId?: string;
    objectType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCustomerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupRequest extends $tea.Model {
    groupName?: string;
    memberUserIds?: string;
    ownerUserId?: string;
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupResponseBody extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetRequest extends $tea.Model {
    creatorUserId?: string;
    managerUserIds?: string;
    memberQuota?: number;
    name?: string;
    notice?: string;
    noticeToped?: number;
    ownerUserId?: string;
    relationType?: string;
    templateId?: string;
    welcome?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetResponseBody extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    inviteLink?: string;
    lastOpenConversationId?: string;
    manager?: CreateGroupSetResponseBodyManager[];
    managerUserIds?: string;
    memberCount?: number;
    memberQuota?: number;
    name?: string;
    notice?: string;
    noticeToped?: number;
    openGroupSetId?: string;
    owner?: CreateGroupSetResponseBodyOwner;
    ownerUserId?: string;
    relationType?: string;
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateGroupSetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRelationMetaHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRelationMetaRequest extends $tea.Model {
    operatorUserId?: string;
    relationMetaDTO?: CreateRelationMetaRequestRelationMetaDTO;
    tenant?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRelationMetaResponseBody extends $tea.Model {
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRelationMetaResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateRelationMetaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmCustomObjectDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmCustomObjectDataRequest extends $tea.Model {
    formCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmCustomObjectDataResponseBody extends $tea.Model {
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmCustomObjectDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteCrmCustomObjectDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmFormInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmFormInstanceRequest extends $tea.Model {
    currentOperatorUserId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmFormInstanceResponseBody extends $tea.Model {
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmFormInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteCrmFormInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmPersonalCustomerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmPersonalCustomerRequest extends $tea.Model {
    currentOperatorUserId?: string;
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmPersonalCustomerResponseBody extends $tea.Model {
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteCrmPersonalCustomerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteCrmPersonalCustomerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLeadsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLeadsRequest extends $tea.Model {
    outLeadsIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLeadsResponseBody extends $tea.Model {
    outLeadsIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLeadsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteLeadsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRelationMetaFieldHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRelationMetaFieldRequest extends $tea.Model {
    fieldIdList?: string[];
    operatorUserId?: string;
    relationType?: string;
    tenant?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRelationMetaFieldResponseBody extends $tea.Model {
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRelationMetaFieldResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteRelationMetaFieldResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrmPersonalCustomerObjectMetaHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrmPersonalCustomerObjectMetaRequest extends $tea.Model {
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrmPersonalCustomerObjectMetaResponseBody extends $tea.Model {
    code?: string;
    customized?: boolean;
    fields?: DescribeCrmPersonalCustomerObjectMetaResponseBodyFields[];
    name?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrmPersonalCustomerObjectMetaResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeCrmPersonalCustomerObjectMetaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaRequest extends $tea.Model {
    operatorUserId?: string;
    relationTypes?: string[];
    tenant?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBody extends $tea.Model {
    relationMetaDTOList?: DescribeRelationMetaResponseBodyRelationMetaDTOList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DescribeRelationMetaResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FindTargetRelatedFollowRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FindTargetRelatedFollowRecordsRequest extends $tea.Model {
    followTargetDataId?: string;
    followTargetType?: string;
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FindTargetRelatedFollowRecordsResponseBody extends $tea.Model {
    result?: FindTargetRelatedFollowRecordsResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FindTargetRelatedFollowRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: FindTargetRelatedFollowRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllCustomerRecyclesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllCustomerRecyclesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllCustomerRecyclesResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    resultList?: GetAllCustomerRecyclesResponseBodyResultList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllCustomerRecyclesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAllCustomerRecyclesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactsRequest extends $tea.Model {
    currentOperatorUserId?: string;
    maxResults?: number;
    nextToken?: string;
    objectType?: string;
    providerCorpId?: string;
    queryDsl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactsResponseBody extends $tea.Model {
    result?: GetContactsResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetContactsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatResponseBody extends $tea.Model {
    chatId?: string;
    gmtCreate?: number;
    iconUrl?: string;
    memberCount?: number;
    name?: string;
    openConversationId?: string;
    openGroupSetId?: string;
    ownerUserId?: string;
    ownerUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCrmGroupChatResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatMultiHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatMultiRequest extends $tea.Model {
    openConversationIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatMultiResponseBody extends $tea.Model {
    result?: GetCrmGroupChatMultiResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatMultiResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCrmGroupChatMultiResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatSingleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatSingleRequest extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatSingleResponseBody extends $tea.Model {
    gmtCreate?: number;
    iconUrl?: string;
    memberCount?: number;
    name?: string;
    openConversationId?: string;
    openGroupSetId?: string;
    ownerUserId?: string;
    ownerUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatSingleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCrmGroupChatSingleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionRequest extends $tea.Model {
    bizType?: string;
    resourceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionResponseBody extends $tea.Model {
    permissions?: GetCrmRolePermissionResponseBodyPermissions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCrmRolePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerTracksByRelationIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerTracksByRelationIdRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    relationId?: string;
    typeGroup?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerTracksByRelationIdResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    resultList?: GetCustomerTracksByRelationIdResponseBodyResultList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerTracksByRelationIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCustomerTracksByRelationIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupSetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupSetRequest extends $tea.Model {
    openGroupSetId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupSetResponseBody extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    groupChatCount?: number;
    inviteLink?: string;
    lastOpenConversationId?: string;
    manager?: GetGroupSetResponseBodyManager[];
    managerUserIds?: string;
    memberCount?: number;
    memberQuota?: number;
    name?: string;
    notice?: string;
    noticeToped?: number;
    openGroupSetId?: string;
    owner?: GetGroupSetResponseBodyOwner;
    ownerUserId?: string;
    relationType?: string;
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupSetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetGroupSetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNavigationCatalogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNavigationCatalogRequest extends $tea.Model {
    bizTraceId?: string;
    module?: string;
    operatorUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNavigationCatalogResponseBody extends $tea.Model {
    result?: GetNavigationCatalogResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNavigationCatalogResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetNavigationCatalogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectDataRequest extends $tea.Model {
    currentOperatorUserId?: string;
    maxResults?: number;
    name?: string;
    nextToken?: string;
    queryDsl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectDataResponseBody extends $tea.Model {
    result?: GetObjectDataResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetObjectDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactInfoResponseBody extends $tea.Model {
    authItems?: string[];
    corpName?: string;
    mobile?: string;
    stateCode?: string;
    unionId?: string;
    userInfos?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOfficialAccountContactInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactsResponseBody extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    values?: GetOfficialAccountContactsResponseBodyValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOfficialAccountContactsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountOTOMessageResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountOTOMessageResultRequest extends $tea.Model {
    accountId?: string;
    openPushId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountOTOMessageResultResponseBody extends $tea.Model {
    requestId?: string;
    result?: GetOfficialAccountOTOMessageResultResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountOTOMessageResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOfficialAccountOTOMessageResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelationUkSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelationUkSettingRequest extends $tea.Model {
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelationUkSettingResponseBody extends $tea.Model {
    result?: GetRelationUkSettingResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelationUkSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRelationUkSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class JoinGroupSetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class JoinGroupSetRequest extends $tea.Model {
    bizDataList?: JoinGroupSetRequestBizDataList[];
    corpId?: string;
    openGroupSetId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class JoinGroupSetResponseBody extends $tea.Model {
    chatId?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class JoinGroupSetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: JoinGroupSetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClueTagHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClueTagResponseBody extends $tea.Model {
    result?: ListClueTagResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClueTagResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListClueTagResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCrmPersonalCustomersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCrmPersonalCustomersRequest extends $tea.Model {
    body?: string[];
    currentOperatorUserId?: string;
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCrmPersonalCustomersResponseBody extends $tea.Model {
    result?: ListCrmPersonalCustomersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCrmPersonalCustomersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListCrmPersonalCustomersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupSetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupSetRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    queryDsl?: string;
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupSetResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    resultList?: ListGroupSetResponseBodyResultList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupSetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListGroupSetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllCustomerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllCustomerRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    objectType?: string;
    operatorUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllCustomerResponseBody extends $tea.Model {
    result?: QueryAllCustomerResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllCustomerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllCustomerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTracksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTracksRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    order?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTracksResponseBody extends $tea.Model {
    hasMore?: boolean;
    maxResults?: number;
    nextToken?: string;
    values?: QueryAllTracksResponseBodyValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTracksResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllTracksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClueFollowStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClueFollowStatusRequest extends $tea.Model {
    clueId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClueFollowStatusResponseBody extends $tea.Model {
    result?: QueryClueFollowStatusResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClueFollowStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryClueFollowStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmGroupChatsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmGroupChatsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    queryDsl?: string;
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmGroupChatsResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    resultList?: QueryCrmGroupChatsResponseBodyResultList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmGroupChatsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCrmGroupChatsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmPersonalCustomerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmPersonalCustomerRequest extends $tea.Model {
    currentOperatorUserId?: string;
    maxResults?: number;
    nextToken?: string;
    queryDsl?: string;
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmPersonalCustomerResponseBody extends $tea.Model {
    hasMore?: boolean;
    maxResults?: number;
    nextToken?: string;
    totalCount?: number;
    values?: QueryCrmPersonalCustomerResponseBodyValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmPersonalCustomerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCrmPersonalCustomerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGlobalInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGlobalInfoRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGlobalInfoResponseBody extends $tea.Model {
    result?: QueryGlobalInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGlobalInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGlobalInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialAccountUserBasicInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialAccountUserBasicInfoRequest extends $tea.Model {
    bindingToken?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialAccountUserBasicInfoResponseBody extends $tea.Model {
    requestId?: string;
    result?: QueryOfficialAccountUserBasicInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialAccountUserBasicInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOfficialAccountUserBasicInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationDatasByTargetIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationDatasByTargetIdRequest extends $tea.Model {
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationDatasByTargetIdResponseBody extends $tea.Model {
    relations?: QueryRelationDatasByTargetIdResponseBodyRelations[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationDatasByTargetIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryRelationDatasByTargetIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallOfficialAccountOTOMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallOfficialAccountOTOMessageRequest extends $tea.Model {
    accountId?: string;
    openPushId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallOfficialAccountOTOMessageResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecallOfficialAccountOTOMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RecallOfficialAccountOTOMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageRequest extends $tea.Model {
    accountId?: string;
    bizId?: string;
    detail?: SendOfficialAccountOTOMessageRequestDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageResponseBody extends $tea.Model {
    requestId?: string;
    result?: SendOfficialAccountOTOMessageResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendOfficialAccountOTOMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageRequest extends $tea.Model {
    bindingToken?: string;
    bizId?: string;
    detail?: SendOfficialAccountSNSMessageRequestDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageResponseBody extends $tea.Model {
    requestId?: string;
    result?: SendOfficialAccountSNSMessageResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendOfficialAccountSNSMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushRequest extends $tea.Model {
    bizId?: string;
    detail?: ServiceWindowMessageBatchPushRequestDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushResponseBody extends $tea.Model {
    requestId?: string;
    result?: ServiceWindowMessageBatchPushResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ServiceWindowMessageBatchPushResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCrmPersonalCustomerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCrmPersonalCustomerRequest extends $tea.Model {
    action?: string;
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    instanceId?: string;
    modifierNick?: string;
    modifierUserId?: string;
    permission?: UpdateCrmPersonalCustomerRequestPermission;
    relationType?: string;
    skipDuplicateCheck?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCrmPersonalCustomerResponseBody extends $tea.Model {
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCrmPersonalCustomerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateCrmPersonalCustomerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSetRequest extends $tea.Model {
    managerUserIds?: string;
    memberQuota?: number;
    name?: string;
    notice?: string;
    noticeToped?: number;
    openGroupSetId?: string;
    ownerUserId?: string;
    templateId?: string;
    welcome?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMenuDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMenuDataRequest extends $tea.Model {
    attr?: {
        [key: string]: any;
    };
    bizTraceId?: string;
    module?: string;
    navData?: UpdateMenuDataRequestNavData;
    operateType?: string;
    operatorUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMenuDataResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMenuDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateMenuDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRelationMetaFieldHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRelationMetaFieldRequest extends $tea.Model {
    fieldDTOList?: UpdateRelationMetaFieldRequestFieldDTOList[];
    operatorUserId?: string;
    relationType?: string;
    tenant?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRelationMetaFieldResponseBody extends $tea.Model {
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRelationMetaFieldResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRelationMetaFieldResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCrmPersonalCustomerRequestPermission extends $tea.Model {
    ownerStaffIds?: string[];
    participantStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeadsRequestLeads extends $tea.Model {
    leadsName?: string;
    outLeadsId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRelationMetaFieldRequestFieldDTOListPropsOptions extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRelationMetaFieldRequestFieldDTOListProps extends $tea.Model {
    align?: string;
    bizAlias?: string;
    choice?: number;
    content?: string;
    disabled?: boolean;
    duration?: boolean;
    fieldId?: string;
    format?: string;
    invisible?: boolean;
    label?: string;
    labelEditableFreeze?: boolean;
    link?: string;
    needDetail?: string;
    notPrint?: string;
    notUpper?: string;
    options?: AddRelationMetaFieldRequestFieldDTOListPropsOptions[];
    payEnable?: boolean;
    placeholder?: string;
    required?: boolean;
    requiredEditableFreeze?: boolean;
    sortable?: boolean;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRelationMetaFieldRequestFieldDTOList extends $tea.Model {
    componentName?: string;
    props?: AddRelationMetaFieldRequestFieldDTOListProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddContactsRequestRelationListBizDataList extends $tea.Model {
    extendValue?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddContactsRequestRelationList extends $tea.Model {
    bizDataList?: BatchAddContactsRequestRelationListBizDataList[];
    bizExtMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddContactsResponseBodyResults extends $tea.Model {
    errorCode?: string;
    errorMsg?: string;
    relationId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddFollowRecordsRequestInstanceListDataArray extends $tea.Model {
    extendValue?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddFollowRecordsRequestInstanceList extends $tea.Model {
    dataArray?: BatchAddFollowRecordsRequestInstanceListDataArray[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddFollowRecordsResponseBodyResults extends $tea.Model {
    errorCode?: string;
    errorMsg?: string;
    instanceId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddRelationDatasRequestRelationListBizDataList extends $tea.Model {
    extendValue?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddRelationDatasRequestRelationListRelationPermissionDTO extends $tea.Model {
    participantUserIds?: string[];
    principalUserIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddRelationDatasRequestRelationList extends $tea.Model {
    bizDataList?: BatchAddRelationDatasRequestRelationListBizDataList[];
    bizExtMap?: {
        [key: string]: string;
    };
    relationPermissionDTO?: BatchAddRelationDatasRequestRelationListRelationPermissionDTO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchAddRelationDatasResponseBodyResults extends $tea.Model {
    duplicatedRelationIds?: string[];
    errorCode?: string;
    errorMsg?: string;
    relationId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateClueDataRequestDataListContactList extends $tea.Model {
    mobile?: string;
    name?: string;
    phone?: string;
    qq?: string;
    wangWang?: string;
    weChat?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateClueDataRequestDataListEnterprise extends $tea.Model {
    address?: string;
    industryCode?: string;
    name?: string;
    region?: string;
    unifiedSocialCreditCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateClueDataRequestDataListTagIdList extends $tea.Model {
    tagId?: string;
    tagName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateClueDataRequestDataList extends $tea.Model {
    contactList?: BatchCreateClueDataRequestDataListContactList[];
    enterprise?: BatchCreateClueDataRequestDataListEnterprise;
    name?: string;
    sourceId?: string;
    sourceType?: string;
    tagIdList?: BatchCreateClueDataRequestDataListTagIdList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateClueDataResponseBodyResult extends $tea.Model {
    clueId?: string;
    dataId?: string;
    resultCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRemoveFollowRecordsResponseBodyResults extends $tea.Model {
    errorCode?: string;
    errorMsg?: string;
    instanceId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyActionCardButtonList extends $tea.Model {
    actionUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyActionCard extends $tea.Model {
    buttonList?: BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyActionCardButtonList[];
    buttonOrientation?: string;
    markdown?: string;
    singleTitle?: string;
    singleUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyLink extends $tea.Model {
    messageUrl?: string;
    picUrl?: string;
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyMarkdown extends $tea.Model {
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyText extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageRequestDetailMessageBody extends $tea.Model {
    actionCard?: BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyActionCard;
    link?: BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyLink;
    markdown?: BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyMarkdown;
    text?: BatchSendOfficialAccountOTOMessageRequestDetailMessageBodyText;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageRequestDetail extends $tea.Model {
    bizRequestId?: string;
    messageBody?: BatchSendOfficialAccountOTOMessageRequestDetailMessageBody;
    msgType?: string;
    sendToAll?: boolean;
    userIdList?: string[];
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSendOfficialAccountOTOMessageResponseBodyResult extends $tea.Model {
    openPushId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateContactsRequestRelationListBizDataList extends $tea.Model {
    extendValue?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateContactsRequestRelationList extends $tea.Model {
    bizDataList?: BatchUpdateContactsRequestRelationListBizDataList[];
    bizExtMap?: {
        [key: string]: string;
    };
    relationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateContactsResponseBodyResults extends $tea.Model {
    errorCode?: string;
    errorMsg?: string;
    relationId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFollowRecordsRequestInstanceListDataArray extends $tea.Model {
    extendValue?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFollowRecordsRequestInstanceList extends $tea.Model {
    dataArray?: BatchUpdateFollowRecordsRequestInstanceListDataArray[];
    instanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateFollowRecordsResponseBodyResults extends $tea.Model {
    errorCode?: string;
    errorMsg?: string;
    instanceId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateRelationDatasRequestRelationListBizDataList extends $tea.Model {
    extendValue?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateRelationDatasRequestRelationList extends $tea.Model {
    bizDataList?: BatchUpdateRelationDatasRequestRelationListBizDataList[];
    bizExtMap?: {
        [key: string]: string;
    };
    relationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchUpdateRelationDatasResponseBodyResults extends $tea.Model {
    duplicatedRelationIds?: string[];
    errorCode?: string;
    errorMsg?: string;
    relationId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomerRequestContacts extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomerRequestPermission extends $tea.Model {
    ownerStaffIds?: string[];
    participantStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomerRequestSaveOption extends $tea.Model {
    customerExistedPolicy?: string;
    skipDuplicateCheck?: boolean;
    subscribePolicy?: number;
    throwExceptionWhileSavingContactFailed?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomerResponseBodyContacts extends $tea.Model {
    contactInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetResponseBodyManager extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupSetResponseBodyOwner extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRelationMetaRequestRelationMetaDTOItemsPropsOptions extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRelationMetaRequestRelationMetaDTOItemsProps extends $tea.Model {
    align?: string;
    bizAlias?: string;
    choice?: number;
    content?: string;
    disabled?: boolean;
    duration?: boolean;
    fieldId?: string;
    format?: string;
    invisible?: boolean;
    label?: string;
    labelEditableFreeze?: boolean;
    link?: string;
    needDetail?: string;
    notPrint?: string;
    notUpper?: string;
    options?: CreateRelationMetaRequestRelationMetaDTOItemsPropsOptions[];
    payEnable?: boolean;
    placeholder?: string;
    required?: boolean;
    requiredEditableFreeze?: boolean;
    sortable?: boolean;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRelationMetaRequestRelationMetaDTOItems extends $tea.Model {
    componentName?: string;
    props?: CreateRelationMetaRequestRelationMetaDTOItemsProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRelationMetaRequestRelationMetaDTO extends $tea.Model {
    desc?: string;
    items?: CreateRelationMetaRequestRelationMetaDTOItems[];
    name?: string;
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrmPersonalCustomerObjectMetaResponseBodyFieldsReferenceFieldsSelectOptions extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrmPersonalCustomerObjectMetaResponseBodyFieldsReferenceFields extends $tea.Model {
    format?: string;
    label?: string;
    name?: string;
    nillable?: boolean;
    selectOptions?: DescribeCrmPersonalCustomerObjectMetaResponseBodyFieldsReferenceFieldsSelectOptions[];
    type?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrmPersonalCustomerObjectMetaResponseBodyFieldsRollUpSummaryFields extends $tea.Model {
    aggregator?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrmPersonalCustomerObjectMetaResponseBodyFieldsSelectOptions extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeCrmPersonalCustomerObjectMetaResponseBodyFields extends $tea.Model {
    customized?: boolean;
    format?: string;
    label?: string;
    name?: string;
    nillable?: boolean;
    quote?: boolean;
    referenceFields?: DescribeCrmPersonalCustomerObjectMetaResponseBodyFieldsReferenceFields[];
    referenceTo?: string;
    rollUpSummaryFields?: DescribeCrmPersonalCustomerObjectMetaResponseBodyFieldsRollUpSummaryFields[];
    selectOptions?: DescribeCrmPersonalCustomerObjectMetaResponseBodyFieldsSelectOptions[];
    type?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsAvailableTemplates extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsDataSourceParamsFilters extends $tea.Model {
    fieldId?: string;
    filterType?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsDataSourceParams extends $tea.Model {
    filters?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsDataSourceParamsFilters[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsDataSourceTarget extends $tea.Model {
    appType?: number;
    appUuid?: string;
    bizType?: string;
    formCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsDataSource extends $tea.Model {
    params?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsDataSourceParams;
    target?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsDataSourceTarget;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFieldsRelatePropsOptionsExtension extends $tea.Model {
    editFreeze?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFieldsRelatePropsOptions extends $tea.Model {
    extension?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFieldsRelatePropsOptionsExtension;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFieldsRelatePropsStatField extends $tea.Model {
    fieldId?: string;
    label?: string;
    unit?: string;
    upper?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFieldsRelateProps extends $tea.Model {
    align?: string;
    bizAlias?: string;
    choice?: number;
    content?: string;
    disabled?: boolean;
    duration?: boolean;
    durationLabel?: string;
    fieldId?: string;
    format?: string;
    formula?: string;
    invisible?: boolean;
    label?: string;
    labelEditableFreeze?: boolean;
    limit?: number;
    link?: string;
    mode?: string;
    notUpper?: string;
    options?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFieldsRelatePropsOptions[];
    payEnable?: boolean;
    placeholder?: string;
    ratio?: number;
    required?: boolean;
    requiredEditableFreeze?: boolean;
    spread?: boolean;
    statField?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFieldsRelatePropsStatField[];
    unit?: string;
    verticalPrint?: boolean;
    watermark?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFields extends $tea.Model {
    componentName?: string;
    relateProps?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFieldsRelateProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsOptionsExtension extends $tea.Model {
    editFreeze?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsOptions extends $tea.Model {
    extension?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsOptionsExtension;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceDataSourceParamsFilters extends $tea.Model {
    fieldId?: string;
    filterType?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceDataSourceParams extends $tea.Model {
    filters?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceDataSourceParamsFilters[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceDataSourceTarget extends $tea.Model {
    appType?: number;
    appUuid?: string;
    bizType?: string;
    formCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceDataSource extends $tea.Model {
    params?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceDataSourceParams;
    target?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceDataSourceTarget;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceFieldsRelatePropsOptions extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceFieldsRelatePropsStatField extends $tea.Model {
    fieldId?: string;
    label?: string;
    unit?: string;
    upper?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceFieldsRelateProps extends $tea.Model {
    align?: string;
    bizAlias?: string;
    choice?: number;
    content?: string;
    disabled?: boolean;
    duration?: string;
    fieldId?: string;
    format?: string;
    formula?: string;
    invisible?: boolean;
    label?: string;
    labelEditableFreeze?: boolean;
    link?: string;
    multi?: number;
    notUpper?: string;
    options?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceFieldsRelatePropsOptions[];
    payEnable?: boolean;
    placeholder?: string;
    quote?: number;
    required?: boolean;
    requiredEditableFreeze?: boolean;
    statField?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceFieldsRelatePropsStatField[];
    unit?: string;
    verticalPrint?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceFields extends $tea.Model {
    componentName?: string;
    relateProps?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceFieldsRelateProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSource extends $tea.Model {
    bizType?: string;
    dataSource?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceDataSource;
    fields?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSourceFields[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRule extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsStatField extends $tea.Model {
    fieldId?: string;
    label?: string;
    unit?: string;
    upper?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenProps extends $tea.Model {
    actionName?: string;
    align?: string;
    availableTemplates?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsAvailableTemplates[];
    bizAlias?: string;
    choice?: number;
    content?: string;
    dataSource?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsDataSource;
    defaultColor?: string;
    disabled?: boolean;
    duration?: boolean;
    durationLabel?: string;
    fieldId?: string;
    fields?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsFields[];
    format?: string;
    formula?: string;
    invisible?: boolean;
    label?: string;
    labelEditableFreeze?: boolean;
    limit?: number;
    link?: string;
    mode?: string;
    multiple?: boolean;
    notPrint?: string;
    notUpper?: string;
    options?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsOptions[];
    payEnable?: boolean;
    placeholder?: string;
    quote?: number;
    ratio?: number;
    relateSource?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRelateSource[];
    required?: boolean;
    requiredEditableFreeze?: boolean;
    rule?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsRule[];
    sortable?: boolean;
    spread?: boolean;
    statField?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenPropsStatField[];
    tableViewMode?: string;
    unit?: string;
    verticalPrint?: boolean;
    watermark?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildren extends $tea.Model {
    componentName?: string;
    props?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildrenProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsAvailableTemplates extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsDataSourceParamsFilters extends $tea.Model {
    fieldId?: string;
    filterType?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsDataSourceParams extends $tea.Model {
    filters?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsDataSourceParamsFilters[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsDataSourceTarget extends $tea.Model {
    appType?: number;
    appUuid?: string;
    bizType?: string;
    formCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsDataSource extends $tea.Model {
    params?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsDataSourceParams;
    target?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsDataSourceTarget;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFieldsRelatePropsOptionsExtension extends $tea.Model {
    editFreeze?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFieldsRelatePropsOptions extends $tea.Model {
    extension?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFieldsRelatePropsOptionsExtension;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFieldsRelatePropsStatField extends $tea.Model {
    fieldId?: string;
    label?: string;
    unit?: string;
    upper?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFieldsRelateProps extends $tea.Model {
    align?: string;
    bizAlias?: string;
    choice?: number;
    content?: string;
    disabled?: boolean;
    duration?: string;
    durationLabel?: string;
    fieldId?: string;
    format?: string;
    formula?: string;
    invisible?: boolean;
    label?: string;
    labelEditableFreeze?: boolean;
    limit?: number;
    link?: string;
    mode?: string;
    notUpper?: string;
    options?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFieldsRelatePropsOptions[];
    payEnable?: boolean;
    placeholder?: string;
    ratio?: number;
    required?: boolean;
    requiredEditableFreeze?: boolean;
    spread?: boolean;
    statField?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFieldsRelatePropsStatField[];
    unit?: string;
    verticalPrint?: boolean;
    watermark?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFields extends $tea.Model {
    componentName?: string;
    relateProps?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFieldsRelateProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsOptionsExtension extends $tea.Model {
    editFreeze?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsOptions extends $tea.Model {
    extension?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsOptionsExtension;
    key?: string;
    value?: string;
    warn?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceDataSourceParamsFilters extends $tea.Model {
    fieldId?: string;
    filterType?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceDataSourceParams extends $tea.Model {
    filters?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceDataSourceParamsFilters[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceDataSourceTarget extends $tea.Model {
    appType?: number;
    appUuid?: string;
    bizType?: string;
    formCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceDataSource extends $tea.Model {
    params?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceDataSourceParams;
    target?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceDataSourceTarget;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFieldsRelatePropsOptionsExtension extends $tea.Model {
    editFreeze?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFieldsRelatePropsOptions extends $tea.Model {
    extension?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFieldsRelatePropsOptionsExtension;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFieldsRelatePropsStatField extends $tea.Model {
    fieldId?: string;
    label?: string;
    unit?: string;
    upper?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFieldsRelateProps extends $tea.Model {
    align?: string;
    bizAlias?: string;
    choice?: number;
    content?: string;
    disabled?: boolean;
    duration?: string;
    fieldId?: string;
    format?: string;
    formula?: string;
    invisible?: boolean;
    label?: string;
    labelEditableFreeze?: boolean;
    link?: string;
    multi?: number;
    notUpper?: string;
    options?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFieldsRelatePropsOptions[];
    payEnable?: boolean;
    placeholder?: string;
    quote?: number;
    required?: boolean;
    requiredEditableFreeze?: boolean;
    statField?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFieldsRelatePropsStatField[];
    unit?: string;
    verticalPrint?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFields extends $tea.Model {
    componentName?: string;
    relateProps?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFieldsRelateProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSource extends $tea.Model {
    bizType?: string;
    dataSource?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceDataSource;
    fields?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSourceFields[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRule extends $tea.Model {
    type?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsStatField extends $tea.Model {
    fieldId?: string;
    label?: string;
    unit?: string;
    upper?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItemsProps extends $tea.Model {
    actionName?: string;
    align?: string;
    availableTemplates?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsAvailableTemplates[];
    bizAlias?: string;
    choice?: number;
    content?: string;
    dataSource?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsDataSource;
    defaultColor?: string;
    disabled?: boolean;
    duration?: boolean;
    durationLabel?: string;
    fieldId?: string;
    fields?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsFields[];
    format?: string;
    formula?: string;
    invisible?: boolean;
    label?: string;
    labelEditableFreeze?: boolean;
    limit?: number;
    link?: string;
    mode?: string;
    multi?: number;
    multiple?: boolean;
    needDetail?: string;
    notPrint?: string;
    notUpper?: string;
    options?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsOptions[];
    payEnable?: boolean;
    placeholder?: string;
    quote?: number;
    ratio?: number;
    relateSource?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRelateSource[];
    required?: boolean;
    requiredEditableFreeze?: boolean;
    rule?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsRule[];
    sortable?: boolean;
    spread?: boolean;
    statField?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsPropsStatField[];
    tableViewMode?: string;
    unit?: string;
    verticalPrint?: boolean;
    watermark?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOListItems extends $tea.Model {
    children?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsChildren[];
    componentName?: string;
    props?: DescribeRelationMetaResponseBodyRelationMetaDTOListItemsProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DescribeRelationMetaResponseBodyRelationMetaDTOList extends $tea.Model {
    creatorUserId?: string;
    desc?: string;
    gmtCreate?: string;
    gmtModified?: string;
    items?: DescribeRelationMetaResponseBodyRelationMetaDTOListItems[];
    name?: string;
    relationMetaCode?: string;
    relationMetaStatus?: string;
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FindTargetRelatedFollowRecordsResponseBodyResultResultListFollowContent extends $tea.Model {
    bizAlias?: string;
    extendValue?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FindTargetRelatedFollowRecordsResponseBodyResultResultList extends $tea.Model {
    creatorUserId?: string;
    followContent?: FindTargetRelatedFollowRecordsResponseBodyResultResultListFollowContent[];
    followTargetDataId?: string;
    followTargetType?: string;
    gmtCreateMilliseconds?: string;
    gmtModifiedMilliseconds?: string;
    modifierUserId?: string;
    recordInstId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class FindTargetRelatedFollowRecordsResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    resultList?: FindTargetRelatedFollowRecordsResponseBodyResultResultList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllCustomerRecyclesResponseBodyResultList extends $tea.Model {
    customerId?: string;
    followUpActionTime?: string;
    isDeleted?: boolean;
    notifyTime?: string;
    recycleRuleId?: number;
    recycleTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactsResponseBodyResultValuesPermission extends $tea.Model {
    ownerUserIds?: string[];
    participantUserIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactsResponseBodyResultValues extends $tea.Model {
    creatorUserId?: string;
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    gmtCreate?: string;
    gmtModified?: string;
    instanceId?: string;
    objectType?: string;
    permission?: GetContactsResponseBodyResultValuesPermission;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetContactsResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    maxResults?: number;
    nextToken?: string;
    values?: GetContactsResponseBodyResultValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmGroupChatMultiResponseBodyResult extends $tea.Model {
    gmtCreate?: number;
    iconUrl?: string;
    memberCount?: number;
    name?: string;
    openConversationId?: string;
    openGroupSetId?: string;
    ownerUserId?: string;
    ownerUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionResponseBodyPermissionsFieldScopes extends $tea.Model {
    fieldActions?: string[];
    fieldId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionResponseBodyPermissionsManagingScopeListExt extends $tea.Model {
    deptIdList?: number[];
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionResponseBodyPermissionsManagingScopeList extends $tea.Model {
    ext?: GetCrmRolePermissionResponseBodyPermissionsManagingScopeListExt;
    manager?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionResponseBodyPermissionsOperateScopes extends $tea.Model {
    hasAuth?: boolean;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionResponseBodyPermissionsRoleMemberList extends $tea.Model {
    memberId?: string;
    name?: string;
    type?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCrmRolePermissionResponseBodyPermissions extends $tea.Model {
    defaultRole?: boolean;
    fieldScopes?: GetCrmRolePermissionResponseBodyPermissionsFieldScopes[];
    managingScopeList?: GetCrmRolePermissionResponseBodyPermissionsManagingScopeList[];
    operateScopes?: GetCrmRolePermissionResponseBodyPermissionsOperateScopes[];
    resourceId?: string;
    roleId?: number;
    roleMemberList?: GetCrmRolePermissionResponseBodyPermissionsRoleMemberList[];
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerTracksByRelationIdResponseBodyResultListIsvInfo extends $tea.Model {
    appName?: string;
    orgName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCustomerTracksByRelationIdResponseBodyResultList extends $tea.Model {
    content?: string;
    creatorName?: string;
    detail?: {
        [key: string]: string;
    };
    format?: string;
    gmtCreate?: string;
    isvInfo?: GetCustomerTracksByRelationIdResponseBodyResultListIsvInfo;
    title?: string;
    type?: number;
    typeGroup?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupSetResponseBodyManager extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetGroupSetResponseBodyOwner extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNavigationCatalogResponseBodyResultNavCatalog extends $tea.Model {
    children?: any;
    navCode?: string;
    navId?: string;
    navName?: string;
    navType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNavigationCatalogResponseBodyResult extends $tea.Model {
    bizTraceId?: string;
    module?: string;
    navCatalog?: GetNavigationCatalogResponseBodyResultNavCatalog[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectDataResponseBodyResultValuesPermission extends $tea.Model {
    ownerUserIds?: string[];
    participantUserIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectDataResponseBodyResultValues extends $tea.Model {
    creatorNick?: string;
    creatorUserId?: string;
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    gmtCreate?: string;
    gmtModified?: string;
    instanceId?: string;
    objectType?: string;
    permission?: GetObjectDataResponseBodyResultValuesPermission;
    procInstStatus?: string;
    procOutResult?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetObjectDataResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    maxResults?: number;
    nextToken?: string;
    values?: GetObjectDataResponseBodyResultValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactsResponseBodyValuesContactsPermission extends $tea.Model {
    ownerStaffIds?: string[];
    participantStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactsResponseBodyValuesContacts extends $tea.Model {
    createTime?: string;
    creatorNick?: string;
    creatorUserId?: string;
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    instanceId?: string;
    modifyTime?: string;
    permission?: GetOfficialAccountContactsResponseBodyValuesContactsPermission;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountContactsResponseBodyValues extends $tea.Model {
    contacts?: GetOfficialAccountContactsResponseBodyValuesContacts[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountOTOMessageResultResponseBodyResult extends $tea.Model {
    readUserIdList?: string[];
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelationUkSettingResponseBodyResult extends $tea.Model {
    bizAlias?: string;
    fieldId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class JoinGroupSetRequestBizDataList extends $tea.Model {
    extendValue?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListClueTagResponseBodyResult extends $tea.Model {
    name?: string;
    tagId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCrmPersonalCustomersResponseBodyResultPermission extends $tea.Model {
    ownerStaffIds?: string[];
    participantStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListCrmPersonalCustomersResponseBodyResult extends $tea.Model {
    appUuid?: string;
    creatorNick?: string;
    creatorUserId?: string;
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    formCode?: string;
    gmtCreate?: string;
    gmtModified?: string;
    instanceId?: string;
    objectType?: string;
    permission?: ListCrmPersonalCustomersResponseBodyResultPermission;
    procInstStatus?: string;
    procOutResult?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupSetResponseBodyResultListManager extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupSetResponseBodyResultListOwner extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListGroupSetResponseBodyResultList extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    groupChatCount?: number;
    lastOpenConversationId?: string;
    manager?: ListGroupSetResponseBodyResultListManager[];
    managerUserIds?: string;
    memberCount?: number;
    memberQuota?: number;
    name?: string;
    notice?: string;
    noticeToped?: number;
    openGroupSetId?: string;
    owner?: ListGroupSetResponseBodyResultListOwner;
    ownerUserId?: string;
    relationType?: string;
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllCustomerResponseBodyResultValuesPermission extends $tea.Model {
    ownerStaffIds?: string[];
    participantStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllCustomerResponseBodyResultValues extends $tea.Model {
    createTime?: string;
    creatorNick?: string;
    creatorUserId?: string;
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    instanceId?: string;
    modifyTime?: string;
    objectType?: string;
    permission?: QueryAllCustomerResponseBodyResultValuesPermission;
    processInstanceStatus?: string;
    processOutResult?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllCustomerResponseBodyResult extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    values?: QueryAllCustomerResponseBodyResultValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllTracksResponseBodyValues extends $tea.Model {
    bizId?: string;
    creator?: string;
    customerId?: string;
    gmtCreate?: number;
    id?: string;
    subType?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClueFollowStatusResponseBodyResult extends $tea.Model {
    clueId?: string;
    scope?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmGroupChatsResponseBodyResultList extends $tea.Model {
    gmtCreate?: number;
    memberCount?: number;
    name?: string;
    openConversationId?: string;
    openGroupSetId?: string;
    ownerUserId?: string;
    ownerUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmPersonalCustomerResponseBodyValuesPermission extends $tea.Model {
    ownerStaffIds?: string[];
    participantStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCrmPersonalCustomerResponseBodyValues extends $tea.Model {
    creatorNick?: string;
    creatorUserId?: string;
    data?: {
        [key: string]: any;
    };
    extendData?: {
        [key: string]: any;
    };
    gmtCreate?: string;
    gmtModified?: string;
    instanceId?: string;
    objectType?: string;
    permission?: QueryCrmPersonalCustomerResponseBodyValuesPermission;
    procInstStatus?: string;
    procOutResult?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGlobalInfoResponseBodyResult extends $tea.Model {
    oemEnable?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialAccountUserBasicInfoResponseBodyResult extends $tea.Model {
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationDatasByTargetIdResponseBodyRelationsBizDataList extends $tea.Model {
    extendValue?: string;
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRelationDatasByTargetIdResponseBodyRelations extends $tea.Model {
    bizDataList?: QueryRelationDatasByTargetIdResponseBodyRelationsBizDataList[];
    openConversationIds?: string[];
    relationId?: string;
    relationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageRequestDetailMessageBodyActionCardButtonList extends $tea.Model {
    actionUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageRequestDetailMessageBodyActionCard extends $tea.Model {
    buttonList?: SendOfficialAccountOTOMessageRequestDetailMessageBodyActionCardButtonList[];
    buttonOrientation?: string;
    markdown?: string;
    singleTitle?: string;
    singleUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageRequestDetailMessageBodyImage extends $tea.Model {
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageRequestDetailMessageBodyLink extends $tea.Model {
    messageUrl?: string;
    picUrl?: string;
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageRequestDetailMessageBodyMarkdown extends $tea.Model {
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageRequestDetailMessageBodyText extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageRequestDetailMessageBody extends $tea.Model {
    actionCard?: SendOfficialAccountOTOMessageRequestDetailMessageBodyActionCard;
    image?: SendOfficialAccountOTOMessageRequestDetailMessageBodyImage;
    link?: SendOfficialAccountOTOMessageRequestDetailMessageBodyLink;
    markdown?: SendOfficialAccountOTOMessageRequestDetailMessageBodyMarkdown;
    text?: SendOfficialAccountOTOMessageRequestDetailMessageBodyText;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageRequestDetail extends $tea.Model {
    messageBody?: SendOfficialAccountOTOMessageRequestDetailMessageBody;
    msgType?: string;
    unionId?: string;
    userId?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountOTOMessageResponseBodyResult extends $tea.Model {
    openPushId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageRequestDetailMessageBodyActionCardButtonList extends $tea.Model {
    actionUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageRequestDetailMessageBodyActionCard extends $tea.Model {
    buttonList?: SendOfficialAccountSNSMessageRequestDetailMessageBodyActionCardButtonList[];
    buttonOrientation?: string;
    markdown?: string;
    singleTitle?: string;
    singleUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageRequestDetailMessageBodyLink extends $tea.Model {
    messageUrl?: string;
    picUrl?: string;
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageRequestDetailMessageBodyMarkdown extends $tea.Model {
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageRequestDetailMessageBodyText extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageRequestDetailMessageBody extends $tea.Model {
    actionCard?: SendOfficialAccountSNSMessageRequestDetailMessageBodyActionCard;
    link?: SendOfficialAccountSNSMessageRequestDetailMessageBodyLink;
    markdown?: SendOfficialAccountSNSMessageRequestDetailMessageBodyMarkdown;
    text?: SendOfficialAccountSNSMessageRequestDetailMessageBodyText;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageRequestDetail extends $tea.Model {
    messageBody?: SendOfficialAccountSNSMessageRequestDetailMessageBody;
    msgType?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOfficialAccountSNSMessageResponseBodyResult extends $tea.Model {
    openPushId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushRequestDetailMessageBodyActionCardButtonList extends $tea.Model {
    actionUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushRequestDetailMessageBodyActionCard extends $tea.Model {
    buttonList?: ServiceWindowMessageBatchPushRequestDetailMessageBodyActionCardButtonList[];
    buttonOrientation?: string;
    markdown?: string;
    singleTitle?: string;
    singleUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushRequestDetailMessageBodyLink extends $tea.Model {
    messageUrl?: string;
    picUrl?: string;
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushRequestDetailMessageBodyMarkdown extends $tea.Model {
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushRequestDetailMessageBodyText extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushRequestDetailMessageBody extends $tea.Model {
    actionCard?: ServiceWindowMessageBatchPushRequestDetailMessageBodyActionCard;
    link?: ServiceWindowMessageBatchPushRequestDetailMessageBodyLink;
    markdown?: ServiceWindowMessageBatchPushRequestDetailMessageBodyMarkdown;
    text?: ServiceWindowMessageBatchPushRequestDetailMessageBodyText;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushRequestDetail extends $tea.Model {
    bizRequestId?: string;
    messageBody?: ServiceWindowMessageBatchPushRequestDetailMessageBody;
    msgType?: string;
    sendToAll?: boolean;
    userIdList?: string[];
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ServiceWindowMessageBatchPushResponseBodyResult extends $tea.Model {
    openPushId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCrmPersonalCustomerRequestPermission extends $tea.Model {
    ownerStaffIds?: string[];
    participantStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMenuDataRequestNavDataNavExtInfo extends $tea.Model {
    productMode?: string;
    provider?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMenuDataRequestNavData extends $tea.Model {
    displayStatus?: string;
    icon?: string;
    iconBgColor?: string;
    iconColor?: string;
    integrationProtocol?: string;
    mobileNavName?: string;
    mobileUrl?: string;
    navCode?: string;
    navExtInfo?: UpdateMenuDataRequestNavDataNavExtInfo;
    navId?: string;
    navName?: string;
    navStatus?: string;
    navType?: string;
    parentNavId?: string;
    provider?: string;
    sortNum?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRelationMetaFieldRequestFieldDTOListPropsOptions extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRelationMetaFieldRequestFieldDTOListProps extends $tea.Model {
    align?: string;
    bizAlias?: string;
    choice?: number;
    content?: string;
    disabled?: boolean;
    duration?: boolean;
    fieldId?: string;
    format?: string;
    invisible?: boolean;
    label?: string;
    labelEditableFreeze?: boolean;
    link?: string;
    needDetail?: string;
    notPrint?: string;
    notUpper?: string;
    options?: UpdateRelationMetaFieldRequestFieldDTOListPropsOptions[];
    payEnable?: boolean;
    placeholder?: string;
    required?: boolean;
    requiredEditableFreeze?: boolean;
    sortable?: boolean;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRelationMetaFieldRequestFieldDTOList extends $tea.Model {
    componentName?: string;
    props?: UpdateRelationMetaFieldRequestFieldDTOListProps;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 从私海放弃客户（退回公海）
     *
     * @param request AbandonCustomerRequest
     * @param headers AbandonCustomerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AbandonCustomerResponse
     */
    abandonCustomerWithOptions(request: AbandonCustomerRequest, headers: AbandonCustomerHeaders, runtime: $Util.RuntimeOptions): Promise<AbandonCustomerResponse>;
    /**
     * @summary 从私海放弃客户（退回公海）
     *
     * @param request AbandonCustomerRequest
     * @return AbandonCustomerResponse
     */
    abandonCustomer(request: AbandonCustomerRequest): Promise<AbandonCustomerResponse>;
    /**
     * @summary 添加crm个人客户（或企业客户）
     *
     * @param request AddCrmPersonalCustomerRequest
     * @param headers AddCrmPersonalCustomerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCrmPersonalCustomerResponse
     */
    addCrmPersonalCustomerWithOptions(request: AddCrmPersonalCustomerRequest, headers: AddCrmPersonalCustomerHeaders, runtime: $Util.RuntimeOptions): Promise<AddCrmPersonalCustomerResponse>;
    /**
     * @summary 添加crm个人客户（或企业客户）
     *
     * @param request AddCrmPersonalCustomerRequest
     * @return AddCrmPersonalCustomerResponse
     */
    addCrmPersonalCustomer(request: AddCrmPersonalCustomerRequest): Promise<AddCrmPersonalCustomerResponse>;
    /**
     * @summary 新增动态
     *
     * @param request AddCustomerTrackRequest
     * @param headers AddCustomerTrackHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCustomerTrackResponse
     */
    addCustomerTrackWithOptions(request: AddCustomerTrackRequest, headers: AddCustomerTrackHeaders, runtime: $Util.RuntimeOptions): Promise<AddCustomerTrackResponse>;
    /**
     * @summary 新增动态
     *
     * @param request AddCustomerTrackRequest
     * @return AddCustomerTrackResponse
     */
    addCustomerTrack(request: AddCustomerTrackRequest): Promise<AddCustomerTrackResponse>;
    /**
     * @summary 添加线索
     *
     * @param request AddLeadsRequest
     * @param headers AddLeadsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddLeadsResponse
     */
    addLeadsWithOptions(request: AddLeadsRequest, headers: AddLeadsHeaders, runtime: $Util.RuntimeOptions): Promise<AddLeadsResponse>;
    /**
     * @summary 添加线索
     *
     * @param request AddLeadsRequest
     * @return AddLeadsResponse
     */
    addLeads(request: AddLeadsRequest): Promise<AddLeadsResponse>;
    /**
     * @summary 关系模型表结构增加字段
     *
     * @param request AddRelationMetaFieldRequest
     * @param headers AddRelationMetaFieldHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddRelationMetaFieldResponse
     */
    addRelationMetaFieldWithOptions(request: AddRelationMetaFieldRequest, headers: AddRelationMetaFieldHeaders, runtime: $Util.RuntimeOptions): Promise<AddRelationMetaFieldResponse>;
    /**
     * @summary 关系模型表结构增加字段
     *
     * @param request AddRelationMetaFieldRequest
     * @return AddRelationMetaFieldResponse
     */
    addRelationMetaField(request: AddRelationMetaFieldRequest): Promise<AddRelationMetaFieldResponse>;
    /**
     * @summary 批量新增联系人
     *
     * @param request BatchAddContactsRequest
     * @param headers BatchAddContactsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchAddContactsResponse
     */
    batchAddContactsWithOptions(request: BatchAddContactsRequest, headers: BatchAddContactsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchAddContactsResponse>;
    /**
     * @summary 批量新增联系人
     *
     * @param request BatchAddContactsRequest
     * @return BatchAddContactsResponse
     */
    batchAddContacts(request: BatchAddContactsRequest): Promise<BatchAddContactsResponse>;
    /**
     * @summary 批量新增跟进记录
     *
     * @param request BatchAddFollowRecordsRequest
     * @param headers BatchAddFollowRecordsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchAddFollowRecordsResponse
     */
    batchAddFollowRecordsWithOptions(request: BatchAddFollowRecordsRequest, headers: BatchAddFollowRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchAddFollowRecordsResponse>;
    /**
     * @summary 批量新增跟进记录
     *
     * @param request BatchAddFollowRecordsRequest
     * @return BatchAddFollowRecordsResponse
     */
    batchAddFollowRecords(request: BatchAddFollowRecordsRequest): Promise<BatchAddFollowRecordsResponse>;
    /**
     * @summary 批量新增关系数据
     *
     * @param request BatchAddRelationDatasRequest
     * @param headers BatchAddRelationDatasHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchAddRelationDatasResponse
     */
    batchAddRelationDatasWithOptions(request: BatchAddRelationDatasRequest, headers: BatchAddRelationDatasHeaders, runtime: $Util.RuntimeOptions): Promise<BatchAddRelationDatasResponse>;
    /**
     * @summary 批量新增关系数据
     *
     * @param request BatchAddRelationDatasRequest
     * @return BatchAddRelationDatasResponse
     */
    batchAddRelationDatas(request: BatchAddRelationDatasRequest): Promise<BatchAddRelationDatasResponse>;
    /**
     * @summary 批量创建线索数据
     *
     * @param request BatchCreateClueDataRequest
     * @param headers BatchCreateClueDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchCreateClueDataResponse
     */
    batchCreateClueDataWithOptions(request: BatchCreateClueDataRequest, headers: BatchCreateClueDataHeaders, runtime: $Util.RuntimeOptions): Promise<BatchCreateClueDataResponse>;
    /**
     * @summary 批量创建线索数据
     *
     * @param request BatchCreateClueDataRequest
     * @return BatchCreateClueDataResponse
     */
    batchCreateClueData(request: BatchCreateClueDataRequest): Promise<BatchCreateClueDataResponse>;
    /**
     * @summary 批量删除跟进记录
     *
     * @param request BatchRemoveFollowRecordsRequest
     * @param headers BatchRemoveFollowRecordsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchRemoveFollowRecordsResponse
     */
    batchRemoveFollowRecordsWithOptions(request: BatchRemoveFollowRecordsRequest, headers: BatchRemoveFollowRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchRemoveFollowRecordsResponse>;
    /**
     * @summary 批量删除跟进记录
     *
     * @param request BatchRemoveFollowRecordsRequest
     * @return BatchRemoveFollowRecordsResponse
     */
    batchRemoveFollowRecords(request: BatchRemoveFollowRecordsRequest): Promise<BatchRemoveFollowRecordsResponse>;
    /**
     * @summary 服务窗消息群发
     *
     * @param request BatchSendOfficialAccountOTOMessageRequest
     * @param headers BatchSendOfficialAccountOTOMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchSendOfficialAccountOTOMessageResponse
     */
    batchSendOfficialAccountOTOMessageWithOptions(request: BatchSendOfficialAccountOTOMessageRequest, headers: BatchSendOfficialAccountOTOMessageHeaders, runtime: $Util.RuntimeOptions): Promise<BatchSendOfficialAccountOTOMessageResponse>;
    /**
     * @summary 服务窗消息群发
     *
     * @param request BatchSendOfficialAccountOTOMessageRequest
     * @return BatchSendOfficialAccountOTOMessageResponse
     */
    batchSendOfficialAccountOTOMessage(request: BatchSendOfficialAccountOTOMessageRequest): Promise<BatchSendOfficialAccountOTOMessageResponse>;
    /**
     * @summary 批量修改联系人
     *
     * @param request BatchUpdateContactsRequest
     * @param headers BatchUpdateContactsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchUpdateContactsResponse
     */
    batchUpdateContactsWithOptions(request: BatchUpdateContactsRequest, headers: BatchUpdateContactsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchUpdateContactsResponse>;
    /**
     * @summary 批量修改联系人
     *
     * @param request BatchUpdateContactsRequest
     * @return BatchUpdateContactsResponse
     */
    batchUpdateContacts(request: BatchUpdateContactsRequest): Promise<BatchUpdateContactsResponse>;
    /**
     * @summary 批量修改跟进记录
     *
     * @param request BatchUpdateFollowRecordsRequest
     * @param headers BatchUpdateFollowRecordsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchUpdateFollowRecordsResponse
     */
    batchUpdateFollowRecordsWithOptions(request: BatchUpdateFollowRecordsRequest, headers: BatchUpdateFollowRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchUpdateFollowRecordsResponse>;
    /**
     * @summary 批量修改跟进记录
     *
     * @param request BatchUpdateFollowRecordsRequest
     * @return BatchUpdateFollowRecordsResponse
     */
    batchUpdateFollowRecords(request: BatchUpdateFollowRecordsRequest): Promise<BatchUpdateFollowRecordsResponse>;
    /**
     * @summary 批量修改关系数据
     *
     * @param request BatchUpdateRelationDatasRequest
     * @param headers BatchUpdateRelationDatasHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchUpdateRelationDatasResponse
     */
    batchUpdateRelationDatasWithOptions(request: BatchUpdateRelationDatasRequest, headers: BatchUpdateRelationDatasHeaders, runtime: $Util.RuntimeOptions): Promise<BatchUpdateRelationDatasResponse>;
    /**
     * @summary 批量修改关系数据
     *
     * @param request BatchUpdateRelationDatasRequest
     * @return BatchUpdateRelationDatasResponse
     */
    batchUpdateRelationDatas(request: BatchUpdateRelationDatasRequest): Promise<BatchUpdateRelationDatasResponse>;
    /**
     * @summary CRM客户通讯录数据写入接口，支持客户&联系人数据合并写入
     *
     * @param request CreateCustomerRequest
     * @param headers CreateCustomerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCustomerResponse
     */
    createCustomerWithOptions(request: CreateCustomerRequest, headers: CreateCustomerHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCustomerResponse>;
    /**
     * @summary CRM客户通讯录数据写入接口，支持客户&联系人数据合并写入
     *
     * @param request CreateCustomerRequest
     * @return CreateCustomerResponse
     */
    createCustomer(request: CreateCustomerRequest): Promise<CreateCustomerResponse>;
    /**
     * @summary 创建客户群
     *
     * @param request CreateGroupRequest
     * @param headers CreateGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateGroupResponse
     */
    createGroupWithOptions(request: CreateGroupRequest, headers: CreateGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateGroupResponse>;
    /**
     * @summary 创建客户群
     *
     * @param request CreateGroupRequest
     * @return CreateGroupResponse
     */
    createGroup(request: CreateGroupRequest): Promise<CreateGroupResponse>;
    /**
     * @summary 创建群组
     *
     * @param request CreateGroupSetRequest
     * @param headers CreateGroupSetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateGroupSetResponse
     */
    createGroupSetWithOptions(request: CreateGroupSetRequest, headers: CreateGroupSetHeaders, runtime: $Util.RuntimeOptions): Promise<CreateGroupSetResponse>;
    /**
     * @summary 创建群组
     *
     * @param request CreateGroupSetRequest
     * @return CreateGroupSetResponse
     */
    createGroupSet(request: CreateGroupSetRequest): Promise<CreateGroupSetResponse>;
    /**
     * @summary 创建关系模型表结构
     *
     * @param request CreateRelationMetaRequest
     * @param headers CreateRelationMetaHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateRelationMetaResponse
     */
    createRelationMetaWithOptions(request: CreateRelationMetaRequest, headers: CreateRelationMetaHeaders, runtime: $Util.RuntimeOptions): Promise<CreateRelationMetaResponse>;
    /**
     * @summary 创建关系模型表结构
     *
     * @param request CreateRelationMetaRequest
     * @return CreateRelationMetaResponse
     */
    createRelationMeta(request: CreateRelationMetaRequest): Promise<CreateRelationMetaResponse>;
    /**
     * @summary 删除CRM自定义对象数据
     *
     * @param request DeleteCrmCustomObjectDataRequest
     * @param headers DeleteCrmCustomObjectDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCrmCustomObjectDataResponse
     */
    deleteCrmCustomObjectDataWithOptions(instanceId: string, request: DeleteCrmCustomObjectDataRequest, headers: DeleteCrmCustomObjectDataHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteCrmCustomObjectDataResponse>;
    /**
     * @summary 删除CRM自定义对象数据
     *
     * @param request DeleteCrmCustomObjectDataRequest
     * @return DeleteCrmCustomObjectDataResponse
     */
    deleteCrmCustomObjectData(instanceId: string, request: DeleteCrmCustomObjectDataRequest): Promise<DeleteCrmCustomObjectDataResponse>;
    /**
     * @summary crm自定义表单数据删除接口
     *
     * @param request DeleteCrmFormInstanceRequest
     * @param headers DeleteCrmFormInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCrmFormInstanceResponse
     */
    deleteCrmFormInstanceWithOptions(instanceId: string, request: DeleteCrmFormInstanceRequest, headers: DeleteCrmFormInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteCrmFormInstanceResponse>;
    /**
     * @summary crm自定义表单数据删除接口
     *
     * @param request DeleteCrmFormInstanceRequest
     * @return DeleteCrmFormInstanceResponse
     */
    deleteCrmFormInstance(instanceId: string, request: DeleteCrmFormInstanceRequest): Promise<DeleteCrmFormInstanceResponse>;
    /**
     * @summary 删除crm个人客户（或企业客户）
     *
     * @param request DeleteCrmPersonalCustomerRequest
     * @param headers DeleteCrmPersonalCustomerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteCrmPersonalCustomerResponse
     */
    deleteCrmPersonalCustomerWithOptions(dataId: string, request: DeleteCrmPersonalCustomerRequest, headers: DeleteCrmPersonalCustomerHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteCrmPersonalCustomerResponse>;
    /**
     * @summary 删除crm个人客户（或企业客户）
     *
     * @param request DeleteCrmPersonalCustomerRequest
     * @return DeleteCrmPersonalCustomerResponse
     */
    deleteCrmPersonalCustomer(dataId: string, request: DeleteCrmPersonalCustomerRequest): Promise<DeleteCrmPersonalCustomerResponse>;
    /**
     * @summary 删除线索
     *
     * @param request DeleteLeadsRequest
     * @param headers DeleteLeadsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteLeadsResponse
     */
    deleteLeadsWithOptions(request: DeleteLeadsRequest, headers: DeleteLeadsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteLeadsResponse>;
    /**
     * @summary 删除线索
     *
     * @param request DeleteLeadsRequest
     * @return DeleteLeadsResponse
     */
    deleteLeads(request: DeleteLeadsRequest): Promise<DeleteLeadsResponse>;
    /**
     * @summary 关系模型表结构删除字段
     *
     * @param request DeleteRelationMetaFieldRequest
     * @param headers DeleteRelationMetaFieldHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteRelationMetaFieldResponse
     */
    deleteRelationMetaFieldWithOptions(request: DeleteRelationMetaFieldRequest, headers: DeleteRelationMetaFieldHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRelationMetaFieldResponse>;
    /**
     * @summary 关系模型表结构删除字段
     *
     * @param request DeleteRelationMetaFieldRequest
     * @return DeleteRelationMetaFieldResponse
     */
    deleteRelationMetaField(request: DeleteRelationMetaFieldRequest): Promise<DeleteRelationMetaFieldResponse>;
    /**
     * @summary 获取CRM客户对象的元数据描述
     *
     * @param request DescribeCrmPersonalCustomerObjectMetaRequest
     * @param headers DescribeCrmPersonalCustomerObjectMetaHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeCrmPersonalCustomerObjectMetaResponse
     */
    describeCrmPersonalCustomerObjectMetaWithOptions(request: DescribeCrmPersonalCustomerObjectMetaRequest, headers: DescribeCrmPersonalCustomerObjectMetaHeaders, runtime: $Util.RuntimeOptions): Promise<DescribeCrmPersonalCustomerObjectMetaResponse>;
    /**
     * @summary 获取CRM客户对象的元数据描述
     *
     * @param request DescribeCrmPersonalCustomerObjectMetaRequest
     * @return DescribeCrmPersonalCustomerObjectMetaResponse
     */
    describeCrmPersonalCustomerObjectMeta(request: DescribeCrmPersonalCustomerObjectMetaRequest): Promise<DescribeCrmPersonalCustomerObjectMetaResponse>;
    /**
     * @summary 查询关系模型表结构
     *
     * @param request DescribeRelationMetaRequest
     * @param headers DescribeRelationMetaHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DescribeRelationMetaResponse
     */
    describeRelationMetaWithOptions(request: DescribeRelationMetaRequest, headers: DescribeRelationMetaHeaders, runtime: $Util.RuntimeOptions): Promise<DescribeRelationMetaResponse>;
    /**
     * @summary 查询关系模型表结构
     *
     * @param request DescribeRelationMetaRequest
     * @return DescribeRelationMetaResponse
     */
    describeRelationMeta(request: DescribeRelationMetaRequest): Promise<DescribeRelationMetaResponse>;
    /**
     * @summary 分页获取关联对象的跟进记录列表
     *
     * @param request FindTargetRelatedFollowRecordsRequest
     * @param headers FindTargetRelatedFollowRecordsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return FindTargetRelatedFollowRecordsResponse
     */
    findTargetRelatedFollowRecordsWithOptions(request: FindTargetRelatedFollowRecordsRequest, headers: FindTargetRelatedFollowRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<FindTargetRelatedFollowRecordsResponse>;
    /**
     * @summary 分页获取关联对象的跟进记录列表
     *
     * @param request FindTargetRelatedFollowRecordsRequest
     * @return FindTargetRelatedFollowRecordsResponse
     */
    findTargetRelatedFollowRecords(request: FindTargetRelatedFollowRecordsRequest): Promise<FindTargetRelatedFollowRecordsResponse>;
    /**
     * @summary 分页获取所有客户的掉保时间数据
     *
     * @param request GetAllCustomerRecyclesRequest
     * @param headers GetAllCustomerRecyclesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAllCustomerRecyclesResponse
     */
    getAllCustomerRecyclesWithOptions(request: GetAllCustomerRecyclesRequest, headers: GetAllCustomerRecyclesHeaders, runtime: $Util.RuntimeOptions): Promise<GetAllCustomerRecyclesResponse>;
    /**
     * @summary 分页获取所有客户的掉保时间数据
     *
     * @param request GetAllCustomerRecyclesRequest
     * @return GetAllCustomerRecyclesResponse
     */
    getAllCustomerRecycles(request: GetAllCustomerRecyclesRequest): Promise<GetAllCustomerRecyclesResponse>;
    /**
     * @summary 根据指定条件查询联系人数据
     *
     * @param request GetContactsRequest
     * @param headers GetContactsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetContactsResponse
     */
    getContactsWithOptions(request: GetContactsRequest, headers: GetContactsHeaders, runtime: $Util.RuntimeOptions): Promise<GetContactsResponse>;
    /**
     * @summary 根据指定条件查询联系人数据
     *
     * @param request GetContactsRequest
     * @return GetContactsResponse
     */
    getContacts(request: GetContactsRequest): Promise<GetContactsResponse>;
    /**
     * @summary 获取单个客户群
     *
     * @param headers GetCrmGroupChatHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCrmGroupChatResponse
     */
    getCrmGroupChatWithOptions(openConversationId: string, headers: GetCrmGroupChatHeaders, runtime: $Util.RuntimeOptions): Promise<GetCrmGroupChatResponse>;
    /**
     * @summary 获取单个客户群
     *
     * @return GetCrmGroupChatResponse
     */
    getCrmGroupChat(openConversationId: string): Promise<GetCrmGroupChatResponse>;
    /**
     * @summary 批量获取多个客户群
     *
     * @param request GetCrmGroupChatMultiRequest
     * @param headers GetCrmGroupChatMultiHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCrmGroupChatMultiResponse
     */
    getCrmGroupChatMultiWithOptions(request: GetCrmGroupChatMultiRequest, headers: GetCrmGroupChatMultiHeaders, runtime: $Util.RuntimeOptions): Promise<GetCrmGroupChatMultiResponse>;
    /**
     * @summary 批量获取多个客户群
     *
     * @param request GetCrmGroupChatMultiRequest
     * @return GetCrmGroupChatMultiResponse
     */
    getCrmGroupChatMulti(request: GetCrmGroupChatMultiRequest): Promise<GetCrmGroupChatMultiResponse>;
    /**
     * @summary 获取单个客户群
     *
     * @param request GetCrmGroupChatSingleRequest
     * @param headers GetCrmGroupChatSingleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCrmGroupChatSingleResponse
     */
    getCrmGroupChatSingleWithOptions(request: GetCrmGroupChatSingleRequest, headers: GetCrmGroupChatSingleHeaders, runtime: $Util.RuntimeOptions): Promise<GetCrmGroupChatSingleResponse>;
    /**
     * @summary 获取单个客户群
     *
     * @param request GetCrmGroupChatSingleRequest
     * @return GetCrmGroupChatSingleResponse
     */
    getCrmGroupChatSingle(request: GetCrmGroupChatSingleRequest): Promise<GetCrmGroupChatSingleResponse>;
    /**
     * @summary 获取CRM表单权限配置
     *
     * @param request GetCrmRolePermissionRequest
     * @param headers GetCrmRolePermissionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCrmRolePermissionResponse
     */
    getCrmRolePermissionWithOptions(request: GetCrmRolePermissionRequest, headers: GetCrmRolePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<GetCrmRolePermissionResponse>;
    /**
     * @summary 获取CRM表单权限配置
     *
     * @param request GetCrmRolePermissionRequest
     * @return GetCrmRolePermissionResponse
     */
    getCrmRolePermission(request: GetCrmRolePermissionRequest): Promise<GetCrmRolePermissionResponse>;
    /**
     * @summary 分页获取某个客户的客户动态
     *
     * @param request GetCustomerTracksByRelationIdRequest
     * @param headers GetCustomerTracksByRelationIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCustomerTracksByRelationIdResponse
     */
    getCustomerTracksByRelationIdWithOptions(request: GetCustomerTracksByRelationIdRequest, headers: GetCustomerTracksByRelationIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetCustomerTracksByRelationIdResponse>;
    /**
     * @summary 分页获取某个客户的客户动态
     *
     * @param request GetCustomerTracksByRelationIdRequest
     * @return GetCustomerTracksByRelationIdResponse
     */
    getCustomerTracksByRelationId(request: GetCustomerTracksByRelationIdRequest): Promise<GetCustomerTracksByRelationIdResponse>;
    /**
     * @summary 查询群组
     *
     * @param request GetGroupSetRequest
     * @param headers GetGroupSetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetGroupSetResponse
     */
    getGroupSetWithOptions(request: GetGroupSetRequest, headers: GetGroupSetHeaders, runtime: $Util.RuntimeOptions): Promise<GetGroupSetResponse>;
    /**
     * @summary 查询群组
     *
     * @param request GetGroupSetRequest
     * @return GetGroupSetResponse
     */
    getGroupSet(request: GetGroupSetRequest): Promise<GetGroupSetResponse>;
    /**
     * @summary 获取自定义导航挂靠节点结构
     *
     * @param request GetNavigationCatalogRequest
     * @param headers GetNavigationCatalogHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetNavigationCatalogResponse
     */
    getNavigationCatalogWithOptions(request: GetNavigationCatalogRequest, headers: GetNavigationCatalogHeaders, runtime: $Util.RuntimeOptions): Promise<GetNavigationCatalogResponse>;
    /**
     * @summary 获取自定义导航挂靠节点结构
     *
     * @param request GetNavigationCatalogRequest
     * @return GetNavigationCatalogResponse
     */
    getNavigationCatalog(request: GetNavigationCatalogRequest): Promise<GetNavigationCatalogResponse>;
    /**
     * @summary 根据指定条件查询自定义对象数据
     *
     * @param request GetObjectDataRequest
     * @param headers GetObjectDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetObjectDataResponse
     */
    getObjectDataWithOptions(request: GetObjectDataRequest, headers: GetObjectDataHeaders, runtime: $Util.RuntimeOptions): Promise<GetObjectDataResponse>;
    /**
     * @summary 根据指定条件查询自定义对象数据
     *
     * @param request GetObjectDataRequest
     * @return GetObjectDataResponse
     */
    getObjectData(request: GetObjectDataRequest): Promise<GetObjectDataResponse>;
    /**
     * @summary 获取关注服务窗的联系人信息，包括手机号、主企业等字段，调用前先进行用户授权
     *
     * @param headers GetOfficialAccountContactInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOfficialAccountContactInfoResponse
     */
    getOfficialAccountContactInfoWithOptions(userId: string, headers: GetOfficialAccountContactInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetOfficialAccountContactInfoResponse>;
    /**
     * @summary 获取关注服务窗的联系人信息，包括手机号、主企业等字段，调用前先进行用户授权
     *
     * @return GetOfficialAccountContactInfoResponse
     */
    getOfficialAccountContactInfo(userId: string): Promise<GetOfficialAccountContactInfoResponse>;
    /**
     * @summary 分页获取服务窗联系人信息
     *
     * @param request GetOfficialAccountContactsRequest
     * @param headers GetOfficialAccountContactsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOfficialAccountContactsResponse
     */
    getOfficialAccountContactsWithOptions(request: GetOfficialAccountContactsRequest, headers: GetOfficialAccountContactsHeaders, runtime: $Util.RuntimeOptions): Promise<GetOfficialAccountContactsResponse>;
    /**
     * @summary 分页获取服务窗联系人信息
     *
     * @param request GetOfficialAccountContactsRequest
     * @return GetOfficialAccountContactsResponse
     */
    getOfficialAccountContacts(request: GetOfficialAccountContactsRequest): Promise<GetOfficialAccountContactsResponse>;
    /**
     * @summary 获取服务窗消息发送的结果
     *
     * @param request GetOfficialAccountOTOMessageResultRequest
     * @param headers GetOfficialAccountOTOMessageResultHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOfficialAccountOTOMessageResultResponse
     */
    getOfficialAccountOTOMessageResultWithOptions(request: GetOfficialAccountOTOMessageResultRequest, headers: GetOfficialAccountOTOMessageResultHeaders, runtime: $Util.RuntimeOptions): Promise<GetOfficialAccountOTOMessageResultResponse>;
    /**
     * @summary 获取服务窗消息发送的结果
     *
     * @param request GetOfficialAccountOTOMessageResultRequest
     * @return GetOfficialAccountOTOMessageResultResponse
     */
    getOfficialAccountOTOMessageResult(request: GetOfficialAccountOTOMessageResultRequest): Promise<GetOfficialAccountOTOMessageResultResponse>;
    /**
     * @summary 获取关系数据查重规则
     *
     * @param request GetRelationUkSettingRequest
     * @param headers GetRelationUkSettingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRelationUkSettingResponse
     */
    getRelationUkSettingWithOptions(request: GetRelationUkSettingRequest, headers: GetRelationUkSettingHeaders, runtime: $Util.RuntimeOptions): Promise<GetRelationUkSettingResponse>;
    /**
     * @summary 获取关系数据查重规则
     *
     * @param request GetRelationUkSettingRequest
     * @return GetRelationUkSettingResponse
     */
    getRelationUkSetting(request: GetRelationUkSettingRequest): Promise<GetRelationUkSettingResponse>;
    /**
     * @summary 加入群组
     *
     * @param request JoinGroupSetRequest
     * @param headers JoinGroupSetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return JoinGroupSetResponse
     */
    joinGroupSetWithOptions(request: JoinGroupSetRequest, headers: JoinGroupSetHeaders, runtime: $Util.RuntimeOptions): Promise<JoinGroupSetResponse>;
    /**
     * @summary 加入群组
     *
     * @param request JoinGroupSetRequest
     * @return JoinGroupSetResponse
     */
    joinGroupSet(request: JoinGroupSetRequest): Promise<JoinGroupSetResponse>;
    /**
     * @summary 获取线索标签列表
     *
     * @param headers ListClueTagHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListClueTagResponse
     */
    listClueTagWithOptions(headers: ListClueTagHeaders, runtime: $Util.RuntimeOptions): Promise<ListClueTagResponse>;
    /**
     * @summary 获取线索标签列表
     *
     * @return ListClueTagResponse
     */
    listClueTag(): Promise<ListClueTagResponse>;
    /**
     * @summary 批量获取crm个人客户
     *
     * @param request ListCrmPersonalCustomersRequest
     * @param headers ListCrmPersonalCustomersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListCrmPersonalCustomersResponse
     */
    listCrmPersonalCustomersWithOptions(request: ListCrmPersonalCustomersRequest, headers: ListCrmPersonalCustomersHeaders, runtime: $Util.RuntimeOptions): Promise<ListCrmPersonalCustomersResponse>;
    /**
     * @summary 批量获取crm个人客户
     *
     * @param request ListCrmPersonalCustomersRequest
     * @return ListCrmPersonalCustomersResponse
     */
    listCrmPersonalCustomers(request: ListCrmPersonalCustomersRequest): Promise<ListCrmPersonalCustomersResponse>;
    /**
     * @summary 查询群组列表
     *
     * @param request ListGroupSetRequest
     * @param headers ListGroupSetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListGroupSetResponse
     */
    listGroupSetWithOptions(request: ListGroupSetRequest, headers: ListGroupSetHeaders, runtime: $Util.RuntimeOptions): Promise<ListGroupSetResponse>;
    /**
     * @summary 查询群组列表
     *
     * @param request ListGroupSetRequest
     * @return ListGroupSetResponse
     */
    listGroupSet(request: ListGroupSetRequest): Promise<ListGroupSetResponse>;
    /**
     * @summary 分页获取全量客户数据，根据不同的类型可以获取私海个人客户、企业客户，以及公海个人客户、企业客户，最多一次可获取100条数据
     *
     * @param request QueryAllCustomerRequest
     * @param headers QueryAllCustomerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAllCustomerResponse
     */
    queryAllCustomerWithOptions(request: QueryAllCustomerRequest, headers: QueryAllCustomerHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllCustomerResponse>;
    /**
     * @summary 分页获取全量客户数据，根据不同的类型可以获取私海个人客户、企业客户，以及公海个人客户、企业客户，最多一次可获取100条数据
     *
     * @param request QueryAllCustomerRequest
     * @return QueryAllCustomerResponse
     */
    queryAllCustomer(request: QueryAllCustomerRequest): Promise<QueryAllCustomerResponse>;
    /**
     * @summary 批量查询企业客户动态
     *
     * @param request QueryAllTracksRequest
     * @param headers QueryAllTracksHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAllTracksResponse
     */
    queryAllTracksWithOptions(request: QueryAllTracksRequest, headers: QueryAllTracksHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllTracksResponse>;
    /**
     * @summary 批量查询企业客户动态
     *
     * @param request QueryAllTracksRequest
     * @return QueryAllTracksResponse
     */
    queryAllTracks(request: QueryAllTracksRequest): Promise<QueryAllTracksResponse>;
    /**
     * @summary 查询线索跟进状态
     *
     * @param request QueryClueFollowStatusRequest
     * @param headers QueryClueFollowStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryClueFollowStatusResponse
     */
    queryClueFollowStatusWithOptions(request: QueryClueFollowStatusRequest, headers: QueryClueFollowStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QueryClueFollowStatusResponse>;
    /**
     * @summary 查询线索跟进状态
     *
     * @param request QueryClueFollowStatusRequest
     * @return QueryClueFollowStatusResponse
     */
    queryClueFollowStatus(request: QueryClueFollowStatusRequest): Promise<QueryClueFollowStatusResponse>;
    /**
     * @summary 查询客户群
     *
     * @param request QueryCrmGroupChatsRequest
     * @param headers QueryCrmGroupChatsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCrmGroupChatsResponse
     */
    queryCrmGroupChatsWithOptions(request: QueryCrmGroupChatsRequest, headers: QueryCrmGroupChatsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCrmGroupChatsResponse>;
    /**
     * @summary 查询客户群
     *
     * @param request QueryCrmGroupChatsRequest
     * @return QueryCrmGroupChatsResponse
     */
    queryCrmGroupChats(request: QueryCrmGroupChatsRequest): Promise<QueryCrmGroupChatsResponse>;
    /**
     * @summary 根据指定查询条件批量获取客户数据
     *
     * @param request QueryCrmPersonalCustomerRequest
     * @param headers QueryCrmPersonalCustomerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCrmPersonalCustomerResponse
     */
    queryCrmPersonalCustomerWithOptions(request: QueryCrmPersonalCustomerRequest, headers: QueryCrmPersonalCustomerHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCrmPersonalCustomerResponse>;
    /**
     * @summary 根据指定查询条件批量获取客户数据
     *
     * @param request QueryCrmPersonalCustomerRequest
     * @return QueryCrmPersonalCustomerResponse
     */
    queryCrmPersonalCustomer(request: QueryCrmPersonalCustomerRequest): Promise<QueryCrmPersonalCustomerResponse>;
    /**
     * @summary 营销服融合三方全局信息
     *
     * @param request QueryGlobalInfoRequest
     * @param headers QueryGlobalInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGlobalInfoResponse
     */
    queryGlobalInfoWithOptions(request: QueryGlobalInfoRequest, headers: QueryGlobalInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGlobalInfoResponse>;
    /**
     * @summary 营销服融合三方全局信息
     *
     * @param request QueryGlobalInfoRequest
     * @return QueryGlobalInfoResponse
     */
    queryGlobalInfo(request: QueryGlobalInfoRequest): Promise<QueryGlobalInfoResponse>;
    /**
     * @summary 查询服务窗用户基础信息
     *
     * @param request QueryOfficialAccountUserBasicInfoRequest
     * @param headers QueryOfficialAccountUserBasicInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOfficialAccountUserBasicInfoResponse
     */
    queryOfficialAccountUserBasicInfoWithOptions(request: QueryOfficialAccountUserBasicInfoRequest, headers: QueryOfficialAccountUserBasicInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOfficialAccountUserBasicInfoResponse>;
    /**
     * @summary 查询服务窗用户基础信息
     *
     * @param request QueryOfficialAccountUserBasicInfoRequest
     * @return QueryOfficialAccountUserBasicInfoResponse
     */
    queryOfficialAccountUserBasicInfo(request: QueryOfficialAccountUserBasicInfoRequest): Promise<QueryOfficialAccountUserBasicInfoResponse>;
    /**
     * @summary 根据targetId查询关系数据
     *
     * @param request QueryRelationDatasByTargetIdRequest
     * @param headers QueryRelationDatasByTargetIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRelationDatasByTargetIdResponse
     */
    queryRelationDatasByTargetIdWithOptions(targetId: string, request: QueryRelationDatasByTargetIdRequest, headers: QueryRelationDatasByTargetIdHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRelationDatasByTargetIdResponse>;
    /**
     * @summary 根据targetId查询关系数据
     *
     * @param request QueryRelationDatasByTargetIdRequest
     * @return QueryRelationDatasByTargetIdResponse
     */
    queryRelationDatasByTargetId(targetId: string, request: QueryRelationDatasByTargetIdRequest): Promise<QueryRelationDatasByTargetIdResponse>;
    /**
     * @summary 服务窗消息撤回
     *
     * @param request RecallOfficialAccountOTOMessageRequest
     * @param headers RecallOfficialAccountOTOMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RecallOfficialAccountOTOMessageResponse
     */
    recallOfficialAccountOTOMessageWithOptions(request: RecallOfficialAccountOTOMessageRequest, headers: RecallOfficialAccountOTOMessageHeaders, runtime: $Util.RuntimeOptions): Promise<RecallOfficialAccountOTOMessageResponse>;
    /**
     * @summary 服务窗消息撤回
     *
     * @param request RecallOfficialAccountOTOMessageRequest
     * @return RecallOfficialAccountOTOMessageResponse
     */
    recallOfficialAccountOTOMessage(request: RecallOfficialAccountOTOMessageRequest): Promise<RecallOfficialAccountOTOMessageResponse>;
    /**
     * @summary 服务窗单发接口，指定消息接收人发送
     *
     * @param request SendOfficialAccountOTOMessageRequest
     * @param headers SendOfficialAccountOTOMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendOfficialAccountOTOMessageResponse
     */
    sendOfficialAccountOTOMessageWithOptions(request: SendOfficialAccountOTOMessageRequest, headers: SendOfficialAccountOTOMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendOfficialAccountOTOMessageResponse>;
    /**
     * @summary 服务窗单发接口，指定消息接收人发送
     *
     * @param request SendOfficialAccountOTOMessageRequest
     * @return SendOfficialAccountOTOMessageResponse
     */
    sendOfficialAccountOTOMessage(request: SendOfficialAccountOTOMessageRequest): Promise<SendOfficialAccountOTOMessageResponse>;
    /**
     * @summary 个人应用发送服务窗消息
     *
     * @param request SendOfficialAccountSNSMessageRequest
     * @param headers SendOfficialAccountSNSMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendOfficialAccountSNSMessageResponse
     */
    sendOfficialAccountSNSMessageWithOptions(request: SendOfficialAccountSNSMessageRequest, headers: SendOfficialAccountSNSMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendOfficialAccountSNSMessageResponse>;
    /**
     * @summary 个人应用发送服务窗消息
     *
     * @param request SendOfficialAccountSNSMessageRequest
     * @return SendOfficialAccountSNSMessageResponse
     */
    sendOfficialAccountSNSMessage(request: SendOfficialAccountSNSMessageRequest): Promise<SendOfficialAccountSNSMessageResponse>;
    /**
     * @summary 服务窗消息群发
     *
     * @param request ServiceWindowMessageBatchPushRequest
     * @param headers ServiceWindowMessageBatchPushHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ServiceWindowMessageBatchPushResponse
     */
    serviceWindowMessageBatchPushWithOptions(request: ServiceWindowMessageBatchPushRequest, headers: ServiceWindowMessageBatchPushHeaders, runtime: $Util.RuntimeOptions): Promise<ServiceWindowMessageBatchPushResponse>;
    /**
     * @summary 服务窗消息群发
     *
     * @param request ServiceWindowMessageBatchPushRequest
     * @return ServiceWindowMessageBatchPushResponse
     */
    serviceWindowMessageBatchPush(request: ServiceWindowMessageBatchPushRequest): Promise<ServiceWindowMessageBatchPushResponse>;
    /**
     * @summary 更新crm个人客户（或企业客户）
     *
     * @param request UpdateCrmPersonalCustomerRequest
     * @param headers UpdateCrmPersonalCustomerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateCrmPersonalCustomerResponse
     */
    updateCrmPersonalCustomerWithOptions(request: UpdateCrmPersonalCustomerRequest, headers: UpdateCrmPersonalCustomerHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateCrmPersonalCustomerResponse>;
    /**
     * @summary 更新crm个人客户（或企业客户）
     *
     * @param request UpdateCrmPersonalCustomerRequest
     * @return UpdateCrmPersonalCustomerResponse
     */
    updateCrmPersonalCustomer(request: UpdateCrmPersonalCustomerRequest): Promise<UpdateCrmPersonalCustomerResponse>;
    /**
     * @summary 更新群组
     *
     * @param request UpdateGroupSetRequest
     * @param headers UpdateGroupSetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateGroupSetResponse
     */
    updateGroupSetWithOptions(request: UpdateGroupSetRequest, headers: UpdateGroupSetHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupSetResponse>;
    /**
     * @summary 更新群组
     *
     * @param request UpdateGroupSetRequest
     * @return UpdateGroupSetResponse
     */
    updateGroupSet(request: UpdateGroupSetRequest): Promise<UpdateGroupSetResponse>;
    /**
     * @summary 增量同步导航数据
     *
     * @param request UpdateMenuDataRequest
     * @param headers UpdateMenuDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateMenuDataResponse
     */
    updateMenuDataWithOptions(request: UpdateMenuDataRequest, headers: UpdateMenuDataHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateMenuDataResponse>;
    /**
     * @summary 增量同步导航数据
     *
     * @param request UpdateMenuDataRequest
     * @return UpdateMenuDataResponse
     */
    updateMenuData(request: UpdateMenuDataRequest): Promise<UpdateMenuDataResponse>;
    /**
     * @summary 关系模型表结构更新字段
     *
     * @param request UpdateRelationMetaFieldRequest
     * @param headers UpdateRelationMetaFieldHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateRelationMetaFieldResponse
     */
    updateRelationMetaFieldWithOptions(request: UpdateRelationMetaFieldRequest, headers: UpdateRelationMetaFieldHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRelationMetaFieldResponse>;
    /**
     * @summary 关系模型表结构更新字段
     *
     * @param request UpdateRelationMetaFieldRequest
     * @return UpdateRelationMetaFieldResponse
     */
    updateRelationMetaField(request: UpdateRelationMetaFieldRequest): Promise<UpdateRelationMetaFieldResponse>;
}
