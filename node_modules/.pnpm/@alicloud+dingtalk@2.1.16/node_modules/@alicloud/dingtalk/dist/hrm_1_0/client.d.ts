/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddHrmPreentryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryRequest extends $tea.Model {
    agentId?: number;
    groups?: AddHrmPreentryRequestGroups[];
    mobile?: string;
    name?: string;
    needSendPreEntryMsg?: boolean;
    preEntryTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryResponseBody extends $tea.Model {
    tmpUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddHrmPreentryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceMarketManagerResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceMarketManagerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeviceMarketManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceMarketOrderManagerResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceMarketOrderManagerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeviceMarketOrderManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ECertQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ECertQueryRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ECertQueryResponseBody extends $tea.Model {
    certNO?: string;
    employJobId?: string;
    employJobIdLabel?: string;
    employPositionId?: string;
    employPositionIdLabel?: string;
    employPositionRankId?: string;
    employPositionRankIdLabel?: string;
    hiredDate?: string;
    lastWorkDay?: string;
    mainDeptId?: number;
    mainDeptName?: string;
    name?: string;
    realName?: string;
    terminationReasonPassive?: string[];
    terminationReasonVoluntary?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ECertQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ECertQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EmployeeAttachmentUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EmployeeAttachmentUpdateRequest extends $tea.Model {
    appAgentId?: number;
    fieldCode?: string;
    fileSuffix?: string;
    mediaId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EmployeeAttachmentUpdateResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EmployeeAttachmentUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EmployeeAttachmentUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignRollbackHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignRollbackRequest extends $tea.Model {
    optUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignRollbackResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignRollbackResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignRollbackResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmployeeRosterByFieldHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmployeeRosterByFieldRequest extends $tea.Model {
    appAgentId?: number;
    fieldFilterList?: string[];
    text2SelectConvert?: boolean;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmployeeRosterByFieldResponseBody extends $tea.Model {
    result?: GetEmployeeRosterByFieldResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmployeeRosterByFieldResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetEmployeeRosterByFieldResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmBenefitQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmBenefitQueryRequest extends $tea.Model {
    benefitCodes?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmBenefitQueryResponseBody extends $tea.Model {
    result?: any;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmBenefitQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HrmBenefitQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendRequest extends $tea.Model {
    mail?: HrmMailSendRequestMail;
    operator?: HrmMailSendRequestOperator;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HrmMailSendResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMokaEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMokaEventRequest extends $tea.Model {
    bizId?: string;
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMokaEventResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMokaEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HrmMokaEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMokaOapiHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMokaOapiRequest extends $tea.Model {
    apiCode?: string;
    params?: any;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMokaOapiResponseBody extends $tea.Model {
    bizSuccess?: boolean;
    errorCode?: string;
    errorMsg?: string;
    result?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMokaOapiResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HrmMokaOapiResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessRegularHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessRegularRequest extends $tea.Model {
    operationId?: string;
    regularDate?: number;
    remark?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessRegularResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessRegularResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HrmProcessRegularResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessTransferHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessTransferRequest extends $tea.Model {
    deptIdsAfterTransfer?: number[];
    jobIdAfterTransfer?: string;
    mainDeptIdAfterTransfer?: number;
    operateUserId?: string;
    positionIdAfterTransfer?: string;
    positionLevelAfterTransfer?: string;
    positionNameAfterTransfer?: string;
    rankIdAfterTransfer?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessTransferResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessTransferResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HrmProcessTransferResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessUpdateTerminationInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessUpdateTerminationInfoRequest extends $tea.Model {
    dismissionMemo?: string;
    lastWorkDate?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessUpdateTerminationInfoResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmProcessUpdateTerminationInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HrmProcessUpdateTerminationInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmPtsServiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmPtsServiceRequest extends $tea.Model {
    env?: string;
    method?: string;
    outerId?: string;
    params?: any;
    path?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmPtsServiceResponseBody extends $tea.Model {
    bizSuccess?: boolean;
    errorCode?: string;
    errorMsg?: string;
    result?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmPtsServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HrmPtsServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataDeleteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataDeleteRequest extends $tea.Model {
    body?: MasterDataDeleteRequestBody[];
    tenantId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataDeleteResponseBody extends $tea.Model {
    allSuccess?: boolean;
    failResult?: MasterDataDeleteResponseBodyFailResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataDeleteResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MasterDataDeleteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryRequest extends $tea.Model {
    bizUK?: string;
    maxResults?: number;
    nextToken?: number;
    optUserId?: string;
    queryParams?: MasterDataQueryRequestQueryParams[];
    relationIds?: string[];
    scopeCode?: string;
    tenantId?: number;
    viewEntityCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: number;
    result?: MasterDataQueryResponseBodyResult[];
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MasterDataQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveRequest extends $tea.Model {
    body?: MasterDataSaveRequestBody[];
    tenantId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveResponseBody extends $tea.Model {
    allSuccess?: boolean;
    failResult?: MasterDataSaveResponseBodyFailResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MasterDataSaveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyRequest extends $tea.Model {
    entityCode?: string;
    scopeCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyResponseBody extends $tea.Model {
    result?: MasterDataTenantQueyResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MasterDataTenantQueyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDatasQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDatasQueryRequest extends $tea.Model {
    bizUK?: string;
    maxResults?: number;
    nextToken?: number;
    queryParams?: MasterDatasQueryRequestQueryParams[];
    relationIds?: string[];
    scopeCode?: string;
    tenantId?: number;
    viewEntityCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDatasQueryResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: number;
    result?: MasterDatasQueryResponseBodyResult[];
    success?: boolean;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDatasQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MasterDatasQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    operateUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryCustomEntryProcessesResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCustomEntryProcessesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDismissionStaffIdListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDismissionStaffIdListRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDismissionStaffIdListResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: number;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDismissionStaffIdListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDismissionStaffIdListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoRequest extends $tea.Model {
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoShrinkRequest extends $tea.Model {
    userIdListShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoResponseBody extends $tea.Model {
    result?: QueryHrmEmployeeDismissionInfoResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryHrmEmployeeDismissionInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    rankCategoryId?: string;
    rankCode?: string;
    rankName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryJobRanksResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryJobRanksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsRequest extends $tea.Model {
    jobName?: string;
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryJobsResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryJobsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsRequest extends $tea.Model {
    deptId?: number;
    inCategoryIds?: string[];
    inPositionIds?: string[];
    positionName?: string;
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryPositionsResponseBodyList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryPositionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RosterMetaAvailableFieldListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RosterMetaAvailableFieldListRequest extends $tea.Model {
    appAgentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RosterMetaAvailableFieldListResponseBody extends $tea.Model {
    result?: RosterMetaAvailableFieldListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RosterMetaAvailableFieldListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RosterMetaAvailableFieldListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RosterMetaFieldOptionsUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RosterMetaFieldOptionsUpdateRequest extends $tea.Model {
    appAgentId?: number;
    fieldCode?: string;
    groupId?: string;
    labels?: string[];
    modifyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RosterMetaFieldOptionsUpdateResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RosterMetaFieldOptionsUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RosterMetaFieldOptionsUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendIsvCardMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendIsvCardMessageRequest extends $tea.Model {
    agentId?: number;
    bizId?: string;
    messageType?: string;
    receiverUserIds?: string[];
    sceneType?: string;
    scope?: string;
    senderUserId?: string;
    valueMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendIsvCardMessageResponseBody extends $tea.Model {
    errorCode?: string;
    errorMsg?: string;
    hrmInteractiveCardSendResult?: SendIsvCardMessageResponseBodyHrmInteractiveCardSendResult;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendIsvCardMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendIsvCardMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskInitHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskInitRequest extends $tea.Model {
    category?: string;
    claimTime?: number;
    description?: string;
    finishTime?: number;
    outerId?: string;
    status?: string;
    title?: string;
    userId?: string;
    solutionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskInitResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskInitResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SolutionTaskInitResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskSaveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskSaveRequest extends $tea.Model {
    claimTime?: number;
    description?: string;
    finishTime?: number;
    outerId?: string;
    solutionInstanceId?: string;
    startTime?: number;
    status?: string;
    taskType?: string;
    templateOuterId?: string;
    title?: string;
    userId?: string;
    solutionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskSaveResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SolutionTaskSaveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SolutionTaskSaveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateRequest extends $tea.Model {
    delete?: boolean;
    des?: string;
    ext?: string;
    name?: string;
    optUserId?: string;
    outerId?: string;
    taskScopeVO?: SyncTaskTemplateRequestTaskScopeVO;
    taskType?: string;
    solutionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncTaskTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateIsvCardMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateIsvCardMessageRequest extends $tea.Model {
    agentId?: number;
    bizId?: string;
    messageType?: string;
    sceneType?: string;
    scope?: string;
    valueMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateIsvCardMessageResponseBody extends $tea.Model {
    errorCode?: string;
    errorMsg?: string;
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateIsvCardMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateIsvCardMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryRequestGroupsSectionsEmpFieldVOList extends $tea.Model {
    fieldCode?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryRequestGroupsSections extends $tea.Model {
    empFieldVOList?: AddHrmPreentryRequestGroupsSectionsEmpFieldVOList[];
    oldIndex?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddHrmPreentryRequestGroups extends $tea.Model {
    groupId?: string;
    sections?: AddHrmPreentryRequestGroupsSections[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmployeeRosterByFieldResponseBodyResultFieldDataListFieldValueList extends $tea.Model {
    itemIndex?: number;
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmployeeRosterByFieldResponseBodyResultFieldDataList extends $tea.Model {
    fieldCode?: string;
    fieldName?: string;
    fieldValueList?: GetEmployeeRosterByFieldResponseBodyResultFieldDataListFieldValueList[];
    groupId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEmployeeRosterByFieldResponseBodyResult extends $tea.Model {
    corpId?: string;
    fieldDataList?: GetEmployeeRosterByFieldResponseBodyResultFieldDataList[];
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendRequestMailAttachments extends $tea.Model {
    name?: string;
    path?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendRequestMailMeetingAlarm extends $tea.Model {
    alarmDesc?: string;
    alarmMinutes?: number;
    alarmSummary?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendRequestMailMeetingAttendees extends $tea.Model {
    address?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendRequestMailMeetingOrganizer extends $tea.Model {
    address?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendRequestMailMeeting extends $tea.Model {
    alarm?: HrmMailSendRequestMailMeetingAlarm;
    attendees?: HrmMailSendRequestMailMeetingAttendees[];
    description?: string;
    endTime?: number;
    location?: string;
    method?: string;
    organizer?: HrmMailSendRequestMailMeetingOrganizer;
    sequence?: number;
    startTime?: number;
    summary?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendRequestMail extends $tea.Model {
    attachments?: HrmMailSendRequestMailAttachments[];
    bccAddress?: string;
    ccAddress?: string;
    content?: string;
    meeting?: HrmMailSendRequestMailMeeting;
    receiverAddress?: string;
    senderAlias?: string;
    subject?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HrmMailSendRequestOperator extends $tea.Model {
    bizId?: string;
    mailAccountType?: string;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataDeleteRequestBodyFieldList extends $tea.Model {
    name?: string;
    valueStr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataDeleteRequestBodyScope extends $tea.Model {
    scopeCode?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataDeleteRequestBody extends $tea.Model {
    bizTime?: number;
    bizUk?: string;
    entityCode?: string;
    fieldList?: MasterDataDeleteRequestBodyFieldList[];
    scope?: MasterDataDeleteRequestBodyScope;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataDeleteResponseBodyFailResult extends $tea.Model {
    bizUK?: string;
    errorCode?: string;
    errorMsg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryRequestQueryParamsConditionList extends $tea.Model {
    operate?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryRequestQueryParams extends $tea.Model {
    conditionList?: MasterDataQueryRequestQueryParamsConditionList[];
    fieldCode?: string;
    joinType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponseBodyResultViewEntityFieldVOListFieldDataVO extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponseBodyResultViewEntityFieldVOList extends $tea.Model {
    fieldCode?: string;
    fieldDataVO?: MasterDataQueryResponseBodyResultViewEntityFieldVOListFieldDataVO;
    fieldName?: string;
    fieldType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataQueryResponseBodyResult extends $tea.Model {
    outerId?: string;
    relationId?: string;
    scopeCode?: string;
    viewEntityCode?: string;
    viewEntityFieldVOList?: MasterDataQueryResponseBodyResultViewEntityFieldVOList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveRequestBodyFieldList extends $tea.Model {
    name?: string;
    valueStr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveRequestBodyScope extends $tea.Model {
    scopeCode?: string;
    version?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveRequestBody extends $tea.Model {
    bizTime?: number;
    bizUk?: string;
    entityCode?: string;
    fieldList?: MasterDataSaveRequestBodyFieldList[];
    scope?: MasterDataSaveRequestBodyScope;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataSaveResponseBodyFailResult extends $tea.Model {
    bizUk?: string;
    errorCode?: string;
    errorMsg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDataTenantQueyResponseBodyResult extends $tea.Model {
    hasData?: boolean;
    integrateDataAuth?: boolean;
    name?: string;
    readAuth?: boolean;
    tenantId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDatasQueryRequestQueryParamsConditionList extends $tea.Model {
    operate?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDatasQueryRequestQueryParams extends $tea.Model {
    conditionList?: MasterDatasQueryRequestQueryParamsConditionList[];
    fieldCode?: string;
    joinType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDatasQueryResponseBodyResultViewEntityFieldVOListFieldDataVO extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDatasQueryResponseBodyResultViewEntityFieldVOList extends $tea.Model {
    fieldCode?: string;
    fieldDataVO?: MasterDatasQueryResponseBodyResultViewEntityFieldVOListFieldDataVO;
    fieldName?: string;
    fieldType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MasterDatasQueryResponseBodyResult extends $tea.Model {
    objId?: string;
    relationId?: string;
    scopeCode?: string;
    viewEntityCode?: string;
    viewEntityFieldVOList?: MasterDatasQueryResponseBodyResultViewEntityFieldVOList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomEntryProcessesResponseBodyList extends $tea.Model {
    formDesc?: string;
    formId?: string;
    formName?: string;
    shortUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoResponseBodyResultDeptList extends $tea.Model {
    deptId?: number;
    deptPath?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHrmEmployeeDismissionInfoResponseBodyResult extends $tea.Model {
    deptList?: QueryHrmEmployeeDismissionInfoResponseBodyResultDeptList[];
    handoverUserId?: string;
    lastWorkDay?: number;
    mainDeptId?: number;
    mainDeptName?: string;
    name?: string;
    passiveReason?: string[];
    preStatus?: number;
    reasonMemo?: string;
    status?: number;
    userId?: string;
    voluntaryReason?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobRanksResponseBodyList extends $tea.Model {
    maxJobGrade?: number;
    minJobGrade?: number;
    rankCategoryId?: string;
    rankCode?: string;
    rankDescription?: string;
    rankId?: string;
    rankName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobsResponseBodyList extends $tea.Model {
    jobDescription?: string;
    jobId?: string;
    jobName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPositionsResponseBodyList extends $tea.Model {
    jobId?: string;
    positionCategoryId?: string;
    positionDes?: string;
    positionId?: string;
    positionName?: string;
    rankIdList?: string[];
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RosterMetaAvailableFieldListResponseBodyResult extends $tea.Model {
    fieldCode?: string;
    fieldName?: string;
    fieldType?: string;
    optionText?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendIsvCardMessageResponseBodyHrmInteractiveCardSendResult extends $tea.Model {
    bizId?: string;
    errorCode?: string;
    errorMsg?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTaskTemplateRequestTaskScopeVO extends $tea.Model {
    deptIds?: number[];
    positionIds?: string[];
    roleIds?: string[];
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 智能人事添加待入职员工信息(支持花名册数据和分组明细更新)
     *
     * @param request AddHrmPreentryRequest
     * @param headers AddHrmPreentryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddHrmPreentryResponse
     */
    addHrmPreentryWithOptions(request: AddHrmPreentryRequest, headers: AddHrmPreentryHeaders, runtime: $Util.RuntimeOptions): Promise<AddHrmPreentryResponse>;
    /**
     * @summary 智能人事添加待入职员工信息(支持花名册数据和分组明细更新)
     *
     * @param request AddHrmPreentryRequest
     * @return AddHrmPreentryResponse
     */
    addHrmPreentry(request: AddHrmPreentryRequest): Promise<AddHrmPreentryResponse>;
    /**
     * @summary 智能人事设备市场管理
     *
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeviceMarketManagerResponse
     */
    deviceMarketManagerWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeviceMarketManagerResponse>;
    /**
     * @summary 智能人事设备市场管理
     *
     * @return DeviceMarketManagerResponse
     */
    deviceMarketManager(): Promise<DeviceMarketManagerResponse>;
    /**
     * @summary 智能人事设备定向管理接口
     *
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeviceMarketOrderManagerResponse
     */
    deviceMarketOrderManagerWithOptions(headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<DeviceMarketOrderManagerResponse>;
    /**
     * @summary 智能人事设备定向管理接口
     *
     * @return DeviceMarketOrderManagerResponse
     */
    deviceMarketOrderManager(): Promise<DeviceMarketOrderManagerResponse>;
    /**
     * @summary e签宝专有查询证件接口
     *
     * @param request ECertQueryRequest
     * @param headers ECertQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ECertQueryResponse
     */
    eCertQueryWithOptions(request: ECertQueryRequest, headers: ECertQueryHeaders, runtime: $Util.RuntimeOptions): Promise<ECertQueryResponse>;
    /**
     * @summary e签宝专有查询证件接口
     *
     * @param request ECertQueryRequest
     * @return ECertQueryResponse
     */
    eCertQuery(request: ECertQueryRequest): Promise<ECertQueryResponse>;
    /**
     * @summary 智能人事员工档案附件更新
     *
     * @param request EmployeeAttachmentUpdateRequest
     * @param headers EmployeeAttachmentUpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EmployeeAttachmentUpdateResponse
     */
    employeeAttachmentUpdateWithOptions(request: EmployeeAttachmentUpdateRequest, headers: EmployeeAttachmentUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<EmployeeAttachmentUpdateResponse>;
    /**
     * @summary 智能人事员工档案附件更新
     *
     * @param request EmployeeAttachmentUpdateRequest
     * @return EmployeeAttachmentUpdateResponse
     */
    employeeAttachmentUpdate(request: EmployeeAttachmentUpdateRequest): Promise<EmployeeAttachmentUpdateResponse>;
    /**
     * @summary 人事高级合同管理回退
     *
     * @param request EsignRollbackRequest
     * @param headers EsignRollbackHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EsignRollbackResponse
     */
    esignRollbackWithOptions(request: EsignRollbackRequest, headers: EsignRollbackHeaders, runtime: $Util.RuntimeOptions): Promise<EsignRollbackResponse>;
    /**
     * @summary 人事高级合同管理回退
     *
     * @param request EsignRollbackRequest
     * @return EsignRollbackResponse
     */
    esignRollback(request: EsignRollbackRequest): Promise<EsignRollbackResponse>;
    /**
     * @summary 获取员工花名册指定字段的信息，支持明细分组字段
     *
     * @param request GetEmployeeRosterByFieldRequest
     * @param headers GetEmployeeRosterByFieldHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetEmployeeRosterByFieldResponse
     */
    getEmployeeRosterByFieldWithOptions(request: GetEmployeeRosterByFieldRequest, headers: GetEmployeeRosterByFieldHeaders, runtime: $Util.RuntimeOptions): Promise<GetEmployeeRosterByFieldResponse>;
    /**
     * @summary 获取员工花名册指定字段的信息，支持明细分组字段
     *
     * @param request GetEmployeeRosterByFieldRequest
     * @return GetEmployeeRosterByFieldResponse
     */
    getEmployeeRosterByField(request: GetEmployeeRosterByFieldRequest): Promise<GetEmployeeRosterByFieldResponse>;
    /**
     * @summary 智能人事权益查询
     *
     * @param request HrmBenefitQueryRequest
     * @param headers HrmBenefitQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return HrmBenefitQueryResponse
     */
    hrmBenefitQueryWithOptions(request: HrmBenefitQueryRequest, headers: HrmBenefitQueryHeaders, runtime: $Util.RuntimeOptions): Promise<HrmBenefitQueryResponse>;
    /**
     * @summary 智能人事权益查询
     *
     * @param request HrmBenefitQueryRequest
     * @return HrmBenefitQueryResponse
     */
    hrmBenefitQuery(request: HrmBenefitQueryRequest): Promise<HrmBenefitQueryResponse>;
    /**
     * @summary 智能人事邮件发送
     *
     * @param request HrmMailSendRequest
     * @param headers HrmMailSendHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return HrmMailSendResponse
     */
    hrmMailSendWithOptions(request: HrmMailSendRequest, headers: HrmMailSendHeaders, runtime: $Util.RuntimeOptions): Promise<HrmMailSendResponse>;
    /**
     * @summary 智能人事邮件发送
     *
     * @param request HrmMailSendRequest
     * @return HrmMailSendResponse
     */
    hrmMailSend(request: HrmMailSendRequest): Promise<HrmMailSendResponse>;
    /**
     * @summary 人事2.0支持Moka事件转发
     *
     * @param request HrmMokaEventRequest
     * @param headers HrmMokaEventHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return HrmMokaEventResponse
     */
    hrmMokaEventWithOptions(request: HrmMokaEventRequest, headers: HrmMokaEventHeaders, runtime: $Util.RuntimeOptions): Promise<HrmMokaEventResponse>;
    /**
     * @summary 人事2.0支持Moka事件转发
     *
     * @param request HrmMokaEventRequest
     * @return HrmMokaEventResponse
     */
    hrmMokaEvent(request: HrmMokaEventRequest): Promise<HrmMokaEventResponse>;
    /**
     * @summary 人事2.0支持Moka接口转发
     *
     * @param request HrmMokaOapiRequest
     * @param headers HrmMokaOapiHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return HrmMokaOapiResponse
     */
    hrmMokaOapiWithOptions(request: HrmMokaOapiRequest, headers: HrmMokaOapiHeaders, runtime: $Util.RuntimeOptions): Promise<HrmMokaOapiResponse>;
    /**
     * @summary 人事2.0支持Moka接口转发
     *
     * @param request HrmMokaOapiRequest
     * @return HrmMokaOapiResponse
     */
    hrmMokaOapi(request: HrmMokaOapiRequest): Promise<HrmMokaOapiResponse>;
    /**
     * @summary 智能人事转正接口
     *
     * @param request HrmProcessRegularRequest
     * @param headers HrmProcessRegularHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return HrmProcessRegularResponse
     */
    hrmProcessRegularWithOptions(request: HrmProcessRegularRequest, headers: HrmProcessRegularHeaders, runtime: $Util.RuntimeOptions): Promise<HrmProcessRegularResponse>;
    /**
     * @summary 智能人事转正接口
     *
     * @param request HrmProcessRegularRequest
     * @return HrmProcessRegularResponse
     */
    hrmProcessRegular(request: HrmProcessRegularRequest): Promise<HrmProcessRegularResponse>;
    /**
     * @summary 智能人事调岗接口
     *
     * @param request HrmProcessTransferRequest
     * @param headers HrmProcessTransferHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return HrmProcessTransferResponse
     */
    hrmProcessTransferWithOptions(request: HrmProcessTransferRequest, headers: HrmProcessTransferHeaders, runtime: $Util.RuntimeOptions): Promise<HrmProcessTransferResponse>;
    /**
     * @summary 智能人事调岗接口
     *
     * @param request HrmProcessTransferRequest
     * @return HrmProcessTransferResponse
     */
    hrmProcessTransfer(request: HrmProcessTransferRequest): Promise<HrmProcessTransferResponse>;
    /**
     * @summary 修改员工最后一次离职信息
     *
     * @param request HrmProcessUpdateTerminationInfoRequest
     * @param headers HrmProcessUpdateTerminationInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return HrmProcessUpdateTerminationInfoResponse
     */
    hrmProcessUpdateTerminationInfoWithOptions(request: HrmProcessUpdateTerminationInfoRequest, headers: HrmProcessUpdateTerminationInfoHeaders, runtime: $Util.RuntimeOptions): Promise<HrmProcessUpdateTerminationInfoResponse>;
    /**
     * @summary 修改员工最后一次离职信息
     *
     * @param request HrmProcessUpdateTerminationInfoRequest
     * @return HrmProcessUpdateTerminationInfoResponse
     */
    hrmProcessUpdateTerminationInfo(request: HrmProcessUpdateTerminationInfoRequest): Promise<HrmProcessUpdateTerminationInfoResponse>;
    /**
     * @summary 智能人事pts能力调用
     *
     * @param request HrmPtsServiceRequest
     * @param headers HrmPtsServiceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return HrmPtsServiceResponse
     */
    hrmPtsServiceWithOptions(request: HrmPtsServiceRequest, headers: HrmPtsServiceHeaders, runtime: $Util.RuntimeOptions): Promise<HrmPtsServiceResponse>;
    /**
     * @summary 智能人事pts能力调用
     *
     * @param request HrmPtsServiceRequest
     * @return HrmPtsServiceResponse
     */
    hrmPtsService(request: HrmPtsServiceRequest): Promise<HrmPtsServiceResponse>;
    /**
     * @summary 智能人事主数据删除服务
     *
     * @param request MasterDataDeleteRequest
     * @param headers MasterDataDeleteHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MasterDataDeleteResponse
     */
    masterDataDeleteWithOptions(request: MasterDataDeleteRequest, headers: MasterDataDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<MasterDataDeleteResponse>;
    /**
     * @summary 智能人事主数据删除服务
     *
     * @param request MasterDataDeleteRequest
     * @return MasterDataDeleteResponse
     */
    masterDataDelete(request: MasterDataDeleteRequest): Promise<MasterDataDeleteResponse>;
    /**
     * @summary 智能人事主数据查询服务
     *
     * @param request MasterDataQueryRequest
     * @param headers MasterDataQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MasterDataQueryResponse
     */
    masterDataQueryWithOptions(request: MasterDataQueryRequest, headers: MasterDataQueryHeaders, runtime: $Util.RuntimeOptions): Promise<MasterDataQueryResponse>;
    /**
     * @summary 智能人事主数据查询服务
     *
     * @param request MasterDataQueryRequest
     * @return MasterDataQueryResponse
     */
    masterDataQuery(request: MasterDataQueryRequest): Promise<MasterDataQueryResponse>;
    /**
     * @summary 智能人事主数据保存服务
     *
     * @param request MasterDataSaveRequest
     * @param headers MasterDataSaveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MasterDataSaveResponse
     */
    masterDataSaveWithOptions(request: MasterDataSaveRequest, headers: MasterDataSaveHeaders, runtime: $Util.RuntimeOptions): Promise<MasterDataSaveResponse>;
    /**
     * @summary 智能人事主数据保存服务
     *
     * @param request MasterDataSaveRequest
     * @return MasterDataSaveResponse
     */
    masterDataSave(request: MasterDataSaveRequest): Promise<MasterDataSaveResponse>;
    /**
     * @summary 主数据中拥有某个领域数据的租户信息查询
     *
     * @param request MasterDataTenantQueyRequest
     * @param headers MasterDataTenantQueyHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MasterDataTenantQueyResponse
     */
    masterDataTenantQueyWithOptions(request: MasterDataTenantQueyRequest, headers: MasterDataTenantQueyHeaders, runtime: $Util.RuntimeOptions): Promise<MasterDataTenantQueyResponse>;
    /**
     * @summary 主数据中拥有某个领域数据的租户信息查询
     *
     * @param request MasterDataTenantQueyRequest
     * @return MasterDataTenantQueyResponse
     */
    masterDataTenantQuey(request: MasterDataTenantQueyRequest): Promise<MasterDataTenantQueyResponse>;
    /**
     * @summary 智能人事主数据查询服务
     *
     * @param request MasterDatasQueryRequest
     * @param headers MasterDatasQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MasterDatasQueryResponse
     */
    masterDatasQueryWithOptions(request: MasterDatasQueryRequest, headers: MasterDatasQueryHeaders, runtime: $Util.RuntimeOptions): Promise<MasterDatasQueryResponse>;
    /**
     * @summary 智能人事主数据查询服务
     *
     * @param request MasterDatasQueryRequest
     * @return MasterDatasQueryResponse
     */
    masterDatasQuery(request: MasterDatasQueryRequest): Promise<MasterDatasQueryResponse>;
    /**
     * @summary 自定义入职流程数据查询
     *
     * @param request QueryCustomEntryProcessesRequest
     * @param headers QueryCustomEntryProcessesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCustomEntryProcessesResponse
     */
    queryCustomEntryProcessesWithOptions(request: QueryCustomEntryProcessesRequest, headers: QueryCustomEntryProcessesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCustomEntryProcessesResponse>;
    /**
     * @summary 自定义入职流程数据查询
     *
     * @param request QueryCustomEntryProcessesRequest
     * @return QueryCustomEntryProcessesResponse
     */
    queryCustomEntryProcesses(request: QueryCustomEntryProcessesRequest): Promise<QueryCustomEntryProcessesResponse>;
    /**
     * @summary 查询企业已离职员工列表
     *
     * @param request QueryDismissionStaffIdListRequest
     * @param headers QueryDismissionStaffIdListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDismissionStaffIdListResponse
     */
    queryDismissionStaffIdListWithOptions(request: QueryDismissionStaffIdListRequest, headers: QueryDismissionStaffIdListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDismissionStaffIdListResponse>;
    /**
     * @summary 查询企业已离职员工列表
     *
     * @param request QueryDismissionStaffIdListRequest
     * @return QueryDismissionStaffIdListResponse
     */
    queryDismissionStaffIdList(request: QueryDismissionStaffIdListRequest): Promise<QueryDismissionStaffIdListResponse>;
    /**
     * @summary 根据传入的staffId列表，批量查询员工的离职信息
     *
     * @param tmpReq QueryHrmEmployeeDismissionInfoRequest
     * @param headers QueryHrmEmployeeDismissionInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryHrmEmployeeDismissionInfoResponse
     */
    queryHrmEmployeeDismissionInfoWithOptions(tmpReq: QueryHrmEmployeeDismissionInfoRequest, headers: QueryHrmEmployeeDismissionInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHrmEmployeeDismissionInfoResponse>;
    /**
     * @summary 根据传入的staffId列表，批量查询员工的离职信息
     *
     * @param request QueryHrmEmployeeDismissionInfoRequest
     * @return QueryHrmEmployeeDismissionInfoResponse
     */
    queryHrmEmployeeDismissionInfo(request: QueryHrmEmployeeDismissionInfoRequest): Promise<QueryHrmEmployeeDismissionInfoResponse>;
    /**
     * @summary 分页查询企业的职级信息
     *
     * @param request QueryJobRanksRequest
     * @param headers QueryJobRanksHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryJobRanksResponse
     */
    queryJobRanksWithOptions(request: QueryJobRanksRequest, headers: QueryJobRanksHeaders, runtime: $Util.RuntimeOptions): Promise<QueryJobRanksResponse>;
    /**
     * @summary 分页查询企业的职级信息
     *
     * @param request QueryJobRanksRequest
     * @return QueryJobRanksResponse
     */
    queryJobRanks(request: QueryJobRanksRequest): Promise<QueryJobRanksResponse>;
    /**
     * @summary 分页查询企业职务信息
     *
     * @param request QueryJobsRequest
     * @param headers QueryJobsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryJobsResponse
     */
    queryJobsWithOptions(request: QueryJobsRequest, headers: QueryJobsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryJobsResponse>;
    /**
     * @summary 分页查询企业职务信息
     *
     * @param request QueryJobsRequest
     * @return QueryJobsResponse
     */
    queryJobs(request: QueryJobsRequest): Promise<QueryJobsResponse>;
    /**
     * @summary 分页查询企业职位信息
     *
     * @param request QueryPositionsRequest
     * @param headers QueryPositionsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryPositionsResponse
     */
    queryPositionsWithOptions(request: QueryPositionsRequest, headers: QueryPositionsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPositionsResponse>;
    /**
     * @summary 分页查询企业职位信息
     *
     * @param request QueryPositionsRequest
     * @return QueryPositionsResponse
     */
    queryPositions(request: QueryPositionsRequest): Promise<QueryPositionsResponse>;
    /**
     * @summary 查询花名册中有权限的字段列表
     *
     * @param request RosterMetaAvailableFieldListRequest
     * @param headers RosterMetaAvailableFieldListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RosterMetaAvailableFieldListResponse
     */
    rosterMetaAvailableFieldListWithOptions(request: RosterMetaAvailableFieldListRequest, headers: RosterMetaAvailableFieldListHeaders, runtime: $Util.RuntimeOptions): Promise<RosterMetaAvailableFieldListResponse>;
    /**
     * @summary 查询花名册中有权限的字段列表
     *
     * @param request RosterMetaAvailableFieldListRequest
     * @return RosterMetaAvailableFieldListResponse
     */
    rosterMetaAvailableFieldList(request: RosterMetaAvailableFieldListRequest): Promise<RosterMetaAvailableFieldListResponse>;
    /**
     * @summary 智能人事花名册字段选项修改
     *
     * @param request RosterMetaFieldOptionsUpdateRequest
     * @param headers RosterMetaFieldOptionsUpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RosterMetaFieldOptionsUpdateResponse
     */
    rosterMetaFieldOptionsUpdateWithOptions(request: RosterMetaFieldOptionsUpdateRequest, headers: RosterMetaFieldOptionsUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<RosterMetaFieldOptionsUpdateResponse>;
    /**
     * @summary 智能人事花名册字段选项修改
     *
     * @param request RosterMetaFieldOptionsUpdateRequest
     * @return RosterMetaFieldOptionsUpdateResponse
     */
    rosterMetaFieldOptionsUpdate(request: RosterMetaFieldOptionsUpdateRequest): Promise<RosterMetaFieldOptionsUpdateResponse>;
    /**
     * @summary ISV发送卡片消息
     *
     * @param request SendIsvCardMessageRequest
     * @param headers SendIsvCardMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendIsvCardMessageResponse
     */
    sendIsvCardMessageWithOptions(request: SendIsvCardMessageRequest, headers: SendIsvCardMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendIsvCardMessageResponse>;
    /**
     * @summary ISV发送卡片消息
     *
     * @param request SendIsvCardMessageRequest
     * @return SendIsvCardMessageResponse
     */
    sendIsvCardMessage(request: SendIsvCardMessageRequest): Promise<SendIsvCardMessageResponse>;
    /**
     * @summary 初始化解决方案任务
     *
     * @param request SolutionTaskInitRequest
     * @param headers SolutionTaskInitHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SolutionTaskInitResponse
     */
    solutionTaskInitWithOptions(request: SolutionTaskInitRequest, headers: SolutionTaskInitHeaders, runtime: $Util.RuntimeOptions): Promise<SolutionTaskInitResponse>;
    /**
     * @summary 初始化解决方案任务
     *
     * @param request SolutionTaskInitRequest
     * @return SolutionTaskInitResponse
     */
    solutionTaskInit(request: SolutionTaskInitRequest): Promise<SolutionTaskInitResponse>;
    /**
     * @summary 保存解决方案任务
     *
     * @param request SolutionTaskSaveRequest
     * @param headers SolutionTaskSaveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SolutionTaskSaveResponse
     */
    solutionTaskSaveWithOptions(request: SolutionTaskSaveRequest, headers: SolutionTaskSaveHeaders, runtime: $Util.RuntimeOptions): Promise<SolutionTaskSaveResponse>;
    /**
     * @summary 保存解决方案任务
     *
     * @param request SolutionTaskSaveRequest
     * @return SolutionTaskSaveResponse
     */
    solutionTaskSave(request: SolutionTaskSaveRequest): Promise<SolutionTaskSaveResponse>;
    /**
     * @summary 同步解决方案任务模版
     *
     * @param request SyncTaskTemplateRequest
     * @param headers SyncTaskTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncTaskTemplateResponse
     */
    syncTaskTemplateWithOptions(request: SyncTaskTemplateRequest, headers: SyncTaskTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<SyncTaskTemplateResponse>;
    /**
     * @summary 同步解决方案任务模版
     *
     * @param request SyncTaskTemplateRequest
     * @return SyncTaskTemplateResponse
     */
    syncTaskTemplate(request: SyncTaskTemplateRequest): Promise<SyncTaskTemplateResponse>;
    /**
     * @summary ISV更新卡片消息
     *
     * @param request UpdateIsvCardMessageRequest
     * @param headers UpdateIsvCardMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateIsvCardMessageResponse
     */
    updateIsvCardMessageWithOptions(request: UpdateIsvCardMessageRequest, headers: UpdateIsvCardMessageHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateIsvCardMessageResponse>;
    /**
     * @summary ISV更新卡片消息
     *
     * @param request UpdateIsvCardMessageRequest
     * @return UpdateIsvCardMessageResponse
     */
    updateIsvCardMessage(request: UpdateIsvCardMessageRequest): Promise<UpdateIsvCardMessageResponse>;
}
