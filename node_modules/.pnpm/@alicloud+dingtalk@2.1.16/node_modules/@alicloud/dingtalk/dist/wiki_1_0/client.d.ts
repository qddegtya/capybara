/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class WikiWordsDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsDetailRequest extends $tea.Model {
    wordName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsDetailResponseBody extends $tea.Model {
    data?: WikiWordsDetailResponseBodyData[];
    errMsg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: WikiWordsDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsParseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsParseRequest extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsParseResponseBody extends $tea.Model {
    data?: WikiWordsParseResponseBodyData[];
    errMsg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsParseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: WikiWordsParseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsDetailResponseBodyDataAppLink extends $tea.Model {
    appId?: number;
    appName?: string;
    iconLink?: string;
    pcLink?: string;
    phoneLink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsDetailResponseBodyDataRelatedDoc extends $tea.Model {
    link?: string;
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsDetailResponseBodyDataRelatedLink extends $tea.Model {
    link?: string;
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsDetailResponseBodyData extends $tea.Model {
    appLink?: WikiWordsDetailResponseBodyDataAppLink[];
    approveName?: string;
    contacts?: string[];
    creatorName?: string;
    gmtCreate?: number;
    gmtModify?: number;
    highLightWordAlias?: string[];
    imHighLight?: boolean;
    orgName?: string;
    relatedDoc?: WikiWordsDetailResponseBodyDataRelatedDoc[];
    relatedLink?: WikiWordsDetailResponseBodyDataRelatedLink[];
    simHighLight?: boolean;
    simpleWordParaphrase?: string;
    tagsList?: string[];
    updaterName?: string;
    uuid?: number;
    wordAlias?: string[];
    wordFullName?: string;
    wordName?: string;
    wordParaphrase?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class WikiWordsParseResponseBodyData extends $tea.Model {
    endIndex?: number;
    startIndex?: number;
    wordName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 根据词条名称获取该词条释义
     *
     * @param request WikiWordsDetailRequest
     * @param headers WikiWordsDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return WikiWordsDetailResponse
     */
    wikiWordsDetailWithOptions(request: WikiWordsDetailRequest, headers: WikiWordsDetailHeaders, runtime: $Util.RuntimeOptions): Promise<WikiWordsDetailResponse>;
    /**
     * @summary 根据词条名称获取该词条释义
     *
     * @param request WikiWordsDetailRequest
     * @return WikiWordsDetailResponse
     */
    wikiWordsDetail(request: WikiWordsDetailRequest): Promise<WikiWordsDetailResponse>;
    /**
     * @summary 外部传递过来的消息根据百科词库分词
     *
     * @param request WikiWordsParseRequest
     * @param headers WikiWordsParseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return WikiWordsParseResponse
     */
    wikiWordsParseWithOptions(request: WikiWordsParseRequest, headers: WikiWordsParseHeaders, runtime: $Util.RuntimeOptions): Promise<WikiWordsParseResponse>;
    /**
     * @summary 外部传递过来的消息根据百科词库分词
     *
     * @param request WikiWordsParseRequest
     * @return WikiWordsParseResponse
     */
    wikiWordsParse(request: WikiWordsParseRequest): Promise<WikiWordsParseResponse>;
}
