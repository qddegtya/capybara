/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateJsapiTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateJsapiTicketResponseBody extends $tea.Model {
    expireIn?: number;
    jsapiTicket?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateJsapiTicketResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateJsapiTicketResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccessTokenRequest extends $tea.Model {
    appKey?: string;
    appSecret?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccessTokenResponseBody extends $tea.Model {
    accessToken?: string;
    expireIn?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccessTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAccessTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthInfoRequest extends $tea.Model {
    authCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthInfoResponseBody extends $tea.Model {
    authAppInfo?: GetAuthInfoResponseBodyAuthAppInfo;
    authCorpInfo?: GetAuthInfoResponseBodyAuthCorpInfo;
    authUserInfo?: GetAuthInfoResponseBodyAuthUserInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAuthInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpAccessTokenRequest extends $tea.Model {
    authCorpId?: string;
    suiteKey?: string;
    suiteSecret?: string;
    suiteTicket?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpAccessTokenResponseBody extends $tea.Model {
    accessToken?: string;
    expireIn?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpAccessTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCorpAccessTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalAuthRuleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalAuthRuleResponseBody extends $tea.Model {
    result?: GetPersonalAuthRuleResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalAuthRuleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPersonalAuthRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSsoAccessTokenRequest extends $tea.Model {
    corpid?: string;
    ssoSecret?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSsoAccessTokenResponseBody extends $tea.Model {
    accessToken?: string;
    expireIn?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSsoAccessTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSsoAccessTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSsoUserInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSsoUserInfoRequest extends $tea.Model {
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSsoUserInfoResponseBody extends $tea.Model {
    avatar?: string;
    corpId?: string;
    corpName?: string;
    email?: string;
    isAdmin?: boolean;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSsoUserInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSsoUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSuiteAccessTokenRequest extends $tea.Model {
    suiteKey?: string;
    suiteSecret?: string;
    suiteTicket?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSuiteAccessTokenResponseBody extends $tea.Model {
    accessToken?: string;
    expireIn?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSuiteAccessTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSuiteAccessTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTokenRequest extends $tea.Model {
    clientId?: string;
    clientSecret?: string;
    grantType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTokenResponseBody extends $tea.Model {
    accessToken?: string;
    expiresIn?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserTokenRequest extends $tea.Model {
    clientId?: string;
    clientSecret?: string;
    code?: string;
    grantType?: string;
    refreshToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserTokenResponseBody extends $tea.Model {
    accessToken?: string;
    corpId?: string;
    expireIn?: number;
    refreshToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthInfoResponseBodyAuthAppInfoAgentList extends $tea.Model {
    adminList?: string[];
    agentId?: number;
    agentName?: string;
    appId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthInfoResponseBodyAuthAppInfo extends $tea.Model {
    agentList?: GetAuthInfoResponseBodyAuthAppInfoAgentList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthInfoResponseBodyAuthCorpInfo extends $tea.Model {
    authChannel?: string;
    authChannelType?: string;
    authLevel?: number;
    corpLogoUrl?: string;
    corpName?: string;
    industry?: string;
    inviteCode?: string;
    inviteUrl?: string;
    licenseCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAuthInfoResponseBodyAuthUserInfo extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalAuthRuleResponseBodyResult extends $tea.Model {
    authItems?: string[];
    resource?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 生成jsapi ticket
     *
     * @param headers CreateJsapiTicketHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateJsapiTicketResponse
     */
    createJsapiTicketWithOptions(headers: CreateJsapiTicketHeaders, runtime: $Util.RuntimeOptions): Promise<CreateJsapiTicketResponse>;
    /**
     * @summary 生成jsapi ticket
     *
     * @return CreateJsapiTicketResponse
     */
    createJsapiTicket(): Promise<CreateJsapiTicketResponse>;
    /**
     * @summary 获取企业accessToken(企业内部应用)
     *
     * @param request GetAccessTokenRequest
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAccessTokenResponse
     */
    getAccessTokenWithOptions(request: GetAccessTokenRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<GetAccessTokenResponse>;
    /**
     * @summary 获取企业accessToken(企业内部应用)
     *
     * @param request GetAccessTokenRequest
     * @return GetAccessTokenResponse
     */
    getAccessToken(request: GetAccessTokenRequest): Promise<GetAccessTokenResponse>;
    /**
     * @summary 获取企业开通应用后的授权信息
     *
     * @param request GetAuthInfoRequest
     * @param headers GetAuthInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAuthInfoResponse
     */
    getAuthInfoWithOptions(request: GetAuthInfoRequest, headers: GetAuthInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetAuthInfoResponse>;
    /**
     * @summary 获取企业开通应用后的授权信息
     *
     * @param request GetAuthInfoRequest
     * @return GetAuthInfoResponse
     */
    getAuthInfo(request: GetAuthInfoRequest): Promise<GetAuthInfoResponse>;
    /**
     * @summary 获取企业accessToken(应用商店应用)
     *
     * @param request GetCorpAccessTokenRequest
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCorpAccessTokenResponse
     */
    getCorpAccessTokenWithOptions(request: GetCorpAccessTokenRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<GetCorpAccessTokenResponse>;
    /**
     * @summary 获取企业accessToken(应用商店应用)
     *
     * @param request GetCorpAccessTokenRequest
     * @return GetCorpAccessTokenResponse
     */
    getCorpAccessToken(request: GetCorpAccessTokenRequest): Promise<GetCorpAccessTokenResponse>;
    /**
     * @summary 查询个人授权记录
     *
     * @param headers GetPersonalAuthRuleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPersonalAuthRuleResponse
     */
    getPersonalAuthRuleWithOptions(headers: GetPersonalAuthRuleHeaders, runtime: $Util.RuntimeOptions): Promise<GetPersonalAuthRuleResponse>;
    /**
     * @summary 查询个人授权记录
     *
     * @return GetPersonalAuthRuleResponse
     */
    getPersonalAuthRule(): Promise<GetPersonalAuthRuleResponse>;
    /**
     * @summary 生成微应用管理后台accessToken
     *
     * @param request GetSsoAccessTokenRequest
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSsoAccessTokenResponse
     */
    getSsoAccessTokenWithOptions(request: GetSsoAccessTokenRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<GetSsoAccessTokenResponse>;
    /**
     * @summary 生成微应用管理后台accessToken
     *
     * @param request GetSsoAccessTokenRequest
     * @return GetSsoAccessTokenResponse
     */
    getSsoAccessToken(request: GetSsoAccessTokenRequest): Promise<GetSsoAccessTokenResponse>;
    /**
     * @summary 查询微应用后台免登的用户信息
     *
     * @param request GetSsoUserInfoRequest
     * @param headers GetSsoUserInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSsoUserInfoResponse
     */
    getSsoUserInfoWithOptions(request: GetSsoUserInfoRequest, headers: GetSsoUserInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetSsoUserInfoResponse>;
    /**
     * @summary 查询微应用后台免登的用户信息
     *
     * @param request GetSsoUserInfoRequest
     * @return GetSsoUserInfoResponse
     */
    getSsoUserInfo(request: GetSsoUserInfoRequest): Promise<GetSsoUserInfoResponse>;
    /**
     * @summary 获取isvAccessToken（三方企业应用）
     *
     * @param request GetSuiteAccessTokenRequest
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSuiteAccessTokenResponse
     */
    getSuiteAccessTokenWithOptions(request: GetSuiteAccessTokenRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<GetSuiteAccessTokenResponse>;
    /**
     * @summary 获取isvAccessToken（三方企业应用）
     *
     * @param request GetSuiteAccessTokenRequest
     * @return GetSuiteAccessTokenResponse
     */
    getSuiteAccessToken(request: GetSuiteAccessTokenRequest): Promise<GetSuiteAccessTokenResponse>;
    /**
     * @summary 获取Access Token
     *
     * @param request GetTokenRequest
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTokenResponse
     */
    getTokenWithOptions(corpId: string, request: GetTokenRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<GetTokenResponse>;
    /**
     * @summary 获取Access Token
     *
     * @param request GetTokenRequest
     * @return GetTokenResponse
     */
    getToken(corpId: string, request: GetTokenRequest): Promise<GetTokenResponse>;
    /**
     * @summary 获取用户token
     *
     * @param request GetUserTokenRequest
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserTokenResponse
     */
    getUserTokenWithOptions(request: GetUserTokenRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<GetUserTokenResponse>;
    /**
     * @summary 获取用户token
     *
     * @param request GetUserTokenRequest
     * @return GetUserTokenResponse
     */
    getUserToken(request: GetUserTokenRequest): Promise<GetUserTokenResponse>;
}
