/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreatePackageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePackageRequest extends $tea.Model {
    agentId?: number;
    appId?: number;
    homeUrl?: string;
    ossObjectKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePackageResponseBody extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePackageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreatePackageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccessTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccessTokenRequest extends $tea.Model {
    agentId?: number;
    appId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccessTokenResponseBody extends $tea.Model {
    accessKeyId?: string;
    accessKeySecret?: string;
    bucket?: string;
    endpoint?: string;
    expiration?: string;
    name?: string;
    region?: string;
    stsToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAccessTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAccessTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCreateStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCreateStatusRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCreateStatusResponseBody extends $tea.Model {
    buildTime?: number;
    finished?: boolean;
    packageSize?: number;
    status?: string;
    taskId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCreateStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCreateStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishPackageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishPackageRequest extends $tea.Model {
    agentId?: number;
    appId?: number;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishPackageResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PublishPackageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PublishPackageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 上传H5离线包
     *
     * @param request CreatePackageRequest
     * @param headers CreatePackageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreatePackageResponse
     */
    createPackageWithOptions(request: CreatePackageRequest, headers: CreatePackageHeaders, runtime: $Util.RuntimeOptions): Promise<CreatePackageResponse>;
    /**
     * @summary 上传H5离线包
     *
     * @param request CreatePackageRequest
     * @return CreatePackageResponse
     */
    createPackage(request: CreatePackageRequest): Promise<CreatePackageResponse>;
    /**
     * @summary 获取包上传一次性AccessToken
     *
     * @param request GetAccessTokenRequest
     * @param headers GetAccessTokenHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAccessTokenResponse
     */
    getAccessTokenWithOptions(request: GetAccessTokenRequest, headers: GetAccessTokenHeaders, runtime: $Util.RuntimeOptions): Promise<GetAccessTokenResponse>;
    /**
     * @summary 获取包上传一次性AccessToken
     *
     * @param request GetAccessTokenRequest
     * @return GetAccessTokenResponse
     */
    getAccessToken(request: GetAccessTokenRequest): Promise<GetAccessTokenResponse>;
    /**
     * @summary 获取H5离线包版本创建状态
     *
     * @param request GetCreateStatusRequest
     * @param headers GetCreateStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCreateStatusResponse
     */
    getCreateStatusWithOptions(request: GetCreateStatusRequest, headers: GetCreateStatusHeaders, runtime: $Util.RuntimeOptions): Promise<GetCreateStatusResponse>;
    /**
     * @summary 获取H5离线包版本创建状态
     *
     * @param request GetCreateStatusRequest
     * @return GetCreateStatusResponse
     */
    getCreateStatus(request: GetCreateStatusRequest): Promise<GetCreateStatusResponse>;
    /**
     * @summary 发布离线包
     *
     * @param request PublishPackageRequest
     * @param headers PublishPackageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PublishPackageResponse
     */
    publishPackageWithOptions(request: PublishPackageRequest, headers: PublishPackageHeaders, runtime: $Util.RuntimeOptions): Promise<PublishPackageResponse>;
    /**
     * @summary 发布离线包
     *
     * @param request PublishPackageRequest
     * @return PublishPackageResponse
     */
    publishPackage(request: PublishPackageRequest): Promise<PublishPackageResponse>;
}
