/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateAppGoodsServiceConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppGoodsServiceConversationRequest extends $tea.Model {
    isvUserId?: string;
    orderId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppGoodsServiceConversationResponseBody extends $tea.Model {
    conversationName?: string;
    newConversation?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppGoodsServiceConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAppGoodsServiceConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCoolAppAccessStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCoolAppAccessStatusRequest extends $tea.Model {
    authCode?: string;
    coolAppCode?: string;
    encFieldBizCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCoolAppAccessStatusResponseBody extends $tea.Model {
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCoolAppAccessStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCoolAppAccessStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInAppSkuUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInAppSkuUrlRequest extends $tea.Model {
    callbackPage?: string;
    extendParam?: string;
    goodsCode?: string;
    itemCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInAppSkuUrlResponseBody extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInAppSkuUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetInAppSkuUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoResponseBody extends $tea.Model {
    result?: GetPersonalExperienceInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPersonalExperienceInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMarketOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMarketOrderResponseBody extends $tea.Model {
    bizOrderId?: number;
    corpId?: string;
    createTimestamp?: number;
    endTimestamp?: number;
    goodsCode?: string;
    goodsName?: string;
    inAppOrder?: boolean;
    itemCode?: string;
    itemName?: string;
    paidTimestamp?: number;
    quantity?: number;
    startTimestamp?: number;
    status?: number;
    totalActualPayFee?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMarketOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMarketOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTaskReportHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTaskReportRequest extends $tea.Model {
    bizNo?: string;
    operateDate?: string;
    taskTag?: string;
    userid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserTaskReportResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPersonalExperienceInfoResponseBodyResult extends $tea.Model {
    mainCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 创建应用商品服务群
     *
     * @param request CreateAppGoodsServiceConversationRequest
     * @param headers CreateAppGoodsServiceConversationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAppGoodsServiceConversationResponse
     */
    createAppGoodsServiceConversationWithOptions(request: CreateAppGoodsServiceConversationRequest, headers: CreateAppGoodsServiceConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAppGoodsServiceConversationResponse>;
    /**
     * @summary 创建应用商品服务群
     *
     * @param request CreateAppGoodsServiceConversationRequest
     * @return CreateAppGoodsServiceConversationResponse
     */
    createAppGoodsServiceConversation(request: CreateAppGoodsServiceConversationRequest): Promise<CreateAppGoodsServiceConversationResponse>;
    /**
     * @summary 获取酷应用访问状态
     *
     * @param request GetCoolAppAccessStatusRequest
     * @param headers GetCoolAppAccessStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCoolAppAccessStatusResponse
     */
    getCoolAppAccessStatusWithOptions(request: GetCoolAppAccessStatusRequest, headers: GetCoolAppAccessStatusHeaders, runtime: $Util.RuntimeOptions): Promise<GetCoolAppAccessStatusResponse>;
    /**
     * @summary 获取酷应用访问状态
     *
     * @param request GetCoolAppAccessStatusRequest
     * @return GetCoolAppAccessStatusResponse
     */
    getCoolAppAccessStatus(request: GetCoolAppAccessStatusRequest): Promise<GetCoolAppAccessStatusResponse>;
    /**
     * @summary 获取内购商品SKU页面地址
     *
     * @param request GetInAppSkuUrlRequest
     * @param headers GetInAppSkuUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInAppSkuUrlResponse
     */
    getInAppSkuUrlWithOptions(request: GetInAppSkuUrlRequest, headers: GetInAppSkuUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetInAppSkuUrlResponse>;
    /**
     * @summary 获取内购商品SKU页面地址
     *
     * @param request GetInAppSkuUrlRequest
     * @return GetInAppSkuUrlResponse
     */
    getInAppSkuUrl(request: GetInAppSkuUrlRequest): Promise<GetInAppSkuUrlResponse>;
    /**
     * @summary 获取个人体验相关信息
     *
     * @param request GetPersonalExperienceInfoRequest
     * @param headers GetPersonalExperienceInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPersonalExperienceInfoResponse
     */
    getPersonalExperienceInfoWithOptions(request: GetPersonalExperienceInfoRequest, headers: GetPersonalExperienceInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPersonalExperienceInfoResponse>;
    /**
     * @summary 获取个人体验相关信息
     *
     * @param request GetPersonalExperienceInfoRequest
     * @return GetPersonalExperienceInfoResponse
     */
    getPersonalExperienceInfo(request: GetPersonalExperienceInfoRequest): Promise<GetPersonalExperienceInfoResponse>;
    /**
     * @summary 应用市场订单查询
     *
     * @param headers QueryMarketOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMarketOrderResponse
     */
    queryMarketOrderWithOptions(orderId: string, headers: QueryMarketOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMarketOrderResponse>;
    /**
     * @summary 应用市场订单查询
     *
     * @return QueryMarketOrderResponse
     */
    queryMarketOrder(orderId: string): Promise<QueryMarketOrderResponse>;
    /**
     * @summary app内用户操作任务同步
     *
     * @param request UserTaskReportRequest
     * @param headers UserTaskReportHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UserTaskReportResponse
     */
    userTaskReportWithOptions(request: UserTaskReportRequest, headers: UserTaskReportHeaders, runtime: $Util.RuntimeOptions): Promise<UserTaskReportResponse>;
    /**
     * @summary app内用户操作任务同步
     *
     * @param request UserTaskReportRequest
     * @return UserTaskReportResponse
     */
    userTaskReport(request: UserTaskReportRequest): Promise<UserTaskReportResponse>;
}
