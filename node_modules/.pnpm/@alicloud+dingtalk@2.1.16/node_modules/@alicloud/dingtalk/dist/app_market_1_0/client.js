"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPersonalExperienceInfoResponseBodyResult = exports.UserTaskReportResponse = exports.UserTaskReportRequest = exports.UserTaskReportHeaders = exports.QueryMarketOrderResponse = exports.QueryMarketOrderResponseBody = exports.QueryMarketOrderHeaders = exports.GetPersonalExperienceInfoResponse = exports.GetPersonalExperienceInfoResponseBody = exports.GetPersonalExperienceInfoRequest = exports.GetPersonalExperienceInfoHeaders = exports.GetInAppSkuUrlResponse = exports.GetInAppSkuUrlResponseBody = exports.GetInAppSkuUrlRequest = exports.GetInAppSkuUrlHeaders = exports.GetCoolAppAccessStatusResponse = exports.GetCoolAppAccessStatusResponseBody = exports.GetCoolAppAccessStatusRequest = exports.GetCoolAppAccessStatusHeaders = exports.CreateAppGoodsServiceConversationResponse = exports.CreateAppGoodsServiceConversationResponseBody = exports.CreateAppGoodsServiceConversationRequest = exports.CreateAppGoodsServiceConversationHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateAppGoodsServiceConversationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAppGoodsServiceConversationHeaders = CreateAppGoodsServiceConversationHeaders;
class CreateAppGoodsServiceConversationRequest extends $tea.Model {
    static names() {
        return {
            isvUserId: 'isvUserId',
            orderId: 'orderId',
        };
    }
    static types() {
        return {
            isvUserId: 'string',
            orderId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAppGoodsServiceConversationRequest = CreateAppGoodsServiceConversationRequest;
class CreateAppGoodsServiceConversationResponseBody extends $tea.Model {
    static names() {
        return {
            conversationName: 'conversationName',
            newConversation: 'newConversation',
        };
    }
    static types() {
        return {
            conversationName: 'string',
            newConversation: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAppGoodsServiceConversationResponseBody = CreateAppGoodsServiceConversationResponseBody;
class CreateAppGoodsServiceConversationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateAppGoodsServiceConversationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAppGoodsServiceConversationResponse = CreateAppGoodsServiceConversationResponse;
class GetCoolAppAccessStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCoolAppAccessStatusHeaders = GetCoolAppAccessStatusHeaders;
class GetCoolAppAccessStatusRequest extends $tea.Model {
    static names() {
        return {
            authCode: 'authCode',
            coolAppCode: 'coolAppCode',
            encFieldBizCode: 'encFieldBizCode',
        };
    }
    static types() {
        return {
            authCode: 'string',
            coolAppCode: 'string',
            encFieldBizCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCoolAppAccessStatusRequest = GetCoolAppAccessStatusRequest;
class GetCoolAppAccessStatusResponseBody extends $tea.Model {
    static names() {
        return {
            status: 'status',
        };
    }
    static types() {
        return {
            status: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCoolAppAccessStatusResponseBody = GetCoolAppAccessStatusResponseBody;
class GetCoolAppAccessStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCoolAppAccessStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCoolAppAccessStatusResponse = GetCoolAppAccessStatusResponse;
class GetInAppSkuUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInAppSkuUrlHeaders = GetInAppSkuUrlHeaders;
class GetInAppSkuUrlRequest extends $tea.Model {
    static names() {
        return {
            callbackPage: 'callbackPage',
            extendParam: 'extendParam',
            goodsCode: 'goodsCode',
            itemCode: 'itemCode',
        };
    }
    static types() {
        return {
            callbackPage: 'string',
            extendParam: 'string',
            goodsCode: 'string',
            itemCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInAppSkuUrlRequest = GetInAppSkuUrlRequest;
class GetInAppSkuUrlResponseBody extends $tea.Model {
    static names() {
        return {
            url: 'url',
        };
    }
    static types() {
        return {
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInAppSkuUrlResponseBody = GetInAppSkuUrlResponseBody;
class GetInAppSkuUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInAppSkuUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInAppSkuUrlResponse = GetInAppSkuUrlResponse;
class GetPersonalExperienceInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPersonalExperienceInfoHeaders = GetPersonalExperienceInfoHeaders;
class GetPersonalExperienceInfoRequest extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPersonalExperienceInfoRequest = GetPersonalExperienceInfoRequest;
class GetPersonalExperienceInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: GetPersonalExperienceInfoResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPersonalExperienceInfoResponseBody = GetPersonalExperienceInfoResponseBody;
class GetPersonalExperienceInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPersonalExperienceInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPersonalExperienceInfoResponse = GetPersonalExperienceInfoResponse;
class QueryMarketOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMarketOrderHeaders = QueryMarketOrderHeaders;
class QueryMarketOrderResponseBody extends $tea.Model {
    static names() {
        return {
            bizOrderId: 'bizOrderId',
            corpId: 'corpId',
            createTimestamp: 'createTimestamp',
            endTimestamp: 'endTimestamp',
            goodsCode: 'goodsCode',
            goodsName: 'goodsName',
            inAppOrder: 'inAppOrder',
            itemCode: 'itemCode',
            itemName: 'itemName',
            paidTimestamp: 'paidTimestamp',
            quantity: 'quantity',
            startTimestamp: 'startTimestamp',
            status: 'status',
            totalActualPayFee: 'totalActualPayFee',
        };
    }
    static types() {
        return {
            bizOrderId: 'number',
            corpId: 'string',
            createTimestamp: 'number',
            endTimestamp: 'number',
            goodsCode: 'string',
            goodsName: 'string',
            inAppOrder: 'boolean',
            itemCode: 'string',
            itemName: 'string',
            paidTimestamp: 'number',
            quantity: 'number',
            startTimestamp: 'number',
            status: 'number',
            totalActualPayFee: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMarketOrderResponseBody = QueryMarketOrderResponseBody;
class QueryMarketOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMarketOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMarketOrderResponse = QueryMarketOrderResponse;
class UserTaskReportHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserTaskReportHeaders = UserTaskReportHeaders;
class UserTaskReportRequest extends $tea.Model {
    static names() {
        return {
            bizNo: 'bizNo',
            operateDate: 'operateDate',
            taskTag: 'taskTag',
            userid: 'userid',
        };
    }
    static types() {
        return {
            bizNo: 'string',
            operateDate: 'string',
            taskTag: 'string',
            userid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserTaskReportRequest = UserTaskReportRequest;
class UserTaskReportResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserTaskReportResponse = UserTaskReportResponse;
class GetPersonalExperienceInfoResponseBodyResult extends $tea.Model {
    static names() {
        return {
            mainCorpId: 'mainCorpId',
        };
    }
    static types() {
        return {
            mainCorpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPersonalExperienceInfoResponseBodyResult = GetPersonalExperienceInfoResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 创建应用商品服务群
     *
     * @param request CreateAppGoodsServiceConversationRequest
     * @param headers CreateAppGoodsServiceConversationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAppGoodsServiceConversationResponse
     */
    async createAppGoodsServiceConversationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.isvUserId)) {
            body["isvUserId"] = request.isvUserId;
        }
        if (!tea_util_1.default.isUnset(request.orderId)) {
            body["orderId"] = request.orderId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateAppGoodsServiceConversation",
            version: "appMarket_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/appMarket/orders/serviceGroups`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateAppGoodsServiceConversationResponse({}));
    }
    /**
     * @summary 创建应用商品服务群
     *
     * @param request CreateAppGoodsServiceConversationRequest
     * @return CreateAppGoodsServiceConversationResponse
     */
    async createAppGoodsServiceConversation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateAppGoodsServiceConversationHeaders({});
        return await this.createAppGoodsServiceConversationWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取酷应用访问状态
     *
     * @param request GetCoolAppAccessStatusRequest
     * @param headers GetCoolAppAccessStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCoolAppAccessStatusResponse
     */
    async getCoolAppAccessStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.authCode)) {
            body["authCode"] = request.authCode;
        }
        if (!tea_util_1.default.isUnset(request.coolAppCode)) {
            body["coolAppCode"] = request.coolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.encFieldBizCode)) {
            body["encFieldBizCode"] = request.encFieldBizCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetCoolAppAccessStatus",
            version: "appMarket_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/appMarket/coolApps/accessions/statuses/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCoolAppAccessStatusResponse({}));
    }
    /**
     * @summary 获取酷应用访问状态
     *
     * @param request GetCoolAppAccessStatusRequest
     * @return GetCoolAppAccessStatusResponse
     */
    async getCoolAppAccessStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCoolAppAccessStatusHeaders({});
        return await this.getCoolAppAccessStatusWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取内购商品SKU页面地址
     *
     * @param request GetInAppSkuUrlRequest
     * @param headers GetInAppSkuUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInAppSkuUrlResponse
     */
    async getInAppSkuUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackPage)) {
            body["callbackPage"] = request.callbackPage;
        }
        if (!tea_util_1.default.isUnset(request.extendParam)) {
            body["extendParam"] = request.extendParam;
        }
        if (!tea_util_1.default.isUnset(request.goodsCode)) {
            body["goodsCode"] = request.goodsCode;
        }
        if (!tea_util_1.default.isUnset(request.itemCode)) {
            body["itemCode"] = request.itemCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetInAppSkuUrl",
            version: "appMarket_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/appMarket/internals/skuPages/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInAppSkuUrlResponse({}));
    }
    /**
     * @summary 获取内购商品SKU页面地址
     *
     * @param request GetInAppSkuUrlRequest
     * @return GetInAppSkuUrlResponse
     */
    async getInAppSkuUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInAppSkuUrlHeaders({});
        return await this.getInAppSkuUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取个人体验相关信息
     *
     * @param request GetPersonalExperienceInfoRequest
     * @param headers GetPersonalExperienceInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPersonalExperienceInfoResponse
     */
    async getPersonalExperienceInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPersonalExperienceInfo",
            version: "appMarket_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/appMarket/personalExperiences`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPersonalExperienceInfoResponse({}));
    }
    /**
     * @summary 获取个人体验相关信息
     *
     * @param request GetPersonalExperienceInfoRequest
     * @return GetPersonalExperienceInfoResponse
     */
    async getPersonalExperienceInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPersonalExperienceInfoHeaders({});
        return await this.getPersonalExperienceInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 应用市场订单查询
     *
     * @param headers QueryMarketOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMarketOrderResponse
     */
    async queryMarketOrderWithOptions(orderId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryMarketOrder",
            version: "appMarket_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/appMarket/orders/${orderId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMarketOrderResponse({}));
    }
    /**
     * @summary 应用市场订单查询
     *
     * @return QueryMarketOrderResponse
     */
    async queryMarketOrder(orderId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMarketOrderHeaders({});
        return await this.queryMarketOrderWithOptions(orderId, headers, runtime);
    }
    /**
     * @summary app内用户操作任务同步
     *
     * @param request UserTaskReportRequest
     * @param headers UserTaskReportHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UserTaskReportResponse
     */
    async userTaskReportWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizNo)) {
            body["bizNo"] = request.bizNo;
        }
        if (!tea_util_1.default.isUnset(request.operateDate)) {
            body["operateDate"] = request.operateDate;
        }
        if (!tea_util_1.default.isUnset(request.taskTag)) {
            body["taskTag"] = request.taskTag;
        }
        if (!tea_util_1.default.isUnset(request.userid)) {
            body["userid"] = request.userid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UserTaskReport",
            version: "appMarket_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/appMarket/tasks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "boolean",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UserTaskReportResponse({}));
    }
    /**
     * @summary app内用户操作任务同步
     *
     * @param request UserTaskReportRequest
     * @return UserTaskReportResponse
     */
    async userTaskReport(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UserTaskReportHeaders({});
        return await this.userTaskReportWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map