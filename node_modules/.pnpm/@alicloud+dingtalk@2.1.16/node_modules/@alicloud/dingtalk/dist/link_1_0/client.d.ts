/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class DetailUserIdPrivateDataMapValue extends $tea.Model {
    cardParamMap?: {
        [key: string]: any;
    };
    cardMediaIdParamMap?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyFollowerAuthInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyFollowerAuthInfoRequest extends $tea.Model {
    appAuthKey?: string;
    fieldScope?: string;
    sessionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyFollowerAuthInfoResponseBody extends $tea.Model {
    result?: ApplyFollowerAuthInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyFollowerAuthInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ApplyFollowerAuthInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CallbackRegiesterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CallbackRegiesterRequest extends $tea.Model {
    apiSecret?: string;
    callbackKey?: string;
    callbackUrl?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CallbackRegiesterResponseBody extends $tea.Model {
    result?: CallbackRegiesterResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CallbackRegiesterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CallbackRegiesterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseTopBoxInteractiveOTOMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseTopBoxInteractiveOTOMessageRequest extends $tea.Model {
    detail?: CloseTopBoxInteractiveOTOMessageRequestDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseTopBoxInteractiveOTOMessageResponseBody extends $tea.Model {
    requestId?: string;
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseTopBoxInteractiveOTOMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CloseTopBoxInteractiveOTOMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerAuthInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerAuthInfoRequest extends $tea.Model {
    accountId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerAuthInfoResponseBody extends $tea.Model {
    result?: GetFollowerAuthInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerAuthInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFollowerAuthInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerInfoRequest extends $tea.Model {
    accountId?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerInfoResponseBody extends $tea.Model {
    requestId?: string;
    result?: GetFollowerInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFollowerInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPictureDownloadUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPictureDownloadUrlRequest extends $tea.Model {
    downloadCode?: string;
    sessionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPictureDownloadUrlResponseBody extends $tea.Model {
    requestId?: string;
    result?: GetPictureDownloadUrlResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPictureDownloadUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPictureDownloadUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFollowStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFollowStatusRequest extends $tea.Model {
    accountId?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFollowStatusResponseBody extends $tea.Model {
    result?: GetUserFollowStatusResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFollowStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserFollowStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAccountHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAccountResponseBody extends $tea.Model {
    result?: ListAccountResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAccountResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAccountInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAccountInfoResponseBody extends $tea.Model {
    result?: ListAccountInfoResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAccountInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAccountInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFollowerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFollowerRequest extends $tea.Model {
    accountId?: string;
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFollowerResponseBody extends $tea.Model {
    requestId?: string;
    result?: ListFollowerResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFollowerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListFollowerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFollowStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFollowStatusRequest extends $tea.Model {
    accountId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFollowStatusResponseBody extends $tea.Model {
    result?: QueryUserFollowStatusResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFollowStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserFollowStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequest extends $tea.Model {
    detail?: SendAgentOTOMessageRequestDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageResponseBody extends $tea.Model {
    requestId?: string;
    result?: SendAgentOTOMessageResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendAgentOTOMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveOTOMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveOTOMessageRequest extends $tea.Model {
    detail?: SendInteractiveOTOMessageRequestDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveOTOMessageResponseBody extends $tea.Model {
    requestId?: string;
    result?: SendInteractiveOTOMessageResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveOTOMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendInteractiveOTOMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTopBoxInteractiveOTOMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTopBoxInteractiveOTOMessageRequest extends $tea.Model {
    detail?: SendTopBoxInteractiveOTOMessageRequestDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTopBoxInteractiveOTOMessageResponseBody extends $tea.Model {
    requestId?: string;
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTopBoxInteractiveOTOMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendTopBoxInteractiveOTOMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveOTOMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveOTOMessageRequest extends $tea.Model {
    detail?: UpdateInteractiveOTOMessageRequestDetail;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveOTOMessageResponseBody extends $tea.Model {
    requestId?: string;
    result?: UpdateInteractiveOTOMessageResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveOTOMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateInteractiveOTOMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateShortcutsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateShortcutsRequest extends $tea.Model {
    details?: UpdateShortcutsRequestDetails[];
    sessionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateShortcutsResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateShortcutsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateShortcutsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyFollowerAuthInfoResponseBodyResult extends $tea.Model {
    openApplyId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CallbackRegiesterResponseBodyResult extends $tea.Model {
    apiSecret?: string;
    callbackUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseTopBoxInteractiveOTOMessageRequestDetail extends $tea.Model {
    cardBizId?: string;
    cardTemplateId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerAuthInfoResponseBodyResultAuthInfoMainCorp extends $tea.Model {
    authorized?: boolean;
    corpName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerAuthInfoResponseBodyResultAuthInfoMobile extends $tea.Model {
    authorized?: boolean;
    mobile?: string;
    stateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerAuthInfoResponseBodyResultAuthInfo extends $tea.Model {
    mainCorp?: GetFollowerAuthInfoResponseBodyResultAuthInfoMainCorp;
    mobile?: GetFollowerAuthInfoResponseBodyResultAuthInfoMobile;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerAuthInfoResponseBodyResult extends $tea.Model {
    authInfo?: GetFollowerAuthInfoResponseBodyResultAuthInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerInfoResponseBodyResultUser extends $tea.Model {
    name?: string;
    timestamp?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFollowerInfoResponseBodyResult extends $tea.Model {
    user?: GetFollowerInfoResponseBodyResultUser;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPictureDownloadUrlResponseBodyResult extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserFollowStatusResponseBodyResult extends $tea.Model {
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAccountResponseBodyResult extends $tea.Model {
    accountId?: string;
    accountName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAccountInfoResponseBodyResult extends $tea.Model {
    accountId?: string;
    accountName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFollowerResponseBodyResultUserList extends $tea.Model {
    name?: string;
    timestamp?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFollowerResponseBodyResult extends $tea.Model {
    nextToken?: string;
    userList?: ListFollowerResponseBodyResultUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFollowStatusResponseBodyResult extends $tea.Model {
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequestDetailMessageBodyActionCardButtonList extends $tea.Model {
    actionUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequestDetailMessageBodyActionCard extends $tea.Model {
    buttonList?: SendAgentOTOMessageRequestDetailMessageBodyActionCardButtonList[];
    buttonOrientation?: string;
    markdown?: string;
    singleTitle?: string;
    singleUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequestDetailMessageBodyImage extends $tea.Model {
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequestDetailMessageBodyInteractiveMessage extends $tea.Model {
    callbackUrl?: string;
    cardBizId?: string;
    cardData?: string;
    cardTemplateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequestDetailMessageBodyLink extends $tea.Model {
    messageUrl?: string;
    picUrl?: string;
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequestDetailMessageBodyMarkdown extends $tea.Model {
    text?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequestDetailMessageBodyText extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequestDetailMessageBody extends $tea.Model {
    actionCard?: SendAgentOTOMessageRequestDetailMessageBodyActionCard;
    image?: SendAgentOTOMessageRequestDetailMessageBodyImage;
    interactiveMessage?: SendAgentOTOMessageRequestDetailMessageBodyInteractiveMessage;
    link?: SendAgentOTOMessageRequestDetailMessageBodyLink;
    markdown?: SendAgentOTOMessageRequestDetailMessageBodyMarkdown;
    text?: SendAgentOTOMessageRequestDetailMessageBodyText;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageRequestDetail extends $tea.Model {
    messageBody?: SendAgentOTOMessageRequestDetailMessageBody;
    msgType?: string;
    sessionId?: string;
    userId?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendAgentOTOMessageResponseBodyResult extends $tea.Model {
    openPushId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveOTOMessageRequestDetail extends $tea.Model {
    callbackUrl?: string;
    cardBizId?: string;
    cardData?: string;
    cardTemplateId?: string;
    userId?: string;
    userIdPrivateDataMap?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveOTOMessageResponseBodyResult extends $tea.Model {
    openPushId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTopBoxInteractiveOTOMessageRequestDetailCardData extends $tea.Model {
    cardMediaIdParamMap?: {
        [key: string]: any;
    };
    cardParamMap?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTopBoxInteractiveOTOMessageRequestDetail extends $tea.Model {
    callbackUrl?: string;
    cardBizId?: string;
    cardData?: SendTopBoxInteractiveOTOMessageRequestDetailCardData;
    cardTemplateId?: string;
    expiredTime?: number;
    userId?: string;
    userIdPrivateDataMap?: {
        [key: string]: DetailUserIdPrivateDataMapValue;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveOTOMessageRequestDetailUpdateOptions extends $tea.Model {
    updateCardDataByKey?: boolean;
    updatePrivateDataByKey?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveOTOMessageRequestDetail extends $tea.Model {
    cardBizId?: string;
    cardData?: string;
    updateOptions?: UpdateInteractiveOTOMessageRequestDetailUpdateOptions;
    userIdPrivateDataMap?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveOTOMessageResponseBodyResult extends $tea.Model {
    openPushId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateShortcutsRequestDetails extends $tea.Model {
    actionUrl?: string;
    callbackKey?: string;
    iconFont?: string;
    iconMediaId?: string;
    shortcutId?: string;
    slideIconMediaId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 发送用户授权信息申请
     *
     * @param request ApplyFollowerAuthInfoRequest
     * @param headers ApplyFollowerAuthInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ApplyFollowerAuthInfoResponse
     */
    applyFollowerAuthInfoWithOptions(request: ApplyFollowerAuthInfoRequest, headers: ApplyFollowerAuthInfoHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyFollowerAuthInfoResponse>;
    /**
     * @summary 发送用户授权信息申请
     *
     * @param request ApplyFollowerAuthInfoRequest
     * @return ApplyFollowerAuthInfoResponse
     */
    applyFollowerAuthInfo(request: ApplyFollowerAuthInfoRequest): Promise<ApplyFollowerAuthInfoResponse>;
    /**
     * @summary 注册服务窗消息回调服务
     *
     * @param request CallbackRegiesterRequest
     * @param headers CallbackRegiesterHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CallbackRegiesterResponse
     */
    callbackRegiesterWithOptions(request: CallbackRegiesterRequest, headers: CallbackRegiesterHeaders, runtime: $Util.RuntimeOptions): Promise<CallbackRegiesterResponse>;
    /**
     * @summary 注册服务窗消息回调服务
     *
     * @param request CallbackRegiesterRequest
     * @return CallbackRegiesterResponse
     */
    callbackRegiester(request: CallbackRegiesterRequest): Promise<CallbackRegiesterResponse>;
    /**
     * @summary 服务窗吊顶卡片关闭接口
     *
     * @param request CloseTopBoxInteractiveOTOMessageRequest
     * @param headers CloseTopBoxInteractiveOTOMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CloseTopBoxInteractiveOTOMessageResponse
     */
    closeTopBoxInteractiveOTOMessageWithOptions(request: CloseTopBoxInteractiveOTOMessageRequest, headers: CloseTopBoxInteractiveOTOMessageHeaders, runtime: $Util.RuntimeOptions): Promise<CloseTopBoxInteractiveOTOMessageResponse>;
    /**
     * @summary 服务窗吊顶卡片关闭接口
     *
     * @param request CloseTopBoxInteractiveOTOMessageRequest
     * @return CloseTopBoxInteractiveOTOMessageResponse
     */
    closeTopBoxInteractiveOTOMessage(request: CloseTopBoxInteractiveOTOMessageRequest): Promise<CloseTopBoxInteractiveOTOMessageResponse>;
    /**
     * @summary 获取用户授权信息
     *
     * @param request GetFollowerAuthInfoRequest
     * @param headers GetFollowerAuthInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFollowerAuthInfoResponse
     */
    getFollowerAuthInfoWithOptions(request: GetFollowerAuthInfoRequest, headers: GetFollowerAuthInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFollowerAuthInfoResponse>;
    /**
     * @summary 获取用户授权信息
     *
     * @param request GetFollowerAuthInfoRequest
     * @return GetFollowerAuthInfoResponse
     */
    getFollowerAuthInfo(request: GetFollowerAuthInfoRequest): Promise<GetFollowerAuthInfoResponse>;
    /**
     * @summary 获取服务窗关注人信息
     *
     * @param request GetFollowerInfoRequest
     * @param headers GetFollowerInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFollowerInfoResponse
     */
    getFollowerInfoWithOptions(request: GetFollowerInfoRequest, headers: GetFollowerInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetFollowerInfoResponse>;
    /**
     * @summary 获取服务窗关注人信息
     *
     * @param request GetFollowerInfoRequest
     * @return GetFollowerInfoResponse
     */
    getFollowerInfo(request: GetFollowerInfoRequest): Promise<GetFollowerInfoResponse>;
    /**
     * @summary 服务窗图片消息下载地址获取接口
     *
     * @param request GetPictureDownloadUrlRequest
     * @param headers GetPictureDownloadUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPictureDownloadUrlResponse
     */
    getPictureDownloadUrlWithOptions(request: GetPictureDownloadUrlRequest, headers: GetPictureDownloadUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetPictureDownloadUrlResponse>;
    /**
     * @summary 服务窗图片消息下载地址获取接口
     *
     * @param request GetPictureDownloadUrlRequest
     * @return GetPictureDownloadUrlResponse
     */
    getPictureDownloadUrl(request: GetPictureDownloadUrlRequest): Promise<GetPictureDownloadUrlResponse>;
    /**
     * @summary 获取用户关注状态
     *
     * @param request GetUserFollowStatusRequest
     * @param headers GetUserFollowStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserFollowStatusResponse
     */
    getUserFollowStatusWithOptions(request: GetUserFollowStatusRequest, headers: GetUserFollowStatusHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserFollowStatusResponse>;
    /**
     * @summary 获取用户关注状态
     *
     * @param request GetUserFollowStatusRequest
     * @return GetUserFollowStatusResponse
     */
    getUserFollowStatus(request: GetUserFollowStatusRequest): Promise<GetUserFollowStatusResponse>;
    /**
     * @summary 获取企业下服务窗帐号列表
     *
     * @param headers ListAccountHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAccountResponse
     */
    listAccountWithOptions(headers: ListAccountHeaders, runtime: $Util.RuntimeOptions): Promise<ListAccountResponse>;
    /**
     * @summary 获取企业下服务窗帐号列表
     *
     * @return ListAccountResponse
     */
    listAccount(): Promise<ListAccountResponse>;
    /**
     * @summary 第三方企业应用查询服务窗帐号列表
     *
     * @param headers ListAccountInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAccountInfoResponse
     */
    listAccountInfoWithOptions(headers: ListAccountInfoHeaders, runtime: $Util.RuntimeOptions): Promise<ListAccountInfoResponse>;
    /**
     * @summary 第三方企业应用查询服务窗帐号列表
     *
     * @return ListAccountInfoResponse
     */
    listAccountInfo(): Promise<ListAccountInfoResponse>;
    /**
     * @summary 批量获取服务窗关注人列表
     *
     * @param request ListFollowerRequest
     * @param headers ListFollowerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFollowerResponse
     */
    listFollowerWithOptions(request: ListFollowerRequest, headers: ListFollowerHeaders, runtime: $Util.RuntimeOptions): Promise<ListFollowerResponse>;
    /**
     * @summary 批量获取服务窗关注人列表
     *
     * @param request ListFollowerRequest
     * @return ListFollowerResponse
     */
    listFollower(request: ListFollowerRequest): Promise<ListFollowerResponse>;
    /**
     * @summary 第三方企业应用查询用户是否关注服务窗
     *
     * @param request QueryUserFollowStatusRequest
     * @param headers QueryUserFollowStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserFollowStatusResponse
     */
    queryUserFollowStatusWithOptions(request: QueryUserFollowStatusRequest, headers: QueryUserFollowStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserFollowStatusResponse>;
    /**
     * @summary 第三方企业应用查询用户是否关注服务窗
     *
     * @param request QueryUserFollowStatusRequest
     * @return QueryUserFollowStatusResponse
     */
    queryUserFollowStatus(request: QueryUserFollowStatusRequest): Promise<QueryUserFollowStatusResponse>;
    /**
     * @summary 发送服务窗客服消息
     *
     * @param request SendAgentOTOMessageRequest
     * @param headers SendAgentOTOMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendAgentOTOMessageResponse
     */
    sendAgentOTOMessageWithOptions(request: SendAgentOTOMessageRequest, headers: SendAgentOTOMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendAgentOTOMessageResponse>;
    /**
     * @summary 发送服务窗客服消息
     *
     * @param request SendAgentOTOMessageRequest
     * @return SendAgentOTOMessageResponse
     */
    sendAgentOTOMessage(request: SendAgentOTOMessageRequest): Promise<SendAgentOTOMessageResponse>;
    /**
     * @summary 服务窗互动卡片单发接口
     *
     * @param request SendInteractiveOTOMessageRequest
     * @param headers SendInteractiveOTOMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendInteractiveOTOMessageResponse
     */
    sendInteractiveOTOMessageWithOptions(request: SendInteractiveOTOMessageRequest, headers: SendInteractiveOTOMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendInteractiveOTOMessageResponse>;
    /**
     * @summary 服务窗互动卡片单发接口
     *
     * @param request SendInteractiveOTOMessageRequest
     * @return SendInteractiveOTOMessageResponse
     */
    sendInteractiveOTOMessage(request: SendInteractiveOTOMessageRequest): Promise<SendInteractiveOTOMessageResponse>;
    /**
     * @summary 服务窗吊顶卡片发送接口
     *
     * @param request SendTopBoxInteractiveOTOMessageRequest
     * @param headers SendTopBoxInteractiveOTOMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendTopBoxInteractiveOTOMessageResponse
     */
    sendTopBoxInteractiveOTOMessageWithOptions(request: SendTopBoxInteractiveOTOMessageRequest, headers: SendTopBoxInteractiveOTOMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendTopBoxInteractiveOTOMessageResponse>;
    /**
     * @summary 服务窗吊顶卡片发送接口
     *
     * @param request SendTopBoxInteractiveOTOMessageRequest
     * @return SendTopBoxInteractiveOTOMessageResponse
     */
    sendTopBoxInteractiveOTOMessage(request: SendTopBoxInteractiveOTOMessageRequest): Promise<SendTopBoxInteractiveOTOMessageResponse>;
    /**
     * @summary 服务窗互动卡片修改接口
     *
     * @param request UpdateInteractiveOTOMessageRequest
     * @param headers UpdateInteractiveOTOMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateInteractiveOTOMessageResponse
     */
    updateInteractiveOTOMessageWithOptions(request: UpdateInteractiveOTOMessageRequest, headers: UpdateInteractiveOTOMessageHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateInteractiveOTOMessageResponse>;
    /**
     * @summary 服务窗互动卡片修改接口
     *
     * @param request UpdateInteractiveOTOMessageRequest
     * @return UpdateInteractiveOTOMessageResponse
     */
    updateInteractiveOTOMessage(request: UpdateInteractiveOTOMessageRequest): Promise<UpdateInteractiveOTOMessageResponse>;
    /**
     * @summary 服务窗会话窗口快捷栏配置接口
     *
     * @param request UpdateShortcutsRequest
     * @param headers UpdateShortcutsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateShortcutsResponse
     */
    updateShortcutsWithOptions(request: UpdateShortcutsRequest, headers: UpdateShortcutsHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateShortcutsResponse>;
    /**
     * @summary 服务窗会话窗口快捷栏配置接口
     *
     * @param request UpdateShortcutsRequest
     * @return UpdateShortcutsResponse
     */
    updateShortcuts(request: UpdateShortcutsRequest): Promise<UpdateShortcutsResponse>;
}
