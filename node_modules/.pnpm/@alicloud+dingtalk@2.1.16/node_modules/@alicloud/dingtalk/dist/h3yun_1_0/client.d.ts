/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class BatchInsertBizObjectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchInsertBizObjectRequest extends $tea.Model {
    bizObjectJsonArray?: string[];
    isDraft?: boolean;
    opUserId?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchInsertBizObjectResponseBody extends $tea.Model {
    code?: string;
    data?: BatchInsertBizObjectResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchInsertBizObjectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchInsertBizObjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelProcessInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelProcessInstanceRequest extends $tea.Model {
    processInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelProcessInstanceResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelProcessInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CancelProcessInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBizObjectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBizObjectRequest extends $tea.Model {
    bizObjectJson?: string;
    isDraft?: boolean;
    opUserId?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBizObjectResponseBody extends $tea.Model {
    code?: string;
    data?: CreateBizObjectResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBizObjectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateBizObjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessesInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessesInstanceRequest extends $tea.Model {
    bizObjectId?: string;
    opUserId?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessesInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: CreateProcessesInstanceResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessesInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateProcessesInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBizObjectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBizObjectRequest extends $tea.Model {
    bizObjectId?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBizObjectResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteBizObjectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteBizObjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProcessesInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProcessesInstanceRequest extends $tea.Model {
    isAutoUpdateBizObject?: boolean;
    processInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProcessesInstanceResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteProcessesInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteProcessesInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppsRequest extends $tea.Model {
    queryType?: string;
    values?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppsResponseBody extends $tea.Model {
    code?: string;
    data?: GetAppsResponseBodyData[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAppsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachmentTemporaryUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachmentTemporaryUrlRequest extends $tea.Model {
    attachmentId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachmentTemporaryUrlResponseBody extends $tea.Model {
    code?: string;
    data?: GetAttachmentTemporaryUrlResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachmentTemporaryUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAttachmentTemporaryUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrganizationsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrganizationsRequest extends $tea.Model {
    departmentId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrganizationsResponseBody extends $tea.Model {
    code?: string;
    data?: GetOrganizationsResponseBodyData[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrganizationsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOrganizationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRoleUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRoleUsersRequest extends $tea.Model {
    roleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRoleUsersResponseBody extends $tea.Model {
    code?: string;
    data?: GetRoleUsersResponseBodyData[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRoleUsersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRoleUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRolesResponseBody extends $tea.Model {
    code?: string;
    data?: GetRolesResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRolesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlRequest extends $tea.Model {
    bizObjectId?: string;
    fieldName?: string;
    isOverwrite?: boolean;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlResponseBody extends $tea.Model {
    code?: string;
    data?: GetUploadUrlResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUploadUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUsersRequest extends $tea.Model {
    departmentId?: string;
    isRecursive?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUsersResponseBody extends $tea.Model {
    code?: string;
    data?: GetUsersResponseBodyData[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUsersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizFieldsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizFieldsRequest extends $tea.Model {
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizFieldsResponseBody extends $tea.Model {
    code?: string;
    data?: LoadBizFieldsResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizFieldsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LoadBizFieldsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectRequest extends $tea.Model {
    bizObjectId?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectResponseBody extends $tea.Model {
    code?: string;
    data?: {
        [key: string]: any;
    };
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LoadBizObjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectsRequest extends $tea.Model {
    matcherJson?: string;
    pageNumber?: number;
    pageSize?: number;
    returnFields?: string[];
    schemaCode?: string;
    sortByFields?: LoadBizObjectsRequestSortByFields[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectsResponseBody extends $tea.Model {
    code?: string;
    data?: LoadBizObjectsResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LoadBizObjectsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppFunctionNodesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppFunctionNodesRequest extends $tea.Model {
    appCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppFunctionNodesResponseBody extends $tea.Model {
    code?: string;
    data?: QueryAppFunctionNodesResponseBodyData[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppFunctionNodesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAppFunctionNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesInstanceRequest extends $tea.Model {
    bizObjectId?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesInstanceResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProcessesInstanceResponseBodyData[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryProcessesInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesWorkItemsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesWorkItemsRequest extends $tea.Model {
    processInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesWorkItemsResponseBody extends $tea.Model {
    code?: string;
    data?: QueryProcessesWorkItemsResponseBodyData[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesWorkItemsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryProcessesWorkItemsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBizObjectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBizObjectRequest extends $tea.Model {
    bizObjectId?: string;
    bizObjectJson?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBizObjectResponseBody extends $tea.Model {
    code?: string;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateBizObjectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateBizObjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchInsertBizObjectResponseBodyData extends $tea.Model {
    bizObjectIds?: string[];
    failedDatas?: string[];
    failedMessages?: string[];
    processIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBizObjectResponseBodyData extends $tea.Model {
    bizObjectId?: string;
    formUsageType?: string;
    processInstanceId?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateProcessesInstanceResponseBodyData extends $tea.Model {
    processInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAppsResponseBodyData extends $tea.Model {
    appCode?: string;
    appSource?: string;
    appState?: string;
    displayName?: string;
    solution?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAttachmentTemporaryUrlResponseBodyData extends $tea.Model {
    attachmentUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOrganizationsResponseBodyData extends $tea.Model {
    code?: string;
    description?: string;
    id?: string;
    name?: string;
    parentId?: string;
    sortKey?: number;
    unitType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRoleUsersResponseBodyData extends $tea.Model {
    code?: string;
    departmentId?: string;
    departmentName?: string;
    description?: string;
    domainType?: string;
    email?: string;
    mobile?: string;
    name?: string;
    partDepartmentIds?: string[];
    sex?: string;
    sortKey?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRolesResponseBodyDataRoleGroups extends $tea.Model {
    companyId?: string;
    description?: string;
    groupCode?: string;
    groupId?: string;
    groupName?: string;
    state?: string;
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRolesResponseBodyDataRoles extends $tea.Model {
    companyId?: string;
    description?: string;
    groupId?: string;
    roleCode?: string;
    roleId?: string;
    roleName?: string;
    state?: string;
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRolesResponseBodyData extends $tea.Model {
    roleGroups?: GetRolesResponseBodyDataRoleGroups[];
    roles?: GetRolesResponseBodyDataRoles[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlResponseBodyData extends $tea.Model {
    uploadUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUsersResponseBodyData extends $tea.Model {
    code?: string;
    departmentId?: string;
    departmentName?: string;
    description?: string;
    domainType?: string;
    email?: string;
    id?: string;
    mobile?: string;
    name?: string;
    partDepartmentIds?: string[];
    sex?: string;
    sortKey?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizFieldsResponseBodyDataChildFormsFields extends $tea.Model {
    bizDataType?: string;
    fieldName?: string;
    label?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizFieldsResponseBodyDataChildForms extends $tea.Model {
    fields?: LoadBizFieldsResponseBodyDataChildFormsFields[];
    formName?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizFieldsResponseBodyDataFields extends $tea.Model {
    bizDataType?: string;
    fieldName?: string;
    label?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizFieldsResponseBodyData extends $tea.Model {
    childForms?: LoadBizFieldsResponseBodyDataChildForms[];
    fields?: LoadBizFieldsResponseBodyDataFields[];
    formName?: string;
    schemaCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectsRequestSortByFields extends $tea.Model {
    direction?: string;
    fieldName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LoadBizObjectsResponseBodyData extends $tea.Model {
    bizObjects?: {
        [key: string]: any;
    }[];
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAppFunctionNodesResponseBodyData extends $tea.Model {
    appCode?: string;
    displayName?: string;
    isSystem?: boolean;
    nodeType?: string;
    nodeVisibleType?: string;
    parentCode?: string;
    schemaCode?: string;
    sortKey?: number;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesInstanceResponseBodyDataOriginator extends $tea.Model {
    departmentId?: string;
    departmentName?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesInstanceResponseBodyData extends $tea.Model {
    appCode?: string;
    bizObjectId?: string;
    createdTimeGMT?: string;
    dingTalkProcessId?: string;
    finishTimeGMT?: string;
    originator?: QueryProcessesInstanceResponseBodyDataOriginator;
    processDisplayName?: string;
    processInstanceId?: string;
    processVersion?: number;
    schemaCode?: string;
    startTimeGMT?: string;
    state?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesWorkItemsResponseBodyDataFinisher extends $tea.Model {
    departmentId?: string;
    departmentName?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesWorkItemsResponseBodyDataParticipant extends $tea.Model {
    departmentId?: string;
    departmentName?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesWorkItemsResponseBodyDataReceiptor extends $tea.Model {
    departmentId?: string;
    departmentName?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProcessesWorkItemsResponseBodyData extends $tea.Model {
    activityCode?: string;
    activityName?: string;
    appCode?: string;
    bizObjectId?: string;
    comment?: string;
    displayName?: string;
    finishTimeGMT?: string;
    finisher?: QueryProcessesWorkItemsResponseBodyDataFinisher;
    isApproval?: boolean;
    isFinish?: boolean;
    participant?: QueryProcessesWorkItemsResponseBodyDataParticipant;
    processInstanceId?: string;
    processVersion?: string;
    receiptor?: QueryProcessesWorkItemsResponseBodyDataReceiptor;
    receiveTimeGMT?: string;
    schemaCode?: string;
    startTimeGMT?: string;
    state?: string;
    workItemId?: string;
    workItemType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 批量创建表单业务对象数据
     *
     * @param request BatchInsertBizObjectRequest
     * @param headers BatchInsertBizObjectHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchInsertBizObjectResponse
     */
    batchInsertBizObjectWithOptions(request: BatchInsertBizObjectRequest, headers: BatchInsertBizObjectHeaders, runtime: $Util.RuntimeOptions): Promise<BatchInsertBizObjectResponse>;
    /**
     * @summary 批量创建表单业务对象数据
     *
     * @param request BatchInsertBizObjectRequest
     * @return BatchInsertBizObjectResponse
     */
    batchInsertBizObject(request: BatchInsertBizObjectRequest): Promise<BatchInsertBizObjectResponse>;
    /**
     * @summary 取消流程实例
     *
     * @param request CancelProcessInstanceRequest
     * @param headers CancelProcessInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CancelProcessInstanceResponse
     */
    cancelProcessInstanceWithOptions(request: CancelProcessInstanceRequest, headers: CancelProcessInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<CancelProcessInstanceResponse>;
    /**
     * @summary 取消流程实例
     *
     * @param request CancelProcessInstanceRequest
     * @return CancelProcessInstanceResponse
     */
    cancelProcessInstance(request: CancelProcessInstanceRequest): Promise<CancelProcessInstanceResponse>;
    /**
     * @summary 创建单条表单业务对象实例
     *
     * @param request CreateBizObjectRequest
     * @param headers CreateBizObjectHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateBizObjectResponse
     */
    createBizObjectWithOptions(request: CreateBizObjectRequest, headers: CreateBizObjectHeaders, runtime: $Util.RuntimeOptions): Promise<CreateBizObjectResponse>;
    /**
     * @summary 创建单条表单业务对象实例
     *
     * @param request CreateBizObjectRequest
     * @return CreateBizObjectResponse
     */
    createBizObject(request: CreateBizObjectRequest): Promise<CreateBizObjectResponse>;
    /**
     * @summary 创建流程实例
     *
     * @param request CreateProcessesInstanceRequest
     * @param headers CreateProcessesInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateProcessesInstanceResponse
     */
    createProcessesInstanceWithOptions(request: CreateProcessesInstanceRequest, headers: CreateProcessesInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateProcessesInstanceResponse>;
    /**
     * @summary 创建流程实例
     *
     * @param request CreateProcessesInstanceRequest
     * @return CreateProcessesInstanceResponse
     */
    createProcessesInstance(request: CreateProcessesInstanceRequest): Promise<CreateProcessesInstanceResponse>;
    /**
     * @summary 删除表单业务对象实例
     *
     * @param request DeleteBizObjectRequest
     * @param headers DeleteBizObjectHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteBizObjectResponse
     */
    deleteBizObjectWithOptions(request: DeleteBizObjectRequest, headers: DeleteBizObjectHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteBizObjectResponse>;
    /**
     * @summary 删除表单业务对象实例
     *
     * @param request DeleteBizObjectRequest
     * @return DeleteBizObjectResponse
     */
    deleteBizObject(request: DeleteBizObjectRequest): Promise<DeleteBizObjectResponse>;
    /**
     * @summary 删除流程实例
     *
     * @param request DeleteProcessesInstanceRequest
     * @param headers DeleteProcessesInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteProcessesInstanceResponse
     */
    deleteProcessesInstanceWithOptions(request: DeleteProcessesInstanceRequest, headers: DeleteProcessesInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteProcessesInstanceResponse>;
    /**
     * @summary 删除流程实例
     *
     * @param request DeleteProcessesInstanceRequest
     * @return DeleteProcessesInstanceResponse
     */
    deleteProcessesInstance(request: DeleteProcessesInstanceRequest): Promise<DeleteProcessesInstanceResponse>;
    /**
     * @summary 获取应用数据
     *
     * @param request GetAppsRequest
     * @param headers GetAppsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAppsResponse
     */
    getAppsWithOptions(request: GetAppsRequest, headers: GetAppsHeaders, runtime: $Util.RuntimeOptions): Promise<GetAppsResponse>;
    /**
     * @summary 获取应用数据
     *
     * @param request GetAppsRequest
     * @return GetAppsResponse
     */
    getApps(request: GetAppsRequest): Promise<GetAppsResponse>;
    /**
     * @summary 获取附件临时免登地址
     *
     * @param request GetAttachmentTemporaryUrlRequest
     * @param headers GetAttachmentTemporaryUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAttachmentTemporaryUrlResponse
     */
    getAttachmentTemporaryUrlWithOptions(request: GetAttachmentTemporaryUrlRequest, headers: GetAttachmentTemporaryUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetAttachmentTemporaryUrlResponse>;
    /**
     * @summary 获取附件临时免登地址
     *
     * @param request GetAttachmentTemporaryUrlRequest
     * @return GetAttachmentTemporaryUrlResponse
     */
    getAttachmentTemporaryUrl(request: GetAttachmentTemporaryUrlRequest): Promise<GetAttachmentTemporaryUrlResponse>;
    /**
     * @summary 获取组织数据
     *
     * @param request GetOrganizationsRequest
     * @param headers GetOrganizationsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOrganizationsResponse
     */
    getOrganizationsWithOptions(request: GetOrganizationsRequest, headers: GetOrganizationsHeaders, runtime: $Util.RuntimeOptions): Promise<GetOrganizationsResponse>;
    /**
     * @summary 获取组织数据
     *
     * @param request GetOrganizationsRequest
     * @return GetOrganizationsResponse
     */
    getOrganizations(request: GetOrganizationsRequest): Promise<GetOrganizationsResponse>;
    /**
     * @summary 获取角色用户信息
     *
     * @param request GetRoleUsersRequest
     * @param headers GetRoleUsersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRoleUsersResponse
     */
    getRoleUsersWithOptions(request: GetRoleUsersRequest, headers: GetRoleUsersHeaders, runtime: $Util.RuntimeOptions): Promise<GetRoleUsersResponse>;
    /**
     * @summary 获取角色用户信息
     *
     * @param request GetRoleUsersRequest
     * @return GetRoleUsersResponse
     */
    getRoleUsers(request: GetRoleUsersRequest): Promise<GetRoleUsersResponse>;
    /**
     * @summary 获取角色数据
     *
     * @param headers GetRolesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRolesResponse
     */
    getRolesWithOptions(headers: GetRolesHeaders, runtime: $Util.RuntimeOptions): Promise<GetRolesResponse>;
    /**
     * @summary 获取角色数据
     *
     * @return GetRolesResponse
     */
    getRoles(): Promise<GetRolesResponse>;
    /**
     * @summary 获取文件上传地址
     *
     * @param request GetUploadUrlRequest
     * @param headers GetUploadUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUploadUrlResponse
     */
    getUploadUrlWithOptions(request: GetUploadUrlRequest, headers: GetUploadUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetUploadUrlResponse>;
    /**
     * @summary 获取文件上传地址
     *
     * @param request GetUploadUrlRequest
     * @return GetUploadUrlResponse
     */
    getUploadUrl(request: GetUploadUrlRequest): Promise<GetUploadUrlResponse>;
    /**
     * @summary 获取用户数据
     *
     * @param request GetUsersRequest
     * @param headers GetUsersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUsersResponse
     */
    getUsersWithOptions(request: GetUsersRequest, headers: GetUsersHeaders, runtime: $Util.RuntimeOptions): Promise<GetUsersResponse>;
    /**
     * @summary 获取用户数据
     *
     * @param request GetUsersRequest
     * @return GetUsersResponse
     */
    getUsers(request: GetUsersRequest): Promise<GetUsersResponse>;
    /**
     * @summary 获取表单业务字段信息
     *
     * @param request LoadBizFieldsRequest
     * @param headers LoadBizFieldsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LoadBizFieldsResponse
     */
    loadBizFieldsWithOptions(request: LoadBizFieldsRequest, headers: LoadBizFieldsHeaders, runtime: $Util.RuntimeOptions): Promise<LoadBizFieldsResponse>;
    /**
     * @summary 获取表单业务字段信息
     *
     * @param request LoadBizFieldsRequest
     * @return LoadBizFieldsResponse
     */
    loadBizFields(request: LoadBizFieldsRequest): Promise<LoadBizFieldsResponse>;
    /**
     * @summary 获取单条表单业务对象实例
     *
     * @param request LoadBizObjectRequest
     * @param headers LoadBizObjectHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LoadBizObjectResponse
     */
    loadBizObjectWithOptions(request: LoadBizObjectRequest, headers: LoadBizObjectHeaders, runtime: $Util.RuntimeOptions): Promise<LoadBizObjectResponse>;
    /**
     * @summary 获取单条表单业务对象实例
     *
     * @param request LoadBizObjectRequest
     * @return LoadBizObjectResponse
     */
    loadBizObject(request: LoadBizObjectRequest): Promise<LoadBizObjectResponse>;
    /**
     * @summary 查询表单实例列表
     *
     * @param request LoadBizObjectsRequest
     * @param headers LoadBizObjectsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LoadBizObjectsResponse
     */
    loadBizObjectsWithOptions(request: LoadBizObjectsRequest, headers: LoadBizObjectsHeaders, runtime: $Util.RuntimeOptions): Promise<LoadBizObjectsResponse>;
    /**
     * @summary 查询表单实例列表
     *
     * @param request LoadBizObjectsRequest
     * @return LoadBizObjectsResponse
     */
    loadBizObjects(request: LoadBizObjectsRequest): Promise<LoadBizObjectsResponse>;
    /**
     * @summary 获取应用的功能节点信息
     *
     * @param request QueryAppFunctionNodesRequest
     * @param headers QueryAppFunctionNodesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAppFunctionNodesResponse
     */
    queryAppFunctionNodesWithOptions(request: QueryAppFunctionNodesRequest, headers: QueryAppFunctionNodesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAppFunctionNodesResponse>;
    /**
     * @summary 获取应用的功能节点信息
     *
     * @param request QueryAppFunctionNodesRequest
     * @return QueryAppFunctionNodesResponse
     */
    queryAppFunctionNodes(request: QueryAppFunctionNodesRequest): Promise<QueryAppFunctionNodesResponse>;
    /**
     * @summary 获取流程实例
     *
     * @param request QueryProcessesInstanceRequest
     * @param headers QueryProcessesInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryProcessesInstanceResponse
     */
    queryProcessesInstanceWithOptions(request: QueryProcessesInstanceRequest, headers: QueryProcessesInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryProcessesInstanceResponse>;
    /**
     * @summary 获取流程实例
     *
     * @param request QueryProcessesInstanceRequest
     * @return QueryProcessesInstanceResponse
     */
    queryProcessesInstance(request: QueryProcessesInstanceRequest): Promise<QueryProcessesInstanceResponse>;
    /**
     * @summary 获取流程实例节点工作项
     *
     * @param request QueryProcessesWorkItemsRequest
     * @param headers QueryProcessesWorkItemsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryProcessesWorkItemsResponse
     */
    queryProcessesWorkItemsWithOptions(request: QueryProcessesWorkItemsRequest, headers: QueryProcessesWorkItemsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryProcessesWorkItemsResponse>;
    /**
     * @summary 获取流程实例节点工作项
     *
     * @param request QueryProcessesWorkItemsRequest
     * @return QueryProcessesWorkItemsResponse
     */
    queryProcessesWorkItems(request: QueryProcessesWorkItemsRequest): Promise<QueryProcessesWorkItemsResponse>;
    /**
     * @summary 修改表单业务对象数据
     *
     * @param request UpdateBizObjectRequest
     * @param headers UpdateBizObjectHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateBizObjectResponse
     */
    updateBizObjectWithOptions(request: UpdateBizObjectRequest, headers: UpdateBizObjectHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateBizObjectResponse>;
    /**
     * @summary 修改表单业务对象数据
     *
     * @param request UpdateBizObjectRequest
     * @return UpdateBizObjectResponse
     */
    updateBizObject(request: UpdateBizObjectRequest): Promise<UpdateBizObjectResponse>;
}
