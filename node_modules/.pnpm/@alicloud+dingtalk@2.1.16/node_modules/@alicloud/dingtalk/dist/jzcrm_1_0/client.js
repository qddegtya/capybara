"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditSalesRequest = exports.EditSalesHeaders = exports.EditQuotationRecordResponse = exports.EditQuotationRecordResponseBody = exports.EditQuotationRecordRequest = exports.EditQuotationRecordHeaders = exports.EditPurchaseResponse = exports.EditPurchaseResponseBody = exports.EditPurchaseRequest = exports.EditPurchaseHeaders = exports.EditProductionResponse = exports.EditProductionResponseBody = exports.EditProductionRequest = exports.EditProductionHeaders = exports.EditOutstockResponse = exports.EditOutstockResponseBody = exports.EditOutstockRequest = exports.EditOutstockHeaders = exports.EditOrderResponse = exports.EditOrderResponseBody = exports.EditOrderRequest = exports.EditOrderHeaders = exports.EditInvoiceResponse = exports.EditInvoiceResponseBody = exports.EditInvoiceRequest = exports.EditInvoiceHeaders = exports.EditIntostockResponse = exports.EditIntostockResponseBody = exports.EditIntostockRequest = exports.EditIntostockHeaders = exports.EditGoodsResponse = exports.EditGoodsResponseBody = exports.EditGoodsRequest = exports.EditGoodsHeaders = exports.EditExchangeResponse = exports.EditExchangeResponseBody = exports.EditExchangeRequest = exports.EditExchangeHeaders = exports.EditCustomerPoolResponse = exports.EditCustomerPoolResponseBody = exports.EditCustomerPoolRequest = exports.EditCustomerPoolHeaders = exports.EditCustomerResponse = exports.EditCustomerResponseBody = exports.EditCustomerRequest = exports.EditCustomerHeaders = exports.EditContactResponse = exports.EditContactResponseBody = exports.EditContactRequest = exports.EditContactHeaders = void 0;
exports.GetDataViewResponseBodyData = exports.GetDataListResponseBodyData = exports.EditSalesRequestData = exports.EditQuotationRecordRequestData = exports.EditPurchaseRequestData = exports.EditProductionRequestData = exports.EditOutstockRequestData = exports.EditOrderRequestData = exports.EditInvoiceRequestData = exports.EditIntostockRequestData = exports.EditGoodsRequestData = exports.EditExchangeRequestData = exports.EditCustomerPoolRequestData = exports.EditCustomerRequestData = exports.EditContactRequestData = exports.GetDataViewResponse = exports.GetDataViewResponseBody = exports.GetDataViewRequest = exports.GetDataViewHeaders = exports.GetDataListResponse = exports.GetDataListResponseBody = exports.GetDataListRequest = exports.GetDataListHeaders = exports.EditSalesResponse = exports.EditSalesResponseBody = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class EditContactHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditContactHeaders = EditContactHeaders;
class EditContactRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditContactRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditContactRequest = EditContactRequest;
class EditContactResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditContactResponseBody = EditContactResponseBody;
class EditContactResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditContactResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditContactResponse = EditContactResponse;
class EditCustomerHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerHeaders = EditCustomerHeaders;
class EditCustomerRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditCustomerRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerRequest = EditCustomerRequest;
class EditCustomerResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerResponseBody = EditCustomerResponseBody;
class EditCustomerResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditCustomerResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerResponse = EditCustomerResponse;
class EditCustomerPoolHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerPoolHeaders = EditCustomerPoolHeaders;
class EditCustomerPoolRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditCustomerPoolRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerPoolRequest = EditCustomerPoolRequest;
class EditCustomerPoolResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerPoolResponseBody = EditCustomerPoolResponseBody;
class EditCustomerPoolResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditCustomerPoolResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerPoolResponse = EditCustomerPoolResponse;
class EditExchangeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditExchangeHeaders = EditExchangeHeaders;
class EditExchangeRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditExchangeRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditExchangeRequest = EditExchangeRequest;
class EditExchangeResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditExchangeResponseBody = EditExchangeResponseBody;
class EditExchangeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditExchangeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditExchangeResponse = EditExchangeResponse;
class EditGoodsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditGoodsHeaders = EditGoodsHeaders;
class EditGoodsRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditGoodsRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditGoodsRequest = EditGoodsRequest;
class EditGoodsResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditGoodsResponseBody = EditGoodsResponseBody;
class EditGoodsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditGoodsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditGoodsResponse = EditGoodsResponse;
class EditIntostockHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditIntostockHeaders = EditIntostockHeaders;
class EditIntostockRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditIntostockRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditIntostockRequest = EditIntostockRequest;
class EditIntostockResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditIntostockResponseBody = EditIntostockResponseBody;
class EditIntostockResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditIntostockResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditIntostockResponse = EditIntostockResponse;
class EditInvoiceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditInvoiceHeaders = EditInvoiceHeaders;
class EditInvoiceRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditInvoiceRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditInvoiceRequest = EditInvoiceRequest;
class EditInvoiceResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditInvoiceResponseBody = EditInvoiceResponseBody;
class EditInvoiceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditInvoiceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditInvoiceResponse = EditInvoiceResponse;
class EditOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOrderHeaders = EditOrderHeaders;
class EditOrderRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditOrderRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOrderRequest = EditOrderRequest;
class EditOrderResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOrderResponseBody = EditOrderResponseBody;
class EditOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOrderResponse = EditOrderResponse;
class EditOutstockHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOutstockHeaders = EditOutstockHeaders;
class EditOutstockRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditOutstockRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOutstockRequest = EditOutstockRequest;
class EditOutstockResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOutstockResponseBody = EditOutstockResponseBody;
class EditOutstockResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditOutstockResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOutstockResponse = EditOutstockResponse;
class EditProductionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditProductionHeaders = EditProductionHeaders;
class EditProductionRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditProductionRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditProductionRequest = EditProductionRequest;
class EditProductionResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditProductionResponseBody = EditProductionResponseBody;
class EditProductionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditProductionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditProductionResponse = EditProductionResponse;
class EditPurchaseHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditPurchaseHeaders = EditPurchaseHeaders;
class EditPurchaseRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditPurchaseRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditPurchaseRequest = EditPurchaseRequest;
class EditPurchaseResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditPurchaseResponseBody = EditPurchaseResponseBody;
class EditPurchaseResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditPurchaseResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditPurchaseResponse = EditPurchaseResponse;
class EditQuotationRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditQuotationRecordHeaders = EditQuotationRecordHeaders;
class EditQuotationRecordRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditQuotationRecordRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditQuotationRecordRequest = EditQuotationRecordRequest;
class EditQuotationRecordResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditQuotationRecordResponseBody = EditQuotationRecordResponseBody;
class EditQuotationRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditQuotationRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditQuotationRecordResponse = EditQuotationRecordResponse;
class EditSalesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditSalesHeaders = EditSalesHeaders;
class EditSalesRequest extends $tea.Model {
    static names() {
        return {
            data: 'data',
            datatype: 'datatype',
            msgid: 'msgid',
            stamp: 'stamp',
        };
    }
    static types() {
        return {
            data: EditSalesRequestData,
            datatype: 'number',
            msgid: 'number',
            stamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditSalesRequest = EditSalesRequest;
class EditSalesResponseBody extends $tea.Model {
    static names() {
        return {
            msgid: 'msgid',
            time: 'time',
        };
    }
    static types() {
        return {
            msgid: 'number',
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditSalesResponseBody = EditSalesResponseBody;
class EditSalesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditSalesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditSalesResponse = EditSalesResponse;
class GetDataListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataListHeaders = GetDataListHeaders;
class GetDataListRequest extends $tea.Model {
    static names() {
        return {
            datatype: 'datatype',
            page: 'page',
            pagesize: 'pagesize',
        };
    }
    static types() {
        return {
            datatype: 'string',
            page: 'number',
            pagesize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataListRequest = GetDataListRequest;
class GetDataListResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            dataname: 'dataname',
            page: 'page',
            pageSize: 'pageSize',
            time: 'time',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            data: { 'type': 'array', 'itemType': GetDataListResponseBodyData },
            dataname: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            page: 'number',
            pageSize: 'number',
            time: 'string',
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataListResponseBody = GetDataListResponseBody;
class GetDataListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDataListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataListResponse = GetDataListResponse;
class GetDataViewHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataViewHeaders = GetDataViewHeaders;
class GetDataViewRequest extends $tea.Model {
    static names() {
        return {
            datatype: 'datatype',
            msgid: 'msgid',
        };
    }
    static types() {
        return {
            datatype: 'string',
            msgid: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataViewRequest = GetDataViewRequest;
class GetDataViewResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            dataname: 'dataname',
            time: 'time',
        };
    }
    static types() {
        return {
            data: GetDataViewResponseBodyData,
            dataname: { 'type': 'map', 'keyType': 'string', 'valueType': '{[key: string]: any}' },
            time: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataViewResponseBody = GetDataViewResponseBody;
class GetDataViewResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDataViewResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataViewResponse = GetDataViewResponse;
class EditContactRequestData extends $tea.Model {
    static names() {
        return {
            dataUserid: 'data_userid',
            lxrAddress: 'lxr_address',
            lxrBirthday: 'lxr_birthday',
            lxrChengwei: 'lxr_chengwei',
            lxrCtnumber: 'lxr_ctnumber',
            lxrCttype: 'lxr_cttype',
            lxrCustomerid: 'lxr_customerid',
            lxrDepartment: 'lxr_department',
            lxrDingtalk: 'lxr_dingtalk',
            lxrEmail: 'lxr_email',
            lxrFax: 'lxr_fax',
            lxrGroup: 'lxr_group',
            lxrHandset: 'lxr_handset',
            lxrHeadship: 'lxr_headship',
            lxrLike: 'lxr_like',
            lxrName: 'lxr_name',
            lxrPhoto: 'lxr_photo',
            lxrPreside: 'lxr_preside',
            lxrPst: 'lxr_pst',
            lxrQq: 'lxr_qq',
            lxrRemark: 'lxr_remark',
            lxrSex: 'lxr_sex',
            lxrSkype: 'lxr_skype',
            lxrTel: 'lxr_tel',
            lxrType: 'lxr_type',
            lxrWangwang: 'lxr_wangwang',
            lxrWeixin: 'lxr_weixin',
            lxrWorktel: 'lxr_worktel',
        };
    }
    static types() {
        return {
            dataUserid: 'string',
            lxrAddress: 'string',
            lxrBirthday: 'string',
            lxrChengwei: 'string',
            lxrCtnumber: 'string',
            lxrCttype: 'string',
            lxrCustomerid: 'string',
            lxrDepartment: 'string',
            lxrDingtalk: 'string',
            lxrEmail: 'string',
            lxrFax: 'string',
            lxrGroup: 'string',
            lxrHandset: 'string',
            lxrHeadship: 'string',
            lxrLike: 'string',
            lxrName: 'string',
            lxrPhoto: 'string',
            lxrPreside: 'string',
            lxrPst: 'string',
            lxrQq: 'string',
            lxrRemark: 'string',
            lxrSex: 'string',
            lxrSkype: 'string',
            lxrTel: 'string',
            lxrType: 'string',
            lxrWangwang: 'string',
            lxrWeixin: 'string',
            lxrWorktel: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditContactRequestData = EditContactRequestData;
class EditCustomerRequestData extends $tea.Model {
    static names() {
        return {
            dataUserid: 'data_userid',
            khAddress: 'kh_address',
            khAppellation: 'kh_appellation',
            khBefontof: 'kh_befontof',
            khBillinfo: 'kh_billinfo',
            khCity: 'kh_city',
            khClass: 'kh_class',
            khCoaddress: 'kh_coaddress',
            khContype: 'kh_contype',
            khCountry: 'kh_country',
            khCreditgrade: 'kh_creditgrade',
            khCtnumber: 'kh_ctnumber',
            khCttype: 'kh_cttype',
            khDepartment: 'kh_department',
            khDingtalk: 'kh_dingtalk',
            khEmail: 'kh_email',
            khEmployees: 'kh_employees',
            khFax: 'kh_fax',
            khFrom: 'kh_from',
            khHandset: 'kh_handset',
            khHeadship: 'kh_headship',
            khHotfl: 'kh_hotfl',
            khHotlevel: 'kh_hotlevel',
            khHotmemo: 'kh_hotmemo',
            khHottype: 'kh_hottype',
            khIndustry: 'kh_industry',
            khInfo: 'kh_info',
            khJibie: 'kh_jibie',
            khName: 'kh_name',
            khPkhid: 'kh_pkhid',
            khPreside: 'kh_preside',
            khProvince: 'kh_province',
            khPst: 'kh_pst',
            khQq: 'kh_qq',
            khRalagrade: 'kh_ralagrade',
            khRemark: 'kh_remark',
            khSex: 'kh_sex',
            khShortname: 'kh_shortname',
            khSkype: 'kh_skype',
            khSn: 'kh_sn',
            khStatus: 'kh_status',
            khTel: 'kh_tel',
            khType: 'kh_type',
            khValrating: 'kh_valrating',
            khWangwang: 'kh_wangwang',
            khWeb: 'kh_web',
            khWeixin: 'kh_weixin',
            khWorktel: 'kh_worktel',
        };
    }
    static types() {
        return {
            dataUserid: 'string',
            khAddress: 'string',
            khAppellation: 'string',
            khBefontof: 'string',
            khBillinfo: 'string',
            khCity: 'string',
            khClass: 'string',
            khCoaddress: 'string',
            khContype: 'string',
            khCountry: 'string',
            khCreditgrade: 'string',
            khCtnumber: 'string',
            khCttype: 'string',
            khDepartment: 'string',
            khDingtalk: 'string',
            khEmail: 'string',
            khEmployees: 'string',
            khFax: 'string',
            khFrom: 'string',
            khHandset: 'string',
            khHeadship: 'string',
            khHotfl: 'string',
            khHotlevel: 'string',
            khHotmemo: 'string',
            khHottype: 'string',
            khIndustry: 'string',
            khInfo: 'string',
            khJibie: 'string',
            khName: 'string',
            khPkhid: 'string',
            khPreside: 'string',
            khProvince: 'string',
            khPst: 'string',
            khQq: 'string',
            khRalagrade: 'string',
            khRemark: 'string',
            khSex: 'string',
            khShortname: 'string',
            khSkype: 'string',
            khSn: 'string',
            khStatus: 'string',
            khTel: 'string',
            khType: 'string',
            khValrating: 'string',
            khWangwang: 'string',
            khWeb: 'string',
            khWeixin: 'string',
            khWorktel: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerRequestData = EditCustomerRequestData;
class EditCustomerPoolRequestData extends $tea.Model {
    static names() {
        return {
            dataUserid: 'data_userid',
            khAddress: 'kh_address',
            khAppellation: 'kh_appellation',
            khBefontof: 'kh_befontof',
            khBillinfo: 'kh_billinfo',
            khCity: 'kh_city',
            khClass: 'kh_class',
            khCoaddress: 'kh_coaddress',
            khContype: 'kh_contype',
            khCountry: 'kh_country',
            khCreditgrade: 'kh_creditgrade',
            khCtnumber: 'kh_ctnumber',
            khCttype: 'kh_cttype',
            khDepartment: 'kh_department',
            khDingtalk: 'kh_dingtalk',
            khEmail: 'kh_email',
            khEmployees: 'kh_employees',
            khFax: 'kh_fax',
            khFrom: 'kh_from',
            khGenzongtime: 'kh_genzongtime',
            khHandset: 'kh_handset',
            khHeadship: 'kh_headship',
            khHotfl: 'kh_hotfl',
            khHotlevel: 'kh_hotlevel',
            khHotmemo: 'kh_hotmemo',
            khHottype: 'kh_hottype',
            khIndustry: 'kh_industry',
            khInfo: 'kh_info',
            khJibie: 'kh_jibie',
            khName: 'kh_name',
            khPkhid: 'kh_pkhid',
            khPreside: 'kh_preside',
            khProvince: 'kh_province',
            khPst: 'kh_pst',
            khQq: 'kh_qq',
            khRalagrade: 'kh_ralagrade',
            khRemark: 'kh_remark',
            khSex: 'kh_sex',
            khShortname: 'kh_shortname',
            khSkype: 'kh_skype',
            khSn: 'kh_sn',
            khStatus: 'kh_status',
            khTel: 'kh_tel',
            khType: 'kh_type',
            khValrating: 'kh_valrating',
            khWangwang: 'kh_wangwang',
            khWeb: 'kh_web',
            khWeixin: 'kh_weixin',
            khWorktel: 'kh_worktel',
        };
    }
    static types() {
        return {
            dataUserid: 'string',
            khAddress: 'string',
            khAppellation: 'string',
            khBefontof: 'string',
            khBillinfo: 'string',
            khCity: 'string',
            khClass: 'string',
            khCoaddress: 'string',
            khContype: 'string',
            khCountry: 'string',
            khCreditgrade: 'string',
            khCtnumber: 'string',
            khCttype: 'string',
            khDepartment: 'string',
            khDingtalk: 'string',
            khEmail: 'string',
            khEmployees: 'string',
            khFax: 'string',
            khFrom: 'string',
            khGenzongtime: 'string',
            khHandset: 'string',
            khHeadship: 'string',
            khHotfl: 'string',
            khHotlevel: 'string',
            khHotmemo: 'string',
            khHottype: 'string',
            khIndustry: 'string',
            khInfo: 'string',
            khJibie: 'string',
            khName: 'string',
            khPkhid: 'string',
            khPreside: 'string',
            khProvince: 'string',
            khPst: 'string',
            khQq: 'string',
            khRalagrade: 'string',
            khRemark: 'string',
            khSex: 'string',
            khShortname: 'string',
            khSkype: 'string',
            khSn: 'string',
            khStatus: 'string',
            khTel: 'string',
            khType: 'string',
            khValrating: 'string',
            khWangwang: 'string',
            khWeb: 'string',
            khWeixin: 'string',
            khWorktel: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditCustomerPoolRequestData = EditCustomerPoolRequestData;
class EditExchangeRequestData extends $tea.Model {
    static names() {
        return {
            childMx: 'child_mx',
            dataUserid: 'data_userid',
            hhCustomerid: 'hh_customerid',
            hhDate: 'hh_date',
            hhInempid: 'hh_inempid',
            hhInlibid: 'hh_inlibid',
            hhIntime: 'hh_intime',
            hhNumber: 'hh_number',
            hhOrderid: 'hh_orderid',
            hhOutempid: 'hh_outempid',
            hhOutlibid: 'hh_outlibid',
            hhOuttime: 'hh_outtime',
            hhRemark: 'hh_remark',
            hhState: 'hh_state',
            hhTitle: 'hh_title',
            hhType: 'hh_type',
        };
    }
    static types() {
        return {
            childMx: 'string',
            dataUserid: 'string',
            hhCustomerid: 'string',
            hhDate: 'string',
            hhInempid: 'string',
            hhInlibid: 'string',
            hhIntime: 'string',
            hhNumber: 'string',
            hhOrderid: 'string',
            hhOutempid: 'string',
            hhOutlibid: 'string',
            hhOuttime: 'string',
            hhRemark: 'string',
            hhState: 'string',
            hhTitle: 'string',
            hhType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditExchangeRequestData = EditExchangeRequestData;
class EditGoodsRequestData extends $tea.Model {
    static names() {
        return {
            addedtime: 'addedtime',
            cbprice: 'cbprice',
            cpParentid: 'cp_parentid',
            cparea: 'cparea',
            cpbarcode: 'cpbarcode',
            cpbrand: 'cpbrand',
            cpcontent: 'cpcontent',
            cpguige: 'cpguige',
            cpimg: 'cpimg',
            cpname: 'cpname',
            cpno: 'cpno',
            cpremark: 'cpremark',
            cptype: 'cptype',
            cpunit: 'cpunit',
            cpweight: 'cpweight',
            dataUserid: 'data_userid',
            gysid: 'gysid',
            ispicimanage: 'ispicimanage',
            issnmanage: 'issnmanage',
            isstock: 'isstock',
            isstop: 'isstop',
            preprice1: 'preprice1',
            preprice2: 'preprice2',
            preprice3: 'preprice3',
            preprice4: 'preprice4',
            stockdown: 'stockdown',
            stockup: 'stockup',
            typeid: 'typeid',
            unitrate: 'unitrate',
        };
    }
    static types() {
        return {
            addedtime: 'string',
            cbprice: 'string',
            cpParentid: 'string',
            cparea: 'string',
            cpbarcode: 'string',
            cpbrand: 'string',
            cpcontent: 'string',
            cpguige: 'string',
            cpimg: 'string',
            cpname: 'string',
            cpno: 'string',
            cpremark: 'string',
            cptype: 'string',
            cpunit: 'string',
            cpweight: 'string',
            dataUserid: 'string',
            gysid: 'string',
            ispicimanage: 'string',
            issnmanage: 'string',
            isstock: 'string',
            isstop: 'string',
            preprice1: 'string',
            preprice2: 'string',
            preprice3: 'string',
            preprice4: 'string',
            stockdown: 'string',
            stockup: 'string',
            typeid: 'string',
            unitrate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditGoodsRequestData = EditGoodsRequestData;
class EditIntostockRequestData extends $tea.Model {
    static names() {
        return {
            askempid: 'askempid',
            auditreson: 'auditreson',
            billno: 'billno',
            childMx: 'child_mx',
            customerid: 'customerid',
            dataUserid: 'data_userid',
            empid: 'empid',
            inorout: 'inorout',
            libiodate: 'libiodate',
            libioname: 'libioname',
            libiostate: 'libiostate',
            orderid: 'orderid',
            remark: 'remark',
            stocklibid: 'stocklibid',
        };
    }
    static types() {
        return {
            askempid: 'string',
            auditreson: 'string',
            billno: 'string',
            childMx: 'string',
            customerid: 'string',
            dataUserid: 'string',
            empid: 'string',
            inorout: 'string',
            libiodate: 'string',
            libioname: 'string',
            libiostate: 'string',
            orderid: 'string',
            remark: 'string',
            stocklibid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditIntostockRequestData = EditIntostockRequestData;
class EditInvoiceRequestData extends $tea.Model {
    static names() {
        return {
            childMx: 'child_mx',
            dataUserid: 'data_userid',
            fhAddress: 'fh_address',
            fhCustomerid: 'fh_customerid',
            fhDate: 'fh_date',
            fhEmail: 'fh_email',
            fhHandset: 'fh_handset',
            fhHtorder: 'fh_htorder',
            fhJianshu: 'fh_jianshu',
            fhKg: 'fh_kg',
            fhLinkman: 'fh_linkman',
            fhLxrid: 'fh_lxrid',
            fhMode: 'fh_mode',
            fhMsn: 'fh_msn',
            fhNumber: 'fh_number',
            fhPost: 'fh_post',
            fhPreside: 'fh_preside',
            fhRemark: 'fh_remark',
            fhShipper: 'fh_shipper',
            fhState: 'fh_state',
            fhTel: 'fh_tel',
            fhTitle: 'fh_title',
            fhYunfei: 'fh_yunfei',
        };
    }
    static types() {
        return {
            childMx: 'string',
            dataUserid: 'string',
            fhAddress: 'string',
            fhCustomerid: 'string',
            fhDate: 'string',
            fhEmail: 'string',
            fhHandset: 'string',
            fhHtorder: 'string',
            fhJianshu: 'string',
            fhKg: 'string',
            fhLinkman: 'string',
            fhLxrid: 'string',
            fhMode: 'string',
            fhMsn: 'string',
            fhNumber: 'string',
            fhPost: 'string',
            fhPreside: 'string',
            fhRemark: 'string',
            fhShipper: 'string',
            fhState: 'string',
            fhTel: 'string',
            fhTitle: 'string',
            fhYunfei: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditInvoiceRequestData = EditInvoiceRequestData;
class EditOrderRequestData extends $tea.Model {
    static names() {
        return {
            childMx: 'child_mx',
            dataUserid: 'data_userid',
            fahuoaddressid: 'fahuoaddressid',
            htBegindate: 'ht_begindate',
            htContract: 'ht_contract',
            htCustomerid: 'ht_customerid',
            htCusub: 'ht_cusub',
            htDate: 'ht_date',
            htDeliplace: 'ht_deliplace',
            htEnddate: 'ht_enddate',
            htFjmoney: 'ht_fjmoney',
            htFjmoneylx: 'ht_fjmoneylx',
            htKjmoney: 'ht_kjmoney',
            htLxrid: 'ht_lxrid',
            htLxrinfo: 'ht_lxrinfo',
            htMoneyzhekou: 'ht_moneyzhekou',
            htNumber: 'ht_number',
            htOrder: 'ht_order',
            htPaymode: 'ht_paymode',
            htPreside: 'ht_preside',
            htRemark: 'ht_remark',
            htState: 'ht_state',
            htSummemo: 'ht_summemo',
            htSummoney: 'ht_summoney',
            htTitle: 'ht_title',
            htType: 'ht_type',
            htWesub: 'ht_wesub',
            htWuliutype: 'ht_wuliutype',
            htXshid: 'ht_xshid',
            htYunfeimoney: 'ht_yunfeimoney',
        };
    }
    static types() {
        return {
            childMx: 'string',
            dataUserid: 'string',
            fahuoaddressid: 'string',
            htBegindate: 'string',
            htContract: 'string',
            htCustomerid: 'string',
            htCusub: 'string',
            htDate: 'string',
            htDeliplace: 'string',
            htEnddate: 'string',
            htFjmoney: 'string',
            htFjmoneylx: 'string',
            htKjmoney: 'string',
            htLxrid: 'string',
            htLxrinfo: 'string',
            htMoneyzhekou: 'string',
            htNumber: 'string',
            htOrder: 'string',
            htPaymode: 'string',
            htPreside: 'string',
            htRemark: 'string',
            htState: 'string',
            htSummemo: 'string',
            htSummoney: 'string',
            htTitle: 'string',
            htType: 'string',
            htWesub: 'string',
            htWuliutype: 'string',
            htXshid: 'string',
            htYunfeimoney: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOrderRequestData = EditOrderRequestData;
class EditOutstockRequestData extends $tea.Model {
    static names() {
        return {
            askempid: 'askempid',
            auditreson: 'auditreson',
            billno: 'billno',
            childMx: 'child_mx',
            customerid: 'customerid',
            dataUserid: 'data_userid',
            empid: 'empid',
            inorout: 'inorout',
            libiodate: 'libiodate',
            libioname: 'libioname',
            libiostate: 'libiostate',
            orderid: 'orderid',
            remark: 'remark',
            stocklibid: 'stocklibid',
        };
    }
    static types() {
        return {
            askempid: 'string',
            auditreson: 'string',
            billno: 'string',
            childMx: 'string',
            customerid: 'string',
            dataUserid: 'string',
            empid: 'string',
            inorout: 'string',
            libiodate: 'string',
            libioname: 'string',
            libiostate: 'string',
            orderid: 'string',
            remark: 'string',
            stocklibid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditOutstockRequestData = EditOutstockRequestData;
class EditProductionRequestData extends $tea.Model {
    static names() {
        return {
            dataUserid: 'data_userid',
            schCustomerid: 'sch_customerid',
            schEndtime: 'sch_endtime',
            schFinished: 'sch_finished',
            schHtid: 'sch_htid',
            schMakeemp: 'sch_makeemp',
            schNumber: 'sch_number',
            schPlanendtime: 'sch_planendtime',
            schPrincipal: 'sch_principal',
            schRemark: 'sch_remark',
            schStarttime: 'sch_starttime',
            schStatesstr: 'sch_statesstr',
            schTitle: 'sch_title',
        };
    }
    static types() {
        return {
            dataUserid: 'string',
            schCustomerid: 'string',
            schEndtime: 'string',
            schFinished: 'string',
            schHtid: 'string',
            schMakeemp: 'string',
            schNumber: 'string',
            schPlanendtime: 'string',
            schPrincipal: 'string',
            schRemark: 'string',
            schStarttime: 'string',
            schStatesstr: 'string',
            schTitle: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditProductionRequestData = EditProductionRequestData;
class EditPurchaseRequestData extends $tea.Model {
    static names() {
        return {
            cgFjmoney: 'cg_fjmoney',
            cgFjmoneylx: 'cg_fjmoneylx',
            cgKjmoney: 'cg_kjmoney',
            cgMoneyzhekou: 'cg_moneyzhekou',
            cgZxstate: 'cg_zxstate',
            cgdate: 'cgdate',
            cgname: 'cgname',
            cgno: 'cgno',
            cgremark: 'cgremark',
            cgtype: 'cgtype',
            childMx: 'child_mx',
            dataUserid: 'data_userid',
            empid: 'empid',
            gysLxrid: 'gys_lxrid',
            gysLxrinfo: 'gys_lxrinfo',
            gysid: 'gysid',
            gysjingban: 'gysjingban',
            orderHtid: 'order_htid',
            orderKhid: 'order_khid',
            summoney: 'summoney',
        };
    }
    static types() {
        return {
            cgFjmoney: 'string',
            cgFjmoneylx: 'string',
            cgKjmoney: 'string',
            cgMoneyzhekou: 'string',
            cgZxstate: 'string',
            cgdate: 'string',
            cgname: 'string',
            cgno: 'string',
            cgremark: 'string',
            cgtype: 'string',
            childMx: 'string',
            dataUserid: 'string',
            empid: 'string',
            gysLxrid: 'string',
            gysLxrinfo: 'string',
            gysid: 'string',
            gysjingban: 'string',
            orderHtid: 'string',
            orderKhid: 'string',
            summoney: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditPurchaseRequestData = EditPurchaseRequestData;
class EditQuotationRecordRequestData extends $tea.Model {
    static names() {
        return {
            bjBjren: 'bj_bjren',
            bjBzremark: 'bj_bzremark',
            bjCustomerid: 'bj_customerid',
            bjDate: 'bj_date',
            bjFjmoney: 'bj_fjmoney',
            bjFjmoneylx: 'bj_fjmoneylx',
            bjFkremark: 'bj_fkremark',
            bjJfremark: 'bj_jfremark',
            bjJshren: 'bj_jshren',
            bjKjmoney: 'bj_kjmoney',
            bjLianxi: 'bj_lianxi',
            bjMoneyzhekou: 'bj_moneyzhekou',
            bjNumber: 'bj_number',
            bjPrice: 'bj_price',
            bjRemark: 'bj_remark',
            bjState: 'bj_state',
            bjTitle: 'bj_title',
            bjXshid: 'bj_xshid',
            childMx: 'child_mx',
            dataUserid: 'data_userid',
        };
    }
    static types() {
        return {
            bjBjren: 'string',
            bjBzremark: 'string',
            bjCustomerid: 'string',
            bjDate: 'string',
            bjFjmoney: 'string',
            bjFjmoneylx: 'string',
            bjFkremark: 'string',
            bjJfremark: 'string',
            bjJshren: 'string',
            bjKjmoney: 'string',
            bjLianxi: 'string',
            bjMoneyzhekou: 'string',
            bjNumber: 'string',
            bjPrice: 'string',
            bjRemark: 'string',
            bjState: 'string',
            bjTitle: 'string',
            bjXshid: 'string',
            childMx: 'string',
            dataUserid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditQuotationRecordRequestData = EditQuotationRecordRequestData;
class EditSalesRequestData extends $tea.Model {
    static names() {
        return {
            dataUserid: 'data_userid',
            xshCustomerid: 'xsh_customerid',
            xshDate: 'xsh_date',
            xshExpdate: 'xsh_expdate',
            xshExpmoney: 'xsh_expmoney',
            xshFrom: 'xsh_from',
            xshKnx: 'xsh_knx',
            xshLianxi: 'xsh_lianxi',
            xshLxrid: 'xsh_lxrid',
            xshMoneynote: 'xsh_moneynote',
            xshNumber: 'xsh_number',
            xshPhase: 'xsh_phase',
            xshPhasenote: 'xsh_phasenote',
            xshPreside: 'xsh_preside',
            xshProvider: 'xsh_provider',
            xshRequire: 'xsh_require',
            xshState: 'xsh_state',
            xshTitle: 'xsh_title',
            xshType: 'xsh_type',
        };
    }
    static types() {
        return {
            dataUserid: 'string',
            xshCustomerid: 'string',
            xshDate: 'string',
            xshExpdate: 'string',
            xshExpmoney: 'string',
            xshFrom: 'string',
            xshKnx: 'string',
            xshLianxi: 'string',
            xshLxrid: 'string',
            xshMoneynote: 'string',
            xshNumber: 'string',
            xshPhase: 'string',
            xshPhasenote: 'string',
            xshPreside: 'string',
            xshProvider: 'string',
            xshRequire: 'string',
            xshState: 'string',
            xshTitle: 'string',
            xshType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditSalesRequestData = EditSalesRequestData;
class GetDataListResponseBodyData extends $tea.Model {
    static names() {
        return {
            detail: 'detail',
        };
    }
    static types() {
        return {
            detail: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataListResponseBodyData = GetDataListResponseBodyData;
class GetDataViewResponseBodyData extends $tea.Model {
    static names() {
        return {
            detail: 'detail',
        };
    }
    static types() {
        return {
            detail: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDataViewResponseBodyData = GetDataViewResponseBodyData;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 编辑联系人数据
     *
     * @param request EditContactRequest
     * @param headers EditContactHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditContactResponse
     */
    async editContactWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditContact",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/contacts`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditContactResponse({}));
    }
    /**
     * @summary 编辑联系人数据
     *
     * @param request EditContactRequest
     * @return EditContactResponse
     */
    async editContact(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditContactHeaders({});
        return await this.editContactWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑客户数据
     *
     * @param request EditCustomerRequest
     * @param headers EditCustomerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditCustomerResponse
     */
    async editCustomerWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditCustomer",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/customers`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditCustomerResponse({}));
    }
    /**
     * @summary 编辑客户数据
     *
     * @param request EditCustomerRequest
     * @return EditCustomerResponse
     */
    async editCustomer(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditCustomerHeaders({});
        return await this.editCustomerWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑客户公共池数据
     *
     * @param request EditCustomerPoolRequest
     * @param headers EditCustomerPoolHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditCustomerPoolResponse
     */
    async editCustomerPoolWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditCustomerPool",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/customerPools`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditCustomerPoolResponse({}));
    }
    /**
     * @summary 编辑客户公共池数据
     *
     * @param request EditCustomerPoolRequest
     * @return EditCustomerPoolResponse
     */
    async editCustomerPool(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditCustomerPoolHeaders({});
        return await this.editCustomerPoolWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑销售换货单数据
     *
     * @param request EditExchangeRequest
     * @param headers EditExchangeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditExchangeResponse
     */
    async editExchangeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditExchange",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/exchanges`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditExchangeResponse({}));
    }
    /**
     * @summary 编辑销售换货单数据
     *
     * @param request EditExchangeRequest
     * @return EditExchangeResponse
     */
    async editExchange(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditExchangeHeaders({});
        return await this.editExchangeWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑产品数据
     *
     * @param request EditGoodsRequest
     * @param headers EditGoodsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditGoodsResponse
     */
    async editGoodsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditGoods",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/goods`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditGoodsResponse({}));
    }
    /**
     * @summary 编辑产品数据
     *
     * @param request EditGoodsRequest
     * @return EditGoodsResponse
     */
    async editGoods(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditGoodsHeaders({});
        return await this.editGoodsWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑入库单数据
     *
     * @param request EditIntostockRequest
     * @param headers EditIntostockHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditIntostockResponse
     */
    async editIntostockWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditIntostock",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/intostocks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditIntostockResponse({}));
    }
    /**
     * @summary 编辑入库单数据
     *
     * @param request EditIntostockRequest
     * @return EditIntostockResponse
     */
    async editIntostock(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditIntostockHeaders({});
        return await this.editIntostockWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑发货单数据
     *
     * @param request EditInvoiceRequest
     * @param headers EditInvoiceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditInvoiceResponse
     */
    async editInvoiceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditInvoice",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/invoices`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditInvoiceResponse({}));
    }
    /**
     * @summary 编辑发货单数据
     *
     * @param request EditInvoiceRequest
     * @return EditInvoiceResponse
     */
    async editInvoice(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditInvoiceHeaders({});
        return await this.editInvoiceWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑合同订单数据
     *
     * @param request EditOrderRequest
     * @param headers EditOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditOrderResponse
     */
    async editOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditOrder",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/orders`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditOrderResponse({}));
    }
    /**
     * @summary 编辑合同订单数据
     *
     * @param request EditOrderRequest
     * @return EditOrderResponse
     */
    async editOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditOrderHeaders({});
        return await this.editOrderWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑出库单信息
     *
     * @param request EditOutstockRequest
     * @param headers EditOutstockHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditOutstockResponse
     */
    async editOutstockWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditOutstock",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/outstocks`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditOutstockResponse({}));
    }
    /**
     * @summary 编辑出库单信息
     *
     * @param request EditOutstockRequest
     * @return EditOutstockResponse
     */
    async editOutstock(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditOutstockHeaders({});
        return await this.editOutstockWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑生产单数据
     *
     * @param request EditProductionRequest
     * @param headers EditProductionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditProductionResponse
     */
    async editProductionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditProduction",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/productions`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditProductionResponse({}));
    }
    /**
     * @summary 编辑生产单数据
     *
     * @param request EditProductionRequest
     * @return EditProductionResponse
     */
    async editProduction(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditProductionHeaders({});
        return await this.editProductionWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑采购单数据
     *
     * @param request EditPurchaseRequest
     * @param headers EditPurchaseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditPurchaseResponse
     */
    async editPurchaseWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditPurchase",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/purchases`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditPurchaseResponse({}));
    }
    /**
     * @summary 编辑采购单数据
     *
     * @param request EditPurchaseRequest
     * @return EditPurchaseResponse
     */
    async editPurchase(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditPurchaseHeaders({});
        return await this.editPurchaseWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑报价记录数据
     *
     * @param request EditQuotationRecordRequest
     * @param headers EditQuotationRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditQuotationRecordResponse
     */
    async editQuotationRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditQuotationRecord",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/quotationRecords`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditQuotationRecordResponse({}));
    }
    /**
     * @summary 编辑报价记录数据
     *
     * @param request EditQuotationRecordRequest
     * @return EditQuotationRecordResponse
     */
    async editQuotationRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditQuotationRecordHeaders({});
        return await this.editQuotationRecordWithOptions(request, headers, runtime);
    }
    /**
     * @summary 编辑销售机会数据
     *
     * @param request EditSalesRequest
     * @param headers EditSalesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditSalesResponse
     */
    async editSalesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.datatype)) {
            body["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            body["msgid"] = request.msgid;
        }
        if (!tea_util_1.default.isUnset(request.stamp)) {
            body["stamp"] = request.stamp;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditSales",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/sales`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditSalesResponse({}));
    }
    /**
     * @summary 编辑销售机会数据
     *
     * @param request EditSalesRequest
     * @return EditSalesResponse
     */
    async editSales(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditSalesHeaders({});
        return await this.editSalesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取数据列表
     *
     * @param request GetDataListRequest
     * @param headers GetDataListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDataListResponse
     */
    async getDataListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.datatype)) {
            query["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.page)) {
            query["page"] = request.page;
        }
        if (!tea_util_1.default.isUnset(request.pagesize)) {
            query["pagesize"] = request.pagesize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDataList",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/data`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDataListResponse({}));
    }
    /**
     * @summary 获取数据列表
     *
     * @param request GetDataListRequest
     * @return GetDataListResponse
     */
    async getDataList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDataListHeaders({});
        return await this.getDataListWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取数据详情
     *
     * @param request GetDataViewRequest
     * @param headers GetDataViewHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDataViewResponse
     */
    async getDataViewWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.datatype)) {
            query["datatype"] = request.datatype;
        }
        if (!tea_util_1.default.isUnset(request.msgid)) {
            query["msgid"] = request.msgid;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDataView",
            version: "jzcrm_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/jzcrm/dataView`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDataViewResponse({}));
    }
    /**
     * @summary 获取数据详情
     *
     * @param request GetDataViewRequest
     * @return GetDataViewResponse
     */
    async getDataView(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDataViewHeaders({});
        return await this.getDataViewWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map