"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryCoolAppShortcutOrderResponseBodyResult = exports.QueryCoolAppShortcutOrderResponseBodyResultOtherPluginList = exports.QueryCoolAppShortcutOrderResponseBodyResultMyPluginList = exports.QueryCoolAppShortcutOrderResponseBodyResultForbiddenPluginList = exports.UninstallCoolAppFromGroupResponse = exports.UninstallCoolAppFromGroupResponseBody = exports.UninstallCoolAppFromGroupRequest = exports.UninstallCoolAppFromGroupHeaders = exports.QueryCoolAppShortcutOrderResponse = exports.QueryCoolAppShortcutOrderResponseBody = exports.QueryCoolAppShortcutOrderRequest = exports.QueryCoolAppShortcutOrderHeaders = exports.InstallCoolAppToGroupResponse = exports.InstallCoolAppToGroupResponseBody = exports.InstallCoolAppToGroupRequest = exports.InstallCoolAppToGroupHeaders = exports.InstallCoolAppOrderToGroupResponse = exports.InstallCoolAppOrderToGroupResponseBody = exports.InstallCoolAppOrderToGroupRequest = exports.InstallCoolAppOrderToGroupHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class InstallCoolAppOrderToGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InstallCoolAppOrderToGroupHeaders = InstallCoolAppOrderToGroupHeaders;
class InstallCoolAppOrderToGroupRequest extends $tea.Model {
    static names() {
        return {
            conversationId: 'conversationId',
            sortedPluginIdList: 'sortedPluginIdList',
            templateId: 'templateId',
            unsortedPluginIdList: 'unsortedPluginIdList',
        };
    }
    static types() {
        return {
            conversationId: 'string',
            sortedPluginIdList: { 'type': 'array', 'itemType': 'number' },
            templateId: 'string',
            unsortedPluginIdList: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InstallCoolAppOrderToGroupRequest = InstallCoolAppOrderToGroupRequest;
class InstallCoolAppOrderToGroupResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InstallCoolAppOrderToGroupResponseBody = InstallCoolAppOrderToGroupResponseBody;
class InstallCoolAppOrderToGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InstallCoolAppOrderToGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InstallCoolAppOrderToGroupResponse = InstallCoolAppOrderToGroupResponse;
class InstallCoolAppToGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InstallCoolAppToGroupHeaders = InstallCoolAppToGroupHeaders;
class InstallCoolAppToGroupRequest extends $tea.Model {
    static names() {
        return {
            conversationId: 'conversationId',
            operateCoolAppCode: 'operateCoolAppCode',
            operatorId: 'operatorId',
            templateId: 'templateId',
        };
    }
    static types() {
        return {
            conversationId: 'string',
            operateCoolAppCode: 'string',
            operatorId: 'string',
            templateId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InstallCoolAppToGroupRequest = InstallCoolAppToGroupRequest;
class InstallCoolAppToGroupResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InstallCoolAppToGroupResponseBody = InstallCoolAppToGroupResponseBody;
class InstallCoolAppToGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InstallCoolAppToGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InstallCoolAppToGroupResponse = InstallCoolAppToGroupResponse;
class QueryCoolAppShortcutOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCoolAppShortcutOrderHeaders = QueryCoolAppShortcutOrderHeaders;
class QueryCoolAppShortcutOrderRequest extends $tea.Model {
    static names() {
        return {
            conversationId: 'conversationId',
            operatorId: 'operatorId',
            templateId: 'templateId',
        };
    }
    static types() {
        return {
            conversationId: 'string',
            operatorId: 'string',
            templateId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCoolAppShortcutOrderRequest = QueryCoolAppShortcutOrderRequest;
class QueryCoolAppShortcutOrderResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryCoolAppShortcutOrderResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCoolAppShortcutOrderResponseBody = QueryCoolAppShortcutOrderResponseBody;
class QueryCoolAppShortcutOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCoolAppShortcutOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCoolAppShortcutOrderResponse = QueryCoolAppShortcutOrderResponse;
class UninstallCoolAppFromGroupHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UninstallCoolAppFromGroupHeaders = UninstallCoolAppFromGroupHeaders;
class UninstallCoolAppFromGroupRequest extends $tea.Model {
    static names() {
        return {
            conversationId: 'conversationId',
            operateCoolAppCode: 'operateCoolAppCode',
            operatorId: 'operatorId',
            templateId: 'templateId',
        };
    }
    static types() {
        return {
            conversationId: 'string',
            operateCoolAppCode: 'string',
            operatorId: 'string',
            templateId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UninstallCoolAppFromGroupRequest = UninstallCoolAppFromGroupRequest;
class UninstallCoolAppFromGroupResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UninstallCoolAppFromGroupResponseBody = UninstallCoolAppFromGroupResponseBody;
class UninstallCoolAppFromGroupResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UninstallCoolAppFromGroupResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UninstallCoolAppFromGroupResponse = UninstallCoolAppFromGroupResponse;
class QueryCoolAppShortcutOrderResponseBodyResultForbiddenPluginList extends $tea.Model {
    static names() {
        return {
            appCode: 'appCode',
            desc: 'desc',
            pluginId: 'pluginId',
            source: 'source',
            title: 'title',
        };
    }
    static types() {
        return {
            appCode: 'string',
            desc: 'string',
            pluginId: 'string',
            source: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCoolAppShortcutOrderResponseBodyResultForbiddenPluginList = QueryCoolAppShortcutOrderResponseBodyResultForbiddenPluginList;
class QueryCoolAppShortcutOrderResponseBodyResultMyPluginList extends $tea.Model {
    static names() {
        return {
            appCode: 'appCode',
            desc: 'desc',
            pluginId: 'pluginId',
            source: 'source',
            title: 'title',
        };
    }
    static types() {
        return {
            appCode: 'string',
            desc: 'string',
            pluginId: 'string',
            source: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCoolAppShortcutOrderResponseBodyResultMyPluginList = QueryCoolAppShortcutOrderResponseBodyResultMyPluginList;
class QueryCoolAppShortcutOrderResponseBodyResultOtherPluginList extends $tea.Model {
    static names() {
        return {
            appCode: 'appCode',
            desc: 'desc',
            pluginId: 'pluginId',
            source: 'source',
            title: 'title',
        };
    }
    static types() {
        return {
            appCode: 'string',
            desc: 'string',
            pluginId: 'string',
            source: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCoolAppShortcutOrderResponseBodyResultOtherPluginList = QueryCoolAppShortcutOrderResponseBodyResultOtherPluginList;
class QueryCoolAppShortcutOrderResponseBodyResult extends $tea.Model {
    static names() {
        return {
            forbiddenPluginList: 'forbiddenPluginList',
            myPluginList: 'myPluginList',
            otherPluginList: 'otherPluginList',
        };
    }
    static types() {
        return {
            forbiddenPluginList: { 'type': 'array', 'itemType': QueryCoolAppShortcutOrderResponseBodyResultForbiddenPluginList },
            myPluginList: { 'type': 'array', 'itemType': QueryCoolAppShortcutOrderResponseBodyResultMyPluginList },
            otherPluginList: { 'type': 'array', 'itemType': QueryCoolAppShortcutOrderResponseBodyResultOtherPluginList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCoolAppShortcutOrderResponseBodyResult = QueryCoolAppShortcutOrderResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 群酷应用排序
     *
     * @param request InstallCoolAppOrderToGroupRequest
     * @param headers InstallCoolAppOrderToGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallCoolAppOrderToGroupResponse
     */
    async installCoolAppOrderToGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.conversationId)) {
            body["conversationId"] = request.conversationId;
        }
        if (!tea_util_1.default.isUnset(request.sortedPluginIdList)) {
            body["sortedPluginIdList"] = request.sortedPluginIdList;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        if (!tea_util_1.default.isUnset(request.unsortedPluginIdList)) {
            body["unsortedPluginIdList"] = request.unsortedPluginIdList;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InstallCoolAppOrderToGroup",
            version: "coolApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/coolApp/shortcuts/plugins/order`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InstallCoolAppOrderToGroupResponse({}));
    }
    /**
     * @summary 群酷应用排序
     *
     * @param request InstallCoolAppOrderToGroupRequest
     * @return InstallCoolAppOrderToGroupResponse
     */
    async installCoolAppOrderToGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InstallCoolAppOrderToGroupHeaders({});
        return await this.installCoolAppOrderToGroupWithOptions(request, headers, runtime);
    }
    /**
     * @summary 安装酷应用到群
     *
     * @param request InstallCoolAppToGroupRequest
     * @param headers InstallCoolAppToGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallCoolAppToGroupResponse
     */
    async installCoolAppToGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.conversationId)) {
            body["conversationId"] = request.conversationId;
        }
        if (!tea_util_1.default.isUnset(request.operateCoolAppCode)) {
            body["operateCoolAppCode"] = request.operateCoolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InstallCoolAppToGroup",
            version: "coolApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/coolApp/shortcuts/plugins/install`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InstallCoolAppToGroupResponse({}));
    }
    /**
     * @summary 安装酷应用到群
     *
     * @param request InstallCoolAppToGroupRequest
     * @return InstallCoolAppToGroupResponse
     */
    async installCoolAppToGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InstallCoolAppToGroupHeaders({});
        return await this.installCoolAppToGroupWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询群插件栏
     *
     * @param request QueryCoolAppShortcutOrderRequest
     * @param headers QueryCoolAppShortcutOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCoolAppShortcutOrderResponse
     */
    async queryCoolAppShortcutOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.conversationId)) {
            body["conversationId"] = request.conversationId;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryCoolAppShortcutOrder",
            version: "coolApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/coolApp/shortcuts/plugins/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCoolAppShortcutOrderResponse({}));
    }
    /**
     * @summary 查询群插件栏
     *
     * @param request QueryCoolAppShortcutOrderRequest
     * @return QueryCoolAppShortcutOrderResponse
     */
    async queryCoolAppShortcutOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCoolAppShortcutOrderHeaders({});
        return await this.queryCoolAppShortcutOrderWithOptions(request, headers, runtime);
    }
    /**
     * @summary 从群内卸载酷应用
     *
     * @param request UninstallCoolAppFromGroupRequest
     * @param headers UninstallCoolAppFromGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UninstallCoolAppFromGroupResponse
     */
    async uninstallCoolAppFromGroupWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.conversationId)) {
            body["conversationId"] = request.conversationId;
        }
        if (!tea_util_1.default.isUnset(request.operateCoolAppCode)) {
            body["operateCoolAppCode"] = request.operateCoolAppCode;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            body["templateId"] = request.templateId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UninstallCoolAppFromGroup",
            version: "coolApp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/coolApp/shortcuts/plugins/uninstall`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UninstallCoolAppFromGroupResponse({}));
    }
    /**
     * @summary 从群内卸载酷应用
     *
     * @param request UninstallCoolAppFromGroupRequest
     * @return UninstallCoolAppFromGroupResponse
     */
    async uninstallCoolAppFromGroup(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UninstallCoolAppFromGroupHeaders({});
        return await this.uninstallCoolAppFromGroupWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map