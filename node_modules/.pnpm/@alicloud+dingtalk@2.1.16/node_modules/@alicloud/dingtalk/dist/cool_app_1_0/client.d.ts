/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class InstallCoolAppOrderToGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppOrderToGroupRequest extends $tea.Model {
    conversationId?: string;
    sortedPluginIdList?: number[];
    templateId?: string;
    unsortedPluginIdList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppOrderToGroupResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppOrderToGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InstallCoolAppOrderToGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppToGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppToGroupRequest extends $tea.Model {
    conversationId?: string;
    operateCoolAppCode?: string;
    operatorId?: string;
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppToGroupResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallCoolAppToGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InstallCoolAppToGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCoolAppShortcutOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCoolAppShortcutOrderRequest extends $tea.Model {
    conversationId?: string;
    operatorId?: string;
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCoolAppShortcutOrderResponseBody extends $tea.Model {
    result?: QueryCoolAppShortcutOrderResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCoolAppShortcutOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCoolAppShortcutOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallCoolAppFromGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallCoolAppFromGroupRequest extends $tea.Model {
    conversationId?: string;
    operateCoolAppCode?: string;
    operatorId?: string;
    templateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallCoolAppFromGroupResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UninstallCoolAppFromGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UninstallCoolAppFromGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCoolAppShortcutOrderResponseBodyResultForbiddenPluginList extends $tea.Model {
    appCode?: string;
    desc?: string;
    pluginId?: string;
    source?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCoolAppShortcutOrderResponseBodyResultMyPluginList extends $tea.Model {
    appCode?: string;
    desc?: string;
    pluginId?: string;
    source?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCoolAppShortcutOrderResponseBodyResultOtherPluginList extends $tea.Model {
    appCode?: string;
    desc?: string;
    pluginId?: string;
    source?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCoolAppShortcutOrderResponseBodyResult extends $tea.Model {
    forbiddenPluginList?: QueryCoolAppShortcutOrderResponseBodyResultForbiddenPluginList[];
    myPluginList?: QueryCoolAppShortcutOrderResponseBodyResultMyPluginList[];
    otherPluginList?: QueryCoolAppShortcutOrderResponseBodyResultOtherPluginList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 群酷应用排序
     *
     * @param request InstallCoolAppOrderToGroupRequest
     * @param headers InstallCoolAppOrderToGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallCoolAppOrderToGroupResponse
     */
    installCoolAppOrderToGroupWithOptions(request: InstallCoolAppOrderToGroupRequest, headers: InstallCoolAppOrderToGroupHeaders, runtime: $Util.RuntimeOptions): Promise<InstallCoolAppOrderToGroupResponse>;
    /**
     * @summary 群酷应用排序
     *
     * @param request InstallCoolAppOrderToGroupRequest
     * @return InstallCoolAppOrderToGroupResponse
     */
    installCoolAppOrderToGroup(request: InstallCoolAppOrderToGroupRequest): Promise<InstallCoolAppOrderToGroupResponse>;
    /**
     * @summary 安装酷应用到群
     *
     * @param request InstallCoolAppToGroupRequest
     * @param headers InstallCoolAppToGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallCoolAppToGroupResponse
     */
    installCoolAppToGroupWithOptions(request: InstallCoolAppToGroupRequest, headers: InstallCoolAppToGroupHeaders, runtime: $Util.RuntimeOptions): Promise<InstallCoolAppToGroupResponse>;
    /**
     * @summary 安装酷应用到群
     *
     * @param request InstallCoolAppToGroupRequest
     * @return InstallCoolAppToGroupResponse
     */
    installCoolAppToGroup(request: InstallCoolAppToGroupRequest): Promise<InstallCoolAppToGroupResponse>;
    /**
     * @summary 查询群插件栏
     *
     * @param request QueryCoolAppShortcutOrderRequest
     * @param headers QueryCoolAppShortcutOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCoolAppShortcutOrderResponse
     */
    queryCoolAppShortcutOrderWithOptions(request: QueryCoolAppShortcutOrderRequest, headers: QueryCoolAppShortcutOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCoolAppShortcutOrderResponse>;
    /**
     * @summary 查询群插件栏
     *
     * @param request QueryCoolAppShortcutOrderRequest
     * @return QueryCoolAppShortcutOrderResponse
     */
    queryCoolAppShortcutOrder(request: QueryCoolAppShortcutOrderRequest): Promise<QueryCoolAppShortcutOrderResponse>;
    /**
     * @summary 从群内卸载酷应用
     *
     * @param request UninstallCoolAppFromGroupRequest
     * @param headers UninstallCoolAppFromGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UninstallCoolAppFromGroupResponse
     */
    uninstallCoolAppFromGroupWithOptions(request: UninstallCoolAppFromGroupRequest, headers: UninstallCoolAppFromGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UninstallCoolAppFromGroupResponse>;
    /**
     * @summary 从群内卸载酷应用
     *
     * @param request UninstallCoolAppFromGroupRequest
     * @return UninstallCoolAppFromGroupResponse
     */
    uninstallCoolAppFromGroup(request: UninstallCoolAppFromGroupRequest): Promise<UninstallCoolAppFromGroupResponse>;
}
