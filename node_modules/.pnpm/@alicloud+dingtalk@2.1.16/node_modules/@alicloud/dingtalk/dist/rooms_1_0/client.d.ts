/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateDeviceCustomTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceCustomTemplateRequest extends $tea.Model {
    bgImgList?: string[];
    bgType?: number;
    bgUrl?: string;
    customDoc?: string;
    desensitizeUserName?: boolean;
    deviceUnionIds?: string[];
    groupIds?: number[];
    hideServerCodeWhenProjecting?: boolean;
    instruction?: boolean;
    isPicTop?: number;
    logo?: string;
    orgName?: string;
    picturePlayInterval?: number;
    roomIds?: string[];
    showCalendarCard?: boolean;
    showCalendarTitle?: boolean;
    showFunctionCard?: boolean;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceCustomTemplateResponseBody extends $tea.Model {
    templateId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceCustomTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDeviceCustomTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomRequest extends $tea.Model {
    enableCycleReservation?: boolean;
    groupId?: number;
    isvRoomId?: string;
    reservationAuthority?: CreateMeetingRoomRequestReservationAuthority;
    roomCapacity?: number;
    roomLabelIds?: number[];
    roomLocation?: CreateMeetingRoomRequestRoomLocation;
    roomName?: string;
    roomPicture?: string;
    roomStatus?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateMeetingRoomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomControlPanelHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomControlPanelRequest extends $tea.Model {
    extra?: CreateMeetingRoomControlPanelRequestExtra;
    roomConfig?: CreateMeetingRoomControlPanelRequestRoomConfig[];
    roomId?: string;
    status?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomControlPanelResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomControlPanelResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateMeetingRoomControlPanelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomGroupRequest extends $tea.Model {
    groupName?: string;
    parentGroupId?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomGroupResponseBody extends $tea.Model {
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateMeetingRoomGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceCustomTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceCustomTemplateRequest extends $tea.Model {
    templateId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceCustomTemplateResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceCustomTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDeviceCustomTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteMeetingRoomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomControlPanelHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomControlPanelRequest extends $tea.Model {
    body?: DeleteMeetingRoomControlPanelRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomControlPanelShrinkRequest extends $tea.Model {
    bodyShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomControlPanelResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomControlPanelResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteMeetingRoomControlPanelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomGroupRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteMeetingRoomGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateResponseBody extends $tea.Model {
    result?: QueryDeviceCustomTemplateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDeviceCustomTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateListResponseBody extends $tea.Model {
    result?: QueryDeviceCustomTemplateListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDeviceCustomTemplateListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceIpByCodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceIpByCodeRequest extends $tea.Model {
    deviceSn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceIpByCodeResponseBody extends $tea.Model {
    result?: QueryDeviceIpByCodeResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceIpByCodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDeviceIpByCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesRequest extends $tea.Model {
    propertyNames?: string[];
    deviceId?: string;
    deviceUnionId?: string;
    operatorUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesResponseBody extends $tea.Model {
    result?: QueryDevicePropertiesResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDevicePropertiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomResponseBody extends $tea.Model {
    result?: QueryMeetingRoomResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMeetingRoomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomControlPanelListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomControlPanelListRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    roomId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomControlPanelListResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: number;
    result?: QueryMeetingRoomControlPanelListResponseBodyResult[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomControlPanelListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMeetingRoomControlPanelListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomDeviceRequest extends $tea.Model {
    deviceId?: string;
    deviceUnionId?: string;
    operatorUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomDeviceResponseBody extends $tea.Model {
    result?: QueryMeetingRoomDeviceResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMeetingRoomDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomGroupRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomGroupResponseBody extends $tea.Model {
    groupId?: number;
    groupName?: string;
    parentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMeetingRoomGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomGroupListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomGroupListRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomGroupListResponseBody extends $tea.Model {
    result?: QueryMeetingRoomGroupListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomGroupListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMeetingRoomGroupListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomListRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomListResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: number;
    result?: QueryMeetingRoomListResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMeetingRoomListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSuperUserMeetingRoomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSuperUserMeetingRoomRequest extends $tea.Model {
    roomId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSuperUserMeetingRoomResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveSuperUserMeetingRoomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveSuperUserMeetingRoomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetSuperUserMeetingRoomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetSuperUserMeetingRoomRequest extends $tea.Model {
    deptIdWhiteList?: number[];
    roomId?: string;
    unionId?: string;
    userIdWhiteList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetSuperUserMeetingRoomResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetSuperUserMeetingRoomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetSuperUserMeetingRoomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceCustomTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceCustomTemplateRequest extends $tea.Model {
    bgImgList?: string[];
    bgType?: number;
    bgUrl?: string;
    customDoc?: string;
    desensitizeUserName?: boolean;
    deviceUnionIds?: string[];
    groupIds?: number[];
    hideServerCodeWhenProjecting?: boolean;
    instruction?: boolean;
    isPicTop?: number;
    logo?: string;
    orgName?: string;
    picturePlayInterval?: number;
    roomIds?: string[];
    showCalendarCard?: boolean;
    showCalendarTitle?: boolean;
    showFunctionCard?: boolean;
    templateId?: number;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceCustomTemplateResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateDeviceCustomTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateDeviceCustomTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomRequest extends $tea.Model {
    enableCycleReservation?: boolean;
    groupId?: number;
    isvRoomId?: string;
    reservationAuthority?: UpdateMeetingRoomRequestReservationAuthority;
    roomCapacity?: number;
    roomId?: string;
    roomLabelIds?: number[];
    roomLocation?: UpdateMeetingRoomRequestRoomLocation;
    roomName?: string;
    roomPicture?: string;
    roomStatus?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateMeetingRoomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomGroupRequest extends $tea.Model {
    groupId?: number;
    groupName?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateMeetingRoomGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers extends $tea.Model {
    memberId?: string;
    memberName?: string;
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomRequestReservationAuthority extends $tea.Model {
    authorizedMembers?: CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomRequestRoomLocation extends $tea.Model {
    desc?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomControlPanelRequestExtra extends $tea.Model {
    param?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMeetingRoomControlPanelRequestRoomConfig extends $tea.Model {
    enName?: string;
    icon?: string;
    name?: string;
    showTime?: number;
    sort?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteMeetingRoomControlPanelRequestBody extends $tea.Model {
    roomIds?: string[];
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateResponseBodyResultDeviceCustomTemplate extends $tea.Model {
    bgImageList?: string[];
    bgType?: number;
    bgUrl?: string;
    confSubType?: number;
    confType?: number;
    corpId?: string;
    customDoc?: string;
    desensitizeUserName?: boolean;
    hideServerCodeWhenProjecting?: boolean;
    instruction?: boolean;
    isPicTop?: number;
    logo?: string;
    orgName?: string;
    picturePlayInterval?: number;
    showCalendarCard?: boolean;
    showCalendarTitle?: boolean;
    showFunctionCard?: boolean;
    templateId?: number;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateResponseBodyResult extends $tea.Model {
    deviceCustomTemplate?: QueryDeviceCustomTemplateResponseBodyResultDeviceCustomTemplate;
    deviceUnionIds?: string[];
    groupIds?: number[];
    roomIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateListResponseBodyResultDeviceCustomTemplates extends $tea.Model {
    bgImageList?: string[];
    bgType?: number;
    bgUrl?: string;
    confSubType?: number;
    confType?: number;
    corpId?: string;
    customDoc?: string;
    desensitizeUserName?: boolean;
    hideServerCodeWhenProjecting?: boolean;
    instruction?: boolean;
    isPicTop?: number;
    logo?: string;
    orgName?: string;
    picturePlayInterval?: number;
    showCalendarCard?: boolean;
    showCalendarTitle?: boolean;
    showFunctionCard?: boolean;
    templateId?: number;
    templateName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceCustomTemplateListResponseBodyResult extends $tea.Model {
    deviceCustomTemplates?: QueryDeviceCustomTemplateListResponseBodyResultDeviceCustomTemplates[];
    deviceTemplateMap?: {
        [key: string]: string[];
    };
    groupIdTemplateMap?: {
        [key: string]: number[];
    };
    roomIdTemplateMap?: {
        [key: string]: string[];
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceIpByCodeResponseBodyResult extends $tea.Model {
    deviceIp?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDevicePropertiesResponseBodyResult extends $tea.Model {
    propertyName?: string;
    propertyValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers extends $tea.Model {
    memberId?: string;
    memberName?: string;
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomResponseBodyResultReservationAuthority extends $tea.Model {
    authorizedMembers?: QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomResponseBodyResultRoomGroup extends $tea.Model {
    groupId?: number;
    groupName?: string;
    parentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomResponseBodyResultRoomLabels extends $tea.Model {
    labelId?: number;
    labelName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomResponseBodyResultRoomLocation extends $tea.Model {
    desc?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomResponseBodyResult extends $tea.Model {
    corpId?: string;
    deviceUnionIds?: string[];
    enableCycleReservation?: boolean;
    isvRoomId?: string;
    reservationAuthority?: QueryMeetingRoomResponseBodyResultReservationAuthority;
    roomCapacity?: number;
    roomGroup?: QueryMeetingRoomResponseBodyResultRoomGroup;
    roomId?: string;
    roomLabels?: QueryMeetingRoomResponseBodyResultRoomLabels[];
    roomLocation?: QueryMeetingRoomResponseBodyResultRoomLocation;
    roomName?: string;
    roomPicture?: string;
    roomStaffId?: string;
    roomStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomControlPanelListResponseBodyResultRoomIotConfig extends $tea.Model {
    enName?: string;
    icon?: string;
    name?: string;
    showTime?: number;
    sort?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomControlPanelListResponseBodyResult extends $tea.Model {
    roomId?: string;
    roomIotConfig?: QueryMeetingRoomControlPanelListResponseBodyResultRoomIotConfig[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomDeviceResponseBodyResultControllers extends $tea.Model {
    corpId?: string;
    deviceId?: string;
    deviceMac?: string;
    deviceModel?: string;
    deviceName?: string;
    deviceServiceId?: number;
    deviceSn?: string;
    deviceStatus?: string;
    deviceType?: string;
    deviceUnionId?: string;
    openRoomId?: string;
    shareCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomDeviceResponseBodyResult extends $tea.Model {
    activeTime?: number;
    controllers?: QueryMeetingRoomDeviceResponseBodyResultControllers[];
    corpId?: string;
    creatorUnionId?: string;
    devCamera?: string;
    devHdmi?: string;
    devMic?: string;
    devMirror?: string;
    devNetIp?: string;
    devNetType?: string;
    devVoice?: string;
    devWifiMac?: string;
    devWireMac?: string;
    deviceId?: string;
    deviceMac?: string;
    deviceModel?: string;
    deviceName?: string;
    deviceServiceId?: number;
    deviceSn?: string;
    deviceStatus?: string;
    deviceType?: string;
    deviceUnionId?: string;
    firmwareVersion?: string;
    openRoomId?: string;
    roomName?: string;
    shareCode?: string;
    sipAccountName?: string;
    softwareVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomGroupListResponseBodyResult extends $tea.Model {
    groupId?: number;
    groupName?: string;
    parentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomListResponseBodyResultRoomGroup extends $tea.Model {
    groupId?: number;
    groupName?: string;
    parentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomListResponseBodyResultRoomLabels extends $tea.Model {
    labelId?: number;
    labelName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomListResponseBodyResultRoomLocation extends $tea.Model {
    desc?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMeetingRoomListResponseBodyResult extends $tea.Model {
    corpId?: string;
    isvRoomId?: string;
    roomCapacity?: number;
    roomGroup?: QueryMeetingRoomListResponseBodyResultRoomGroup;
    roomId?: string;
    roomLabels?: QueryMeetingRoomListResponseBodyResultRoomLabels[];
    roomLocation?: QueryMeetingRoomListResponseBodyResultRoomLocation;
    roomName?: string;
    roomPicture?: string;
    roomStaffId?: string;
    roomStatus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers extends $tea.Model {
    memberId?: string;
    memberName?: string;
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomRequestReservationAuthority extends $tea.Model {
    authorizedMembers?: UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMeetingRoomRequestRoomLocation extends $tea.Model {
    desc?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 创建自定义屏幕模版
     *
     * @param request CreateDeviceCustomTemplateRequest
     * @param headers CreateDeviceCustomTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateDeviceCustomTemplateResponse
     */
    createDeviceCustomTemplateWithOptions(request: CreateDeviceCustomTemplateRequest, headers: CreateDeviceCustomTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDeviceCustomTemplateResponse>;
    /**
     * @summary 创建自定义屏幕模版
     *
     * @param request CreateDeviceCustomTemplateRequest
     * @return CreateDeviceCustomTemplateResponse
     */
    createDeviceCustomTemplate(request: CreateDeviceCustomTemplateRequest): Promise<CreateDeviceCustomTemplateResponse>;
    /**
     * @summary 创建智能会议室
     *
     * @param request CreateMeetingRoomRequest
     * @param headers CreateMeetingRoomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMeetingRoomResponse
     */
    createMeetingRoomWithOptions(request: CreateMeetingRoomRequest, headers: CreateMeetingRoomHeaders, runtime: $Util.RuntimeOptions): Promise<CreateMeetingRoomResponse>;
    /**
     * @summary 创建智能会议室
     *
     * @param request CreateMeetingRoomRequest
     * @return CreateMeetingRoomResponse
     */
    createMeetingRoom(request: CreateMeetingRoomRequest): Promise<CreateMeetingRoomResponse>;
    /**
     * @summary 创建智能会议室IOT配置
     *
     * @param request CreateMeetingRoomControlPanelRequest
     * @param headers CreateMeetingRoomControlPanelHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMeetingRoomControlPanelResponse
     */
    createMeetingRoomControlPanelWithOptions(request: CreateMeetingRoomControlPanelRequest, headers: CreateMeetingRoomControlPanelHeaders, runtime: $Util.RuntimeOptions): Promise<CreateMeetingRoomControlPanelResponse>;
    /**
     * @summary 创建智能会议室IOT配置
     *
     * @param request CreateMeetingRoomControlPanelRequest
     * @return CreateMeetingRoomControlPanelResponse
     */
    createMeetingRoomControlPanel(request: CreateMeetingRoomControlPanelRequest): Promise<CreateMeetingRoomControlPanelResponse>;
    /**
     * @summary 创建会议室分组
     *
     * @param request CreateMeetingRoomGroupRequest
     * @param headers CreateMeetingRoomGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMeetingRoomGroupResponse
     */
    createMeetingRoomGroupWithOptions(request: CreateMeetingRoomGroupRequest, headers: CreateMeetingRoomGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateMeetingRoomGroupResponse>;
    /**
     * @summary 创建会议室分组
     *
     * @param request CreateMeetingRoomGroupRequest
     * @return CreateMeetingRoomGroupResponse
     */
    createMeetingRoomGroup(request: CreateMeetingRoomGroupRequest): Promise<CreateMeetingRoomGroupResponse>;
    /**
     * @summary 删除自定义屏幕模板
     *
     * @param request DeleteDeviceCustomTemplateRequest
     * @param headers DeleteDeviceCustomTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteDeviceCustomTemplateResponse
     */
    deleteDeviceCustomTemplateWithOptions(request: DeleteDeviceCustomTemplateRequest, headers: DeleteDeviceCustomTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceCustomTemplateResponse>;
    /**
     * @summary 删除自定义屏幕模板
     *
     * @param request DeleteDeviceCustomTemplateRequest
     * @return DeleteDeviceCustomTemplateResponse
     */
    deleteDeviceCustomTemplate(request: DeleteDeviceCustomTemplateRequest): Promise<DeleteDeviceCustomTemplateResponse>;
    /**
     * @summary 删除会议室
     *
     * @param request DeleteMeetingRoomRequest
     * @param headers DeleteMeetingRoomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteMeetingRoomResponse
     */
    deleteMeetingRoomWithOptions(roomId: string, request: DeleteMeetingRoomRequest, headers: DeleteMeetingRoomHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteMeetingRoomResponse>;
    /**
     * @summary 删除会议室
     *
     * @param request DeleteMeetingRoomRequest
     * @return DeleteMeetingRoomResponse
     */
    deleteMeetingRoom(roomId: string, request: DeleteMeetingRoomRequest): Promise<DeleteMeetingRoomResponse>;
    /**
     * @summary 删除会议室配置
     *
     * @param tmpReq DeleteMeetingRoomControlPanelRequest
     * @param headers DeleteMeetingRoomControlPanelHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteMeetingRoomControlPanelResponse
     */
    deleteMeetingRoomControlPanelWithOptions(tmpReq: DeleteMeetingRoomControlPanelRequest, headers: DeleteMeetingRoomControlPanelHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteMeetingRoomControlPanelResponse>;
    /**
     * @summary 删除会议室配置
     *
     * @param request DeleteMeetingRoomControlPanelRequest
     * @return DeleteMeetingRoomControlPanelResponse
     */
    deleteMeetingRoomControlPanel(request: DeleteMeetingRoomControlPanelRequest): Promise<DeleteMeetingRoomControlPanelResponse>;
    /**
     * @summary 删除会议室分组
     *
     * @param request DeleteMeetingRoomGroupRequest
     * @param headers DeleteMeetingRoomGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteMeetingRoomGroupResponse
     */
    deleteMeetingRoomGroupWithOptions(groupId: string, request: DeleteMeetingRoomGroupRequest, headers: DeleteMeetingRoomGroupHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteMeetingRoomGroupResponse>;
    /**
     * @summary 删除会议室分组
     *
     * @param request DeleteMeetingRoomGroupRequest
     * @return DeleteMeetingRoomGroupResponse
     */
    deleteMeetingRoomGroup(groupId: string, request: DeleteMeetingRoomGroupRequest): Promise<DeleteMeetingRoomGroupResponse>;
    /**
     * @summary 查询自定义屏幕模板
     *
     * @param headers QueryDeviceCustomTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDeviceCustomTemplateResponse
     */
    queryDeviceCustomTemplateWithOptions(templateId: string, headers: QueryDeviceCustomTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDeviceCustomTemplateResponse>;
    /**
     * @summary 查询自定义屏幕模板
     *
     * @return QueryDeviceCustomTemplateResponse
     */
    queryDeviceCustomTemplate(templateId: string): Promise<QueryDeviceCustomTemplateResponse>;
    /**
     * @summary 查询自定义屏幕模板列表
     *
     * @param headers QueryDeviceCustomTemplateListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDeviceCustomTemplateListResponse
     */
    queryDeviceCustomTemplateListWithOptions(headers: QueryDeviceCustomTemplateListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDeviceCustomTemplateListResponse>;
    /**
     * @summary 查询自定义屏幕模板列表
     *
     * @return QueryDeviceCustomTemplateListResponse
     */
    queryDeviceCustomTemplateList(): Promise<QueryDeviceCustomTemplateListResponse>;
    /**
     * @summary 根据设备投屏码查询设备ip
     *
     * @param request QueryDeviceIpByCodeRequest
     * @param headers QueryDeviceIpByCodeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDeviceIpByCodeResponse
     */
    queryDeviceIpByCodeWithOptions(shareCode: string, request: QueryDeviceIpByCodeRequest, headers: QueryDeviceIpByCodeHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDeviceIpByCodeResponse>;
    /**
     * @summary 根据设备投屏码查询设备ip
     *
     * @param request QueryDeviceIpByCodeRequest
     * @return QueryDeviceIpByCodeResponse
     */
    queryDeviceIpByCode(shareCode: string, request: QueryDeviceIpByCodeRequest): Promise<QueryDeviceIpByCodeResponse>;
    /**
     * @summary 查询设备属性
     *
     * @param request QueryDevicePropertiesRequest
     * @param headers QueryDevicePropertiesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDevicePropertiesResponse
     */
    queryDevicePropertiesWithOptions(request: QueryDevicePropertiesRequest, headers: QueryDevicePropertiesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDevicePropertiesResponse>;
    /**
     * @summary 查询设备属性
     *
     * @param request QueryDevicePropertiesRequest
     * @return QueryDevicePropertiesResponse
     */
    queryDeviceProperties(request: QueryDevicePropertiesRequest): Promise<QueryDevicePropertiesResponse>;
    /**
     * @summary 查询会议室详情
     *
     * @param request QueryMeetingRoomRequest
     * @param headers QueryMeetingRoomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMeetingRoomResponse
     */
    queryMeetingRoomWithOptions(roomId: string, request: QueryMeetingRoomRequest, headers: QueryMeetingRoomHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMeetingRoomResponse>;
    /**
     * @summary 查询会议室详情
     *
     * @param request QueryMeetingRoomRequest
     * @return QueryMeetingRoomResponse
     */
    queryMeetingRoom(roomId: string, request: QueryMeetingRoomRequest): Promise<QueryMeetingRoomResponse>;
    /**
     * @summary 获取会议室IOT配置列表
     *
     * @param request QueryMeetingRoomControlPanelListRequest
     * @param headers QueryMeetingRoomControlPanelListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMeetingRoomControlPanelListResponse
     */
    queryMeetingRoomControlPanelListWithOptions(request: QueryMeetingRoomControlPanelListRequest, headers: QueryMeetingRoomControlPanelListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMeetingRoomControlPanelListResponse>;
    /**
     * @summary 获取会议室IOT配置列表
     *
     * @param request QueryMeetingRoomControlPanelListRequest
     * @return QueryMeetingRoomControlPanelListResponse
     */
    queryMeetingRoomControlPanelList(request: QueryMeetingRoomControlPanelListRequest): Promise<QueryMeetingRoomControlPanelListResponse>;
    /**
     * @summary 查询设备信息
     *
     * @param request QueryMeetingRoomDeviceRequest
     * @param headers QueryMeetingRoomDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMeetingRoomDeviceResponse
     */
    queryMeetingRoomDeviceWithOptions(request: QueryMeetingRoomDeviceRequest, headers: QueryMeetingRoomDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMeetingRoomDeviceResponse>;
    /**
     * @summary 查询设备信息
     *
     * @param request QueryMeetingRoomDeviceRequest
     * @return QueryMeetingRoomDeviceResponse
     */
    queryMeetingRoomDevice(request: QueryMeetingRoomDeviceRequest): Promise<QueryMeetingRoomDeviceResponse>;
    /**
     * @summary 查询会议室分组信息
     *
     * @param request QueryMeetingRoomGroupRequest
     * @param headers QueryMeetingRoomGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMeetingRoomGroupResponse
     */
    queryMeetingRoomGroupWithOptions(groupId: string, request: QueryMeetingRoomGroupRequest, headers: QueryMeetingRoomGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMeetingRoomGroupResponse>;
    /**
     * @summary 查询会议室分组信息
     *
     * @param request QueryMeetingRoomGroupRequest
     * @return QueryMeetingRoomGroupResponse
     */
    queryMeetingRoomGroup(groupId: string, request: QueryMeetingRoomGroupRequest): Promise<QueryMeetingRoomGroupResponse>;
    /**
     * @summary 查询会议室分组列表
     *
     * @param request QueryMeetingRoomGroupListRequest
     * @param headers QueryMeetingRoomGroupListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMeetingRoomGroupListResponse
     */
    queryMeetingRoomGroupListWithOptions(request: QueryMeetingRoomGroupListRequest, headers: QueryMeetingRoomGroupListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMeetingRoomGroupListResponse>;
    /**
     * @summary 查询会议室分组列表
     *
     * @param request QueryMeetingRoomGroupListRequest
     * @return QueryMeetingRoomGroupListResponse
     */
    queryMeetingRoomGroupList(request: QueryMeetingRoomGroupListRequest): Promise<QueryMeetingRoomGroupListResponse>;
    /**
     * @summary 查询会议室列表
     *
     * @param request QueryMeetingRoomListRequest
     * @param headers QueryMeetingRoomListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMeetingRoomListResponse
     */
    queryMeetingRoomListWithOptions(request: QueryMeetingRoomListRequest, headers: QueryMeetingRoomListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMeetingRoomListResponse>;
    /**
     * @summary 查询会议室列表
     *
     * @param request QueryMeetingRoomListRequest
     * @return QueryMeetingRoomListResponse
     */
    queryMeetingRoomList(request: QueryMeetingRoomListRequest): Promise<QueryMeetingRoomListResponse>;
    /**
     * @summary 取消会议室高级用户模式。
     *
     * @param request RemoveSuperUserMeetingRoomRequest
     * @param headers RemoveSuperUserMeetingRoomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveSuperUserMeetingRoomResponse
     */
    removeSuperUserMeetingRoomWithOptions(request: RemoveSuperUserMeetingRoomRequest, headers: RemoveSuperUserMeetingRoomHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveSuperUserMeetingRoomResponse>;
    /**
     * @summary 取消会议室高级用户模式。
     *
     * @param request RemoveSuperUserMeetingRoomRequest
     * @return RemoveSuperUserMeetingRoomResponse
     */
    removeSuperUserMeetingRoom(request: RemoveSuperUserMeetingRoomRequest): Promise<RemoveSuperUserMeetingRoomResponse>;
    /**
     * @summary 设置会议室成为高级用户模式。只有设置在白名单里的人员或部门，才能呼叫此会议室。
     *
     * @param request SetSuperUserMeetingRoomRequest
     * @param headers SetSuperUserMeetingRoomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetSuperUserMeetingRoomResponse
     */
    setSuperUserMeetingRoomWithOptions(request: SetSuperUserMeetingRoomRequest, headers: SetSuperUserMeetingRoomHeaders, runtime: $Util.RuntimeOptions): Promise<SetSuperUserMeetingRoomResponse>;
    /**
     * @summary 设置会议室成为高级用户模式。只有设置在白名单里的人员或部门，才能呼叫此会议室。
     *
     * @param request SetSuperUserMeetingRoomRequest
     * @return SetSuperUserMeetingRoomResponse
     */
    setSuperUserMeetingRoom(request: SetSuperUserMeetingRoomRequest): Promise<SetSuperUserMeetingRoomResponse>;
    /**
     * @summary 更新自定义屏幕模板
     *
     * @param request UpdateDeviceCustomTemplateRequest
     * @param headers UpdateDeviceCustomTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateDeviceCustomTemplateResponse
     */
    updateDeviceCustomTemplateWithOptions(request: UpdateDeviceCustomTemplateRequest, headers: UpdateDeviceCustomTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateDeviceCustomTemplateResponse>;
    /**
     * @summary 更新自定义屏幕模板
     *
     * @param request UpdateDeviceCustomTemplateRequest
     * @return UpdateDeviceCustomTemplateResponse
     */
    updateDeviceCustomTemplate(request: UpdateDeviceCustomTemplateRequest): Promise<UpdateDeviceCustomTemplateResponse>;
    /**
     * @summary 更新会议室信息
     *
     * @param request UpdateMeetingRoomRequest
     * @param headers UpdateMeetingRoomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateMeetingRoomResponse
     */
    updateMeetingRoomWithOptions(request: UpdateMeetingRoomRequest, headers: UpdateMeetingRoomHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateMeetingRoomResponse>;
    /**
     * @summary 更新会议室信息
     *
     * @param request UpdateMeetingRoomRequest
     * @return UpdateMeetingRoomResponse
     */
    updateMeetingRoom(request: UpdateMeetingRoomRequest): Promise<UpdateMeetingRoomResponse>;
    /**
     * @summary 更新会议室分组
     *
     * @param request UpdateMeetingRoomGroupRequest
     * @param headers UpdateMeetingRoomGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateMeetingRoomGroupResponse
     */
    updateMeetingRoomGroupWithOptions(request: UpdateMeetingRoomGroupRequest, headers: UpdateMeetingRoomGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateMeetingRoomGroupResponse>;
    /**
     * @summary 更新会议室分组
     *
     * @param request UpdateMeetingRoomGroupRequest
     * @return UpdateMeetingRoomGroupResponse
     */
    updateMeetingRoomGroup(request: UpdateMeetingRoomGroupRequest): Promise<UpdateMeetingRoomGroupResponse>;
}
