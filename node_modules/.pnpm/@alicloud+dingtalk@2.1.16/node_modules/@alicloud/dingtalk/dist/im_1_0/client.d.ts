/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class PrivateDataValue extends $tea.Model {
    cardParamMap?: {
        [key: string]: string;
    };
    cardMediaIdParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionRequest extends $tea.Model {
    backgroundMediaId?: string;
    backgroundMediaIdForPanel?: string;
    deptId?: number;
    emotionName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionResponseBody extends $tea.Model {
    result?: AddOrgTextEmotionResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddOrgTextEmotionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotToConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotToConversationRequest extends $tea.Model {
    icon?: string;
    name?: string;
    openConversationId?: string;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotToConversationResponseBody extends $tea.Model {
    chatBotUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotToConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddRobotToConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AutoOpenDingTalkConnectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AutoOpenDingTalkConnectResponseBody extends $tea.Model {
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AutoOpenDingTalkConnectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AutoOpenDingTalkConnectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageRequest extends $tea.Model {
    openConversationId?: string;
    openMessageIds?: string[];
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageResponseBody extends $tea.Model {
    messages?: BatchQueryFamilySchoolMessageResponseBodyMessages[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchQueryFamilySchoolMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryGroupMemberRequest extends $tea.Model {
    coolAppCode?: string;
    maxResults?: number;
    nextToken?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryGroupMemberResponseBody extends $tea.Model {
    hasMore?: boolean;
    memberUserIds?: string[];
    nextToken?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchQueryGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardTemplateBuildActionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardTemplateBuildActionRequest extends $tea.Model {
    action?: string;
    cardTemplateJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardTemplateBuildActionResponseBody extends $tea.Model {
    cardTemplateJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardTemplateBuildActionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CardTemplateBuildActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeGroupOwnerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeGroupOwnerRequest extends $tea.Model {
    groupOwnerId?: string;
    groupOwnerType?: number;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeGroupOwnerResponseBody extends $tea.Model {
    newGroupOwnerId?: string;
    newGroupOwnerType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChangeGroupOwnerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChangeGroupOwnerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatIdToOpenConversationIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatIdToOpenConversationIdResponseBody extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatIdToOpenConversationIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatIdToOpenConversationIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatSubAdminUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatSubAdminUpdateRequest extends $tea.Model {
    openConversationId?: string;
    role?: number;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatSubAdminUpdateResponseBody extends $tea.Model {
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatSubAdminUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatSubAdminUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckUserIsGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckUserIsGroupMemberRequest extends $tea.Model {
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckUserIsGroupMemberResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckUserIsGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CheckUserIsGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCoupleGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCoupleGroupConversationRequest extends $tea.Model {
    appUserId?: string;
    groupAvatar?: string;
    groupName?: string;
    groupOwnerId?: string;
    groupTemplateId?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCoupleGroupConversationResponseBody extends $tea.Model {
    conversationId?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCoupleGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCoupleGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationRequest extends $tea.Model {
    appUserIds?: string[];
    groupAvatar?: string;
    groupName?: string;
    groupOwnerId?: string;
    groupOwnerType?: number;
    groupTemplateId?: string;
    operatorId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationResponseBody extends $tea.Model {
    appUserIds?: string[];
    conversationId?: string;
    openConversationId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionRequest extends $tea.Model {
    interconnections?: CreateInterconnectionRequestInterconnections[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionResponseBody extends $tea.Model {
    results?: CreateInterconnectionResponseBodyResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateInterconnectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationRequest extends $tea.Model {
    features?: {
        [key: string]: string;
    };
    groupName?: string;
    groupOwnerId?: string;
    icon?: string;
    managementOptions?: CreateSceneGroupConversationRequestManagementOptions;
    templateId?: string;
    userIdList?: string[];
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationResponseBody extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSceneGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStoreGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStoreGroupConversationRequest extends $tea.Model {
    appUserId?: string;
    businessUniqueKey?: string;
    groupAvatar?: string;
    groupName?: string;
    groupTemplateId?: string;
    operatorId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStoreGroupConversationResponseBody extends $tea.Model {
    conversationId?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStoreGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateStoreGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgTextEmotionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgTextEmotionRequest extends $tea.Model {
    deptId?: number;
    emotionIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgTextEmotionResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgTextEmotionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteOrgTextEmotionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupConversationRequest extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupConversationResponseBody extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DismissGroupConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DismissGroupConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationUrlRequest extends $tea.Model {
    appUserId?: string;
    channelCode?: string;
    deviceId?: string;
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationUrlResponseBody extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConversationUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgRequest extends $tea.Model {
    maxResults?: number;
    msgTypes?: number[];
    nextToken?: number;
    openConversationId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgResponseBody extends $tea.Model {
    corpId?: string;
    hasMore?: string;
    messages?: GetFamilySchoolConversationMsgResponseBodyMessages[];
    nextToken?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFamilySchoolConversationMsgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsResponseBody extends $tea.Model {
    groupInfoList?: GetFamilySchoolConversationsResponseBodyGroupInfoList[];
    hasMore?: string;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFamilySchoolConversationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInnerGroupMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInnerGroupMembersRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInnerGroupMembersResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInnerGroupMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetInnerGroupMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInterconnectionUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInterconnectionUrlRequest extends $tea.Model {
    appUserAvatar?: string;
    appUserAvatarType?: number;
    appUserId?: string;
    appUserMobileNumber?: string;
    appUserName?: string;
    msgPageType?: number;
    qrCode?: string;
    signature?: string;
    sourceCode?: string;
    sourceType?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInterconnectionUrlResponseBody extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInterconnectionUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetInterconnectionUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsResponseBody extends $tea.Model {
    groupInfos?: GetNewestInnerGroupsResponseBodyGroupInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetNewestInnerGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupInfoRequest extends $tea.Model {
    coolAppCode?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupInfoResponseBody extends $tea.Model {
    groupUrl?: string;
    icon?: string;
    openConversationId?: string;
    ownerUserId?: string;
    status?: number;
    success?: boolean;
    templateId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSceneGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupMembersRequest extends $tea.Model {
    coolAppCode?: string;
    cursor?: string;
    openConversationId?: string;
    size?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupMembersResponseBody extends $tea.Model {
    hasMore?: boolean;
    memberUserIds?: string[];
    nextCursor?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSceneGroupMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSceneGroupMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupBanWordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupBanWordsRequest extends $tea.Model {
    banWordsMode?: number;
    openConversationId?: string;
    options?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupBanWordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityInquiryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityInquiryRequest extends $tea.Model {
    effectiveDuration?: string;
    openConversationId?: string;
    operator?: string;
    options?: {
        [key: string]: any;
    };
    targetCapacity?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityInquiryResponseBody extends $tea.Model {
    actualPrice?: number;
    createdAt?: number;
    currentCapacity?: number;
    currentEffectUntil?: number;
    discount?: number;
    extInfo?: {
        [key: string]: any;
    };
    groupOwner?: string;
    groupTitle?: string;
    markedPrice?: number;
    memberCount?: number;
    openConversationId?: string;
    operator?: string;
    targetCapacity?: number;
    targetEffectUntil?: number;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityInquiryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupCapacityInquiryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderConfirmHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderConfirmRequest extends $tea.Model {
    operator?: string;
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderConfirmResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderConfirmResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupCapacityOrderConfirmResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderPlaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderPlaceRequest extends $tea.Model {
    actualPrice?: number;
    currentCapacity?: number;
    currentEffectUntil?: number;
    discount?: number;
    extInfo?: {
        [key: string]: any;
    };
    markedPrice?: number;
    openConversationId?: string;
    operator?: string;
    targetCapacity?: number;
    targetEffectUntil?: number;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderPlaceResponseBody extends $tea.Model {
    actualPrice?: number;
    currentCapacity?: number;
    currentEffectUntil?: number;
    discount?: number;
    extInfo?: {
        [key: string]: string;
    };
    markedPrice?: number;
    openConversationId?: string;
    operator?: string;
    orderId?: string;
    targetCapacity?: number;
    targetEffectUntil?: number;
    token?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupCapacityOrderPlaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupCapacityOrderPlaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryRequest extends $tea.Model {
    createdAfter?: number;
    groupId?: string;
    groupMemberSamples?: string[];
    groupOwner?: string;
    groupTitleKeywords?: string[];
    groupUrl?: string;
    maxResults?: number;
    membersOver?: number;
    nextToken?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryResponseBody extends $tea.Model {
    groupInfoList?: GroupManageQueryResponseBodyGroupInfoList[];
    hasMore?: boolean;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupManageQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageReduceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageReduceRequest extends $tea.Model {
    capacityLimit?: number;
    openConversationId?: string;
    options?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageReduceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallRobotToOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallRobotToOrgRequest extends $tea.Model {
    brief?: string;
    description?: string;
    icon?: string;
    name?: string;
    outgoingToken?: string;
    outgoingUrl?: string;
    previewMediaId?: string;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallRobotToOrgResponseBody extends $tea.Model {
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InstallRobotToOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InstallRobotToOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceRequest extends $tea.Model {
    callbackRouteKey?: string;
    cardData?: InteractiveCardCreateInstanceRequestCardData;
    cardTemplateId?: string;
    chatBotId?: string;
    conversationType?: number;
    openConversationId?: string;
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    pullStrategy?: boolean;
    receiverUserIdList?: string[];
    robotCode?: string;
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceResponseBody extends $tea.Model {
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InteractiveCardCreateInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionResponseBody extends $tea.Model {
    result?: ListOrgTextEmotionResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListOrgTextEmotionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoByMemberAuthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoByMemberAuthRequest extends $tea.Model {
    coolAppCode?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoByMemberAuthResponseBody extends $tea.Model {
    memberCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoByMemberAuthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupInfoByMemberAuthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberRequest extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponseBody extends $tea.Model {
    groupMembers?: QueryGroupMemberResponseBodyGroupMembers[];
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthRequest extends $tea.Model {
    coolAppCode?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthResponseBody extends $tea.Model {
    groupMemberList?: QueryGroupMemberByMemberAuthResponseBodyGroupMemberList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupMemberByMemberAuthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusRequest extends $tea.Model {
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusResponseBody extends $tea.Model {
    groupMuteMode?: boolean;
    userMuteResult?: QueryGroupMuteStatusResponseBodyUserMuteResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupMuteStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMembersOfGroupRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMembersOfGroupRoleRequest extends $tea.Model {
    openConversationId?: string;
    openRoleId?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMembersOfGroupRoleResponseBody extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMembersOfGroupRoleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMembersOfGroupRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotRequest extends $tea.Model {
    openConversationId?: string;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotResponseBody extends $tea.Model {
    result?: QuerySceneGroupTemplateRobotResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySceneGroupTemplateRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupRequest extends $tea.Model {
    groupMembers?: QuerySingleGroupRequestGroupMembers[];
    groupTemplateId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupResponseBody extends $tea.Model {
    openConversations?: QuerySingleGroupResponseBodyOpenConversations[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySingleGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageRequest extends $tea.Model {
    appUserId?: string;
    openConversationIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageResponseBody extends $tea.Model {
    unReadCount?: number;
    unReadItems?: QueryUnReadMessageResponseBodyUnReadItems[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUnReadMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveRobotFromConversationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveRobotFromConversationRequest extends $tea.Model {
    chatBotUserId?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveRobotFromConversationResponseBody extends $tea.Model {
    chatBotUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveRobotFromConversationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveRobotFromConversationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsRequest extends $tea.Model {
    maxResults?: number;
    searchKey?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsResponseBody extends $tea.Model {
    groupInfos?: SearchInnerGroupsResponseBodyGroupInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchInnerGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardRequest extends $tea.Model {
    atOpenIds?: {
        [key: string]: string;
    };
    callbackRouteKey?: string;
    cardData?: SendInteractiveCardRequestCardData;
    cardOptions?: SendInteractiveCardRequestCardOptions;
    cardTemplateId?: string;
    chatBotId?: string;
    conversationType?: number;
    digitalWorkerCode?: string;
    openConversationId?: string;
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    pullStrategy?: boolean;
    receiverUserIdList?: string[];
    robotCode?: string;
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardResponseBody extends $tea.Model {
    result?: SendInteractiveCardResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardRequest extends $tea.Model {
    atOpenIds?: {
        [key: string]: string;
    };
    callbackRouteKey?: string;
    cardData?: SendOTOInteractiveCardRequestCardData;
    cardOptions?: SendOTOInteractiveCardRequestCardOptions;
    cardTemplateId?: string;
    openConversationId?: string;
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    pullStrategy?: boolean;
    receiverUserIdList?: string[];
    robotCode?: string;
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardResponseBody extends $tea.Model {
    result?: SendOTOInteractiveCardResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendOTOInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardRequest extends $tea.Model {
    callbackUrl?: string;
    cardBizId?: string;
    cardData?: string;
    cardTemplateId?: string;
    openConversationId?: string;
    pullStrategy?: boolean;
    robotCode?: string;
    sendOptions?: SendRobotInteractiveCardRequestSendOptions;
    singleChatReceiver?: string;
    unionIdPrivateDataMap?: string;
    userIdPrivateDataMap?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardResponseBody extends $tea.Model {
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendRobotInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageRequest extends $tea.Model {
    atAll?: boolean;
    atAppUserId?: string;
    atDingUserId?: string;
    msgContent?: string;
    msgType?: string;
    openConversationIds?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendRobotMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardRequest extends $tea.Model {
    callbackUrl?: string;
    cardData?: string;
    cardTemplateId?: string;
    openConversationId?: string;
    outTrackId?: string;
    robotCode?: string;
    sendOptions?: SendTemplateInteractiveCardRequestSendOptions;
    singleChatReceiver?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardResponseBody extends $tea.Model {
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendTemplateInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelRequest extends $tea.Model {
    openConversationId?: string;
    rightPanelClosePermitted?: boolean;
    rightPanelOpenStatus?: number;
    title?: string;
    webWndParams?: SetRightPanelRequestWebWndParams;
    width?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetRightPanelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxCloseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxCloseRequest extends $tea.Model {
    conversationType?: number;
    coolAppCode?: string;
    openConversationId?: string;
    outTrackId?: string;
    receiverUserIdList?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxCloseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxOpenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxOpenRequest extends $tea.Model {
    conversationType?: number;
    coolAppCode?: string;
    expiredTime?: number;
    openConversationId?: string;
    outTrackId?: string;
    platforms?: string;
    receiverUserIdList?: string[];
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TopboxOpenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupAvatarHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupAvatarRequest extends $tea.Model {
    groupAvatar?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupAvatarResponseBody extends $tea.Model {
    newGroupAvatar?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupAvatarResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateGroupAvatarResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameRequest extends $tea.Model {
    groupName?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameResponseBody extends $tea.Model {
    newGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupNameResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateGroupNameResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupPermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupPermissionRequest extends $tea.Model {
    openConversationId?: string;
    permissionGroup?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupPermissionResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupPermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateGroupPermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSubAdminHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSubAdminRequest extends $tea.Model {
    openConversationId?: string;
    role?: number;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSubAdminResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateGroupSubAdminResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateGroupSubAdminResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardRequest extends $tea.Model {
    cardData?: UpdateInteractiveCardRequestCardData;
    cardOptions?: UpdateInteractiveCardRequestCardOptions;
    outTrackId?: string;
    privateData?: {
        [key: string]: PrivateDataValue;
    };
    userIdType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardResponseBody extends $tea.Model {
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberBanWordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberBanWordsRequest extends $tea.Model {
    muteDuration?: number;
    muteStatus?: number;
    openConversationId?: string;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberBanWordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberGroupNickHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberGroupNickRequest extends $tea.Model {
    groupNick?: string;
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberGroupNickResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateMemberGroupNickResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateMemberGroupNickResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInOrgRequest extends $tea.Model {
    brief?: string;
    description?: string;
    icon?: string;
    name?: string;
    outgoingToken?: string;
    outgoingUrl?: string;
    previewMediaId?: string;
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInOrgResponseBody extends $tea.Model {
    robotCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRobotInOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardRequest extends $tea.Model {
    cardBizId?: string;
    cardData?: string;
    unionIdPrivateDataMap?: string;
    updateOptions?: UpdateRobotInteractiveCardRequestUpdateOptions;
    userIdPrivateDataMap?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardResponseBody extends $tea.Model {
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRobotInteractiveCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTheGroupRolesOfGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTheGroupRolesOfGroupMemberRequest extends $tea.Model {
    openConversationId?: string;
    openRoleIds?: string[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTheGroupRolesOfGroupMemberResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTheGroupRolesOfGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateTheGroupRolesOfGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMemberRequest extends $tea.Model {
    appUserIds?: string[];
    openConversationId?: string;
    operatorId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMemberResponseBody extends $tea.Model {
    appUserIds?: string[];
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMemberRequest extends $tea.Model {
    appUserIds?: string[];
    openConversationId?: string;
    operatorId?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMemberResponseBody extends $tea.Model {
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveGroupMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveGroupMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingMessageRequest extends $tea.Model {
    code?: string;
    message?: string;
    messageType?: string;
    openConversationId?: string;
    receiverId?: string;
    senderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingMessageResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendDingMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendDingMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageRequest extends $tea.Model {
    message?: string;
    messageType?: string;
    openConversationId?: string;
    receiverId?: string;
    senderId?: string;
    sourceInfos?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponseBody extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddOrgTextEmotionResponseBodyResult extends $tea.Model {
    emotionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageResponseBodyMessagesMediaModels extends $tea.Model {
    fileName?: string;
    fileType?: string;
    mediaId?: string;
    size?: string;
    url?: string;
    videoPicMediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchQueryFamilySchoolMessageResponseBodyMessages extends $tea.Model {
    contentType?: number;
    createAt?: number;
    mediaModels?: BatchQueryFamilySchoolMessageResponseBodyMessagesMediaModels[];
    openMsgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionRequestInterconnections extends $tea.Model {
    appUserAvatar?: string;
    appUserAvatarMediaType?: number;
    appUserDynamics?: string;
    appUserId?: string;
    appUserMobile?: string;
    appUserName?: string;
    channelCode?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInterconnectionResponseBodyResults extends $tea.Model {
    appUserId?: string;
    message?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSceneGroupConversationRequestManagementOptions extends $tea.Model {
    chatBannedType?: number;
    managementType?: number;
    mentionAllAuthority?: number;
    searchable?: number;
    showHistoryType?: number;
    validationType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgResponseBodyMessagesMediaModels extends $tea.Model {
    fileName?: string;
    fileType?: string;
    mediaId?: string;
    size?: string;
    url?: string;
    videoPicMediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationMsgResponseBodyMessages extends $tea.Model {
    contentType?: number;
    createAt?: number;
    mediaModels?: GetFamilySchoolConversationMsgResponseBodyMessagesMediaModels[];
    openMsgId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFamilySchoolConversationsResponseBodyGroupInfoList extends $tea.Model {
    corpId?: string;
    deptNameChain?: string[];
    groupName?: string;
    groupType?: string;
    joinGroupTime?: number;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetNewestInnerGroupsResponseBodyGroupInfos extends $tea.Model {
    icon?: string;
    memberAmount?: string;
    openConversationId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupManageQueryResponseBodyGroupInfoList extends $tea.Model {
    banWordsMode?: number;
    capacity?: number;
    createdAt?: number;
    extInfo?: {
        [key: string]: any;
    };
    groupAdminList?: string[];
    groupOwner?: string;
    groupTitle?: string;
    memberCount?: number;
    openConversationId?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InteractiveCardCreateInstanceRequestCardData extends $tea.Model {
    cardMediaIdParamMap?: {
        [key: string]: string;
    };
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionResponseBodyResultEmotions extends $tea.Model {
    backgroundMediaId?: string;
    backgroundMediaIdForPanel?: string;
    deptId?: number;
    emotionId?: string;
    emotionName?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrgTextEmotionResponseBodyResult extends $tea.Model {
    emotions?: ListOrgTextEmotionResponseBodyResultEmotions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberResponseBodyGroupMembers extends $tea.Model {
    groupMemberAvatar?: string;
    groupMemberDynamics?: string;
    groupMemberId?: string;
    groupMemberName?: string;
    groupMemberType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMemberByMemberAuthResponseBodyGroupMemberList extends $tea.Model {
    groupNickName?: string;
    orgName?: string;
    profilePhotoUrl?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMuteStatusResponseBodyUserMuteResult extends $tea.Model {
    muteEndTime?: number;
    muteStartTime?: number;
    userMuteMode?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySceneGroupTemplateRobotResponseBodyResult extends $tea.Model {
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupRequestGroupMembers extends $tea.Model {
    appUserId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleGroupResponseBodyOpenConversations extends $tea.Model {
    appUserId?: string;
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUnReadMessageResponseBodyUnReadItems extends $tea.Model {
    openConversationId?: string;
    unReadCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchInnerGroupsResponseBodyGroupInfos extends $tea.Model {
    icon?: string;
    memberAmount?: string;
    openConversationId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardRequestCardData extends $tea.Model {
    cardMediaIdParamMap?: {
        [key: string]: string;
    };
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardRequestCardOptions extends $tea.Model {
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendInteractiveCardResponseBodyResult extends $tea.Model {
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardRequestCardData extends $tea.Model {
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardRequestCardOptions extends $tea.Model {
    supportForward?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendOTOInteractiveCardResponseBodyResult extends $tea.Model {
    processQueryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendRobotInteractiveCardRequestSendOptions extends $tea.Model {
    atAll?: boolean;
    atUserListJson?: string;
    cardPropertyJson?: string;
    receiverListJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendTemplateInteractiveCardRequestSendOptions extends $tea.Model {
    atAll?: boolean;
    atUserListJson?: string;
    cardPropertyJson?: string;
    receiverListJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRightPanelRequestWebWndParams extends $tea.Model {
    targetURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardRequestCardData extends $tea.Model {
    cardMediaIdParamMap?: {
        [key: string]: string;
    };
    cardParamMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInteractiveCardRequestCardOptions extends $tea.Model {
    updateCardDataByKey?: boolean;
    updatePrivateDataByKey?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRobotInteractiveCardRequestUpdateOptions extends $tea.Model {
    updateCardDataByKey?: boolean;
    updatePrivateDataByKey?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 添加企业文字表情
     *
     * @param request AddOrgTextEmotionRequest
     * @param headers AddOrgTextEmotionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddOrgTextEmotionResponse
     */
    addOrgTextEmotionWithOptions(request: AddOrgTextEmotionRequest, headers: AddOrgTextEmotionHeaders, runtime: $Util.RuntimeOptions): Promise<AddOrgTextEmotionResponse>;
    /**
     * @summary 添加企业文字表情
     *
     * @param request AddOrgTextEmotionRequest
     * @return AddOrgTextEmotionResponse
     */
    addOrgTextEmotion(request: AddOrgTextEmotionRequest): Promise<AddOrgTextEmotionResponse>;
    /**
     * @summary 添加机器人到会话
     *
     * @param request AddRobotToConversationRequest
     * @param headers AddRobotToConversationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddRobotToConversationResponse
     */
    addRobotToConversationWithOptions(request: AddRobotToConversationRequest, headers: AddRobotToConversationHeaders, runtime: $Util.RuntimeOptions): Promise<AddRobotToConversationResponse>;
    /**
     * @summary 添加机器人到会话
     *
     * @param request AddRobotToConversationRequest
     * @return AddRobotToConversationResponse
     */
    addRobotToConversation(request: AddRobotToConversationRequest): Promise<AddRobotToConversationResponse>;
    /**
     * @summary 自动开通钉钉客联微应用
     *
     * @param headers AutoOpenDingTalkConnectHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AutoOpenDingTalkConnectResponse
     */
    autoOpenDingTalkConnectWithOptions(headers: AutoOpenDingTalkConnectHeaders, runtime: $Util.RuntimeOptions): Promise<AutoOpenDingTalkConnectResponse>;
    /**
     * @summary 自动开通钉钉客联微应用
     *
     * @return AutoOpenDingTalkConnectResponse
     */
    autoOpenDingTalkConnect(): Promise<AutoOpenDingTalkConnectResponse>;
    /**
     * @summary 批量查询家校群消息详情
     *
     * @param request BatchQueryFamilySchoolMessageRequest
     * @param headers BatchQueryFamilySchoolMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchQueryFamilySchoolMessageResponse
     */
    batchQueryFamilySchoolMessageWithOptions(request: BatchQueryFamilySchoolMessageRequest, headers: BatchQueryFamilySchoolMessageHeaders, runtime: $Util.RuntimeOptions): Promise<BatchQueryFamilySchoolMessageResponse>;
    /**
     * @summary 批量查询家校群消息详情
     *
     * @param request BatchQueryFamilySchoolMessageRequest
     * @return BatchQueryFamilySchoolMessageResponse
     */
    batchQueryFamilySchoolMessage(request: BatchQueryFamilySchoolMessageRequest): Promise<BatchQueryFamilySchoolMessageResponse>;
    /**
     * @summary 查询群成员
     *
     * @param request BatchQueryGroupMemberRequest
     * @param headers BatchQueryGroupMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchQueryGroupMemberResponse
     */
    batchQueryGroupMemberWithOptions(request: BatchQueryGroupMemberRequest, headers: BatchQueryGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<BatchQueryGroupMemberResponse>;
    /**
     * @summary 查询群成员
     *
     * @param request BatchQueryGroupMemberRequest
     * @return BatchQueryGroupMemberResponse
     */
    batchQueryGroupMember(request: BatchQueryGroupMemberRequest): Promise<BatchQueryGroupMemberResponse>;
    /**
     * @summary 钉钉互动卡片模板构建动作
     *
     * @param request CardTemplateBuildActionRequest
     * @param headers CardTemplateBuildActionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CardTemplateBuildActionResponse
     */
    cardTemplateBuildActionWithOptions(request: CardTemplateBuildActionRequest, headers: CardTemplateBuildActionHeaders, runtime: $Util.RuntimeOptions): Promise<CardTemplateBuildActionResponse>;
    /**
     * @summary 钉钉互动卡片模板构建动作
     *
     * @param request CardTemplateBuildActionRequest
     * @return CardTemplateBuildActionResponse
     */
    cardTemplateBuildAction(request: CardTemplateBuildActionRequest): Promise<CardTemplateBuildActionResponse>;
    /**
     * @summary 更换群主
     *
     * @param request ChangeGroupOwnerRequest
     * @param headers ChangeGroupOwnerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChangeGroupOwnerResponse
     */
    changeGroupOwnerWithOptions(request: ChangeGroupOwnerRequest, headers: ChangeGroupOwnerHeaders, runtime: $Util.RuntimeOptions): Promise<ChangeGroupOwnerResponse>;
    /**
     * @summary 更换群主
     *
     * @param request ChangeGroupOwnerRequest
     * @return ChangeGroupOwnerResponse
     */
    changeGroupOwner(request: ChangeGroupOwnerRequest): Promise<ChangeGroupOwnerResponse>;
    /**
     * @summary 会话开放的ChatId转OpenConversationId
     *
     * @param headers ChatIdToOpenConversationIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatIdToOpenConversationIdResponse
     */
    chatIdToOpenConversationIdWithOptions(chatId: string, headers: ChatIdToOpenConversationIdHeaders, runtime: $Util.RuntimeOptions): Promise<ChatIdToOpenConversationIdResponse>;
    /**
     * @summary 会话开放的ChatId转OpenConversationId
     *
     * @return ChatIdToOpenConversationIdResponse
     */
    chatIdToOpenConversationId(chatId: string): Promise<ChatIdToOpenConversationIdResponse>;
    /**
     * @summary 设置群管理员
     *
     * @param request ChatSubAdminUpdateRequest
     * @param headers ChatSubAdminUpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatSubAdminUpdateResponse
     */
    chatSubAdminUpdateWithOptions(request: ChatSubAdminUpdateRequest, headers: ChatSubAdminUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<ChatSubAdminUpdateResponse>;
    /**
     * @summary 设置群管理员
     *
     * @param request ChatSubAdminUpdateRequest
     * @return ChatSubAdminUpdateResponse
     */
    chatSubAdminUpdate(request: ChatSubAdminUpdateRequest): Promise<ChatSubAdminUpdateResponse>;
    /**
     * @summary 查询用户是否为企业内部群成员
     *
     * @param request CheckUserIsGroupMemberRequest
     * @param headers CheckUserIsGroupMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckUserIsGroupMemberResponse
     */
    checkUserIsGroupMemberWithOptions(request: CheckUserIsGroupMemberRequest, headers: CheckUserIsGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CheckUserIsGroupMemberResponse>;
    /**
     * @summary 查询用户是否为企业内部群成员
     *
     * @param request CheckUserIsGroupMemberRequest
     * @return CheckUserIsGroupMemberResponse
     */
    checkUserIsGroupMember(request: CheckUserIsGroupMemberRequest): Promise<CheckUserIsGroupMemberResponse>;
    /**
     * @summary 创建钉外两人群
     *
     * @param request CreateCoupleGroupConversationRequest
     * @param headers CreateCoupleGroupConversationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCoupleGroupConversationResponse
     */
    createCoupleGroupConversationWithOptions(request: CreateCoupleGroupConversationRequest, headers: CreateCoupleGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCoupleGroupConversationResponse>;
    /**
     * @summary 创建钉外两人群
     *
     * @param request CreateCoupleGroupConversationRequest
     * @return CreateCoupleGroupConversationResponse
     */
    createCoupleGroupConversation(request: CreateCoupleGroupConversationRequest): Promise<CreateCoupleGroupConversationResponse>;
    /**
     * @summary 创建互通群（支持普通互通群、跨钉两人群）
     *
     * @param request CreateGroupConversationRequest
     * @param headers CreateGroupConversationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateGroupConversationResponse
     */
    createGroupConversationWithOptions(request: CreateGroupConversationRequest, headers: CreateGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateGroupConversationResponse>;
    /**
     * @summary 创建互通群（支持普通互通群、跨钉两人群）
     *
     * @param request CreateGroupConversationRequest
     * @return CreateGroupConversationResponse
     */
    createGroupConversation(request: CreateGroupConversationRequest): Promise<CreateGroupConversationResponse>;
    /**
     * @summary 创建钉外账号
     *
     * @param request CreateInterconnectionRequest
     * @param headers CreateInterconnectionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateInterconnectionResponse
     */
    createInterconnectionWithOptions(request: CreateInterconnectionRequest, headers: CreateInterconnectionHeaders, runtime: $Util.RuntimeOptions): Promise<CreateInterconnectionResponse>;
    /**
     * @summary 创建钉外账号
     *
     * @param request CreateInterconnectionRequest
     * @return CreateInterconnectionResponse
     */
    createInterconnection(request: CreateInterconnectionRequest): Promise<CreateInterconnectionResponse>;
    /**
     * @summary 创建场景群会话
     *
     * @param request CreateSceneGroupConversationRequest
     * @param headers CreateSceneGroupConversationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSceneGroupConversationResponse
     */
    createSceneGroupConversationWithOptions(request: CreateSceneGroupConversationRequest, headers: CreateSceneGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSceneGroupConversationResponse>;
    /**
     * @summary 创建场景群会话
     *
     * @param request CreateSceneGroupConversationRequest
     * @return CreateSceneGroupConversationResponse
     */
    createSceneGroupConversation(request: CreateSceneGroupConversationRequest): Promise<CreateSceneGroupConversationResponse>;
    /**
     * @summary 创建店铺群
     *
     * @param request CreateStoreGroupConversationRequest
     * @param headers CreateStoreGroupConversationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateStoreGroupConversationResponse
     */
    createStoreGroupConversationWithOptions(request: CreateStoreGroupConversationRequest, headers: CreateStoreGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<CreateStoreGroupConversationResponse>;
    /**
     * @summary 创建店铺群
     *
     * @param request CreateStoreGroupConversationRequest
     * @return CreateStoreGroupConversationResponse
     */
    createStoreGroupConversation(request: CreateStoreGroupConversationRequest): Promise<CreateStoreGroupConversationResponse>;
    /**
     * @summary 删除企业文字表情
     *
     * @param request DeleteOrgTextEmotionRequest
     * @param headers DeleteOrgTextEmotionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteOrgTextEmotionResponse
     */
    deleteOrgTextEmotionWithOptions(request: DeleteOrgTextEmotionRequest, headers: DeleteOrgTextEmotionHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteOrgTextEmotionResponse>;
    /**
     * @summary 删除企业文字表情
     *
     * @param request DeleteOrgTextEmotionRequest
     * @return DeleteOrgTextEmotionResponse
     */
    deleteOrgTextEmotion(request: DeleteOrgTextEmotionRequest): Promise<DeleteOrgTextEmotionResponse>;
    /**
     * @summary 解散互通群
     *
     * @param request DismissGroupConversationRequest
     * @param headers DismissGroupConversationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DismissGroupConversationResponse
     */
    dismissGroupConversationWithOptions(request: DismissGroupConversationRequest, headers: DismissGroupConversationHeaders, runtime: $Util.RuntimeOptions): Promise<DismissGroupConversationResponse>;
    /**
     * @summary 解散互通群
     *
     * @param request DismissGroupConversationRequest
     * @return DismissGroupConversationResponse
     */
    dismissGroupConversation(request: DismissGroupConversationRequest): Promise<DismissGroupConversationResponse>;
    /**
     * @summary 创建ToB会话地址
     *
     * @param request GetConversationUrlRequest
     * @param headers GetConversationUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetConversationUrlResponse
     */
    getConversationUrlWithOptions(request: GetConversationUrlRequest, headers: GetConversationUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetConversationUrlResponse>;
    /**
     * @summary 创建ToB会话地址
     *
     * @param request GetConversationUrlRequest
     * @return GetConversationUrlResponse
     */
    getConversationUrl(request: GetConversationUrlRequest): Promise<GetConversationUrlResponse>;
    /**
     * @summary 查询用户家校群消息(图片&视频Z&富文本)
     *
     * @param request GetFamilySchoolConversationMsgRequest
     * @param headers GetFamilySchoolConversationMsgHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFamilySchoolConversationMsgResponse
     */
    getFamilySchoolConversationMsgWithOptions(request: GetFamilySchoolConversationMsgRequest, headers: GetFamilySchoolConversationMsgHeaders, runtime: $Util.RuntimeOptions): Promise<GetFamilySchoolConversationMsgResponse>;
    /**
     * @summary 查询用户家校群消息(图片&视频Z&富文本)
     *
     * @param request GetFamilySchoolConversationMsgRequest
     * @return GetFamilySchoolConversationMsgResponse
     */
    getFamilySchoolConversationMsg(request: GetFamilySchoolConversationMsgRequest): Promise<GetFamilySchoolConversationMsgResponse>;
    /**
     * @summary 查询用户家校群
     *
     * @param request GetFamilySchoolConversationsRequest
     * @param headers GetFamilySchoolConversationsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFamilySchoolConversationsResponse
     */
    getFamilySchoolConversationsWithOptions(request: GetFamilySchoolConversationsRequest, headers: GetFamilySchoolConversationsHeaders, runtime: $Util.RuntimeOptions): Promise<GetFamilySchoolConversationsResponse>;
    /**
     * @summary 查询用户家校群
     *
     * @param request GetFamilySchoolConversationsRequest
     * @return GetFamilySchoolConversationsResponse
     */
    getFamilySchoolConversations(request: GetFamilySchoolConversationsRequest): Promise<GetFamilySchoolConversationsResponse>;
    /**
     * @summary 查询企业内部群成员
     *
     * @param request GetInnerGroupMembersRequest
     * @param headers GetInnerGroupMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInnerGroupMembersResponse
     */
    getInnerGroupMembersWithOptions(request: GetInnerGroupMembersRequest, headers: GetInnerGroupMembersHeaders, runtime: $Util.RuntimeOptions): Promise<GetInnerGroupMembersResponse>;
    /**
     * @summary 查询企业内部群成员
     *
     * @param request GetInnerGroupMembersRequest
     * @return GetInnerGroupMembersResponse
     */
    getInnerGroupMembers(request: GetInnerGroupMembersRequest): Promise<GetInnerGroupMembersResponse>;
    /**
     * @summary 创建客联互通会话地址
     *
     * @param request GetInterconnectionUrlRequest
     * @param headers GetInterconnectionUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInterconnectionUrlResponse
     */
    getInterconnectionUrlWithOptions(request: GetInterconnectionUrlRequest, headers: GetInterconnectionUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetInterconnectionUrlResponse>;
    /**
     * @summary 创建客联互通会话地址
     *
     * @param request GetInterconnectionUrlRequest
     * @return GetInterconnectionUrlResponse
     */
    getInterconnectionUrl(request: GetInterconnectionUrlRequest): Promise<GetInterconnectionUrlResponse>;
    /**
     * @summary 查询最近活跃的企业内部群列表
     *
     * @param request GetNewestInnerGroupsRequest
     * @param headers GetNewestInnerGroupsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetNewestInnerGroupsResponse
     */
    getNewestInnerGroupsWithOptions(request: GetNewestInnerGroupsRequest, headers: GetNewestInnerGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<GetNewestInnerGroupsResponse>;
    /**
     * @summary 查询最近活跃的企业内部群列表
     *
     * @param request GetNewestInnerGroupsRequest
     * @return GetNewestInnerGroupsResponse
     */
    getNewestInnerGroups(request: GetNewestInnerGroupsRequest): Promise<GetNewestInnerGroupsResponse>;
    /**
     * @summary 查询群简要信息
     *
     * @param request GetSceneGroupInfoRequest
     * @param headers GetSceneGroupInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSceneGroupInfoResponse
     */
    getSceneGroupInfoWithOptions(request: GetSceneGroupInfoRequest, headers: GetSceneGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetSceneGroupInfoResponse>;
    /**
     * @summary 查询群简要信息
     *
     * @param request GetSceneGroupInfoRequest
     * @return GetSceneGroupInfoResponse
     */
    getSceneGroupInfo(request: GetSceneGroupInfoRequest): Promise<GetSceneGroupInfoResponse>;
    /**
     * @summary 查询群成员
     *
     * @param request GetSceneGroupMembersRequest
     * @param headers GetSceneGroupMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSceneGroupMembersResponse
     */
    getSceneGroupMembersWithOptions(request: GetSceneGroupMembersRequest, headers: GetSceneGroupMembersHeaders, runtime: $Util.RuntimeOptions): Promise<GetSceneGroupMembersResponse>;
    /**
     * @summary 查询群成员
     *
     * @param request GetSceneGroupMembersRequest
     * @return GetSceneGroupMembersResponse
     */
    getSceneGroupMembers(request: GetSceneGroupMembersRequest): Promise<GetSceneGroupMembersResponse>;
    /**
     * @summary 群禁言
     *
     * @param request GroupBanWordsRequest
     * @param headers GroupBanWordsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GroupBanWordsResponse
     */
    groupBanWordsWithOptions(request: GroupBanWordsRequest, headers: GroupBanWordsHeaders, runtime: $Util.RuntimeOptions): Promise<GroupBanWordsResponse>;
    /**
     * @summary 群禁言
     *
     * @param request GroupBanWordsRequest
     * @return GroupBanWordsResponse
     */
    groupBanWords(request: GroupBanWordsRequest): Promise<GroupBanWordsResponse>;
    /**
     * @summary 群容量扩容询价
     *
     * @param request GroupCapacityInquiryRequest
     * @param headers GroupCapacityInquiryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GroupCapacityInquiryResponse
     */
    groupCapacityInquiryWithOptions(request: GroupCapacityInquiryRequest, headers: GroupCapacityInquiryHeaders, runtime: $Util.RuntimeOptions): Promise<GroupCapacityInquiryResponse>;
    /**
     * @summary 群容量扩容询价
     *
     * @param request GroupCapacityInquiryRequest
     * @return GroupCapacityInquiryResponse
     */
    groupCapacityInquiry(request: GroupCapacityInquiryRequest): Promise<GroupCapacityInquiryResponse>;
    /**
     * @summary 群容量扩容确认下单
     *
     * @param request GroupCapacityOrderConfirmRequest
     * @param headers GroupCapacityOrderConfirmHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GroupCapacityOrderConfirmResponse
     */
    groupCapacityOrderConfirmWithOptions(request: GroupCapacityOrderConfirmRequest, headers: GroupCapacityOrderConfirmHeaders, runtime: $Util.RuntimeOptions): Promise<GroupCapacityOrderConfirmResponse>;
    /**
     * @summary 群容量扩容确认下单
     *
     * @param request GroupCapacityOrderConfirmRequest
     * @return GroupCapacityOrderConfirmResponse
     */
    groupCapacityOrderConfirm(request: GroupCapacityOrderConfirmRequest): Promise<GroupCapacityOrderConfirmResponse>;
    /**
     * @summary 群容量请求扩容下单
     *
     * @param request GroupCapacityOrderPlaceRequest
     * @param headers GroupCapacityOrderPlaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GroupCapacityOrderPlaceResponse
     */
    groupCapacityOrderPlaceWithOptions(request: GroupCapacityOrderPlaceRequest, headers: GroupCapacityOrderPlaceHeaders, runtime: $Util.RuntimeOptions): Promise<GroupCapacityOrderPlaceResponse>;
    /**
     * @summary 群容量请求扩容下单
     *
     * @param request GroupCapacityOrderPlaceRequest
     * @return GroupCapacityOrderPlaceResponse
     */
    groupCapacityOrderPlace(request: GroupCapacityOrderPlaceRequest): Promise<GroupCapacityOrderPlaceResponse>;
    /**
     * @summary 根据群链接、群号等检索条件，查询群信息
     *
     * @param request GroupManageQueryRequest
     * @param headers GroupManageQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GroupManageQueryResponse
     */
    groupManageQueryWithOptions(request: GroupManageQueryRequest, headers: GroupManageQueryHeaders, runtime: $Util.RuntimeOptions): Promise<GroupManageQueryResponse>;
    /**
     * @summary 根据群链接、群号等检索条件，查询群信息
     *
     * @param request GroupManageQueryRequest
     * @return GroupManageQueryResponse
     */
    groupManageQuery(request: GroupManageQueryRequest): Promise<GroupManageQueryResponse>;
    /**
     * @summary 群管理缩容
     *
     * @param request GroupManageReduceRequest
     * @param headers GroupManageReduceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GroupManageReduceResponse
     */
    groupManageReduceWithOptions(request: GroupManageReduceRequest, headers: GroupManageReduceHeaders, runtime: $Util.RuntimeOptions): Promise<GroupManageReduceResponse>;
    /**
     * @summary 群管理缩容
     *
     * @param request GroupManageReduceRequest
     * @return GroupManageReduceResponse
     */
    groupManageReduce(request: GroupManageReduceRequest): Promise<GroupManageReduceResponse>;
    /**
     * @summary 安装机器人到组织
     *
     * @param request InstallRobotToOrgRequest
     * @param headers InstallRobotToOrgHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InstallRobotToOrgResponse
     */
    installRobotToOrgWithOptions(request: InstallRobotToOrgRequest, headers: InstallRobotToOrgHeaders, runtime: $Util.RuntimeOptions): Promise<InstallRobotToOrgResponse>;
    /**
     * @summary 安装机器人到组织
     *
     * @param request InstallRobotToOrgRequest
     * @return InstallRobotToOrgResponse
     */
    installRobotToOrg(request: InstallRobotToOrgRequest): Promise<InstallRobotToOrgResponse>;
    /**
     * @summary 创建可交互式实例
     *
     * @param request InteractiveCardCreateInstanceRequest
     * @param headers InteractiveCardCreateInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InteractiveCardCreateInstanceResponse
     */
    interactiveCardCreateInstanceWithOptions(request: InteractiveCardCreateInstanceRequest, headers: InteractiveCardCreateInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<InteractiveCardCreateInstanceResponse>;
    /**
     * @summary 创建可交互式实例
     *
     * @param request InteractiveCardCreateInstanceRequest
     * @return InteractiveCardCreateInstanceResponse
     */
    interactiveCardCreateInstance(request: InteractiveCardCreateInstanceRequest): Promise<InteractiveCardCreateInstanceResponse>;
    /**
     * @summary 拉取企业的所有文字表情，包含正常使用的、已经删除了的、安全审核不通过的文字表情
     *
     * @param headers ListOrgTextEmotionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOrgTextEmotionResponse
     */
    listOrgTextEmotionWithOptions(headers: ListOrgTextEmotionHeaders, runtime: $Util.RuntimeOptions): Promise<ListOrgTextEmotionResponse>;
    /**
     * @summary 拉取企业的所有文字表情，包含正常使用的、已经删除了的、安全审核不通过的文字表情
     *
     * @return ListOrgTextEmotionResponse
     */
    listOrgTextEmotion(): Promise<ListOrgTextEmotionResponse>;
    /**
     * @summary 成员授权场景下查询群信息
     *
     * @param request QueryGroupInfoByMemberAuthRequest
     * @param headers QueryGroupInfoByMemberAuthHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupInfoByMemberAuthResponse
     */
    queryGroupInfoByMemberAuthWithOptions(request: QueryGroupInfoByMemberAuthRequest, headers: QueryGroupInfoByMemberAuthHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupInfoByMemberAuthResponse>;
    /**
     * @summary 成员授权场景下查询群信息
     *
     * @param request QueryGroupInfoByMemberAuthRequest
     * @return QueryGroupInfoByMemberAuthResponse
     */
    queryGroupInfoByMemberAuth(request: QueryGroupInfoByMemberAuthRequest): Promise<QueryGroupInfoByMemberAuthResponse>;
    /**
     * @summary 查询群成员列表
     *
     * @param request QueryGroupMemberRequest
     * @param headers QueryGroupMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupMemberResponse
     */
    queryGroupMemberWithOptions(request: QueryGroupMemberRequest, headers: QueryGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupMemberResponse>;
    /**
     * @summary 查询群成员列表
     *
     * @param request QueryGroupMemberRequest
     * @return QueryGroupMemberResponse
     */
    queryGroupMember(request: QueryGroupMemberRequest): Promise<QueryGroupMemberResponse>;
    /**
     * @summary 成员授权场景下查询群成员
     *
     * @param request QueryGroupMemberByMemberAuthRequest
     * @param headers QueryGroupMemberByMemberAuthHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupMemberByMemberAuthResponse
     */
    queryGroupMemberByMemberAuthWithOptions(request: QueryGroupMemberByMemberAuthRequest, headers: QueryGroupMemberByMemberAuthHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupMemberByMemberAuthResponse>;
    /**
     * @summary 成员授权场景下查询群成员
     *
     * @param request QueryGroupMemberByMemberAuthRequest
     * @return QueryGroupMemberByMemberAuthResponse
     */
    queryGroupMemberByMemberAuth(request: QueryGroupMemberByMemberAuthRequest): Promise<QueryGroupMemberByMemberAuthResponse>;
    /**
     * @summary 查询群禁言状态
     *
     * @param request QueryGroupMuteStatusRequest
     * @param headers QueryGroupMuteStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupMuteStatusResponse
     */
    queryGroupMuteStatusWithOptions(request: QueryGroupMuteStatusRequest, headers: QueryGroupMuteStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupMuteStatusResponse>;
    /**
     * @summary 查询群禁言状态
     *
     * @param request QueryGroupMuteStatusRequest
     * @return QueryGroupMuteStatusResponse
     */
    queryGroupMuteStatus(request: QueryGroupMuteStatusRequest): Promise<QueryGroupMuteStatusResponse>;
    /**
     * @summary 查询群内具有指定群角色的所有群成员
     *
     * @param request QueryMembersOfGroupRoleRequest
     * @param headers QueryMembersOfGroupRoleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMembersOfGroupRoleResponse
     */
    queryMembersOfGroupRoleWithOptions(request: QueryMembersOfGroupRoleRequest, headers: QueryMembersOfGroupRoleHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMembersOfGroupRoleResponse>;
    /**
     * @summary 查询群内具有指定群角色的所有群成员
     *
     * @param request QueryMembersOfGroupRoleRequest
     * @return QueryMembersOfGroupRoleResponse
     */
    queryMembersOfGroupRole(request: QueryMembersOfGroupRoleRequest): Promise<QueryMembersOfGroupRoleResponse>;
    /**
     * @summary 查询群内群模板机器人
     *
     * @param request QuerySceneGroupTemplateRobotRequest
     * @param headers QuerySceneGroupTemplateRobotHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySceneGroupTemplateRobotResponse
     */
    querySceneGroupTemplateRobotWithOptions(request: QuerySceneGroupTemplateRobotRequest, headers: QuerySceneGroupTemplateRobotHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySceneGroupTemplateRobotResponse>;
    /**
     * @summary 查询群内群模板机器人
     *
     * @param request QuerySceneGroupTemplateRobotRequest
     * @return QuerySceneGroupTemplateRobotResponse
     */
    querySceneGroupTemplateRobot(request: QuerySceneGroupTemplateRobotRequest): Promise<QuerySceneGroupTemplateRobotResponse>;
    /**
     * @summary 批量查询群信息
     *
     * @param request QuerySingleGroupRequest
     * @param headers QuerySingleGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySingleGroupResponse
     */
    querySingleGroupWithOptions(request: QuerySingleGroupRequest, headers: QuerySingleGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySingleGroupResponse>;
    /**
     * @summary 批量查询群信息
     *
     * @param request QuerySingleGroupRequest
     * @return QuerySingleGroupResponse
     */
    querySingleGroup(request: QuerySingleGroupRequest): Promise<QuerySingleGroupResponse>;
    /**
     * @summary 批量查询未读消息数
     *
     * @param request QueryUnReadMessageRequest
     * @param headers QueryUnReadMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUnReadMessageResponse
     */
    queryUnReadMessageWithOptions(request: QueryUnReadMessageRequest, headers: QueryUnReadMessageHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUnReadMessageResponse>;
    /**
     * @summary 批量查询未读消息数
     *
     * @param request QueryUnReadMessageRequest
     * @return QueryUnReadMessageResponse
     */
    queryUnReadMessage(request: QueryUnReadMessageRequest): Promise<QueryUnReadMessageResponse>;
    /**
     * @summary 移除会话机器人
     *
     * @param request RemoveRobotFromConversationRequest
     * @param headers RemoveRobotFromConversationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveRobotFromConversationResponse
     */
    removeRobotFromConversationWithOptions(request: RemoveRobotFromConversationRequest, headers: RemoveRobotFromConversationHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveRobotFromConversationResponse>;
    /**
     * @summary 移除会话机器人
     *
     * @param request RemoveRobotFromConversationRequest
     * @return RemoveRobotFromConversationResponse
     */
    removeRobotFromConversation(request: RemoveRobotFromConversationRequest): Promise<RemoveRobotFromConversationResponse>;
    /**
     * @summary 根据关键词搜索企业内部群
     *
     * @param request SearchInnerGroupsRequest
     * @param headers SearchInnerGroupsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchInnerGroupsResponse
     */
    searchInnerGroupsWithOptions(request: SearchInnerGroupsRequest, headers: SearchInnerGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<SearchInnerGroupsResponse>;
    /**
     * @summary 根据关键词搜索企业内部群
     *
     * @param request SearchInnerGroupsRequest
     * @return SearchInnerGroupsResponse
     */
    searchInnerGroups(request: SearchInnerGroupsRequest): Promise<SearchInnerGroupsResponse>;
    /**
     * @summary 发送可交互式动态卡片
     *
     * @param request SendInteractiveCardRequest
     * @param headers SendInteractiveCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendInteractiveCardResponse
     */
    sendInteractiveCardWithOptions(request: SendInteractiveCardRequest, headers: SendInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendInteractiveCardResponse>;
    /**
     * @summary 发送可交互式动态卡片
     *
     * @param request SendInteractiveCardRequest
     * @return SendInteractiveCardResponse
     */
    sendInteractiveCard(request: SendInteractiveCardRequest): Promise<SendInteractiveCardResponse>;
    /**
     * @summary 人与人单聊发送可交互式动态卡片
     *
     * @param request SendOTOInteractiveCardRequest
     * @param headers SendOTOInteractiveCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendOTOInteractiveCardResponse
     */
    sendOTOInteractiveCardWithOptions(request: SendOTOInteractiveCardRequest, headers: SendOTOInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendOTOInteractiveCardResponse>;
    /**
     * @summary 人与人单聊发送可交互式动态卡片
     *
     * @param request SendOTOInteractiveCardRequest
     * @return SendOTOInteractiveCardResponse
     */
    sendOTOInteractiveCard(request: SendOTOInteractiveCardRequest): Promise<SendOTOInteractiveCardResponse>;
    /**
     * @summary 机器人发送互动卡片（普通版）
     *
     * @param request SendRobotInteractiveCardRequest
     * @param headers SendRobotInteractiveCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendRobotInteractiveCardResponse
     */
    sendRobotInteractiveCardWithOptions(request: SendRobotInteractiveCardRequest, headers: SendRobotInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendRobotInteractiveCardResponse>;
    /**
     * @summary 机器人发送互动卡片（普通版）
     *
     * @param request SendRobotInteractiveCardRequest
     * @return SendRobotInteractiveCardResponse
     */
    sendRobotInteractiveCard(request: SendRobotInteractiveCardRequest): Promise<SendRobotInteractiveCardResponse>;
    /**
     * @summary 机器人发送消息
     *
     * @param request SendRobotMessageRequest
     * @param headers SendRobotMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendRobotMessageResponse
     */
    sendRobotMessageWithOptions(request: SendRobotMessageRequest, headers: SendRobotMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendRobotMessageResponse>;
    /**
     * @summary 机器人发送消息
     *
     * @param request SendRobotMessageRequest
     * @return SendRobotMessageResponse
     */
    sendRobotMessage(request: SendRobotMessageRequest): Promise<SendRobotMessageResponse>;
    /**
     * @summary 发送模板响应式可交互式卡片
     *
     * @param request SendTemplateInteractiveCardRequest
     * @param headers SendTemplateInteractiveCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendTemplateInteractiveCardResponse
     */
    sendTemplateInteractiveCardWithOptions(request: SendTemplateInteractiveCardRequest, headers: SendTemplateInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendTemplateInteractiveCardResponse>;
    /**
     * @summary 发送模板响应式可交互式卡片
     *
     * @param request SendTemplateInteractiveCardRequest
     * @return SendTemplateInteractiveCardResponse
     */
    sendTemplateInteractiveCard(request: SendTemplateInteractiveCardRequest): Promise<SendTemplateInteractiveCardResponse>;
    /**
     * @summary 设置侧边栏
     *
     * @param request SetRightPanelRequest
     * @param headers SetRightPanelHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetRightPanelResponse
     */
    setRightPanelWithOptions(request: SetRightPanelRequest, headers: SetRightPanelHeaders, runtime: $Util.RuntimeOptions): Promise<SetRightPanelResponse>;
    /**
     * @summary 设置侧边栏
     *
     * @param request SetRightPanelRequest
     * @return SetRightPanelResponse
     */
    setRightPanel(request: SetRightPanelRequest): Promise<SetRightPanelResponse>;
    /**
     * @summary 钉钉吊顶卡片关闭
     *
     * @param request TopboxCloseRequest
     * @param headers TopboxCloseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return TopboxCloseResponse
     */
    topboxCloseWithOptions(request: TopboxCloseRequest, headers: TopboxCloseHeaders, runtime: $Util.RuntimeOptions): Promise<TopboxCloseResponse>;
    /**
     * @summary 钉钉吊顶卡片关闭
     *
     * @param request TopboxCloseRequest
     * @return TopboxCloseResponse
     */
    topboxClose(request: TopboxCloseRequest): Promise<TopboxCloseResponse>;
    /**
     * @summary 钉钉吊顶卡片开启
     *
     * @param request TopboxOpenRequest
     * @param headers TopboxOpenHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return TopboxOpenResponse
     */
    topboxOpenWithOptions(request: TopboxOpenRequest, headers: TopboxOpenHeaders, runtime: $Util.RuntimeOptions): Promise<TopboxOpenResponse>;
    /**
     * @summary 钉钉吊顶卡片开启
     *
     * @param request TopboxOpenRequest
     * @return TopboxOpenResponse
     */
    topboxOpen(request: TopboxOpenRequest): Promise<TopboxOpenResponse>;
    /**
     * @summary 修改群头像
     *
     * @param request UpdateGroupAvatarRequest
     * @param headers UpdateGroupAvatarHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateGroupAvatarResponse
     */
    updateGroupAvatarWithOptions(request: UpdateGroupAvatarRequest, headers: UpdateGroupAvatarHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupAvatarResponse>;
    /**
     * @summary 修改群头像
     *
     * @param request UpdateGroupAvatarRequest
     * @return UpdateGroupAvatarResponse
     */
    updateGroupAvatar(request: UpdateGroupAvatarRequest): Promise<UpdateGroupAvatarResponse>;
    /**
     * @summary 修改群名称
     *
     * @param request UpdateGroupNameRequest
     * @param headers UpdateGroupNameHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateGroupNameResponse
     */
    updateGroupNameWithOptions(request: UpdateGroupNameRequest, headers: UpdateGroupNameHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupNameResponse>;
    /**
     * @summary 修改群名称
     *
     * @param request UpdateGroupNameRequest
     * @return UpdateGroupNameResponse
     */
    updateGroupName(request: UpdateGroupNameRequest): Promise<UpdateGroupNameResponse>;
    /**
     * @summary 设置场景群权限项
     *
     * @param request UpdateGroupPermissionRequest
     * @param headers UpdateGroupPermissionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateGroupPermissionResponse
     */
    updateGroupPermissionWithOptions(request: UpdateGroupPermissionRequest, headers: UpdateGroupPermissionHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupPermissionResponse>;
    /**
     * @summary 设置场景群权限项
     *
     * @param request UpdateGroupPermissionRequest
     * @return UpdateGroupPermissionResponse
     */
    updateGroupPermission(request: UpdateGroupPermissionRequest): Promise<UpdateGroupPermissionResponse>;
    /**
     * @summary 更新群管理员
     *
     * @param request UpdateGroupSubAdminRequest
     * @param headers UpdateGroupSubAdminHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateGroupSubAdminResponse
     */
    updateGroupSubAdminWithOptions(request: UpdateGroupSubAdminRequest, headers: UpdateGroupSubAdminHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateGroupSubAdminResponse>;
    /**
     * @summary 更新群管理员
     *
     * @param request UpdateGroupSubAdminRequest
     * @return UpdateGroupSubAdminResponse
     */
    updateGroupSubAdmin(request: UpdateGroupSubAdminRequest): Promise<UpdateGroupSubAdminResponse>;
    /**
     * @summary 更新可交互式动态卡片
     *
     * @param request UpdateInteractiveCardRequest
     * @param headers UpdateInteractiveCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateInteractiveCardResponse
     */
    updateInteractiveCardWithOptions(request: UpdateInteractiveCardRequest, headers: UpdateInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateInteractiveCardResponse>;
    /**
     * @summary 更新可交互式动态卡片
     *
     * @param request UpdateInteractiveCardRequest
     * @return UpdateInteractiveCardResponse
     */
    updateInteractiveCard(request: UpdateInteractiveCardRequest): Promise<UpdateInteractiveCardResponse>;
    /**
     * @summary 设置群成员禁言状态
     *
     * @param request UpdateMemberBanWordsRequest
     * @param headers UpdateMemberBanWordsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateMemberBanWordsResponse
     */
    updateMemberBanWordsWithOptions(request: UpdateMemberBanWordsRequest, headers: UpdateMemberBanWordsHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateMemberBanWordsResponse>;
    /**
     * @summary 设置群成员禁言状态
     *
     * @param request UpdateMemberBanWordsRequest
     * @return UpdateMemberBanWordsResponse
     */
    updateMemberBanWords(request: UpdateMemberBanWordsRequest): Promise<UpdateMemberBanWordsResponse>;
    /**
     * @summary 更新群成员的群昵称
     *
     * @param request UpdateMemberGroupNickRequest
     * @param headers UpdateMemberGroupNickHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateMemberGroupNickResponse
     */
    updateMemberGroupNickWithOptions(request: UpdateMemberGroupNickRequest, headers: UpdateMemberGroupNickHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateMemberGroupNickResponse>;
    /**
     * @summary 更新群成员的群昵称
     *
     * @param request UpdateMemberGroupNickRequest
     * @return UpdateMemberGroupNickResponse
     */
    updateMemberGroupNick(request: UpdateMemberGroupNickRequest): Promise<UpdateMemberGroupNickResponse>;
    /**
     * @summary 修改组织里的机器人
     *
     * @param request UpdateRobotInOrgRequest
     * @param headers UpdateRobotInOrgHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateRobotInOrgResponse
     */
    updateRobotInOrgWithOptions(request: UpdateRobotInOrgRequest, headers: UpdateRobotInOrgHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRobotInOrgResponse>;
    /**
     * @summary 修改组织里的机器人
     *
     * @param request UpdateRobotInOrgRequest
     * @return UpdateRobotInOrgResponse
     */
    updateRobotInOrg(request: UpdateRobotInOrgRequest): Promise<UpdateRobotInOrgResponse>;
    /**
     * @summary 机器人更新可交互式卡片(个人、企业)
     *
     * @param request UpdateRobotInteractiveCardRequest
     * @param headers UpdateRobotInteractiveCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateRobotInteractiveCardResponse
     */
    updateRobotInteractiveCardWithOptions(request: UpdateRobotInteractiveCardRequest, headers: UpdateRobotInteractiveCardHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRobotInteractiveCardResponse>;
    /**
     * @summary 机器人更新可交互式卡片(个人、企业)
     *
     * @param request UpdateRobotInteractiveCardRequest
     * @return UpdateRobotInteractiveCardResponse
     */
    updateRobotInteractiveCard(request: UpdateRobotInteractiveCardRequest): Promise<UpdateRobotInteractiveCardResponse>;
    /**
     * @summary 设置群成员的群角色
     *
     * @param request UpdateTheGroupRolesOfGroupMemberRequest
     * @param headers UpdateTheGroupRolesOfGroupMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateTheGroupRolesOfGroupMemberResponse
     */
    updateTheGroupRolesOfGroupMemberWithOptions(request: UpdateTheGroupRolesOfGroupMemberRequest, headers: UpdateTheGroupRolesOfGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTheGroupRolesOfGroupMemberResponse>;
    /**
     * @summary 设置群成员的群角色
     *
     * @param request UpdateTheGroupRolesOfGroupMemberRequest
     * @return UpdateTheGroupRolesOfGroupMemberResponse
     */
    updateTheGroupRolesOfGroupMember(request: UpdateTheGroupRolesOfGroupMemberRequest): Promise<UpdateTheGroupRolesOfGroupMemberResponse>;
    /**
     * @summary 添加群成员
     *
     * @param request AddGroupMemberRequest
     * @param headers AddGroupMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddGroupMemberResponse
     */
    addGroupMemberWithOptions(request: AddGroupMemberRequest, headers: AddGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<AddGroupMemberResponse>;
    /**
     * @summary 添加群成员
     *
     * @param request AddGroupMemberRequest
     * @return AddGroupMemberResponse
     */
    addGroupMember(request: AddGroupMemberRequest): Promise<AddGroupMemberResponse>;
    /**
     * @summary 移除群成员
     *
     * @param request RemoveGroupMemberRequest
     * @param headers RemoveGroupMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveGroupMemberResponse
     */
    removeGroupMemberWithOptions(request: RemoveGroupMemberRequest, headers: RemoveGroupMemberHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveGroupMemberResponse>;
    /**
     * @summary 移除群成员
     *
     * @param request RemoveGroupMemberRequest
     * @return RemoveGroupMemberResponse
     */
    removeGroupMember(request: RemoveGroupMemberRequest): Promise<RemoveGroupMemberResponse>;
    /**
     * @summary 发送ToC消息
     *
     * @param request SendDingMessageRequest
     * @param headers SendDingMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendDingMessageResponse
     */
    sendDingMessageWithOptions(request: SendDingMessageRequest, headers: SendDingMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendDingMessageResponse>;
    /**
     * @summary 发送ToC消息
     *
     * @param request SendDingMessageRequest
     * @return SendDingMessageResponse
     */
    sendDingMessage(request: SendDingMessageRequest): Promise<SendDingMessageResponse>;
    /**
     * @summary 发送ToB消息
     *
     * @param request SendMessageRequest
     * @param headers SendMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendMessageResponse
     */
    sendMessageWithOptions(request: SendMessageRequest, headers: SendMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendMessageResponse>;
    /**
     * @summary 发送ToB消息
     *
     * @param request SendMessageRequest
     * @return SendMessageResponse
     */
    sendMessage(request: SendMessageRequest): Promise<SendMessageResponse>;
}
