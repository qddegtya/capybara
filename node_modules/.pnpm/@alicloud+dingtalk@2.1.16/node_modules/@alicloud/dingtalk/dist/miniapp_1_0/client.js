"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListAvaiableVersionResponseBodyVersions = exports.GetMiniAppMetaDataResponseBodyResult = exports.UpdateVersionStatusResponse = exports.UpdateVersionStatusResponseBody = exports.UpdateVersionStatusRequest = exports.UpdateVersionStatusHeaders = exports.SetExtendSettingResponse = exports.SetExtendSettingResponseBody = exports.SetExtendSettingRequest = exports.SetExtendSettingHeaders = exports.RollBackVersionResponse = exports.RollBackVersionResponseBody = exports.RollBackVersionRequest = exports.QueryHtmlBundleBuildResponse = exports.QueryHtmlBundleBuildResponseBody = exports.QueryHtmlBundleBuildRequest = exports.QueryHtmlBundleBuildHeaders = exports.ListAvaiableVersionResponse = exports.ListAvaiableVersionResponseBody = exports.ListAvaiableVersionRequest = exports.ListAvaiableVersionHeaders = exports.InvokeHtmlBundleBuildResponse = exports.InvokeHtmlBundleBuildResponseBody = exports.InvokeHtmlBundleBuildRequest = exports.InvokeHtmlBundleBuildHeaders = exports.GetSettingByMiniAppIdResponse = exports.GetSettingByMiniAppIdResponseBody = exports.GetSettingByMiniAppIdHeaders = exports.GetMiniAppMetaDataResponse = exports.GetMiniAppMetaDataResponseBody = exports.GetMiniAppMetaDataRequest = exports.GetMiniAppMetaDataHeaders = exports.GetMaxVersionResponse = exports.GetMaxVersionResponseBody = exports.GetMaxVersionRequest = exports.GetMaxVersionHeaders = exports.CreateVersionAcrossBundleResponse = exports.CreateVersionAcrossBundleResponseBody = exports.CreateVersionAcrossBundleRequest = exports.CreateVersionAcrossBundleHeaders = exports.CreateMiniAppPluginResponse = exports.CreateMiniAppPluginResponseBody = exports.CreateMiniAppPluginRequest = exports.CreateMiniAppPluginHeaders = exports.CreateMiniAppResponse = exports.CreateMiniAppResponseBody = exports.CreateMiniAppRequest = exports.CreateMiniAppHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CreateMiniAppHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMiniAppHeaders = CreateMiniAppHeaders;
class CreateMiniAppRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            bizType: 'bizType',
            bundleId: 'bundleId',
            desc: 'desc',
            icon: 'icon',
            name: 'name',
        };
    }
    static types() {
        return {
            bizId: 'string',
            bizType: 'number',
            bundleId: 'string',
            desc: 'string',
            icon: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMiniAppRequest = CreateMiniAppRequest;
class CreateMiniAppResponseBody extends $tea.Model {
    static names() {
        return {
            miniAppId: 'miniAppId',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMiniAppResponseBody = CreateMiniAppResponseBody;
class CreateMiniAppResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateMiniAppResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMiniAppResponse = CreateMiniAppResponse;
class CreateMiniAppPluginHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMiniAppPluginHeaders = CreateMiniAppPluginHeaders;
class CreateMiniAppPluginRequest extends $tea.Model {
    static names() {
        return {
            bizId: 'bizId',
            bizType: 'bizType',
            bundleId: 'bundleId',
            desc: 'desc',
            icon: 'icon',
            name: 'name',
        };
    }
    static types() {
        return {
            bizId: 'string',
            bizType: 'number',
            bundleId: 'string',
            desc: 'string',
            icon: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMiniAppPluginRequest = CreateMiniAppPluginRequest;
class CreateMiniAppPluginResponseBody extends $tea.Model {
    static names() {
        return {
            miniAppId: 'miniAppId',
        };
    }
    static types() {
        return {
            miniAppId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMiniAppPluginResponseBody = CreateMiniAppPluginResponseBody;
class CreateMiniAppPluginResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateMiniAppPluginResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateMiniAppPluginResponse = CreateMiniAppPluginResponse;
class CreateVersionAcrossBundleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateVersionAcrossBundleHeaders = CreateVersionAcrossBundleHeaders;
class CreateVersionAcrossBundleRequest extends $tea.Model {
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            sourceBundleId: 'sourceBundleId',
            sourceVersion: 'sourceVersion',
            version: 'version',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            sourceBundleId: 'string',
            sourceVersion: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateVersionAcrossBundleRequest = CreateVersionAcrossBundleRequest;
class CreateVersionAcrossBundleResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateVersionAcrossBundleResponseBody = CreateVersionAcrossBundleResponseBody;
class CreateVersionAcrossBundleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateVersionAcrossBundleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateVersionAcrossBundleResponse = CreateVersionAcrossBundleResponse;
class GetMaxVersionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMaxVersionHeaders = GetMaxVersionHeaders;
class GetMaxVersionRequest extends $tea.Model {
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            version: 'version',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMaxVersionRequest = GetMaxVersionRequest;
class GetMaxVersionResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMaxVersionResponseBody = GetMaxVersionResponseBody;
class GetMaxVersionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMaxVersionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMaxVersionResponse = GetMaxVersionResponse;
class GetMiniAppMetaDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMiniAppMetaDataHeaders = GetMiniAppMetaDataHeaders;
class GetMiniAppMetaDataRequest extends $tea.Model {
    static names() {
        return {
            bundleId: 'bundleId',
            bundleIdTableGmtModified: 'bundleIdTableGmtModified',
            fromAppName: 'fromAppName',
            miniAppIdTableGmtModified: 'miniAppIdTableGmtModified',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            bundleIdTableGmtModified: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
            fromAppName: 'string',
            miniAppIdTableGmtModified: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMiniAppMetaDataRequest = GetMiniAppMetaDataRequest;
class GetMiniAppMetaDataResponseBody extends $tea.Model {
    static names() {
        return {
            dingOpenErrcode: 'dingOpenErrcode',
            errorMsg: 'errorMsg',
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            dingOpenErrcode: 'number',
            errorMsg: 'string',
            result: GetMiniAppMetaDataResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMiniAppMetaDataResponseBody = GetMiniAppMetaDataResponseBody;
class GetMiniAppMetaDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMiniAppMetaDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMiniAppMetaDataResponse = GetMiniAppMetaDataResponse;
class GetSettingByMiniAppIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSettingByMiniAppIdHeaders = GetSettingByMiniAppIdHeaders;
class GetSettingByMiniAppIdResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSettingByMiniAppIdResponseBody = GetSettingByMiniAppIdResponseBody;
class GetSettingByMiniAppIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSettingByMiniAppIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSettingByMiniAppIdResponse = GetSettingByMiniAppIdResponse;
class InvokeHtmlBundleBuildHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvokeHtmlBundleBuildHeaders = InvokeHtmlBundleBuildHeaders;
class InvokeHtmlBundleBuildRequest extends $tea.Model {
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            version: 'version',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvokeHtmlBundleBuildRequest = InvokeHtmlBundleBuildRequest;
class InvokeHtmlBundleBuildResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvokeHtmlBundleBuildResponseBody = InvokeHtmlBundleBuildResponseBody;
class InvokeHtmlBundleBuildResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: InvokeHtmlBundleBuildResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.InvokeHtmlBundleBuildResponse = InvokeHtmlBundleBuildResponse;
class ListAvaiableVersionHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAvaiableVersionHeaders = ListAvaiableVersionHeaders;
class ListAvaiableVersionRequest extends $tea.Model {
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            pageNum: 'pageNum',
            pageSize: 'pageSize',
            versionTypeSet: 'versionTypeSet',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            pageNum: 'number',
            pageSize: 'number',
            versionTypeSet: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAvaiableVersionRequest = ListAvaiableVersionRequest;
class ListAvaiableVersionResponseBody extends $tea.Model {
    static names() {
        return {
            versions: 'versions',
        };
    }
    static types() {
        return {
            versions: { 'type': 'array', 'itemType': ListAvaiableVersionResponseBodyVersions },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAvaiableVersionResponseBody = ListAvaiableVersionResponseBody;
class ListAvaiableVersionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListAvaiableVersionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAvaiableVersionResponse = ListAvaiableVersionResponse;
class QueryHtmlBundleBuildHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHtmlBundleBuildHeaders = QueryHtmlBundleBuildHeaders;
class QueryHtmlBundleBuildRequest extends $tea.Model {
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            version: 'version',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHtmlBundleBuildRequest = QueryHtmlBundleBuildRequest;
class QueryHtmlBundleBuildResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHtmlBundleBuildResponseBody = QueryHtmlBundleBuildResponseBody;
class QueryHtmlBundleBuildResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryHtmlBundleBuildResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHtmlBundleBuildResponse = QueryHtmlBundleBuildResponse;
class RollBackVersionRequest extends $tea.Model {
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            rollbackVersion: 'rollbackVersion',
            targetVersion: 'targetVersion',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            rollbackVersion: 'string',
            targetVersion: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollBackVersionRequest = RollBackVersionRequest;
class RollBackVersionResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollBackVersionResponseBody = RollBackVersionResponseBody;
class RollBackVersionResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RollBackVersionResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RollBackVersionResponse = RollBackVersionResponse;
class SetExtendSettingHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetExtendSettingHeaders = SetExtendSettingHeaders;
class SetExtendSettingRequest extends $tea.Model {
    static names() {
        return {
            buildH5Bundle: 'buildH5Bundle',
            miniAppId: 'miniAppId',
        };
    }
    static types() {
        return {
            buildH5Bundle: 'boolean',
            miniAppId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetExtendSettingRequest = SetExtendSettingRequest;
class SetExtendSettingResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetExtendSettingResponseBody = SetExtendSettingResponseBody;
class SetExtendSettingResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SetExtendSettingResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SetExtendSettingResponse = SetExtendSettingResponse;
class UpdateVersionStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateVersionStatusHeaders = UpdateVersionStatusHeaders;
class UpdateVersionStatusRequest extends $tea.Model {
    static names() {
        return {
            bundleId: 'bundleId',
            miniAppId: 'miniAppId',
            version: 'version',
            versionType: 'versionType',
        };
    }
    static types() {
        return {
            bundleId: 'string',
            miniAppId: 'string',
            version: 'string',
            versionType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateVersionStatusRequest = UpdateVersionStatusRequest;
class UpdateVersionStatusResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateVersionStatusResponseBody = UpdateVersionStatusResponseBody;
class UpdateVersionStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateVersionStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateVersionStatusResponse = UpdateVersionStatusResponse;
class GetMiniAppMetaDataResponseBodyResult extends $tea.Model {
    static names() {
        return {
            data: 'data',
        };
    }
    static types() {
        return {
            data: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMiniAppMetaDataResponseBodyResult = GetMiniAppMetaDataResponseBodyResult;
class ListAvaiableVersionResponseBodyVersions extends $tea.Model {
    static names() {
        return {
            buildStatus: 'buildStatus',
            h5Bundle: 'h5Bundle',
            packageSize: 'packageSize',
            packageUrl: 'packageUrl',
            version: 'version',
        };
    }
    static types() {
        return {
            buildStatus: 'number',
            h5Bundle: 'string',
            packageSize: 'string',
            packageUrl: 'string',
            version: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListAvaiableVersionResponseBodyVersions = ListAvaiableVersionResponseBodyVersions;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._signatureAlgorithm = "v2";
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 创建小程序
     *
     * @param request CreateMiniAppRequest
     * @param headers CreateMiniAppHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMiniAppResponse
     */
    async createMiniAppWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.desc)) {
            body["desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateMiniApp",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/apps`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateMiniAppResponse({}));
    }
    /**
     * @summary 创建小程序
     *
     * @param request CreateMiniAppRequest
     * @return CreateMiniAppResponse
     */
    async createMiniApp(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateMiniAppHeaders({});
        return await this.createMiniAppWithOptions(request, headers, runtime);
    }
    /**
     * @summary 创建小程序组件
     *
     * @param request CreateMiniAppPluginRequest
     * @param headers CreateMiniAppPluginHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMiniAppPluginResponse
     */
    async createMiniAppPluginWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizId)) {
            body["bizId"] = request.bizId;
        }
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.desc)) {
            body["desc"] = request.desc;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateMiniAppPlugin",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/plugins`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateMiniAppPluginResponse({}));
    }
    /**
     * @summary 创建小程序组件
     *
     * @param request CreateMiniAppPluginRequest
     * @return CreateMiniAppPluginResponse
     */
    async createMiniAppPlugin(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateMiniAppPluginHeaders({});
        return await this.createMiniAppPluginWithOptions(request, headers, runtime);
    }
    /**
     * @summary 小程序多端发布版本
     *
     * @param request CreateVersionAcrossBundleRequest
     * @param headers CreateVersionAcrossBundleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateVersionAcrossBundleResponse
     */
    async createVersionAcrossBundleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.sourceBundleId)) {
            body["sourceBundleId"] = request.sourceBundleId;
        }
        if (!tea_util_1.default.isUnset(request.sourceVersion)) {
            body["sourceVersion"] = request.sourceVersion;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateVersionAcrossBundle",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/versions/createAcrossBundle`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateVersionAcrossBundleResponse({}));
    }
    /**
     * @summary 小程序多端发布版本
     *
     * @param request CreateVersionAcrossBundleRequest
     * @return CreateVersionAcrossBundleResponse
     */
    async createVersionAcrossBundle(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateVersionAcrossBundleHeaders({});
        return await this.createVersionAcrossBundleWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取小程序最大的构建版本
     *
     * @param request GetMaxVersionRequest
     * @param headers GetMaxVersionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMaxVersionResponse
     */
    async getMaxVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            query["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            query["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            query["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetMaxVersion",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/apps/maxVersions`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMaxVersionResponse({}));
    }
    /**
     * @summary 获取小程序最大的构建版本
     *
     * @param request GetMaxVersionRequest
     * @return GetMaxVersionResponse
     */
    async getMaxVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMaxVersionHeaders({});
        return await this.getMaxVersionWithOptions(request, headers, runtime);
    }
    /**
     * @summary 同步小程序元数据
     *
     * @param request GetMiniAppMetaDataRequest
     * @param headers GetMiniAppMetaDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMiniAppMetaDataResponse
     */
    async getMiniAppMetaDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.bundleIdTableGmtModified)) {
            body["bundleIdTableGmtModified"] = request.bundleIdTableGmtModified;
        }
        if (!tea_util_1.default.isUnset(request.fromAppName)) {
            body["fromAppName"] = request.fromAppName;
        }
        if (!tea_util_1.default.isUnset(request.miniAppIdTableGmtModified)) {
            body["miniAppIdTableGmtModified"] = request.miniAppIdTableGmtModified;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetMiniAppMetaData",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/apps/metadata`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMiniAppMetaDataResponse({}));
    }
    /**
     * @summary 同步小程序元数据
     *
     * @param request GetMiniAppMetaDataRequest
     * @return GetMiniAppMetaDataResponse
     */
    async getMiniAppMetaData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMiniAppMetaDataHeaders({});
        return await this.getMiniAppMetaDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询小程序配置
     *
     * @param headers GetSettingByMiniAppIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSettingByMiniAppIdResponse
     */
    async getSettingByMiniAppIdWithOptions(miniAppId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetSettingByMiniAppId",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/apps/settings`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSettingByMiniAppIdResponse({}));
    }
    /**
     * @summary 查询小程序配置
     *
     * @return GetSettingByMiniAppIdResponse
     */
    async getSettingByMiniAppId(miniAppId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSettingByMiniAppIdHeaders({});
        return await this.getSettingByMiniAppIdWithOptions(miniAppId, headers, runtime);
    }
    /**
     * @summary 构建H5Bundle
     *
     * @param request InvokeHtmlBundleBuildRequest
     * @param headers InvokeHtmlBundleBuildHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InvokeHtmlBundleBuildResponse
     */
    async invokeHtmlBundleBuildWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "InvokeHtmlBundleBuild",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/h5Bundles/build`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new InvokeHtmlBundleBuildResponse({}));
    }
    /**
     * @summary 构建H5Bundle
     *
     * @param request InvokeHtmlBundleBuildRequest
     * @return InvokeHtmlBundleBuildResponse
     */
    async invokeHtmlBundleBuild(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new InvokeHtmlBundleBuildHeaders({});
        return await this.invokeHtmlBundleBuildWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取小程序版本列表
     *
     * @param request ListAvaiableVersionRequest
     * @param headers ListAvaiableVersionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAvaiableVersionResponse
     */
    async listAvaiableVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.pageNum)) {
            body["pageNum"] = request.pageNum;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            body["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.versionTypeSet)) {
            body["versionTypeSet"] = request.versionTypeSet;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListAvaiableVersion",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/apps/versions/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListAvaiableVersionResponse({}));
    }
    /**
     * @summary 获取小程序版本列表
     *
     * @param request ListAvaiableVersionRequest
     * @return ListAvaiableVersionResponse
     */
    async listAvaiableVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListAvaiableVersionHeaders({});
        return await this.listAvaiableVersionWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询H5构建结果
     *
     * @param request QueryHtmlBundleBuildRequest
     * @param headers QueryHtmlBundleBuildHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryHtmlBundleBuildResponse
     */
    async queryHtmlBundleBuildWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            query["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            query["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            query["version"] = request.version;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryHtmlBundleBuild",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/h5Bundles/buildResults`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryHtmlBundleBuildResponse({}));
    }
    /**
     * @summary 查询H5构建结果
     *
     * @param request QueryHtmlBundleBuildRequest
     * @return QueryHtmlBundleBuildResponse
     */
    async queryHtmlBundleBuild(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHtmlBundleBuildHeaders({});
        return await this.queryHtmlBundleBuildWithOptions(request, headers, runtime);
    }
    /**
     * @summary 回滚版本
     *
     * @param request RollBackVersionRequest
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return RollBackVersionResponse
     */
    async rollBackVersionWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.rollbackVersion)) {
            body["rollbackVersion"] = request.rollbackVersion;
        }
        if (!tea_util_1.default.isUnset(request.targetVersion)) {
            body["targetVersion"] = request.targetVersion;
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: headers,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RollBackVersion",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/versions/rollback`,
            method: "POST",
            authType: "Anonymous",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RollBackVersionResponse({}));
    }
    /**
     * @summary 回滚版本
     *
     * @param request RollBackVersionRequest
     * @return RollBackVersionResponse
     */
    async rollBackVersion(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = {};
        return await this.rollBackVersionWithOptions(request, headers, runtime);
    }
    /**
     * @summary 修改小程序配置
     *
     * @param request SetExtendSettingRequest
     * @param headers SetExtendSettingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetExtendSettingResponse
     */
    async setExtendSettingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.buildH5Bundle)) {
            body["buildH5Bundle"] = request.buildH5Bundle;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SetExtendSetting",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/apps/settings`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SetExtendSettingResponse({}));
    }
    /**
     * @summary 修改小程序配置
     *
     * @param request SetExtendSettingRequest
     * @return SetExtendSettingResponse
     */
    async setExtendSetting(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SetExtendSettingHeaders({});
        return await this.setExtendSettingWithOptions(request, headers, runtime);
    }
    /**
     * @summary 发布版本
     *
     * @param request UpdateVersionStatusRequest
     * @param headers UpdateVersionStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateVersionStatusResponse
     */
    async updateVersionStatusWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bundleId)) {
            body["bundleId"] = request.bundleId;
        }
        if (!tea_util_1.default.isUnset(request.miniAppId)) {
            body["miniAppId"] = request.miniAppId;
        }
        if (!tea_util_1.default.isUnset(request.version)) {
            body["version"] = request.version;
        }
        if (!tea_util_1.default.isUnset(request.versionType)) {
            body["versionType"] = request.versionType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateVersionStatus",
            version: "miniapp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/miniapp/versions/status`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateVersionStatusResponse({}));
    }
    /**
     * @summary 发布版本
     *
     * @param request UpdateVersionStatusRequest
     * @return UpdateVersionStatusResponse
     */
    async updateVersionStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateVersionStatusHeaders({});
        return await this.updateVersionStatusWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map