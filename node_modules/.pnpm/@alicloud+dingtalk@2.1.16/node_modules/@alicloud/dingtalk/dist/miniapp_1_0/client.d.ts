/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateMiniAppHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMiniAppRequest extends $tea.Model {
    bizId?: string;
    bizType?: number;
    bundleId?: string;
    desc?: string;
    icon?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMiniAppResponseBody extends $tea.Model {
    miniAppId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMiniAppResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateMiniAppResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMiniAppPluginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMiniAppPluginRequest extends $tea.Model {
    bizId?: string;
    bizType?: number;
    bundleId?: string;
    desc?: string;
    icon?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMiniAppPluginResponseBody extends $tea.Model {
    miniAppId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateMiniAppPluginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateMiniAppPluginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVersionAcrossBundleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVersionAcrossBundleRequest extends $tea.Model {
    bundleId?: string;
    miniAppId?: string;
    sourceBundleId?: string;
    sourceVersion?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVersionAcrossBundleResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateVersionAcrossBundleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateVersionAcrossBundleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMaxVersionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMaxVersionRequest extends $tea.Model {
    bundleId?: string;
    miniAppId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMaxVersionResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMaxVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMaxVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMiniAppMetaDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMiniAppMetaDataRequest extends $tea.Model {
    bundleId?: string;
    bundleIdTableGmtModified?: {
        [key: string]: any;
    };
    fromAppName?: string;
    miniAppIdTableGmtModified?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMiniAppMetaDataResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: GetMiniAppMetaDataResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMiniAppMetaDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMiniAppMetaDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSettingByMiniAppIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSettingByMiniAppIdResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSettingByMiniAppIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSettingByMiniAppIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeHtmlBundleBuildHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeHtmlBundleBuildRequest extends $tea.Model {
    bundleId?: string;
    miniAppId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeHtmlBundleBuildResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeHtmlBundleBuildResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InvokeHtmlBundleBuildResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAvaiableVersionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAvaiableVersionRequest extends $tea.Model {
    bundleId?: string;
    miniAppId?: string;
    pageNum?: number;
    pageSize?: number;
    versionTypeSet?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAvaiableVersionResponseBody extends $tea.Model {
    versions?: ListAvaiableVersionResponseBodyVersions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAvaiableVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListAvaiableVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHtmlBundleBuildHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHtmlBundleBuildRequest extends $tea.Model {
    bundleId?: string;
    miniAppId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHtmlBundleBuildResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHtmlBundleBuildResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryHtmlBundleBuildResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollBackVersionRequest extends $tea.Model {
    bundleId?: string;
    miniAppId?: string;
    rollbackVersion?: string;
    targetVersion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollBackVersionResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollBackVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RollBackVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetExtendSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetExtendSettingRequest extends $tea.Model {
    buildH5Bundle?: boolean;
    miniAppId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetExtendSettingResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetExtendSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetExtendSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVersionStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVersionStatusRequest extends $tea.Model {
    bundleId?: string;
    miniAppId?: string;
    version?: string;
    versionType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVersionStatusResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateVersionStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateVersionStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMiniAppMetaDataResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListAvaiableVersionResponseBodyVersions extends $tea.Model {
    buildStatus?: number;
    h5Bundle?: string;
    packageSize?: string;
    packageUrl?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 创建小程序
     *
     * @param request CreateMiniAppRequest
     * @param headers CreateMiniAppHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMiniAppResponse
     */
    createMiniAppWithOptions(request: CreateMiniAppRequest, headers: CreateMiniAppHeaders, runtime: $Util.RuntimeOptions): Promise<CreateMiniAppResponse>;
    /**
     * @summary 创建小程序
     *
     * @param request CreateMiniAppRequest
     * @return CreateMiniAppResponse
     */
    createMiniApp(request: CreateMiniAppRequest): Promise<CreateMiniAppResponse>;
    /**
     * @summary 创建小程序组件
     *
     * @param request CreateMiniAppPluginRequest
     * @param headers CreateMiniAppPluginHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateMiniAppPluginResponse
     */
    createMiniAppPluginWithOptions(request: CreateMiniAppPluginRequest, headers: CreateMiniAppPluginHeaders, runtime: $Util.RuntimeOptions): Promise<CreateMiniAppPluginResponse>;
    /**
     * @summary 创建小程序组件
     *
     * @param request CreateMiniAppPluginRequest
     * @return CreateMiniAppPluginResponse
     */
    createMiniAppPlugin(request: CreateMiniAppPluginRequest): Promise<CreateMiniAppPluginResponse>;
    /**
     * @summary 小程序多端发布版本
     *
     * @param request CreateVersionAcrossBundleRequest
     * @param headers CreateVersionAcrossBundleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateVersionAcrossBundleResponse
     */
    createVersionAcrossBundleWithOptions(request: CreateVersionAcrossBundleRequest, headers: CreateVersionAcrossBundleHeaders, runtime: $Util.RuntimeOptions): Promise<CreateVersionAcrossBundleResponse>;
    /**
     * @summary 小程序多端发布版本
     *
     * @param request CreateVersionAcrossBundleRequest
     * @return CreateVersionAcrossBundleResponse
     */
    createVersionAcrossBundle(request: CreateVersionAcrossBundleRequest): Promise<CreateVersionAcrossBundleResponse>;
    /**
     * @summary 获取小程序最大的构建版本
     *
     * @param request GetMaxVersionRequest
     * @param headers GetMaxVersionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMaxVersionResponse
     */
    getMaxVersionWithOptions(request: GetMaxVersionRequest, headers: GetMaxVersionHeaders, runtime: $Util.RuntimeOptions): Promise<GetMaxVersionResponse>;
    /**
     * @summary 获取小程序最大的构建版本
     *
     * @param request GetMaxVersionRequest
     * @return GetMaxVersionResponse
     */
    getMaxVersion(request: GetMaxVersionRequest): Promise<GetMaxVersionResponse>;
    /**
     * @summary 同步小程序元数据
     *
     * @param request GetMiniAppMetaDataRequest
     * @param headers GetMiniAppMetaDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMiniAppMetaDataResponse
     */
    getMiniAppMetaDataWithOptions(request: GetMiniAppMetaDataRequest, headers: GetMiniAppMetaDataHeaders, runtime: $Util.RuntimeOptions): Promise<GetMiniAppMetaDataResponse>;
    /**
     * @summary 同步小程序元数据
     *
     * @param request GetMiniAppMetaDataRequest
     * @return GetMiniAppMetaDataResponse
     */
    getMiniAppMetaData(request: GetMiniAppMetaDataRequest): Promise<GetMiniAppMetaDataResponse>;
    /**
     * @summary 查询小程序配置
     *
     * @param headers GetSettingByMiniAppIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSettingByMiniAppIdResponse
     */
    getSettingByMiniAppIdWithOptions(miniAppId: string, headers: GetSettingByMiniAppIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetSettingByMiniAppIdResponse>;
    /**
     * @summary 查询小程序配置
     *
     * @return GetSettingByMiniAppIdResponse
     */
    getSettingByMiniAppId(miniAppId: string): Promise<GetSettingByMiniAppIdResponse>;
    /**
     * @summary 构建H5Bundle
     *
     * @param request InvokeHtmlBundleBuildRequest
     * @param headers InvokeHtmlBundleBuildHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InvokeHtmlBundleBuildResponse
     */
    invokeHtmlBundleBuildWithOptions(request: InvokeHtmlBundleBuildRequest, headers: InvokeHtmlBundleBuildHeaders, runtime: $Util.RuntimeOptions): Promise<InvokeHtmlBundleBuildResponse>;
    /**
     * @summary 构建H5Bundle
     *
     * @param request InvokeHtmlBundleBuildRequest
     * @return InvokeHtmlBundleBuildResponse
     */
    invokeHtmlBundleBuild(request: InvokeHtmlBundleBuildRequest): Promise<InvokeHtmlBundleBuildResponse>;
    /**
     * @summary 获取小程序版本列表
     *
     * @param request ListAvaiableVersionRequest
     * @param headers ListAvaiableVersionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListAvaiableVersionResponse
     */
    listAvaiableVersionWithOptions(request: ListAvaiableVersionRequest, headers: ListAvaiableVersionHeaders, runtime: $Util.RuntimeOptions): Promise<ListAvaiableVersionResponse>;
    /**
     * @summary 获取小程序版本列表
     *
     * @param request ListAvaiableVersionRequest
     * @return ListAvaiableVersionResponse
     */
    listAvaiableVersion(request: ListAvaiableVersionRequest): Promise<ListAvaiableVersionResponse>;
    /**
     * @summary 查询H5构建结果
     *
     * @param request QueryHtmlBundleBuildRequest
     * @param headers QueryHtmlBundleBuildHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryHtmlBundleBuildResponse
     */
    queryHtmlBundleBuildWithOptions(request: QueryHtmlBundleBuildRequest, headers: QueryHtmlBundleBuildHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHtmlBundleBuildResponse>;
    /**
     * @summary 查询H5构建结果
     *
     * @param request QueryHtmlBundleBuildRequest
     * @return QueryHtmlBundleBuildResponse
     */
    queryHtmlBundleBuild(request: QueryHtmlBundleBuildRequest): Promise<QueryHtmlBundleBuildResponse>;
    /**
     * @summary 回滚版本
     *
     * @param request RollBackVersionRequest
     * @param headers map
     * @param runtime runtime options for this request RuntimeOptions
     * @return RollBackVersionResponse
     */
    rollBackVersionWithOptions(request: RollBackVersionRequest, headers: {
        [key: string]: string;
    }, runtime: $Util.RuntimeOptions): Promise<RollBackVersionResponse>;
    /**
     * @summary 回滚版本
     *
     * @param request RollBackVersionRequest
     * @return RollBackVersionResponse
     */
    rollBackVersion(request: RollBackVersionRequest): Promise<RollBackVersionResponse>;
    /**
     * @summary 修改小程序配置
     *
     * @param request SetExtendSettingRequest
     * @param headers SetExtendSettingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetExtendSettingResponse
     */
    setExtendSettingWithOptions(request: SetExtendSettingRequest, headers: SetExtendSettingHeaders, runtime: $Util.RuntimeOptions): Promise<SetExtendSettingResponse>;
    /**
     * @summary 修改小程序配置
     *
     * @param request SetExtendSettingRequest
     * @return SetExtendSettingResponse
     */
    setExtendSetting(request: SetExtendSettingRequest): Promise<SetExtendSettingResponse>;
    /**
     * @summary 发布版本
     *
     * @param request UpdateVersionStatusRequest
     * @param headers UpdateVersionStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateVersionStatusResponse
     */
    updateVersionStatusWithOptions(request: UpdateVersionStatusRequest, headers: UpdateVersionStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateVersionStatusResponse>;
    /**
     * @summary 发布版本
     *
     * @param request UpdateVersionStatusRequest
     * @return UpdateVersionStatusResponse
     */
    updateVersionStatus(request: UpdateVersionStatusRequest): Promise<UpdateVersionStatusResponse>;
}
