/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AttachmentsMapValue extends $tea.Model {
    uploadKey?: string;
    name?: string;
    mediaType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentRequest extends $tea.Model {
    commentContent?: string;
    commentType?: string;
    option?: AddCommentRequestOption;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddCommentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceDocMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceDocMembersRequest extends $tea.Model {
    members?: AddWorkspaceDocMembersRequestMembers[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceDocMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersRequest extends $tea.Model {
    members?: AddWorkspaceMembersRequestMembers[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersResponseBody extends $tea.Model {
    notInOrgList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddWorkspaceMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendRowsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendRowsRequest extends $tea.Model {
    values?: string[][];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AppendRowsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRequest extends $tea.Model {
    requests?: BatchRequestRequests[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchResponseBody extends $tea.Model {
    responses?: any[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsRequest extends $tea.Model {
    nodeIds?: string[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponseBody extends $tea.Model {
    result?: BatchGetWorkspaceDocsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchGetWorkspaceDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesRequest extends $tea.Model {
    includeRecent?: boolean;
    operatorId?: string;
    workspaceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponseBody extends $tea.Model {
    workspaces?: BatchGetWorkspacesResponseBodyWorkspaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchGetWorkspacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindCoolAppToSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindCoolAppToSheetRequest extends $tea.Model {
    coolAppCode?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindCoolAppToSheetResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BindCoolAppToSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BindCoolAppToSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ClearResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDataRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDataResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClearDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ClearDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleRequest extends $tea.Model {
    cellStyle?: CreateConditionalFormattingRuleRequestCellStyle;
    duplicateCondition?: CreateConditionalFormattingRuleRequestDuplicateCondition;
    ranges?: string[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateConditionalFormattingRuleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataRequest extends $tea.Model {
    associatedColumn?: CreateDeveloperMetadataRequestAssociatedColumn;
    associatedRow?: CreateDeveloperMetadataRequestAssociatedRow;
    value?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDeveloperMetadataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionRequest extends $tea.Model {
    editableSetting?: CreateRangeProtectionRequestEditableSetting;
    otherUserPermission?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateRangeProtectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetRequest extends $tea.Model {
    name?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetResponseBody extends $tea.Model {
    id?: string;
    name?: string;
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceRequest extends $tea.Model {
    description?: string;
    name?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceResponseBody extends $tea.Model {
    description?: string;
    name?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateWorkspaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceDocHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceDocRequest extends $tea.Model {
    docType?: string;
    name?: string;
    operatorId?: string;
    parentNodeId?: string;
    templateId?: string;
    templateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceDocResponseBody extends $tea.Model {
    dentryUuid?: string;
    docKey?: string;
    nodeId?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateWorkspaceDocResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateWorkspaceDocResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteColumnsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteColumnsRequest extends $tea.Model {
    column?: number;
    columnCount?: number;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteColumnsResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteColumnsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteColumnsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDropdownListsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDropdownListsRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDropdownListsResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDropdownListsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDropdownListsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRangeProtectionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRangeProtectionRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRangeProtectionResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRangeProtectionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteRangeProtectionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRowsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRowsRequest extends $tea.Model {
    row?: number;
    rowCount?: number;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRowsResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRowsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteRowsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocMembersRequest extends $tea.Model {
    members?: DeleteWorkspaceDocMembersRequestMembers[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceMembersRequest extends $tea.Model {
    members?: DeleteWorkspaceMembersRequestMembers[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphRequest extends $tea.Model {
    elementType?: string;
    properties?: {
        [key: string]: any;
    };
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphResponseBody extends $tea.Model {
    result?: DocAppendParagraphResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocAppendParagraphResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextRequest extends $tea.Model {
    text?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextResponseBody extends $tea.Model {
    result?: DocAppendTextResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocAppendTextResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryRequest extends $tea.Model {
    blockType?: string;
    endIndex?: number;
    operatorId?: string;
    startIndex?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryResponseBody extends $tea.Model {
    result?: DocBlocksQueryResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocBlocksQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockResponseBody extends $tea.Model {
    result?: DocDeleteBlockResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocDeleteBlockResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksRequest extends $tea.Model {
    blockId?: string;
    element?: {
        [key: string]: any;
    };
    index?: number;
    where?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksResponseBody extends $tea.Model {
    result?: DocInsertBlocksResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocInsertBlocksResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocUpdateContentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocUpdateContentRequest extends $tea.Model {
    content?: string;
    dataType?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocUpdateContentResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocUpdateContentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DocUpdateContentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsResponseBody extends $tea.Model {
    value?: GetAllSheetsResponseBodyValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAllSheetsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataResponseBody extends $tea.Model {
    associatedColumn?: GetDeveloperMetadataResponseBodyAssociatedColumn;
    associatedRow?: GetDeveloperMetadataResponseBodyAssociatedRow;
    value?: any;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDeveloperMetadataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeRequest extends $tea.Model {
    operatorId?: string;
    select?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeResponseBody extends $tea.Model {
    backgroundColors?: GetRangeResponseBodyBackgroundColors[][];
    displayValues?: string[][];
    fontSizes?: number[][];
    fontWeights?: string[][];
    formulas?: string[][];
    horizontalAlignments?: string[][];
    values?: any[][];
    verticalAlignments?: string[][];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRangeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponseBody extends $tea.Model {
    nextToken?: string;
    recentList?: GetRecentEditDocsResponseBodyRecentList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRecentEditDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponseBody extends $tea.Model {
    nextToken?: string;
    recentList?: GetRecentOpenDocsResponseBodyRecentList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRecentOpenDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesRequest extends $tea.Model {
    includeRecent?: boolean;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesResponseBody extends $tea.Model {
    workspaces?: GetRelatedWorkspacesResponseBodyWorkspaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRelatedWorkspacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetResponseBody extends $tea.Model {
    columnCount?: number;
    id?: string;
    lastNonEmptyColumn?: number;
    lastNonEmptyRow?: number;
    name?: string;
    rowCount?: number;
    visibility?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateByIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateByIdRequest extends $tea.Model {
    belong?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateByIdResponseBody extends $tea.Model {
    coverUrl?: string;
    createTime?: number;
    docType?: string;
    id?: string;
    templateType?: string;
    title?: string;
    updateTime?: number;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTemplateByIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTemplateByIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceResponseBody extends $tea.Model {
    isDeleted?: boolean;
    owner?: string;
    rootDentryUuid?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetWorkspaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeResponseBody extends $tea.Model {
    hasPermission?: boolean;
    nodeBO?: GetWorkspaceNodeResponseBodyNodeBO;
    workspaceBO?: GetWorkspaceNodeResponseBodyWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetWorkspaceNodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDocumentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDocumentRequest extends $tea.Model {
    attachmentsMap?: {
        [key: string]: AttachmentsMapValue;
    };
    importType?: number;
    linksKey?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDocumentResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDocumentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InitDocumentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequest extends $tea.Model {
    blocks?: InsertBlocksRequestBlocks[];
    location?: InsertBlocksRequestLocation;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertColumnsBeforeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertColumnsBeforeRequest extends $tea.Model {
    column?: number;
    columnCount?: number;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertColumnsBeforeResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertColumnsBeforeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InsertColumnsBeforeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsRequest extends $tea.Model {
    options?: InsertDropdownListsRequestOptions[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InsertDropdownListsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRowsBeforeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRowsBeforeRequest extends $tea.Model {
    row?: number;
    rowCount?: number;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRowsBeforeResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertRowsBeforeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InsertRowsBeforeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    templateType?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    templateList?: ListTemplateResponseBodyTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MergeRangeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MergeRangeRequest extends $tea.Model {
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MergeRangeResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MergeRangeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MergeRangeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextRequest extends $tea.Model {
    findOptions?: RangeFindNextRequestFindOptions;
    text?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RangeFindNextResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsRequest extends $tea.Model {
    keyword?: string;
    maxResults?: number;
    nextToken?: string;
    operatorId?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponseBody extends $tea.Model {
    docs?: SearchWorkspaceDocsResponseBodyDocs[];
    hasMore?: boolean;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchWorkspaceDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnWidthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnWidthRequest extends $tea.Model {
    column?: number;
    width?: number;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnWidthResponseBody extends $tea.Model {
    sheetId?: string;
    sheetName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnWidthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetColumnWidthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnsVisibilityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnsVisibilityRequest extends $tea.Model {
    column?: number;
    columnCount?: number;
    visibility?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnsVisibilityResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetColumnsVisibilityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetColumnsVisibilityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowHeightHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowHeightRequest extends $tea.Model {
    height?: number;
    row?: number;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowHeightResponseBody extends $tea.Model {
    sheetId?: string;
    sheetName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowHeightResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetRowHeightResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowsVisibilityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowsVisibilityRequest extends $tea.Model {
    row?: number;
    rowCount?: number;
    visibility?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowsVisibilityResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SetRowsVisibilityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SetRowsVisibilityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetAutofitRowsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetAutofitRowsRequest extends $tea.Model {
    fontWidth?: number;
    row?: number;
    rowCount?: number;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetAutofitRowsResponseBody extends $tea.Model {
    id?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetAutofitRowsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SheetAutofitRowsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllRequest extends $tea.Model {
    findOptions?: SheetFindAllRequestFindOptions;
    text?: string;
    operatorId?: string;
    select?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllResponseBody extends $tea.Model {
    value?: SheetFindAllResponseBodyValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SheetFindAllResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindCoolAppToSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindCoolAppToSheetRequest extends $tea.Model {
    coolAppCode?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindCoolAppToSheetResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnbindCoolAppToSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UnbindCoolAppToSheetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeRequest extends $tea.Model {
    backgroundColors?: string[][];
    fontSizes?: number[][];
    fontWeights?: string[][];
    horizontalAlignments?: string[][];
    hyperlinks?: UpdateRangeRequestHyperlinks[][];
    numberFormat?: string;
    values?: string[][];
    verticalAlignments?: string[][];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeResponseBody extends $tea.Model {
    a1Notation?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRangeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetRequest extends $tea.Model {
    name?: string;
    visibility?: string;
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSheetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceDocMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceDocMembersRequest extends $tea.Model {
    members?: UpdateWorkspaceDocMembersRequestMembers[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceDocMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceMembersRequest extends $tea.Model {
    members?: UpdateWorkspaceMembersRequestMembers[];
    operatorId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCommentRequestOption extends $tea.Model {
    createTime?: string;
    extra?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceDocMembersRequestMembers extends $tea.Model {
    memberId?: string;
    memberType?: string;
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddWorkspaceMembersRequestMembers extends $tea.Model {
    memberId?: string;
    memberType?: string;
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchRequestRequests extends $tea.Model {
    body?: any;
    method?: string;
    path?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponseBodyResultNodeBO extends $tea.Model {
    deleted?: boolean;
    docType?: string;
    lastEditTime?: number;
    name?: string;
    nodeId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO extends $tea.Model {
    name?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspaceDocsResponseBodyResult extends $tea.Model {
    hasPermission?: boolean;
    nodeBO?: BatchGetWorkspaceDocsResponseBodyResultNodeBO;
    workspaceBO?: BatchGetWorkspaceDocsResponseBodyResultWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList extends $tea.Model {
    lastEditTime?: string;
    name?: string;
    nodeId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponseBodyWorkspacesWorkspace extends $tea.Model {
    createTime?: number;
    name?: string;
    orgPublished?: boolean;
    recentList?: BatchGetWorkspacesResponseBodyWorkspacesWorkspaceRecentList[];
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchGetWorkspacesResponseBodyWorkspaces extends $tea.Model {
    hasPermission?: boolean;
    workspace?: BatchGetWorkspacesResponseBodyWorkspacesWorkspace;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleRequestCellStyle extends $tea.Model {
    backgroundColor?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConditionalFormattingRuleRequestDuplicateCondition extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataRequestAssociatedColumn extends $tea.Model {
    column?: number;
    sheet?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperMetadataRequestAssociatedRow extends $tea.Model {
    row?: number;
    sheet?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRangeProtectionRequestEditableSetting extends $tea.Model {
    deleteColumns?: boolean;
    deleteRows?: boolean;
    editCells?: boolean;
    formatCells?: boolean;
    insertColumns?: boolean;
    insertRows?: boolean;
    toggleColumnsVisibility?: boolean;
    toggleRowsVisibility?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceDocMembersRequestMembers extends $tea.Model {
    memberId?: string;
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWorkspaceMembersRequestMembers extends $tea.Model {
    memberId?: string;
    memberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendParagraphResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocAppendTextResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocBlocksQueryResponseBodyResult extends $tea.Model {
    data?: any[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocDeleteBlockResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DocInsertBlocksResponseBodyResult extends $tea.Model {
    data?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAllSheetsResponseBodyValue extends $tea.Model {
    id?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataResponseBodyAssociatedColumn extends $tea.Model {
    column?: number;
    sheetId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDeveloperMetadataResponseBodyAssociatedRow extends $tea.Model {
    row?: number;
    sheetId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRangeResponseBodyBackgroundColors extends $tea.Model {
    red?: number;
    green?: number;
    blue?: number;
    hexString?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponseBodyRecentListNodeBO extends $tea.Model {
    createTime?: number;
    docType?: string;
    isDeleted?: boolean;
    lastEditTime?: number;
    nodeId?: string;
    nodeName?: string;
    updateTime?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponseBodyRecentListWorkspaceBO extends $tea.Model {
    url?: string;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentEditDocsResponseBodyRecentList extends $tea.Model {
    nodeBO?: GetRecentEditDocsResponseBodyRecentListNodeBO;
    workspaceBO?: GetRecentEditDocsResponseBodyRecentListWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponseBodyRecentListNodeBO extends $tea.Model {
    createTime?: number;
    docType?: string;
    isDeleted?: boolean;
    lastOpenTime?: number;
    nodeId?: string;
    nodeName?: string;
    updateTime?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponseBodyRecentListWorkspaceBO extends $tea.Model {
    url?: string;
    workspaceId?: string;
    workspaceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRecentOpenDocsResponseBodyRecentList extends $tea.Model {
    nodeBO?: GetRecentOpenDocsResponseBodyRecentListNodeBO;
    workspaceBO?: GetRecentOpenDocsResponseBodyRecentListWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesResponseBodyWorkspacesRecentList extends $tea.Model {
    lastEditTime?: number;
    name?: string;
    nodeId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRelatedWorkspacesResponseBodyWorkspaces extends $tea.Model {
    createTime?: number;
    deleted?: boolean;
    name?: string;
    owner?: string;
    recentList?: GetRelatedWorkspacesResponseBodyWorkspacesRecentList[];
    role?: string;
    url?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeResponseBodyNodeBO extends $tea.Model {
    docType?: string;
    lastEditTime?: number;
    name?: string;
    nodeId?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkspaceNodeResponseBodyWorkspaceBO extends $tea.Model {
    name?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraphChildrenTextTextStyle extends $tea.Model {
    bold?: boolean;
    dataType?: string;
    fontSize?: number;
    sizeUnit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraphChildrenText extends $tea.Model {
    content?: string;
    textStyle?: InsertBlocksRequestBlocksParagraphChildrenTextTextStyle;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraphChildren extends $tea.Model {
    elementType?: string;
    text?: InsertBlocksRequestBlocksParagraphChildrenText;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraphStyle extends $tea.Model {
    headingLevel?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocksParagraph extends $tea.Model {
    children?: InsertBlocksRequestBlocksParagraphChildren[];
    style?: InsertBlocksRequestBlocksParagraphStyle;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestBlocks extends $tea.Model {
    blockType?: string;
    paragraph?: InsertBlocksRequestBlocksParagraph;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertBlocksRequestLocation extends $tea.Model {
    head?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertDropdownListsRequestOptions extends $tea.Model {
    color?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListTemplateResponseBodyTemplateList extends $tea.Model {
    coverUrl?: string;
    createTime?: number;
    docType?: string;
    id?: string;
    templateType?: string;
    title?: string;
    updateTime?: number;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RangeFindNextRequestFindOptions extends $tea.Model {
    includeHidden?: boolean;
    matchCase?: boolean;
    matchEntireCell?: boolean;
    matchFormulaText?: boolean;
    scope?: string;
    useRegExp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponseBodyDocsNodeBO extends $tea.Model {
    docType?: string;
    lastEditTime?: number;
    name?: string;
    nodeId?: string;
    originName?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponseBodyDocsWorkspaceBO extends $tea.Model {
    name?: string;
    workspaceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchWorkspaceDocsResponseBodyDocs extends $tea.Model {
    nodeBO?: SearchWorkspaceDocsResponseBodyDocsNodeBO;
    workspaceBO?: SearchWorkspaceDocsResponseBodyDocsWorkspaceBO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllRequestFindOptions extends $tea.Model {
    includeHidden?: boolean;
    matchCase?: boolean;
    matchEntireCell?: boolean;
    matchFormulaText?: boolean;
    scope?: string;
    unionCells?: boolean;
    useRegExp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SheetFindAllResponseBodyValue extends $tea.Model {
    a1Notation?: string;
    values?: any[][];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRangeRequestHyperlinks extends $tea.Model {
    type?: string;
    link?: string;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceDocMembersRequestMembers extends $tea.Model {
    memberId?: string;
    memberType?: string;
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateWorkspaceMembersRequestMembers extends $tea.Model {
    memberId?: string;
    memberType?: string;
    roleType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 添加评论
     *
     * @param request AddCommentRequest
     * @param headers AddCommentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCommentResponse
     */
    addCommentWithOptions(docId: string, request: AddCommentRequest, headers: AddCommentHeaders, runtime: $Util.RuntimeOptions): Promise<AddCommentResponse>;
    /**
     * @summary 添加评论
     *
     * @param request AddCommentRequest
     * @return AddCommentResponse
     */
    addComment(docId: string, request: AddCommentRequest): Promise<AddCommentResponse>;
    /**
     * @summary 添加知识库文档成员
     *
     * @param request AddWorkspaceDocMembersRequest
     * @param headers AddWorkspaceDocMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddWorkspaceDocMembersResponse
     */
    addWorkspaceDocMembersWithOptions(workspaceId: string, nodeId: string, request: AddWorkspaceDocMembersRequest, headers: AddWorkspaceDocMembersHeaders, runtime: $Util.RuntimeOptions): Promise<AddWorkspaceDocMembersResponse>;
    /**
     * @summary 添加知识库文档成员
     *
     * @param request AddWorkspaceDocMembersRequest
     * @return AddWorkspaceDocMembersResponse
     */
    addWorkspaceDocMembers(workspaceId: string, nodeId: string, request: AddWorkspaceDocMembersRequest): Promise<AddWorkspaceDocMembersResponse>;
    /**
     * @summary 添加知识库成员
     *
     * @param request AddWorkspaceMembersRequest
     * @param headers AddWorkspaceMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddWorkspaceMembersResponse
     */
    addWorkspaceMembersWithOptions(workspaceId: string, request: AddWorkspaceMembersRequest, headers: AddWorkspaceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<AddWorkspaceMembersResponse>;
    /**
     * @summary 添加知识库成员
     *
     * @param request AddWorkspaceMembersRequest
     * @return AddWorkspaceMembersResponse
     */
    addWorkspaceMembers(workspaceId: string, request: AddWorkspaceMembersRequest): Promise<AddWorkspaceMembersResponse>;
    /**
     * @summary 追加行
     *
     * @param request AppendRowsRequest
     * @param headers AppendRowsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AppendRowsResponse
     */
    appendRowsWithOptions(workbookId: string, sheetId: string, request: AppendRowsRequest, headers: AppendRowsHeaders, runtime: $Util.RuntimeOptions): Promise<AppendRowsResponse>;
    /**
     * @summary 追加行
     *
     * @param request AppendRowsRequest
     * @return AppendRowsResponse
     */
    appendRows(workbookId: string, sheetId: string, request: AppendRowsRequest): Promise<AppendRowsResponse>;
    /**
     * @summary 批量执行表格操作
     *
     * @param request BatchRequest
     * @param headers BatchHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchResponse
     */
    batchWithOptions(workbookId: string, request: BatchRequest, headers: BatchHeaders, runtime: $Util.RuntimeOptions): Promise<BatchResponse>;
    /**
     * @summary 批量执行表格操作
     *
     * @param request BatchRequest
     * @return BatchResponse
     */
    batch(workbookId: string, request: BatchRequest): Promise<BatchResponse>;
    /**
     * @summary 批量查询知识库文档
     *
     * @param request BatchGetWorkspaceDocsRequest
     * @param headers BatchGetWorkspaceDocsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchGetWorkspaceDocsResponse
     */
    batchGetWorkspaceDocsWithOptions(request: BatchGetWorkspaceDocsRequest, headers: BatchGetWorkspaceDocsHeaders, runtime: $Util.RuntimeOptions): Promise<BatchGetWorkspaceDocsResponse>;
    /**
     * @summary 批量查询知识库文档
     *
     * @param request BatchGetWorkspaceDocsRequest
     * @return BatchGetWorkspaceDocsResponse
     */
    batchGetWorkspaceDocs(request: BatchGetWorkspaceDocsRequest): Promise<BatchGetWorkspaceDocsResponse>;
    /**
     * @summary 知识库批量查询
     *
     * @param request BatchGetWorkspacesRequest
     * @param headers BatchGetWorkspacesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchGetWorkspacesResponse
     */
    batchGetWorkspacesWithOptions(request: BatchGetWorkspacesRequest, headers: BatchGetWorkspacesHeaders, runtime: $Util.RuntimeOptions): Promise<BatchGetWorkspacesResponse>;
    /**
     * @summary 知识库批量查询
     *
     * @param request BatchGetWorkspacesRequest
     * @return BatchGetWorkspacesResponse
     */
    batchGetWorkspaces(request: BatchGetWorkspacesRequest): Promise<BatchGetWorkspacesResponse>;
    /**
     * @summary 关联文档酷应用到表格
     *
     * @param request BindCoolAppToSheetRequest
     * @param headers BindCoolAppToSheetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BindCoolAppToSheetResponse
     */
    bindCoolAppToSheetWithOptions(workbookId: string, request: BindCoolAppToSheetRequest, headers: BindCoolAppToSheetHeaders, runtime: $Util.RuntimeOptions): Promise<BindCoolAppToSheetResponse>;
    /**
     * @summary 关联文档酷应用到表格
     *
     * @param request BindCoolAppToSheetRequest
     * @return BindCoolAppToSheetResponse
     */
    bindCoolAppToSheet(workbookId: string, request: BindCoolAppToSheetRequest): Promise<BindCoolAppToSheetResponse>;
    /**
     * @summary 清除单元格区域内所有内容
     *
     * @param request ClearRequest
     * @param headers ClearHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ClearResponse
     */
    clearWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: ClearRequest, headers: ClearHeaders, runtime: $Util.RuntimeOptions): Promise<ClearResponse>;
    /**
     * @summary 清除单元格区域内所有内容
     *
     * @param request ClearRequest
     * @return ClearResponse
     */
    clear(workbookId: string, sheetId: string, rangeAddress: string, request: ClearRequest): Promise<ClearResponse>;
    /**
     * @summary 清除单元格区域内数据
     *
     * @param request ClearDataRequest
     * @param headers ClearDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ClearDataResponse
     */
    clearDataWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: ClearDataRequest, headers: ClearDataHeaders, runtime: $Util.RuntimeOptions): Promise<ClearDataResponse>;
    /**
     * @summary 清除单元格区域内数据
     *
     * @param request ClearDataRequest
     * @return ClearDataResponse
     */
    clearData(workbookId: string, sheetId: string, rangeAddress: string, request: ClearDataRequest): Promise<ClearDataResponse>;
    /**
     * @summary 创建条件格式
     *
     * @param request CreateConditionalFormattingRuleRequest
     * @param headers CreateConditionalFormattingRuleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateConditionalFormattingRuleResponse
     */
    createConditionalFormattingRuleWithOptions(workbookId: string, sheetId: string, request: CreateConditionalFormattingRuleRequest, headers: CreateConditionalFormattingRuleHeaders, runtime: $Util.RuntimeOptions): Promise<CreateConditionalFormattingRuleResponse>;
    /**
     * @summary 创建条件格式
     *
     * @param request CreateConditionalFormattingRuleRequest
     * @return CreateConditionalFormattingRuleResponse
     */
    createConditionalFormattingRule(workbookId: string, sheetId: string, request: CreateConditionalFormattingRuleRequest): Promise<CreateConditionalFormattingRuleResponse>;
    /**
     * @summary 创建开发者元数据
     *
     * @param request CreateDeveloperMetadataRequest
     * @param headers CreateDeveloperMetadataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateDeveloperMetadataResponse
     */
    createDeveloperMetadataWithOptions(workbookId: string, request: CreateDeveloperMetadataRequest, headers: CreateDeveloperMetadataHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDeveloperMetadataResponse>;
    /**
     * @summary 创建开发者元数据
     *
     * @param request CreateDeveloperMetadataRequest
     * @return CreateDeveloperMetadataResponse
     */
    createDeveloperMetadata(workbookId: string, request: CreateDeveloperMetadataRequest): Promise<CreateDeveloperMetadataResponse>;
    /**
     * @summary 创建单元格锁定
     *
     * @param request CreateRangeProtectionRequest
     * @param headers CreateRangeProtectionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateRangeProtectionResponse
     */
    createRangeProtectionWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: CreateRangeProtectionRequest, headers: CreateRangeProtectionHeaders, runtime: $Util.RuntimeOptions): Promise<CreateRangeProtectionResponse>;
    /**
     * @summary 创建单元格锁定
     *
     * @param request CreateRangeProtectionRequest
     * @return CreateRangeProtectionResponse
     */
    createRangeProtection(workbookId: string, sheetId: string, rangeAddress: string, request: CreateRangeProtectionRequest): Promise<CreateRangeProtectionResponse>;
    /**
     * @summary 创建工作表
     *
     * @param request CreateSheetRequest
     * @param headers CreateSheetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSheetResponse
     */
    createSheetWithOptions(workbookId: string, request: CreateSheetRequest, headers: CreateSheetHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSheetResponse>;
    /**
     * @summary 创建工作表
     *
     * @param request CreateSheetRequest
     * @return CreateSheetResponse
     */
    createSheet(workbookId: string, request: CreateSheetRequest): Promise<CreateSheetResponse>;
    /**
     * @summary 新建知识库
     *
     * @param request CreateWorkspaceRequest
     * @param headers CreateWorkspaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateWorkspaceResponse
     */
    createWorkspaceWithOptions(request: CreateWorkspaceRequest, headers: CreateWorkspaceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateWorkspaceResponse>;
    /**
     * @summary 新建知识库
     *
     * @param request CreateWorkspaceRequest
     * @return CreateWorkspaceResponse
     */
    createWorkspace(request: CreateWorkspaceRequest): Promise<CreateWorkspaceResponse>;
    /**
     * @summary 创建知识库文档
     *
     * @param request CreateWorkspaceDocRequest
     * @param headers CreateWorkspaceDocHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateWorkspaceDocResponse
     */
    createWorkspaceDocWithOptions(workspaceId: string, request: CreateWorkspaceDocRequest, headers: CreateWorkspaceDocHeaders, runtime: $Util.RuntimeOptions): Promise<CreateWorkspaceDocResponse>;
    /**
     * @summary 创建知识库文档
     *
     * @param request CreateWorkspaceDocRequest
     * @return CreateWorkspaceDocResponse
     */
    createWorkspaceDoc(workspaceId: string, request: CreateWorkspaceDocRequest): Promise<CreateWorkspaceDocResponse>;
    /**
     * @summary 删除列
     *
     * @param request DeleteColumnsRequest
     * @param headers DeleteColumnsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteColumnsResponse
     */
    deleteColumnsWithOptions(workbookId: string, sheetId: string, request: DeleteColumnsRequest, headers: DeleteColumnsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteColumnsResponse>;
    /**
     * @summary 删除列
     *
     * @param request DeleteColumnsRequest
     * @return DeleteColumnsResponse
     */
    deleteColumns(workbookId: string, sheetId: string, request: DeleteColumnsRequest): Promise<DeleteColumnsResponse>;
    /**
     * @summary 删除下拉列表
     *
     * @param request DeleteDropdownListsRequest
     * @param headers DeleteDropdownListsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteDropdownListsResponse
     */
    deleteDropdownListsWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: DeleteDropdownListsRequest, headers: DeleteDropdownListsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDropdownListsResponse>;
    /**
     * @summary 删除下拉列表
     *
     * @param request DeleteDropdownListsRequest
     * @return DeleteDropdownListsResponse
     */
    deleteDropdownLists(workbookId: string, sheetId: string, rangeAddress: string, request: DeleteDropdownListsRequest): Promise<DeleteDropdownListsResponse>;
    /**
     * @summary 删除单元格锁定
     *
     * @param request DeleteRangeProtectionRequest
     * @param headers DeleteRangeProtectionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteRangeProtectionResponse
     */
    deleteRangeProtectionWithOptions(workbookId: string, sheetId: string, rangeAddress: string, protectionId: string, request: DeleteRangeProtectionRequest, headers: DeleteRangeProtectionHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRangeProtectionResponse>;
    /**
     * @summary 删除单元格锁定
     *
     * @param request DeleteRangeProtectionRequest
     * @return DeleteRangeProtectionResponse
     */
    deleteRangeProtection(workbookId: string, sheetId: string, rangeAddress: string, protectionId: string, request: DeleteRangeProtectionRequest): Promise<DeleteRangeProtectionResponse>;
    /**
     * @summary 删除行
     *
     * @param request DeleteRowsRequest
     * @param headers DeleteRowsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteRowsResponse
     */
    deleteRowsWithOptions(workbookId: string, sheetId: string, request: DeleteRowsRequest, headers: DeleteRowsHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRowsResponse>;
    /**
     * @summary 删除行
     *
     * @param request DeleteRowsRequest
     * @return DeleteRowsResponse
     */
    deleteRows(workbookId: string, sheetId: string, request: DeleteRowsRequest): Promise<DeleteRowsResponse>;
    /**
     * @summary 删除工作表
     *
     * @param request DeleteSheetRequest
     * @param headers DeleteSheetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSheetResponse
     */
    deleteSheetWithOptions(workbookId: string, sheetId: string, request: DeleteSheetRequest, headers: DeleteSheetHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteSheetResponse>;
    /**
     * @summary 删除工作表
     *
     * @param request DeleteSheetRequest
     * @return DeleteSheetResponse
     */
    deleteSheet(workbookId: string, sheetId: string, request: DeleteSheetRequest): Promise<DeleteSheetResponse>;
    /**
     * @summary 删除知识库文档
     *
     * @param request DeleteWorkspaceDocRequest
     * @param headers DeleteWorkspaceDocHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteWorkspaceDocResponse
     */
    deleteWorkspaceDocWithOptions(workspaceId: string, nodeId: string, request: DeleteWorkspaceDocRequest, headers: DeleteWorkspaceDocHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteWorkspaceDocResponse>;
    /**
     * @summary 删除知识库文档
     *
     * @param request DeleteWorkspaceDocRequest
     * @return DeleteWorkspaceDocResponse
     */
    deleteWorkspaceDoc(workspaceId: string, nodeId: string, request: DeleteWorkspaceDocRequest): Promise<DeleteWorkspaceDocResponse>;
    /**
     * @summary 删除知识库文档成员
     *
     * @param request DeleteWorkspaceDocMembersRequest
     * @param headers DeleteWorkspaceDocMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteWorkspaceDocMembersResponse
     */
    deleteWorkspaceDocMembersWithOptions(workspaceId: string, nodeId: string, request: DeleteWorkspaceDocMembersRequest, headers: DeleteWorkspaceDocMembersHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteWorkspaceDocMembersResponse>;
    /**
     * @summary 删除知识库文档成员
     *
     * @param request DeleteWorkspaceDocMembersRequest
     * @return DeleteWorkspaceDocMembersResponse
     */
    deleteWorkspaceDocMembers(workspaceId: string, nodeId: string, request: DeleteWorkspaceDocMembersRequest): Promise<DeleteWorkspaceDocMembersResponse>;
    /**
     * @summary 删除知识库成员
     *
     * @param request DeleteWorkspaceMembersRequest
     * @param headers DeleteWorkspaceMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteWorkspaceMembersResponse
     */
    deleteWorkspaceMembersWithOptions(workspaceId: string, request: DeleteWorkspaceMembersRequest, headers: DeleteWorkspaceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteWorkspaceMembersResponse>;
    /**
     * @summary 删除知识库成员
     *
     * @param request DeleteWorkspaceMembersRequest
     * @return DeleteWorkspaceMembersResponse
     */
    deleteWorkspaceMembers(workspaceId: string, request: DeleteWorkspaceMembersRequest): Promise<DeleteWorkspaceMembersResponse>;
    /**
     * @summary 追加指定段落元素
     *
     * @param request DocAppendParagraphRequest
     * @param headers DocAppendParagraphHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DocAppendParagraphResponse
     */
    docAppendParagraphWithOptions(docKey: string, blockId: string, request: DocAppendParagraphRequest, headers: DocAppendParagraphHeaders, runtime: $Util.RuntimeOptions): Promise<DocAppendParagraphResponse>;
    /**
     * @summary 追加指定段落元素
     *
     * @param request DocAppendParagraphRequest
     * @return DocAppendParagraphResponse
     */
    docAppendParagraph(docKey: string, blockId: string, request: DocAppendParagraphRequest): Promise<DocAppendParagraphResponse>;
    /**
     * @summary 在段落后追加文本
     *
     * @param request DocAppendTextRequest
     * @param headers DocAppendTextHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DocAppendTextResponse
     */
    docAppendTextWithOptions(docKey: string, blockId: string, request: DocAppendTextRequest, headers: DocAppendTextHeaders, runtime: $Util.RuntimeOptions): Promise<DocAppendTextResponse>;
    /**
     * @summary 在段落后追加文本
     *
     * @param request DocAppendTextRequest
     * @return DocAppendTextResponse
     */
    docAppendText(docKey: string, blockId: string, request: DocAppendTextRequest): Promise<DocAppendTextResponse>;
    /**
     * @summary 查询指定Block元素
     *
     * @param request DocBlocksQueryRequest
     * @param headers DocBlocksQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DocBlocksQueryResponse
     */
    docBlocksQueryWithOptions(docKey: string, request: DocBlocksQueryRequest, headers: DocBlocksQueryHeaders, runtime: $Util.RuntimeOptions): Promise<DocBlocksQueryResponse>;
    /**
     * @summary 查询指定Block元素
     *
     * @param request DocBlocksQueryRequest
     * @return DocBlocksQueryResponse
     */
    docBlocksQuery(docKey: string, request: DocBlocksQueryRequest): Promise<DocBlocksQueryResponse>;
    /**
     * @summary 删除指定位置的 Block
     *
     * @param request DocDeleteBlockRequest
     * @param headers DocDeleteBlockHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DocDeleteBlockResponse
     */
    docDeleteBlockWithOptions(docKey: string, blockId: string, request: DocDeleteBlockRequest, headers: DocDeleteBlockHeaders, runtime: $Util.RuntimeOptions): Promise<DocDeleteBlockResponse>;
    /**
     * @summary 删除指定位置的 Block
     *
     * @param request DocDeleteBlockRequest
     * @return DocDeleteBlockResponse
     */
    docDeleteBlock(docKey: string, blockId: string, request: DocDeleteBlockRequest): Promise<DocDeleteBlockResponse>;
    /**
     * @summary 插入指定Block元素
     *
     * @param request DocInsertBlocksRequest
     * @param headers DocInsertBlocksHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DocInsertBlocksResponse
     */
    docInsertBlocksWithOptions(docKey: string, request: DocInsertBlocksRequest, headers: DocInsertBlocksHeaders, runtime: $Util.RuntimeOptions): Promise<DocInsertBlocksResponse>;
    /**
     * @summary 插入指定Block元素
     *
     * @param request DocInsertBlocksRequest
     * @return DocInsertBlocksResponse
     */
    docInsertBlocks(docKey: string, request: DocInsertBlocksRequest): Promise<DocInsertBlocksResponse>;
    /**
     * @summary 覆写全文
     *
     * @param request DocUpdateContentRequest
     * @param headers DocUpdateContentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DocUpdateContentResponse
     */
    docUpdateContentWithOptions(docKey: string, request: DocUpdateContentRequest, headers: DocUpdateContentHeaders, runtime: $Util.RuntimeOptions): Promise<DocUpdateContentResponse>;
    /**
     * @summary 覆写全文
     *
     * @param request DocUpdateContentRequest
     * @return DocUpdateContentResponse
     */
    docUpdateContent(docKey: string, request: DocUpdateContentRequest): Promise<DocUpdateContentResponse>;
    /**
     * @summary 获取所有工作表
     *
     * @param request GetAllSheetsRequest
     * @param headers GetAllSheetsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAllSheetsResponse
     */
    getAllSheetsWithOptions(workbookId: string, request: GetAllSheetsRequest, headers: GetAllSheetsHeaders, runtime: $Util.RuntimeOptions): Promise<GetAllSheetsResponse>;
    /**
     * @summary 获取所有工作表
     *
     * @param request GetAllSheetsRequest
     * @return GetAllSheetsResponse
     */
    getAllSheets(workbookId: string, request: GetAllSheetsRequest): Promise<GetAllSheetsResponse>;
    /**
     * @summary 获取开发者元数据
     *
     * @param request GetDeveloperMetadataRequest
     * @param headers GetDeveloperMetadataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDeveloperMetadataResponse
     */
    getDeveloperMetadataWithOptions(workbookId: string, developerMetadataId: string, request: GetDeveloperMetadataRequest, headers: GetDeveloperMetadataHeaders, runtime: $Util.RuntimeOptions): Promise<GetDeveloperMetadataResponse>;
    /**
     * @summary 获取开发者元数据
     *
     * @param request GetDeveloperMetadataRequest
     * @return GetDeveloperMetadataResponse
     */
    getDeveloperMetadata(workbookId: string, developerMetadataId: string, request: GetDeveloperMetadataRequest): Promise<GetDeveloperMetadataResponse>;
    /**
     * @summary 获取单元格区域
     *
     * @param request GetRangeRequest
     * @param headers GetRangeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRangeResponse
     */
    getRangeWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: GetRangeRequest, headers: GetRangeHeaders, runtime: $Util.RuntimeOptions): Promise<GetRangeResponse>;
    /**
     * @summary 获取单元格区域
     *
     * @param request GetRangeRequest
     * @return GetRangeResponse
     */
    getRange(workbookId: string, sheetId: string, rangeAddress: string, request: GetRangeRequest): Promise<GetRangeResponse>;
    /**
     * @summary 获取最近编辑文档
     *
     * @param request GetRecentEditDocsRequest
     * @param headers GetRecentEditDocsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRecentEditDocsResponse
     */
    getRecentEditDocsWithOptions(request: GetRecentEditDocsRequest, headers: GetRecentEditDocsHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecentEditDocsResponse>;
    /**
     * @summary 获取最近编辑文档
     *
     * @param request GetRecentEditDocsRequest
     * @return GetRecentEditDocsResponse
     */
    getRecentEditDocs(request: GetRecentEditDocsRequest): Promise<GetRecentEditDocsResponse>;
    /**
     * @summary 获取最近打开文档
     *
     * @param request GetRecentOpenDocsRequest
     * @param headers GetRecentOpenDocsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRecentOpenDocsResponse
     */
    getRecentOpenDocsWithOptions(request: GetRecentOpenDocsRequest, headers: GetRecentOpenDocsHeaders, runtime: $Util.RuntimeOptions): Promise<GetRecentOpenDocsResponse>;
    /**
     * @summary 获取最近打开文档
     *
     * @param request GetRecentOpenDocsRequest
     * @return GetRecentOpenDocsResponse
     */
    getRecentOpenDocs(request: GetRecentOpenDocsRequest): Promise<GetRecentOpenDocsResponse>;
    /**
     * @summary 查询用户有权限的知识库
     *
     * @param request GetRelatedWorkspacesRequest
     * @param headers GetRelatedWorkspacesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRelatedWorkspacesResponse
     */
    getRelatedWorkspacesWithOptions(request: GetRelatedWorkspacesRequest, headers: GetRelatedWorkspacesHeaders, runtime: $Util.RuntimeOptions): Promise<GetRelatedWorkspacesResponse>;
    /**
     * @summary 查询用户有权限的知识库
     *
     * @param request GetRelatedWorkspacesRequest
     * @return GetRelatedWorkspacesResponse
     */
    getRelatedWorkspaces(request: GetRelatedWorkspacesRequest): Promise<GetRelatedWorkspacesResponse>;
    /**
     * @summary 获取工作表
     *
     * @param request GetSheetRequest
     * @param headers GetSheetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSheetResponse
     */
    getSheetWithOptions(workbookId: string, sheetId: string, request: GetSheetRequest, headers: GetSheetHeaders, runtime: $Util.RuntimeOptions): Promise<GetSheetResponse>;
    /**
     * @summary 获取工作表
     *
     * @param request GetSheetRequest
     * @return GetSheetResponse
     */
    getSheet(workbookId: string, sheetId: string, request: GetSheetRequest): Promise<GetSheetResponse>;
    /**
     * @summary 查询文档模版
     *
     * @param request GetTemplateByIdRequest
     * @param headers GetTemplateByIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTemplateByIdResponse
     */
    getTemplateByIdWithOptions(templateId: string, request: GetTemplateByIdRequest, headers: GetTemplateByIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetTemplateByIdResponse>;
    /**
     * @summary 查询文档模版
     *
     * @param request GetTemplateByIdRequest
     * @return GetTemplateByIdResponse
     */
    getTemplateById(templateId: string, request: GetTemplateByIdRequest): Promise<GetTemplateByIdResponse>;
    /**
     * @summary 查询知识库信息
     *
     * @param headers GetWorkspaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetWorkspaceResponse
     */
    getWorkspaceWithOptions(workspaceId: string, headers: GetWorkspaceHeaders, runtime: $Util.RuntimeOptions): Promise<GetWorkspaceResponse>;
    /**
     * @summary 查询知识库信息
     *
     * @return GetWorkspaceResponse
     */
    getWorkspace(workspaceId: string): Promise<GetWorkspaceResponse>;
    /**
     * @summary 查询知识库文档
     *
     * @param request GetWorkspaceNodeRequest
     * @param headers GetWorkspaceNodeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetWorkspaceNodeResponse
     */
    getWorkspaceNodeWithOptions(workspaceId: string, nodeId: string, request: GetWorkspaceNodeRequest, headers: GetWorkspaceNodeHeaders, runtime: $Util.RuntimeOptions): Promise<GetWorkspaceNodeResponse>;
    /**
     * @summary 查询知识库文档
     *
     * @param request GetWorkspaceNodeRequest
     * @return GetWorkspaceNodeResponse
     */
    getWorkspaceNode(workspaceId: string, nodeId: string, request: GetWorkspaceNodeRequest): Promise<GetWorkspaceNodeResponse>;
    /**
     * @summary 文档初始化
     *
     * @param request InitDocumentRequest
     * @param headers InitDocumentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InitDocumentResponse
     */
    initDocumentWithOptions(docId: string, request: InitDocumentRequest, headers: InitDocumentHeaders, runtime: $Util.RuntimeOptions): Promise<InitDocumentResponse>;
    /**
     * @summary 文档初始化
     *
     * @param request InitDocumentRequest
     * @return InitDocumentResponse
     */
    initDocument(docId: string, request: InitDocumentRequest): Promise<InitDocumentResponse>;
    /**
     * @summary 向文档内插入块级元素
     *
     * @param request InsertBlocksRequest
     * @param headers InsertBlocksHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InsertBlocksResponse
     */
    insertBlocksWithOptions(documentId: string, request: InsertBlocksRequest, headers: InsertBlocksHeaders, runtime: $Util.RuntimeOptions): Promise<InsertBlocksResponse>;
    /**
     * @summary 向文档内插入块级元素
     *
     * @param request InsertBlocksRequest
     * @return InsertBlocksResponse
     */
    insertBlocks(documentId: string, request: InsertBlocksRequest): Promise<InsertBlocksResponse>;
    /**
     * @summary 指定列左侧插入若干列
     *
     * @param request InsertColumnsBeforeRequest
     * @param headers InsertColumnsBeforeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InsertColumnsBeforeResponse
     */
    insertColumnsBeforeWithOptions(workbookId: string, sheetId: string, request: InsertColumnsBeforeRequest, headers: InsertColumnsBeforeHeaders, runtime: $Util.RuntimeOptions): Promise<InsertColumnsBeforeResponse>;
    /**
     * @summary 指定列左侧插入若干列
     *
     * @param request InsertColumnsBeforeRequest
     * @return InsertColumnsBeforeResponse
     */
    insertColumnsBefore(workbookId: string, sheetId: string, request: InsertColumnsBeforeRequest): Promise<InsertColumnsBeforeResponse>;
    /**
     * @summary 插入下拉列表
     *
     * @param request InsertDropdownListsRequest
     * @param headers InsertDropdownListsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InsertDropdownListsResponse
     */
    insertDropdownListsWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: InsertDropdownListsRequest, headers: InsertDropdownListsHeaders, runtime: $Util.RuntimeOptions): Promise<InsertDropdownListsResponse>;
    /**
     * @summary 插入下拉列表
     *
     * @param request InsertDropdownListsRequest
     * @return InsertDropdownListsResponse
     */
    insertDropdownLists(workbookId: string, sheetId: string, rangeAddress: string, request: InsertDropdownListsRequest): Promise<InsertDropdownListsResponse>;
    /**
     * @summary 指定行上方插入若干行
     *
     * @param request InsertRowsBeforeRequest
     * @param headers InsertRowsBeforeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InsertRowsBeforeResponse
     */
    insertRowsBeforeWithOptions(workbookId: string, sheetId: string, request: InsertRowsBeforeRequest, headers: InsertRowsBeforeHeaders, runtime: $Util.RuntimeOptions): Promise<InsertRowsBeforeResponse>;
    /**
     * @summary 指定行上方插入若干行
     *
     * @param request InsertRowsBeforeRequest
     * @return InsertRowsBeforeResponse
     */
    insertRowsBefore(workbookId: string, sheetId: string, request: InsertRowsBeforeRequest): Promise<InsertRowsBeforeResponse>;
    /**
     * @summary 查询文档模版
     *
     * @param request ListTemplateRequest
     * @param headers ListTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListTemplateResponse
     */
    listTemplateWithOptions(request: ListTemplateRequest, headers: ListTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<ListTemplateResponse>;
    /**
     * @summary 查询文档模版
     *
     * @param request ListTemplateRequest
     * @return ListTemplateResponse
     */
    listTemplate(request: ListTemplateRequest): Promise<ListTemplateResponse>;
    /**
     * @summary 合并单元格
     *
     * @param request MergeRangeRequest
     * @param headers MergeRangeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MergeRangeResponse
     */
    mergeRangeWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: MergeRangeRequest, headers: MergeRangeHeaders, runtime: $Util.RuntimeOptions): Promise<MergeRangeResponse>;
    /**
     * @summary 合并单元格
     *
     * @param request MergeRangeRequest
     * @return MergeRangeResponse
     */
    mergeRange(workbookId: string, sheetId: string, rangeAddress: string, request: MergeRangeRequest): Promise<MergeRangeResponse>;
    /**
     * @summary 查找下一个符合条件的单元格
     *
     * @param request RangeFindNextRequest
     * @param headers RangeFindNextHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RangeFindNextResponse
     */
    rangeFindNextWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: RangeFindNextRequest, headers: RangeFindNextHeaders, runtime: $Util.RuntimeOptions): Promise<RangeFindNextResponse>;
    /**
     * @summary 查找下一个符合条件的单元格
     *
     * @param request RangeFindNextRequest
     * @return RangeFindNextResponse
     */
    rangeFindNext(workbookId: string, sheetId: string, rangeAddress: string, request: RangeFindNextRequest): Promise<RangeFindNextResponse>;
    /**
     * @summary 搜索用户有权限的知识库文档
     *
     * @param request SearchWorkspaceDocsRequest
     * @param headers SearchWorkspaceDocsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchWorkspaceDocsResponse
     */
    searchWorkspaceDocsWithOptions(request: SearchWorkspaceDocsRequest, headers: SearchWorkspaceDocsHeaders, runtime: $Util.RuntimeOptions): Promise<SearchWorkspaceDocsResponse>;
    /**
     * @summary 搜索用户有权限的知识库文档
     *
     * @param request SearchWorkspaceDocsRequest
     * @return SearchWorkspaceDocsResponse
     */
    searchWorkspaceDocs(request: SearchWorkspaceDocsRequest): Promise<SearchWorkspaceDocsResponse>;
    /**
     * @summary 设置列宽
     *
     * @param request SetColumnWidthRequest
     * @param headers SetColumnWidthHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetColumnWidthResponse
     */
    setColumnWidthWithOptions(workbookId: string, sheetId: string, request: SetColumnWidthRequest, headers: SetColumnWidthHeaders, runtime: $Util.RuntimeOptions): Promise<SetColumnWidthResponse>;
    /**
     * @summary 设置列宽
     *
     * @param request SetColumnWidthRequest
     * @return SetColumnWidthResponse
     */
    setColumnWidth(workbookId: string, sheetId: string, request: SetColumnWidthRequest): Promise<SetColumnWidthResponse>;
    /**
     * @summary 设置列隐藏或显示
     *
     * @param request SetColumnsVisibilityRequest
     * @param headers SetColumnsVisibilityHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetColumnsVisibilityResponse
     */
    setColumnsVisibilityWithOptions(workbookId: string, sheetId: string, request: SetColumnsVisibilityRequest, headers: SetColumnsVisibilityHeaders, runtime: $Util.RuntimeOptions): Promise<SetColumnsVisibilityResponse>;
    /**
     * @summary 设置列隐藏或显示
     *
     * @param request SetColumnsVisibilityRequest
     * @return SetColumnsVisibilityResponse
     */
    setColumnsVisibility(workbookId: string, sheetId: string, request: SetColumnsVisibilityRequest): Promise<SetColumnsVisibilityResponse>;
    /**
     * @summary 设置行高
     *
     * @param request SetRowHeightRequest
     * @param headers SetRowHeightHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetRowHeightResponse
     */
    setRowHeightWithOptions(workbookId: string, sheetId: string, request: SetRowHeightRequest, headers: SetRowHeightHeaders, runtime: $Util.RuntimeOptions): Promise<SetRowHeightResponse>;
    /**
     * @summary 设置行高
     *
     * @param request SetRowHeightRequest
     * @return SetRowHeightResponse
     */
    setRowHeight(workbookId: string, sheetId: string, request: SetRowHeightRequest): Promise<SetRowHeightResponse>;
    /**
     * @summary 设置行隐藏或显示
     *
     * @param request SetRowsVisibilityRequest
     * @param headers SetRowsVisibilityHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SetRowsVisibilityResponse
     */
    setRowsVisibilityWithOptions(workbookId: string, sheetId: string, request: SetRowsVisibilityRequest, headers: SetRowsVisibilityHeaders, runtime: $Util.RuntimeOptions): Promise<SetRowsVisibilityResponse>;
    /**
     * @summary 设置行隐藏或显示
     *
     * @param request SetRowsVisibilityRequest
     * @return SetRowsVisibilityResponse
     */
    setRowsVisibility(workbookId: string, sheetId: string, request: SetRowsVisibilityRequest): Promise<SetRowsVisibilityResponse>;
    /**
     * @summary SheetAutofitRows
     *
     * @param request SheetAutofitRowsRequest
     * @param headers SheetAutofitRowsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SheetAutofitRowsResponse
     */
    sheetAutofitRowsWithOptions(workbookId: string, sheetId: string, request: SheetAutofitRowsRequest, headers: SheetAutofitRowsHeaders, runtime: $Util.RuntimeOptions): Promise<SheetAutofitRowsResponse>;
    /**
     * @summary SheetAutofitRows
     *
     * @param request SheetAutofitRowsRequest
     * @return SheetAutofitRowsResponse
     */
    sheetAutofitRows(workbookId: string, sheetId: string, request: SheetAutofitRowsRequest): Promise<SheetAutofitRowsResponse>;
    /**
     * @summary 工作表上查找所有符合条件的单元格
     *
     * @param request SheetFindAllRequest
     * @param headers SheetFindAllHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SheetFindAllResponse
     */
    sheetFindAllWithOptions(workbookId: string, sheetId: string, request: SheetFindAllRequest, headers: SheetFindAllHeaders, runtime: $Util.RuntimeOptions): Promise<SheetFindAllResponse>;
    /**
     * @summary 工作表上查找所有符合条件的单元格
     *
     * @param request SheetFindAllRequest
     * @return SheetFindAllResponse
     */
    sheetFindAll(workbookId: string, sheetId: string, request: SheetFindAllRequest): Promise<SheetFindAllResponse>;
    /**
     * @summary 取消文档酷应用和表格的关联
     *
     * @param request UnbindCoolAppToSheetRequest
     * @param headers UnbindCoolAppToSheetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnbindCoolAppToSheetResponse
     */
    unbindCoolAppToSheetWithOptions(workbookId: string, request: UnbindCoolAppToSheetRequest, headers: UnbindCoolAppToSheetHeaders, runtime: $Util.RuntimeOptions): Promise<UnbindCoolAppToSheetResponse>;
    /**
     * @summary 取消文档酷应用和表格的关联
     *
     * @param request UnbindCoolAppToSheetRequest
     * @return UnbindCoolAppToSheetResponse
     */
    unbindCoolAppToSheet(workbookId: string, request: UnbindCoolAppToSheetRequest): Promise<UnbindCoolAppToSheetResponse>;
    /**
     * @summary 更新单元格区域
     *
     * @param request UpdateRangeRequest
     * @param headers UpdateRangeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateRangeResponse
     */
    updateRangeWithOptions(workbookId: string, sheetId: string, rangeAddress: string, request: UpdateRangeRequest, headers: UpdateRangeHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRangeResponse>;
    /**
     * @summary 更新单元格区域
     *
     * @param request UpdateRangeRequest
     * @return UpdateRangeResponse
     */
    updateRange(workbookId: string, sheetId: string, rangeAddress: string, request: UpdateRangeRequest): Promise<UpdateRangeResponse>;
    /**
     * @summary 更新工作表
     *
     * @param request UpdateSheetRequest
     * @param headers UpdateSheetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateSheetResponse
     */
    updateSheetWithOptions(workbookId: string, sheetId: string, request: UpdateSheetRequest, headers: UpdateSheetHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateSheetResponse>;
    /**
     * @summary 更新工作表
     *
     * @param request UpdateSheetRequest
     * @return UpdateSheetResponse
     */
    updateSheet(workbookId: string, sheetId: string, request: UpdateSheetRequest): Promise<UpdateSheetResponse>;
    /**
     * @summary 修改知识库文档成员
     *
     * @param request UpdateWorkspaceDocMembersRequest
     * @param headers UpdateWorkspaceDocMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateWorkspaceDocMembersResponse
     */
    updateWorkspaceDocMembersWithOptions(workspaceId: string, nodeId: string, request: UpdateWorkspaceDocMembersRequest, headers: UpdateWorkspaceDocMembersHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateWorkspaceDocMembersResponse>;
    /**
     * @summary 修改知识库文档成员
     *
     * @param request UpdateWorkspaceDocMembersRequest
     * @return UpdateWorkspaceDocMembersResponse
     */
    updateWorkspaceDocMembers(workspaceId: string, nodeId: string, request: UpdateWorkspaceDocMembersRequest): Promise<UpdateWorkspaceDocMembersResponse>;
    /**
     * @summary 更新知识库成员
     *
     * @param request UpdateWorkspaceMembersRequest
     * @param headers UpdateWorkspaceMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateWorkspaceMembersResponse
     */
    updateWorkspaceMembersWithOptions(workspaceId: string, request: UpdateWorkspaceMembersRequest, headers: UpdateWorkspaceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateWorkspaceMembersResponse>;
    /**
     * @summary 更新知识库成员
     *
     * @param request UpdateWorkspaceMembersRequest
     * @return UpdateWorkspaceMembersResponse
     */
    updateWorkspaceMembers(workspaceId: string, request: UpdateWorkspaceMembersRequest): Promise<UpdateWorkspaceMembersResponse>;
}
