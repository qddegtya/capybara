/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class BusinessMatchHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BusinessMatchRequest extends $tea.Model {
    businessInfo?: string;
    corpName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BusinessMatchResponseBody extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BusinessMatchResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BusinessMatchResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BusinessMatchResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BusinessMatchResultRequest extends $tea.Model {
    taskId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BusinessMatchResultResponseBody extends $tea.Model {
    content?: string;
    isMatched?: boolean;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BusinessMatchResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BusinessMatchResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusAddRenterMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusAddRenterMemberRequest extends $tea.Model {
    extend?: string;
    mobile?: string;
    name?: string;
    renterId?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusAddRenterMemberResponseBody extends $tea.Model {
    unionId?: string;
    userId?: string;
    userState?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusAddRenterMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusAddRenterMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusRequest extends $tea.Model {
    address?: string;
    area?: number;
    belongProjectGroupId?: number;
    campusName?: string;
    capacity?: number;
    cityId?: number;
    country?: string;
    countyId?: number;
    creatorUnionId?: string;
    description?: string;
    extend?: string;
    location?: string;
    orderEndTime?: number;
    orderInfo?: string;
    orderStartTime?: number;
    provId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusResponseBody extends $tea.Model {
    campusCorpId?: string;
    campusDeptId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusCreateCampusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusGroupRequest extends $tea.Model {
    extend?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusGroupResponseBody extends $tea.Model {
    groupId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateCampusGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusCreateCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateRenterRequest extends $tea.Model {
    creditCode?: string;
    endTime?: number;
    extend?: string;
    name?: string;
    startTime?: number;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateRenterResponseBody extends $tea.Model {
    renterId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusCreateRenterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusCreateRenterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDelRenterMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDelRenterMemberRequest extends $tea.Model {
    renterId?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDelRenterMemberResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDelRenterMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusDelRenterMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteCampusGroupRequest extends $tea.Model {
    campusProjectGroupId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteCampusGroupResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteCampusGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusDeleteCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteRenterRequest extends $tea.Model {
    renterId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusDeleteRenterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusRequest extends $tea.Model {
    campusDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusResponseBody extends $tea.Model {
    address?: string;
    area?: number;
    belongProjectGroupId?: string;
    campusCorpId?: string;
    campusDeptId?: number;
    campusName?: string;
    capacity?: string;
    cityId?: number;
    country?: string;
    countyId?: number;
    description?: string;
    extend?: string;
    location?: string;
    orderEndTime?: number;
    orderInfo?: string;
    orderStartTime?: number;
    provId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusGetCampusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusGroupRequest extends $tea.Model {
    groupId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusGroupResponseBody extends $tea.Model {
    extend?: string;
    projectGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetCampusGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusGetCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterRequest extends $tea.Model {
    renterId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterResponseBody extends $tea.Model {
    bindRenterCorpId?: string;
    bindTime?: number;
    creditCode?: string;
    endTime?: number;
    extend?: string;
    name?: string;
    renterDeptId?: number;
    startTime?: number;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusGetRenterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterMemberRequest extends $tea.Model {
    renterId?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterMemberResponseBody extends $tea.Model {
    extend?: string;
    inviteState?: number;
    name?: string;
    state?: string;
    type?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusGetRenterMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusGetRenterMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusRequest extends $tea.Model {
    groupDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusResponseBody extends $tea.Model {
    result?: CampusListCampusResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusListCampusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusGroupResponseBody extends $tea.Model {
    result?: CampusListCampusGroupResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusListCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterResponseBody extends $tea.Model {
    result?: CampusListRenterResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusListRenterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersRequest extends $tea.Model {
    renterId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersResponseBody extends $tea.Model {
    result?: CampusListRenterMembersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusListRenterMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusRequest extends $tea.Model {
    address?: string;
    area?: number;
    belongProjectGroupId?: number;
    campusDeptId?: number;
    campusName?: string;
    capacity?: number;
    cityId?: number;
    country?: string;
    countyId?: number;
    description?: string;
    extend?: string;
    orderEndTime?: number;
    orderInfo?: number;
    orderStartTime?: number;
    provId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusUpdateCampusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusGroupRequest extends $tea.Model {
    campusProjectGroupId?: number;
    extend?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusGroupResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateCampusGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusUpdateCampusGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterRequest extends $tea.Model {
    creditCode?: string;
    endTime?: number;
    extend?: string;
    name?: string;
    renterId?: number;
    startTime?: number;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterResponseBody extends $tea.Model {
    renterId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusUpdateRenterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterMemberRequest extends $tea.Model {
    extend?: string;
    name?: string;
    renterId?: number;
    type?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterMemberResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusUpdateRenterMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CampusUpdateRenterMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatFormGetDataForApiAccessHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatFormGetDataForApiAccessRequest extends $tea.Model {
    dingTalkTraceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatFormGetDataForApiAccessResponseBody extends $tea.Model {
    data?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatFormGetDataForApiAccessResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatFormGetDataForApiAccessResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoAddGeneralFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoAddGeneralFileRequest extends $tea.Model {
    bizId?: string;
    datasetId?: number;
    downloadUrl?: string;
    fileDesc?: string;
    fileName?: string;
    tagList?: ChatMemoAddGeneralFileRequestTagList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoAddGeneralFileResponseBody extends $tea.Model {
    bizId?: string;
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoAddGeneralFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatMemoAddGeneralFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoDeleteGeneralFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoDeleteGeneralFileRequest extends $tea.Model {
    datasetId?: number;
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoDeleteGeneralFileResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoDeleteGeneralFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatMemoDeleteGeneralFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqAddHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqAddRequest extends $tea.Model {
    answer?: string;
    bizId?: string;
    datasetId?: number;
    question?: string;
    redirection?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqAddResponseBody extends $tea.Model {
    bizId?: string;
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqAddResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatMemoFaqAddResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqDeleteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqDeleteRequest extends $tea.Model {
    datasetId?: number;
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqDeleteResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqDeleteResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatMemoFaqDeleteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqListRequest extends $tea.Model {
    datasetId?: number;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqListResponseBody extends $tea.Model {
    data?: ChatMemoFaqListResponseBodyData[];
    pageNumber?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatMemoFaqListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoGetFileListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoGetFileListRequest extends $tea.Model {
    datasetId?: number;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoGetFileListResponseBody extends $tea.Model {
    data?: ChatMemoGetFileListResponseBodyData[];
    pageNumber?: number;
    pageSize?: number;
    total?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoGetFileListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatMemoGetFileListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoGetFileStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoGetFileStatusRequest extends $tea.Model {
    datasetId?: number;
    mediaId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoGetFileStatusResponseBody extends $tea.Model {
    status?: number;
    statusDesc?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoGetFileStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChatMemoGetFileStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeActiveCollegeDeptGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeActiveCollegeDeptGroupRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeActiveCollegeDeptGroupResponseBody extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeActiveCollegeDeptGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeActiveCollegeDeptGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddCollegeDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddCollegeDeptRequest extends $tea.Model {
    deptName?: string;
    deptType?: string;
    sortFactor?: number;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddCollegeDeptResponseBody extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddCollegeDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeAddCollegeDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddManagerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddManagerRequest extends $tea.Model {
    deptId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddManagerResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddManagerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeAddManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddStudentRequest extends $tea.Model {
    deptId?: number;
    empExtension?: {
        [key: string]: string;
    };
    gender?: string;
    identifyId?: string;
    mobile?: string;
    startYear?: string;
    studentName?: string;
    studentNumber?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddStudentResponseBody extends $tea.Model {
    dingMemberStatus?: string;
    isActive?: boolean;
    studentId?: number;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeAddStudentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeAddStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeChangeStudentDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeChangeStudentDeptRequest extends $tea.Model {
    deptId?: number;
    newDeptId?: number;
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeChangeStudentDeptResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeChangeStudentDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeChangeStudentDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeDeleteCollegeDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeDeleteCollegeDeptRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeDeleteCollegeDeptResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeDeleteCollegeDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeDeleteCollegeDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptResponseBody extends $tea.Model {
    collegeDeptInfoSimpleList?: CollegeListCollegeSubDeptResponseBodyCollegeDeptInfoSimpleList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeListCollegeSubDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerRequest extends $tea.Model {
    deptId?: number;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerResponseBody extends $tea.Model {
    managerInfoSimpleList?: CollegeListDeptManagerResponseBodyManagerInfoSimpleList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeListDeptManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoRequest extends $tea.Model {
    deptId?: number;
    dingStudentStatus?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoResponseBody extends $tea.Model {
    studentInfoSimpleList?: CollegeListStudentInfoResponseBodyStudentInfoSimpleList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeListStudentInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentRequest extends $tea.Model {
    deptId?: number;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentResponseBody extends $tea.Model {
    studentInfoSimpleList?: CollegeListUncheckedStudentResponseBodyStudentInfoSimpleList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeListUncheckedStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptGroupInfoRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptGroupInfoResponseBody extends $tea.Model {
    groupName?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptGroupInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeQueryCollegeDeptGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptInfoRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptInfoResponseBody extends $tea.Model {
    deptId?: number;
    deptName?: string;
    deptType?: string;
    sortFactor?: number;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryCollegeDeptInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeQueryCollegeDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByDeptRequest extends $tea.Model {
    deptId?: number;
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByDeptResponseBody extends $tea.Model {
    deptId?: number;
    dingMemberStatus?: string;
    empExtension?: {
        [key: string]: any;
    };
    gender?: string;
    identifyId?: string;
    isActive?: boolean;
    startYear?: string;
    studentId?: number;
    studentName?: string;
    studentNumber?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeQueryStudentInfoByDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileRequest extends $tea.Model {
    mobile?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileResponseBody extends $tea.Model {
    deptStudentInfoList?: CollegeQueryStudentInfoByMobileResponseBodyDeptStudentInfoList[];
    dingMemberStatus?: string;
    empExtension?: {
        [key: string]: any;
    };
    gender?: string;
    identifyId?: string;
    isActive?: boolean;
    startYear?: string;
    studentId?: number;
    studentName?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeQueryStudentInfoByMobileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdRequest extends $tea.Model {
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdResponseBody extends $tea.Model {
    deptStudentInfoList?: CollegeQueryStudentInfoByStudentIdResponseBodyDeptStudentInfoList[];
    dingMemberStatus?: string;
    empExtension?: {
        [key: string]: any;
    };
    gender?: string;
    identifyId?: string;
    isActive?: boolean;
    startYear?: string;
    studentId?: number;
    studentName?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeQueryStudentInfoByStudentIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveManagerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveManagerRequest extends $tea.Model {
    deptId?: number;
    isForce?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveManagerResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveManagerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeRemoveManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveStudentRequest extends $tea.Model {
    deptId?: number;
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveStudentResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeRemoveStudentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeRemoveStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateCollegeDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateCollegeDeptRequest extends $tea.Model {
    deptId?: number;
    deptName?: string;
    sortFactor?: number;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateCollegeDeptResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateCollegeDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeUpdateCollegeDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentDeptInfoRequest extends $tea.Model {
    deptId?: number;
    studentId?: number;
    studentNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentDeptInfoResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentDeptInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeUpdateStudentDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentInfoRequest extends $tea.Model {
    empExtension?: {
        [key: string]: string;
    };
    gender?: string;
    identifyId?: string;
    startYear?: string;
    studentId?: number;
    studentName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentInfoResponseBody extends $tea.Model {
    isSuccessful?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeUpdateStudentInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentMoblieHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentMoblieRequest extends $tea.Model {
    isForce?: boolean;
    newMobile?: string;
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentMoblieResponseBody extends $tea.Model {
    updateResult?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeUpdateStudentMoblieResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CollegeUpdateStudentMoblieResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateRequest extends $tea.Model {
    managerIdList?: string[];
    name?: string;
    order?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateResponseBody extends $tea.Model {
    content?: CustomizeContactCreateResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeleteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeleteRequest extends $tea.Model {
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeleteResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeleteResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactDeleteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptCreateRequest extends $tea.Model {
    code?: string;
    managerIdList?: string[];
    name?: string;
    order?: number;
    parentDeptId?: number;
    refId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptCreateResponseBody extends $tea.Model {
    content?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptCreateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactDeptCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptDeleteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptDeleteRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptDeleteResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptDeleteResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactDeptDeleteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptGroupCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptGroupCreateRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptGroupCreateResponseBody extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptGroupCreateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactDeptGroupCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoResponseBody extends $tea.Model {
    content?: CustomizeContactDeptInfoResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListResponseBody extends $tea.Model {
    content?: CustomizeContactDeptListResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactDeptListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptUpdateRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    managerIdList?: string[];
    name?: string;
    order?: number;
    parentDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptUpdateResponseBody extends $tea.Model {
    content?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactDeptUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpAddHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpAddRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpAddResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpAddResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactEmpAddResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpDeleteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpDeleteRequest extends $tea.Model {
    code?: string;
    deptId?: number;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpDeleteResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpDeleteResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactEmpDeleteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListResponseBody extends $tea.Model {
    content?: CustomizeContactEmpListResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactEmpListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactListResponseBody extends $tea.Model {
    content?: CustomizeContactListResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactUpdateRequest extends $tea.Model {
    code?: string;
    managerIdList?: string[];
    name?: string;
    order?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactUpdateResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CustomizeContactUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushRequest extends $tea.Model {
    messageDataList?: DIgitalStoreMessagePushRequestMessageDataList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushShrinkRequest extends $tea.Model {
    messageDataListShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushResponseBody extends $tea.Model {
    content?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DIgitalStoreMessagePushResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordRequest extends $tea.Model {
    beginTime?: number;
    endTime?: number;
    ids?: number[];
    pageNumber?: number;
    pageSize?: number;
    sceneCardName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordResponseBody extends $tea.Model {
    content?: DigitalStoreCardRecordResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreCardRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreContactInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreContactInfoResponseBody extends $tea.Model {
    code?: string;
    dingDeptId?: number;
    name?: string;
    rootDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreContactInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreContactInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsRequest extends $tea.Model {
    conversationTitle?: string;
    conversationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsResponseBody extends $tea.Model {
    content?: DigitalStoreConversationsResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreConversationsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordRequest extends $tea.Model {
    beginTime?: number;
    endTime?: number;
    ids?: number[];
    sceneCardName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordResponseBody extends $tea.Model {
    fileName?: string;
    fileType?: string;
    fileUrl?: string;
    id?: string;
    isImport?: string;
    remark?: string;
    status?: string;
    successNum?: string;
    totalNum?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreExportCardRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordDetailRequest extends $tea.Model {
    beginTime?: number;
    endTime?: number;
    ids?: number[];
    sceneCardName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordDetailResponseBody extends $tea.Model {
    fileName?: string;
    fileType?: string;
    fileUrl?: string;
    id?: string;
    isImport?: string;
    remark?: string;
    status?: string;
    successNum?: string;
    totalNum?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreExportCardRecordDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreExportCardRecordDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupInfoRequest extends $tea.Model {
    groupId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupInfoResponseBody extends $tea.Model {
    groupId?: number;
    groupName?: string;
    storeIdList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupsResponseBody extends $tea.Model {
    content?: DigitalStoreGroupsResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreNodeInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreNodeInfoRequest extends $tea.Model {
    code?: string;
    nodeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreNodeInfoResponseBody extends $tea.Model {
    dingDeptId?: number;
    id?: number;
    name?: string;
    parentId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreNodeInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreNodeInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRightsInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRightsInfoResponseBody extends $tea.Model {
    endTime?: number;
    quantity?: number;
    rightsCode?: string;
    rightsName?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRightsInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreRightsInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRolesResponseBody extends $tea.Model {
    content?: DigitalStoreRolesResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRolesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSceneScopeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSceneScopeRequest extends $tea.Model {
    openConversationId?: string;
    sceneCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSceneScopeResponseBody extends $tea.Model {
    groupConversationType?: string;
    scopeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSceneScopeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreSceneScopeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreStoreInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreStoreInfoRequest extends $tea.Model {
    code?: string;
    storeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreStoreInfoResponseBody extends $tea.Model {
    address?: string;
    businessHours?: string;
    dingDeptId?: number;
    latitude?: string;
    locationAddress?: string;
    longitude?: string;
    name?: string;
    parentId?: number;
    status?: string;
    storeAcreage?: string;
    storeBandwidth?: string;
    storeCode?: string;
    storeId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreStoreInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreStoreInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesRequest extends $tea.Model {
    code?: string;
    nodeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesResponseBody extends $tea.Model {
    content?: DigitalStoreSubNodesResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreSubNodesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoRequest extends $tea.Model {
    updateUserList?: DigitalStoreUpdateAuthInfoRequestUpdateUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreUpdateAuthInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUserInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUserInfoRequest extends $tea.Model {
    code?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUserInfoResponseBody extends $tea.Model {
    name?: string;
    roleIdList?: number[];
    scopeList?: number[];
    storeList?: number[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUserInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersRequest extends $tea.Model {
    code?: string;
    nodeId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersResponseBody extends $tea.Model {
    content?: DigitalStoreUsersResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStoreUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordResponseBody extends $tea.Model {
    content?: DigitalStorelistExportTaskRecordResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DigitalStorelistExportTaskRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsRequest extends $tea.Model {
    externalType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsResponseBody extends $tea.Model {
    result?: ExternalQueryExternalAppOrgsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExternalQueryExternalAppOrgsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalBelongMainOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalBelongMainOrgRequest extends $tea.Model {
    externalType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalBelongMainOrgResponseBody extends $tea.Model {
    corpId?: string;
    corpName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalBelongMainOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExternalQueryExternalBelongMainOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsRequest extends $tea.Model {
    externalType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsResponseBody extends $tea.Model {
    result?: ExternalQueryExternalOrgsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExternalQueryExternalOrgsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HospitalDataCheckHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HospitalDataCheckRequest extends $tea.Model {
    allDeptCount?: number;
    allDeptUserCount?: number;
    allGroupCount?: number;
    allGroupUserCount?: number;
    deptCount?: number;
    deptUserCount?: number;
    groupCount?: number;
    groupUserCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HospitalDataCheckResponseBody extends $tea.Model {
    allDeptCount?: number;
    allDeptUserCount?: number;
    allGroupCount?: number;
    allGroupUserCount?: number;
    deptCount?: number;
    deptUserCount?: number;
    groupCount?: number;
    groupUserCount?: number;
    match?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class HospitalDataCheckResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: HospitalDataCheckResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    bizData?: {
        [key: string]: any;
    };
    eventType?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventResponseBody extends $tea.Model {
    errorMsg?: string;
    requestId?: string;
    result?: IndustryManufactureCommonEventResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureCommonEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    cursor?: number;
    endTime?: number;
    instanceId?: string;
    isvOrgId?: number;
    materialNo?: string;
    microappAgentId?: number;
    orderNo?: string;
    orgId?: number;
    pageNumber?: number;
    pageSize?: number;
    productionTaskNo?: string;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryManufactureCostRecordListGetResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureCostRecordListGetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    cursor?: number;
    endTime?: number;
    isvOrgId?: number;
    materialNo?: string;
    microappAgentId?: number;
    orgId?: number;
    pageNumber?: number;
    pageSize?: number;
    productionTaskNo?: string;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryManufactureFeeListGetResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureFeeListGetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    cursor?: number;
    endTime?: number;
    isvOrgId?: string;
    materialNo?: string;
    microappAgentId?: number;
    orgId?: number;
    pageNumber?: number;
    pageSize?: number;
    processNo?: string;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryManufactureLabourCostResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureLabourCostResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    currentPage?: number;
    cursor?: number;
    endTime?: number;
    instanceId?: string;
    isvOrgId?: number;
    materialNo?: string;
    microappAgentId?: number;
    orgId?: number;
    pageSize?: number;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryManufactureMaterialListResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureMaterialListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    defectsAmount?: string;
    dispatchStaffName?: string;
    dispatchStaffNo?: string;
    fineAmount?: string;
    overdue?: number;
    planQuantity?: number;
    priority?: number;
    processName?: string;
    processUuid?: string;
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    projectCode?: string;
    projectId?: string;
    projectStatus?: string;
    taskOperators?: string;
    taskPlanEndTime?: string;
    taskPlanStartTime?: string;
    taskStatus?: string;
    taskType?: string;
    teamId?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskResponseBody extends $tea.Model {
    result?: IndustryManufactureMesDispatchTaskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureMesDispatchTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    category?: string;
    extendData?: IndustryManufactureMesMaterialRequestExtendData[];
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    prop?: string;
    unit?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialResponseBody extends $tea.Model {
    result?: IndustryManufactureMesMaterialResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureMesMaterialResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanRequest extends $tea.Model {
    approvalStatus?: string;
    approver?: string;
    baseDataName?: string;
    outSourceProjectCode?: string;
    outSourceTeamId?: string;
    price?: string;
    processIdentificationCode?: string;
    processUuids?: string;
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    projectCode?: string;
    projectId?: string;
    sendPlanQuantity?: string;
    supplierCode?: string;
    supplierName?: string;
    totalWage?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanResponseBody extends $tea.Model {
    result?: IndustryManufactureMesOutPlanResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureMesOutPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    approveStatus?: string;
    baseDataName?: string;
    defectsAmount?: string;
    defectsReason?: string;
    fineAmount?: string;
    hasQualityTest?: string;
    overdue?: number;
    planQuantity?: number;
    priority?: number;
    processName?: string;
    processUuid?: string;
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    projectCode?: string;
    projectId?: string;
    projectStatus?: string;
    qualityTestStatus?: string;
    taskPlanEndTime?: string;
    taskPlanStartTime?: string;
    taskStatus?: string;
    taskType?: string;
    taskUuid?: string;
    teamId?: string;
    userId?: string;
    userName?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputResponseBody extends $tea.Model {
    result?: IndustryManufactureMesOutputResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureMesOutputResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    extendData?: IndustryManufactureMesProcessRequestExtendData[];
    name?: string;
    needDispatch?: string;
    needQualityTest?: string;
    no?: string;
    price?: string;
    prop?: string;
    remark?: string;
    sop?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessResponseBody extends $tea.Model {
    result?: IndustryManufactureMesProcessResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureMesProcessResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanRequest extends $tea.Model {
    action?: string;
    actualEndTime?: string;
    actualStartTime?: string;
    appKey?: string;
    baseDataName?: string;
    bomUuid?: string;
    events?: string[];
    extendData?: IndustryManufactureMesProductionPlanRequestExtendData[];
    no?: string;
    overdue?: string;
    planEndTime?: string;
    planQuantity?: string;
    planStartTime?: string;
    processUuids?: string;
    productCode?: string;
    productName?: string;
    productSpecification?: string;
    qualifiedQuantity?: string;
    sellOrderNo?: string;
    status?: string;
    teamList?: string;
    title?: string;
    type?: string;
    unit?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanResponseBody extends $tea.Model {
    result?: IndustryManufactureMesProductionPlanResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureMesProductionPlanResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    events?: string[];
    extendData?: IndustryManufactureMesSubCooperationTeamRequestExtendData[];
    groupPlugins?: IndustryManufactureMesSubCooperationTeamRequestGroupPlugins[];
    groupType?: string;
    leaders?: IndustryManufactureMesSubCooperationTeamRequestLeaders[];
    members?: IndustryManufactureMesSubCooperationTeamRequestMembers[];
    name?: string;
    outCorpId?: string;
    processIds?: string[];
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamResponseBody extends $tea.Model {
    result?: IndustryManufactureMesSubCooperationTeamResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureMesSubCooperationTeamResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequest extends $tea.Model {
    action?: string;
    appKey?: string;
    baseDataName?: string;
    events?: string[];
    extendData?: IndustryManufactureMesTeamMgmtRequestExtendData[];
    groupConfig?: {
        [key: string]: any;
    };
    groupPlugins?: IndustryManufactureMesTeamMgmtRequestGroupPlugins[];
    groupType?: string;
    id?: string;
    leaders?: IndustryManufactureMesTeamMgmtRequestLeaders[];
    members?: IndustryManufactureMesTeamMgmtRequestMembers[];
    name?: string;
    processIds?: string[];
    tagKey?: string;
    tagValues?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtResponseBody extends $tea.Model {
    dingOpenErrcode?: number;
    errorMsg?: string;
    result?: IndustryManufactureMesTeamMgmtResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryManufactureMesTeamMgmtResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetRequest extends $tea.Model {
    appId?: number;
    appIds?: number[];
    appName?: string;
    corpId?: string;
    cursor?: number;
    endTime?: number;
    instanceId?: string;
    isvOrgId?: number;
    materialNo?: string;
    microappAgentId?: number;
    orgId?: number;
    pageNumber?: number;
    pageSize?: number;
    startTime?: number;
    suiteKey?: string;
    tokenGrantType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: IndustryMmanufactureMaterialCostGetResponseBodyList[];
    nextCursor?: number;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IndustryMmanufactureMaterialCostGetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushDingMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushDingMessageRequest extends $tea.Model {
    appId?: number;
    content?: string;
    messageType?: string;
    messageUrl?: string;
    pictureUrl?: string;
    singleTitle?: string;
    singleUrl?: string;
    title?: string;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushDingMessageResponseBody extends $tea.Model {
    content?: number;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushDingMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushDingMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBody extends $tea.Model {
    content?: QueryAllDepartmentResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllDepartmentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsRequest extends $tea.Model {
    monthMark?: string;
    pageNum?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsResponseBody extends $tea.Model {
    content?: QueryAllDoctorsResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllDoctorsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupResponseBody extends $tea.Model {
    content?: QueryAllGroupResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptResponseBody extends $tea.Model {
    content?: QueryAllGroupsInDeptResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllGroupsInDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptRequest extends $tea.Model {
    monthMark?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptResponseBody extends $tea.Model {
    content?: QueryAllMemberByDeptResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllMemberByDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupRequest extends $tea.Model {
    monthMark?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupResponseBody extends $tea.Model {
    content?: QueryAllMemberByGroupResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllMemberByGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogResponseBody extends $tea.Model {
    content?: QueryBizOptLogResponseBodyContent[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryBizOptLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoRequest extends $tea.Model {
    deptCode?: number;
    propCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoResponseBody extends $tea.Model {
    content?: QueryDepartmentExtendInfoResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDepartmentExtendInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponseBody extends $tea.Model {
    content?: QueryDepartmentInfoResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDepartmentInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberRequest extends $tea.Model {
    monthMark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBody extends $tea.Model {
    content?: QueryDoctorDetailsByJobNumberResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDoctorDetailsByJobNumberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBody extends $tea.Model {
    content?: QueryGroupInfoResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoResponseBody extends $tea.Model {
    content?: QueryHospitalDistrictInfoResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryHospitalDistrictInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoResponseBody extends $tea.Model {
    content?: QueryHospitalRoleUserInfoResponseBodyContent[];
    currentPage?: number;
    totalCount?: number;
    totalPages?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryHospitalRoleUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRolesResponseBody extends $tea.Model {
    content?: QueryHospitalRolesResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRolesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryHospitalRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobCodeDictionaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobCodeDictionaryResponseBody extends $tea.Model {
    content?: QueryJobCodeDictionaryResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobCodeDictionaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryJobCodeDictionaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatusCodeDictionaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatusCodeDictionaryResponseBody extends $tea.Model {
    content?: QueryJobStatusCodeDictionaryResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatusCodeDictionaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryJobStatusCodeDictionaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMedicalEventsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMedicalEventsResponseBody extends $tea.Model {
    content?: QueryMedicalEventsResponseBodyContent[];
    success?: boolean;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMedicalEventsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMedicalEventsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsRequest extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsResponseBody extends $tea.Model {
    content?: QueryUserCredentialsResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserCredentialsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtInfoResponseBody extends $tea.Model {
    content?: QueryUserExtInfoResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserExtInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesRequest extends $tea.Model {
    userExtendKey?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesResponseBody extends $tea.Model {
    content?: QueryUserExtendValuesResponseBodyContent[];
    success?: boolean;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserExtendValuesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoRequest extends $tea.Model {
    monthMark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBody extends $tea.Model {
    content?: QueryUserInfoResponseBodyContent;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserProbCodeDictionaryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserProbCodeDictionaryResponseBody extends $tea.Model {
    content?: QueryUserProbCodeDictionaryResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserProbCodeDictionaryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserProbCodeDictionaryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRolesResponseBody extends $tea.Model {
    content?: QueryUserRolesResponseBodyContent[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRolesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserExtendValuesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserExtendValuesRequest extends $tea.Model {
    userDisplayName?: string;
    userExtendKey?: string;
    userExtendValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserExtendValuesResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveUserExtendValuesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveUserExtendValuesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplAddRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplAddRoleRequest extends $tea.Model {
    parentRoleGroupId?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplAddRoleResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplAddRoleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplAddRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptRequest extends $tea.Model {
    deptName?: string;
    partnerNumber?: string;
    superDeptId?: number;
    supplyDeptType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptResponseBody extends $tea.Model {
    result?: SupplyAddDeptResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyAddDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberRequest extends $tea.Model {
    isPartnerManager?: boolean;
    memberMobile?: string;
    memberName?: string;
    memberTitle?: string;
    memberWorkNumber?: string;
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberResponseBody extends $tea.Model {
    result?: SupplyAddMemberResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyAddMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerAdminsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerAdminsRequest extends $tea.Model {
    deptId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerAdminsResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerAdminsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyAddPartnerAdminsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerManagersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerManagersRequest extends $tea.Model {
    deptId?: number;
    interfaceId?: string;
    interfaceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerManagersResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerManagersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyAddPartnerManagersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerTypeRequest extends $tea.Model {
    name?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerTypeResponseBody extends $tea.Model {
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddPartnerTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyAddPartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainDeleteDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainDeleteDeptRequest extends $tea.Model {
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainDeleteDeptResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainDeleteDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyChainDeleteDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoRequest extends $tea.Model {
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoResponseBody extends $tea.Model {
    result?: SupplyChainQueryDeptInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyChainQueryDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainUpdateDeptInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainUpdateDeptInfoRequest extends $tea.Model {
    name?: string;
    partnerNumber?: string;
    partnerTypeList?: number[];
    superId?: number;
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainUpdateDeptInfoResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainUpdateDeptInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyChainUpdateDeptInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteMemberRequest extends $tea.Model {
    deptId?: number;
    mobile?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteMemberResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyDeleteMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerAdminsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerAdminsRequest extends $tea.Model {
    deptId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerAdminsResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerAdminsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyDeletePartnerAdminsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerManagersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerManagersRequest extends $tea.Model {
    deptId?: number;
    interfaceId?: string;
    interfaceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerManagersResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerManagersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyDeletePartnerManagersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerTypeRequest extends $tea.Model {
    labelId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerTypeResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeletePartnerTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyDeletePartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteRoleRequest extends $tea.Model {
    isRoleGroup?: boolean;
    roleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteRoleResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyDeleteRoleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyDeleteRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberRequest extends $tea.Model {
    mobile?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberResponseBody extends $tea.Model {
    result?: SupplyGetMemberResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyGetMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: SupplyListDeptMembersResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyListDeptMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsResponseBody extends $tea.Model {
    result?: SupplyListPartnerAdminsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyListPartnerAdminsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersRequest extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersResponseBody extends $tea.Model {
    result?: SupplyListPartnerManagersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyListPartnerManagersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeRequest extends $tea.Model {
    labelId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeResponseBody extends $tea.Model {
    result?: SupplyListPartnerTypeResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyListPartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleRequest extends $tea.Model {
    parentRoleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleResponseBody extends $tea.Model {
    result?: SupplyListRoleResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyListRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptRequest extends $tea.Model {
    supplyDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptResponseBody extends $tea.Model {
    result?: SupplyListSubDeptResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyListSubDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeRequest extends $tea.Model {
    labelId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeResponseBody extends $tea.Model {
    result?: SupplyQueryPartnerTypeResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyQueryPartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateMemberRequest extends $tea.Model {
    isCopyDept?: boolean;
    memberTitle?: string;
    memberWorkNumber?: string;
    mobile?: string;
    newDeptId?: number;
    oldDeptId?: number;
    roleIdList?: string[];
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateMemberResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyUpdateMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdatePartnerTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdatePartnerTypeRequest extends $tea.Model {
    labelId?: number;
    name?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdatePartnerTypeResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdatePartnerTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyUpdatePartnerTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateRoleRequest extends $tea.Model {
    isRoleGroup?: boolean;
    roleId?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateRoleResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyUpdateRoleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SupplyUpdateRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserExtendInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserExtendInfoRequest extends $tea.Model {
    comments?: string;
    jobCode?: string;
    jobStatusCode?: string[];
    userProbCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUserExtendInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusResponseBodyResult extends $tea.Model {
    address?: string;
    area?: number;
    belongProjectGroupId?: number;
    campusCorpId?: string;
    campusDeptId?: number;
    campusName?: string;
    cityId?: number;
    country?: string;
    countyId?: number;
    description?: string;
    extend?: string;
    location?: string;
    orderEndTime?: number;
    orderInfo?: string;
    orderStartTime?: number;
    provId?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListCampusGroupResponseBodyResult extends $tea.Model {
    extend?: string;
    groupDeptId?: number;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterResponseBodyResult extends $tea.Model {
    bindRenterCorpId?: string;
    bindTime?: number;
    creditCode?: string;
    endTime?: number;
    extend?: string;
    name?: string;
    renterDeptId?: number;
    startTime?: number;
    state?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CampusListRenterMembersResponseBodyResult extends $tea.Model {
    extend?: string;
    inviteState?: string;
    name?: string;
    state?: string;
    type?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoAddGeneralFileRequestTagList extends $tea.Model {
    tagName?: string;
    tagValueList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoFaqListResponseBodyData extends $tea.Model {
    answer?: string;
    bizId?: string;
    mediaId?: string;
    question?: string;
    redirection?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChatMemoGetFileListResponseBodyData extends $tea.Model {
    bizId?: string;
    fileDesc?: string;
    fileName?: string;
    mediaId?: string;
    tagMap?: {
        [key: string]: string[];
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListCollegeSubDeptResponseBodyCollegeDeptInfoSimpleList extends $tea.Model {
    deptId?: number;
    deptName?: string;
    deptType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListDeptManagerResponseBodyManagerInfoSimpleList extends $tea.Model {
    isActive?: boolean;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListStudentInfoResponseBodyStudentInfoSimpleList extends $tea.Model {
    dingMemberStatus?: string;
    isActive?: boolean;
    studentId?: number;
    studentName?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeListUncheckedStudentResponseBodyStudentInfoSimpleList extends $tea.Model {
    dingMemberStatus?: string;
    isActive?: boolean;
    studentId?: number;
    studentName?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByMobileResponseBodyDeptStudentInfoList extends $tea.Model {
    deptId?: number;
    memberType?: string;
    studentNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CollegeQueryStudentInfoByStudentIdResponseBodyDeptStudentInfoList extends $tea.Model {
    deptId?: number;
    memberType?: string;
    studentNumber?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactCreateResponseBodyContent extends $tea.Model {
    code?: string;
    name?: string;
    order?: number;
    rootDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptInfoResponseBodyContent extends $tea.Model {
    code?: string;
    id?: number;
    managerIdList?: string[];
    name?: string;
    order?: number;
    parentDeptId?: number;
    refId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactDeptListResponseBodyContent extends $tea.Model {
    code?: string;
    id?: number;
    managerIdList?: string[];
    name?: string;
    order?: number;
    parentDeptId?: number;
    refId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactEmpListResponseBodyContent extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CustomizeContactListResponseBodyContent extends $tea.Model {
    code?: string;
    name?: string;
    order?: number;
    rootDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DIgitalStoreMessagePushRequestMessageDataList extends $tea.Model {
    callbackKey?: string;
    content?: string;
    newCard?: boolean;
    outTraceId?: string;
    sceneCardCode?: string;
    sceneScope?: number;
    sendNow?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordResponseBodyContentDetailList extends $tea.Model {
    deptName?: string;
    readStatusStr?: string;
    readTime?: number;
    roleName?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreCardRecordResponseBodyContent extends $tea.Model {
    conversationTitle?: string;
    detailList?: DigitalStoreCardRecordResponseBodyContentDetailList[];
    id?: number;
    memberNum?: number;
    readNum?: number;
    readPercent?: string;
    receiveNum?: number;
    sceneCardName?: string;
    sendStatus?: string;
    sendTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreConversationsResponseBodyContent extends $tea.Model {
    conversationTitle?: string;
    conversationType?: string;
    id?: number;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreGroupsResponseBodyContent extends $tea.Model {
    groupId?: number;
    groupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreRolesResponseBodyContent extends $tea.Model {
    level?: number;
    roleCode?: string;
    roleId?: number;
    roleName?: string;
    source?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreSubNodesResponseBodyContent extends $tea.Model {
    dingDeptId?: number;
    id?: number;
    name?: string;
    parentId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoRequestUpdateUserListRoleList extends $tea.Model {
    roleName?: string;
    sourceRoleId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoRequestUpdateUserListUserAuthList extends $tea.Model {
    dingDeptId?: string;
    sourceDeptId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUpdateAuthInfoRequestUpdateUserList extends $tea.Model {
    roleList?: DigitalStoreUpdateAuthInfoRequestUpdateUserListRoleList[];
    userAuthList?: DigitalStoreUpdateAuthInfoRequestUpdateUserListUserAuthList[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStoreUsersResponseBodyContent extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DigitalStorelistExportTaskRecordResponseBodyContent extends $tea.Model {
    fileName?: string;
    fileType?: string;
    fileUrl?: string;
    id?: string;
    isImport?: string;
    remark?: string;
    status?: string;
    successNum?: string;
    totalNum?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalAppOrgsResponseBodyResult extends $tea.Model {
    corpId?: string;
    corpName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExternalQueryExternalOrgsResponseBodyResult extends $tea.Model {
    corpId?: string;
    corpName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCommonEventResponseBodyResult extends $tea.Model {
    content?: string;
    httpCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureCostRecordListGetResponseBodyList extends $tea.Model {
    corpId?: string;
    count?: number;
    ext?: string;
    gmtCreate?: number;
    gmtModified?: number;
    instanceId?: string;
    isDeleted?: string;
    materialCostRecordNo?: string;
    materialName?: string;
    materialNo?: string;
    memo?: string;
    orderNo?: string;
    price?: number;
    processCode?: string;
    productionTaskNo?: string;
    realCount?: number;
    realPrice?: number;
    type?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureFeeListGetResponseBodyList extends $tea.Model {
    amount?: string;
    corpId?: string;
    count?: number;
    ext?: string;
    gmtCreate?: number;
    gmtModified?: number;
    id?: number;
    instanceId?: string;
    isDeleted?: string;
    materialName?: string;
    materialNo?: string;
    perAmount?: number;
    processCode?: string;
    productionTaskNo?: string;
    title?: string;
    type?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureLabourCostResponseBodyList extends $tea.Model {
    corpId?: string;
    ext?: string;
    gmtCreate?: number;
    gmtModified?: number;
    instanceId?: string;
    labourCostName?: string;
    labourCostNo?: string;
    materialName?: string;
    materialNo?: string;
    processCode?: string;
    processName?: string;
    processNo?: string;
    qualifiedPrice?: number;
    unQualifiedInfo?: string;
    unQualifiedPrice1?: number;
    unQualifiedPrice2?: number;
    unQualifiedReason1?: string;
    unQualifiedReason2?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMaterialListResponseBodyList extends $tea.Model {
    category?: string;
    corpId?: string;
    ext?: string;
    instanceId?: string;
    materialName?: string;
    materialNo?: string;
    processCode?: string;
    specification?: string;
    stockMaxWarn?: number;
    stockMinWarn?: number;
    type?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesDispatchTaskResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesMaterialResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutPlanResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesOutputResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProcessResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesProductionPlanResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequestGroupPlugins extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequestLeaders extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamRequestMembers extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesSubCooperationTeamResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequestExtendData extends $tea.Model {
    code?: string;
    name?: string;
    value?: string;
    valueType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequestGroupPlugins extends $tea.Model {
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequestLeaders extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtRequestMembers extends $tea.Model {
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryManufactureMesTeamMgmtResponseBodyResult extends $tea.Model {
    content?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IndustryMmanufactureMaterialCostGetResponseBodyList extends $tea.Model {
    actPrice?: number;
    corpId?: string;
    count?: number;
    ext?: string;
    gmtCreate?: number;
    gmtModified?: number;
    instanceId?: string;
    materialCostNo?: string;
    materialName?: string;
    materialNo?: string;
    memo?: string;
    price?: number;
    processCode?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentDeptAndExtDepartment extends $tea.Model {
    deptCode?: string;
    deptName?: string;
    deptOrder?: number;
    deptStatus?: number;
    deptType?: number;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    name?: string;
    parentDeptCode?: string;
    remark?: string;
    wardIdList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentDeptAndExt extends $tea.Model {
    department?: QueryAllDepartmentResponseBodyContentDeptAndExtDepartment;
    extendInfos?: QueryAllDepartmentResponseBodyContentDeptAndExtExtendInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader extends $tea.Model {
    jobNumber?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentGroupAndExtListGroup extends $tea.Model {
    deptId?: number;
    deptStatus?: number;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    leader?: QueryAllDepartmentResponseBodyContentGroupAndExtListGroupLeader;
    name?: string;
    parentDeptCode?: string;
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContentGroupAndExtList extends $tea.Model {
    extendInfos?: QueryAllDepartmentResponseBodyContentGroupAndExtListExtendInfos[];
    group?: QueryAllDepartmentResponseBodyContentGroupAndExtListGroup;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDepartmentResponseBodyContent extends $tea.Model {
    deptAndExt?: QueryAllDepartmentResponseBodyContentDeptAndExt;
    groupAndExtList?: QueryAllDepartmentResponseBodyContentGroupAndExtList[];
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllDoctorsResponseBodyContent extends $tea.Model {
    assessGroupId?: string;
    assessGroupName?: string;
    deptCode?: string;
    deptType?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    jobNum?: string;
    status?: number;
    uid?: string;
    userCode?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupResponseBodyContent extends $tea.Model {
    deptId?: number;
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllGroupsInDeptResponseBodyContent extends $tea.Model {
    deptId?: number;
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByDeptResponseBodyContent extends $tea.Model {
    jobNum?: string;
    uid?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllMemberByGroupResponseBodyContent extends $tea.Model {
    jobNum?: string;
    uid?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBizOptLogResponseBodyContent extends $tea.Model {
    bizType?: number;
    dataType?: number;
    id?: number;
    optAfterData?: string;
    optBeforeData?: string;
    optBizType?: number;
    optExtend?: string;
    optJobNumber?: string;
    optObjectCode?: string;
    optObjectName?: string;
    optObjectUserJobNo?: string;
    optSuccess?: number;
    optTime?: number;
    optType?: number;
    optUserCode?: string;
    optUserName?: string;
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentExtendInfoResponseBodyContent extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponseBodyContentDepartment extends $tea.Model {
    deptCode?: string;
    deptName?: string;
    deptOrder?: number;
    deptStatus?: number;
    deptType?: number;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    name?: string;
    parentDeptCode?: string;
    remark?: string;
    wardIdList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponseBodyContentExtendInfos extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDepartmentInfoResponseBodyContent extends $tea.Model {
    department?: QueryDepartmentInfoResponseBodyContentDepartment;
    extendInfos?: QueryDepartmentInfoResponseBodyContentExtendInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentDeptList extends $tea.Model {
    categoryName?: string;
    deptId?: number;
    deptName?: string;
    gmtCreate?: string;
    gmtModified?: string;
    relationId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentGroupList extends $tea.Model {
    deptId?: number;
    deptName?: string;
    groupId?: number;
    groupName?: string;
    isAssessGroup?: string;
    isLeader?: boolean;
    relationId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentJobStatus extends $tea.Model {
    code?: string;
    statusName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentProfessionalTitle extends $tea.Model {
    code?: string;
    professionalTitleCategory?: string;
    professionalTitleDetail?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContentUserProbList extends $tea.Model {
    code?: string;
    userPropertyName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDoctorDetailsByJobNumberResponseBodyContent extends $tea.Model {
    deptList?: QueryDoctorDetailsByJobNumberResponseBodyContentDeptList[];
    groupList?: QueryDoctorDetailsByJobNumberResponseBodyContentGroupList[];
    jobNumber?: string;
    jobStatus?: QueryDoctorDetailsByJobNumberResponseBodyContentJobStatus[];
    professionalTitle?: QueryDoctorDetailsByJobNumberResponseBodyContentProfessionalTitle;
    userId?: string;
    userName?: string;
    userProbList?: QueryDoctorDetailsByJobNumberResponseBodyContentUserProbList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBodyContentExtendInfos extends $tea.Model {
    deptCode?: string;
    deptExtendDisplayName?: string;
    deptExtendKey?: string;
    deptExtendValue?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBodyContentGroupLeader extends $tea.Model {
    jobNumber?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBodyContentGroup extends $tea.Model {
    deptId?: number;
    deptStatus?: number;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    leader?: QueryGroupInfoResponseBodyContentGroupLeader;
    name?: string;
    parentDeptCode?: string;
    remark?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupInfoResponseBodyContent extends $tea.Model {
    extendInfos?: QueryGroupInfoResponseBodyContentExtendInfos[];
    group?: QueryGroupInfoResponseBodyContentGroup;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalDistrictInfoResponseBodyContent extends $tea.Model {
    address?: string;
    deleted?: number;
    districtName?: string;
    districtType?: number;
    gmtCreate?: string;
    gmtModified?: string;
    id?: number;
    parentDistrictId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRoleUserInfoResponseBodyContent extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    jobNumber?: string;
    roleCode?: string;
    roleName?: string;
    status?: number;
    userCode?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHospitalRolesResponseBodyContent extends $tea.Model {
    gmtCreate?: string;
    id?: number;
    isDeleted?: number;
    readOnly?: number;
    remark?: string;
    roleCode?: string;
    roleName?: string;
    sort?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobCodeDictionaryResponseBodyContent extends $tea.Model {
    category?: string;
    code?: string;
    displayName?: string;
    doctorType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryJobStatusCodeDictionaryResponseBodyContent extends $tea.Model {
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMedicalEventsResponseBodyContent extends $tea.Model {
    code?: string;
    content?: string;
    eventId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsResponseBodyContentCredentialList extends $tea.Model {
    credentialName?: string;
    credentialType?: number;
    termOfValidity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserCredentialsResponseBodyContent extends $tea.Model {
    credentialList?: QueryUserCredentialsResponseBodyContentCredentialList[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtInfoResponseBodyContent extends $tea.Model {
    gmtCreate?: string;
    gmtModified?: string;
    status?: number;
    userCode?: string;
    userExtendDisplayName?: string;
    userExtendKey?: string;
    userExtendValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserExtendValuesResponseBodyContent extends $tea.Model {
    userCode?: string;
    userExtendDisplayName?: string;
    userExtendKey?: string;
    userExtendValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentDept extends $tea.Model {
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    name?: string;
    relId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentGroup extends $tea.Model {
    deptId?: number;
    deptName?: string;
    gmtCreateStr?: string;
    gmtModifiedStr?: string;
    id?: number;
    name?: string;
    relId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentJob extends $tea.Model {
    bizType?: string;
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentJobStatus extends $tea.Model {
    bizType?: string;
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentJobStatusList extends $tea.Model {
    bizType?: string;
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContentUserProb extends $tea.Model {
    bizType?: string;
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserInfoResponseBodyContent extends $tea.Model {
    comments?: string;
    dept?: QueryUserInfoResponseBodyContentDept[];
    group?: QueryUserInfoResponseBodyContentGroup[];
    job?: QueryUserInfoResponseBodyContentJob;
    jobNum?: string;
    jobStatus?: QueryUserInfoResponseBodyContentJobStatus;
    jobStatusList?: QueryUserInfoResponseBodyContentJobStatusList[];
    uid?: string;
    userName?: string;
    userProb?: QueryUserInfoResponseBodyContentUserProb;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserProbCodeDictionaryResponseBodyContent extends $tea.Model {
    category?: string;
    code?: string;
    displayName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRolesResponseBodyContent extends $tea.Model {
    roleCode?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddDeptResponseBodyResult extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyAddMemberResponseBodyResult extends $tea.Model {
    dingMemberStatus?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoResponseBodyResultPartnerTypeInfoList extends $tea.Model {
    id?: number;
    name?: string;
    superId?: number;
    superName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyChainQueryDeptInfoResponseBodyResult extends $tea.Model {
    deptId?: number;
    deptType?: string;
    hasSubDept?: boolean;
    name?: string;
    partnerNumber?: string;
    partnerTypeInfoList?: SupplyChainQueryDeptInfoResponseBodyResultPartnerTypeInfoList[];
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberResponseBodyResultRoleInfoList extends $tea.Model {
    roleId?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyGetMemberResponseBodyResult extends $tea.Model {
    deptIdList?: number[];
    dingMemberStatus?: string;
    isActive?: boolean;
    memberName?: string;
    memberTitle?: string;
    memberWorkNumber?: string;
    roleInfoList?: SupplyGetMemberResponseBodyResultRoleInfoList[];
    supplyNodeList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListDeptMembersResponseBodyList extends $tea.Model {
    dingMemberStatus?: string;
    isActive?: boolean;
    memberName?: string;
    memberTitle?: string;
    memberWorkNumber?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerAdminsResponseBodyResult extends $tea.Model {
    name?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerManagersResponseBodyResult extends $tea.Model {
    deptId?: string;
    deptName?: string;
    interfaceType?: string;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListPartnerTypeResponseBodyResult extends $tea.Model {
    labelId?: number;
    name?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListRoleResponseBodyResult extends $tea.Model {
    isRoleGroup?: boolean;
    roleId?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptResponseBodyResultPartnerTypeInfoList extends $tea.Model {
    id?: number;
    name?: string;
    superId?: number;
    superName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyListSubDeptResponseBodyResult extends $tea.Model {
    deptId?: number;
    deptType?: string;
    hasSubDept?: boolean;
    name?: string;
    partnerNumber?: string;
    partnerTypeInfoList?: SupplyListSubDeptResponseBodyResultPartnerTypeInfoList[];
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SupplyQueryPartnerTypeResponseBodyResult extends $tea.Model {
    labelId?: number;
    name?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 商机匹配
     *
     * @param request BusinessMatchRequest
     * @param headers BusinessMatchHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BusinessMatchResponse
     */
    businessMatchWithOptions(request: BusinessMatchRequest, headers: BusinessMatchHeaders, runtime: $Util.RuntimeOptions): Promise<BusinessMatchResponse>;
    /**
     * @summary 商机匹配
     *
     * @param request BusinessMatchRequest
     * @return BusinessMatchResponse
     */
    businessMatch(request: BusinessMatchRequest): Promise<BusinessMatchResponse>;
    /**
     * @summary 商机匹配结果查询
     *
     * @param request BusinessMatchResultRequest
     * @param headers BusinessMatchResultHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BusinessMatchResultResponse
     */
    businessMatchResultWithOptions(request: BusinessMatchResultRequest, headers: BusinessMatchResultHeaders, runtime: $Util.RuntimeOptions): Promise<BusinessMatchResultResponse>;
    /**
     * @summary 商机匹配结果查询
     *
     * @param request BusinessMatchResultRequest
     * @return BusinessMatchResultResponse
     */
    businessMatchResult(request: BusinessMatchResultRequest): Promise<BusinessMatchResultResponse>;
    /**
     * @summary 添加租客下成员
     *
     * @param request CampusAddRenterMemberRequest
     * @param headers CampusAddRenterMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusAddRenterMemberResponse
     */
    campusAddRenterMemberWithOptions(request: CampusAddRenterMemberRequest, headers: CampusAddRenterMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CampusAddRenterMemberResponse>;
    /**
     * @summary 添加租客下成员
     *
     * @param request CampusAddRenterMemberRequest
     * @return CampusAddRenterMemberResponse
     */
    campusAddRenterMember(request: CampusAddRenterMemberRequest): Promise<CampusAddRenterMemberResponse>;
    /**
     * @summary 创建园区
     *
     * @param request CampusCreateCampusRequest
     * @param headers CampusCreateCampusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusCreateCampusResponse
     */
    campusCreateCampusWithOptions(request: CampusCreateCampusRequest, headers: CampusCreateCampusHeaders, runtime: $Util.RuntimeOptions): Promise<CampusCreateCampusResponse>;
    /**
     * @summary 创建园区
     *
     * @param request CampusCreateCampusRequest
     * @return CampusCreateCampusResponse
     */
    campusCreateCampus(request: CampusCreateCampusRequest): Promise<CampusCreateCampusResponse>;
    /**
     * @summary 创建园区项目组
     *
     * @param request CampusCreateCampusGroupRequest
     * @param headers CampusCreateCampusGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusCreateCampusGroupResponse
     */
    campusCreateCampusGroupWithOptions(request: CampusCreateCampusGroupRequest, headers: CampusCreateCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusCreateCampusGroupResponse>;
    /**
     * @summary 创建园区项目组
     *
     * @param request CampusCreateCampusGroupRequest
     * @return CampusCreateCampusGroupResponse
     */
    campusCreateCampusGroup(request: CampusCreateCampusGroupRequest): Promise<CampusCreateCampusGroupResponse>;
    /**
     * @summary 创建租客
     *
     * @param request CampusCreateRenterRequest
     * @param headers CampusCreateRenterHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusCreateRenterResponse
     */
    campusCreateRenterWithOptions(request: CampusCreateRenterRequest, headers: CampusCreateRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusCreateRenterResponse>;
    /**
     * @summary 创建租客
     *
     * @param request CampusCreateRenterRequest
     * @return CampusCreateRenterResponse
     */
    campusCreateRenter(request: CampusCreateRenterRequest): Promise<CampusCreateRenterResponse>;
    /**
     * @summary 移除租客人员
     *
     * @param request CampusDelRenterMemberRequest
     * @param headers CampusDelRenterMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusDelRenterMemberResponse
     */
    campusDelRenterMemberWithOptions(request: CampusDelRenterMemberRequest, headers: CampusDelRenterMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CampusDelRenterMemberResponse>;
    /**
     * @summary 移除租客人员
     *
     * @param request CampusDelRenterMemberRequest
     * @return CampusDelRenterMemberResponse
     */
    campusDelRenterMember(request: CampusDelRenterMemberRequest): Promise<CampusDelRenterMemberResponse>;
    /**
     * @summary 删除园区项目组
     *
     * @param request CampusDeleteCampusGroupRequest
     * @param headers CampusDeleteCampusGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusDeleteCampusGroupResponse
     */
    campusDeleteCampusGroupWithOptions(request: CampusDeleteCampusGroupRequest, headers: CampusDeleteCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusDeleteCampusGroupResponse>;
    /**
     * @summary 删除园区项目组
     *
     * @param request CampusDeleteCampusGroupRequest
     * @return CampusDeleteCampusGroupResponse
     */
    campusDeleteCampusGroup(request: CampusDeleteCampusGroupRequest): Promise<CampusDeleteCampusGroupResponse>;
    /**
     * @summary 删除租客
     *
     * @param request CampusDeleteRenterRequest
     * @param headers CampusDeleteRenterHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusDeleteRenterResponse
     */
    campusDeleteRenterWithOptions(request: CampusDeleteRenterRequest, headers: CampusDeleteRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusDeleteRenterResponse>;
    /**
     * @summary 删除租客
     *
     * @param request CampusDeleteRenterRequest
     * @return CampusDeleteRenterResponse
     */
    campusDeleteRenter(request: CampusDeleteRenterRequest): Promise<CampusDeleteRenterResponse>;
    /**
     * @summary 查询园区详情
     *
     * @param request CampusGetCampusRequest
     * @param headers CampusGetCampusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusGetCampusResponse
     */
    campusGetCampusWithOptions(request: CampusGetCampusRequest, headers: CampusGetCampusHeaders, runtime: $Util.RuntimeOptions): Promise<CampusGetCampusResponse>;
    /**
     * @summary 查询园区详情
     *
     * @param request CampusGetCampusRequest
     * @return CampusGetCampusResponse
     */
    campusGetCampus(request: CampusGetCampusRequest): Promise<CampusGetCampusResponse>;
    /**
     * @summary 查询园区项目组详情
     *
     * @param request CampusGetCampusGroupRequest
     * @param headers CampusGetCampusGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusGetCampusGroupResponse
     */
    campusGetCampusGroupWithOptions(request: CampusGetCampusGroupRequest, headers: CampusGetCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusGetCampusGroupResponse>;
    /**
     * @summary 查询园区项目组详情
     *
     * @param request CampusGetCampusGroupRequest
     * @return CampusGetCampusGroupResponse
     */
    campusGetCampusGroup(request: CampusGetCampusGroupRequest): Promise<CampusGetCampusGroupResponse>;
    /**
     * @summary 获取租客详情
     *
     * @param request CampusGetRenterRequest
     * @param headers CampusGetRenterHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusGetRenterResponse
     */
    campusGetRenterWithOptions(request: CampusGetRenterRequest, headers: CampusGetRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusGetRenterResponse>;
    /**
     * @summary 获取租客详情
     *
     * @param request CampusGetRenterRequest
     * @return CampusGetRenterResponse
     */
    campusGetRenter(request: CampusGetRenterRequest): Promise<CampusGetRenterResponse>;
    /**
     * @summary 查询租客指定成员信息
     *
     * @param request CampusGetRenterMemberRequest
     * @param headers CampusGetRenterMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusGetRenterMemberResponse
     */
    campusGetRenterMemberWithOptions(request: CampusGetRenterMemberRequest, headers: CampusGetRenterMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CampusGetRenterMemberResponse>;
    /**
     * @summary 查询租客指定成员信息
     *
     * @param request CampusGetRenterMemberRequest
     * @return CampusGetRenterMemberResponse
     */
    campusGetRenterMember(request: CampusGetRenterMemberRequest): Promise<CampusGetRenterMemberResponse>;
    /**
     * @summary 查询园区列表
     *
     * @param request CampusListCampusRequest
     * @param headers CampusListCampusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusListCampusResponse
     */
    campusListCampusWithOptions(request: CampusListCampusRequest, headers: CampusListCampusHeaders, runtime: $Util.RuntimeOptions): Promise<CampusListCampusResponse>;
    /**
     * @summary 查询园区列表
     *
     * @param request CampusListCampusRequest
     * @return CampusListCampusResponse
     */
    campusListCampus(request: CampusListCampusRequest): Promise<CampusListCampusResponse>;
    /**
     * @summary 查询园区项目组列表
     *
     * @param headers CampusListCampusGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusListCampusGroupResponse
     */
    campusListCampusGroupWithOptions(headers: CampusListCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusListCampusGroupResponse>;
    /**
     * @summary 查询园区项目组列表
     *
     * @return CampusListCampusGroupResponse
     */
    campusListCampusGroup(): Promise<CampusListCampusGroupResponse>;
    /**
     * @summary 获取租客列表
     *
     * @param headers CampusListRenterHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusListRenterResponse
     */
    campusListRenterWithOptions(headers: CampusListRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusListRenterResponse>;
    /**
     * @summary 获取租客列表
     *
     * @return CampusListRenterResponse
     */
    campusListRenter(): Promise<CampusListRenterResponse>;
    /**
     * @summary 查询租客下所有成员
     *
     * @param request CampusListRenterMembersRequest
     * @param headers CampusListRenterMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusListRenterMembersResponse
     */
    campusListRenterMembersWithOptions(request: CampusListRenterMembersRequest, headers: CampusListRenterMembersHeaders, runtime: $Util.RuntimeOptions): Promise<CampusListRenterMembersResponse>;
    /**
     * @summary 查询租客下所有成员
     *
     * @param request CampusListRenterMembersRequest
     * @return CampusListRenterMembersResponse
     */
    campusListRenterMembers(request: CampusListRenterMembersRequest): Promise<CampusListRenterMembersResponse>;
    /**
     * @summary 更新园区项目
     *
     * @param request CampusUpdateCampusRequest
     * @param headers CampusUpdateCampusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusUpdateCampusResponse
     */
    campusUpdateCampusWithOptions(request: CampusUpdateCampusRequest, headers: CampusUpdateCampusHeaders, runtime: $Util.RuntimeOptions): Promise<CampusUpdateCampusResponse>;
    /**
     * @summary 更新园区项目
     *
     * @param request CampusUpdateCampusRequest
     * @return CampusUpdateCampusResponse
     */
    campusUpdateCampus(request: CampusUpdateCampusRequest): Promise<CampusUpdateCampusResponse>;
    /**
     * @summary 更新园区项目组
     *
     * @param request CampusUpdateCampusGroupRequest
     * @param headers CampusUpdateCampusGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusUpdateCampusGroupResponse
     */
    campusUpdateCampusGroupWithOptions(request: CampusUpdateCampusGroupRequest, headers: CampusUpdateCampusGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CampusUpdateCampusGroupResponse>;
    /**
     * @summary 更新园区项目组
     *
     * @param request CampusUpdateCampusGroupRequest
     * @return CampusUpdateCampusGroupResponse
     */
    campusUpdateCampusGroup(request: CampusUpdateCampusGroupRequest): Promise<CampusUpdateCampusGroupResponse>;
    /**
     * @summary 更新租客
     *
     * @param request CampusUpdateRenterRequest
     * @param headers CampusUpdateRenterHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusUpdateRenterResponse
     */
    campusUpdateRenterWithOptions(request: CampusUpdateRenterRequest, headers: CampusUpdateRenterHeaders, runtime: $Util.RuntimeOptions): Promise<CampusUpdateRenterResponse>;
    /**
     * @summary 更新租客
     *
     * @param request CampusUpdateRenterRequest
     * @return CampusUpdateRenterResponse
     */
    campusUpdateRenter(request: CampusUpdateRenterRequest): Promise<CampusUpdateRenterResponse>;
    /**
     * @summary 更新租客下成员
     *
     * @param request CampusUpdateRenterMemberRequest
     * @param headers CampusUpdateRenterMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CampusUpdateRenterMemberResponse
     */
    campusUpdateRenterMemberWithOptions(request: CampusUpdateRenterMemberRequest, headers: CampusUpdateRenterMemberHeaders, runtime: $Util.RuntimeOptions): Promise<CampusUpdateRenterMemberResponse>;
    /**
     * @summary 更新租客下成员
     *
     * @param request CampusUpdateRenterMemberRequest
     * @return CampusUpdateRenterMemberResponse
     */
    campusUpdateRenterMember(request: CampusUpdateRenterMemberRequest): Promise<CampusUpdateRenterMemberResponse>;
    /**
     * @summary ChatForm查询表单识别结果
     *
     * @param request ChatFormGetDataForApiAccessRequest
     * @param headers ChatFormGetDataForApiAccessHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatFormGetDataForApiAccessResponse
     */
    chatFormGetDataForApiAccessWithOptions(request: ChatFormGetDataForApiAccessRequest, headers: ChatFormGetDataForApiAccessHeaders, runtime: $Util.RuntimeOptions): Promise<ChatFormGetDataForApiAccessResponse>;
    /**
     * @summary ChatForm查询表单识别结果
     *
     * @param request ChatFormGetDataForApiAccessRequest
     * @return ChatFormGetDataForApiAccessResponse
     */
    chatFormGetDataForApiAccess(request: ChatFormGetDataForApiAccessRequest): Promise<ChatFormGetDataForApiAccessResponse>;
    /**
     * @summary 新增普通文件
     *
     * @param request ChatMemoAddGeneralFileRequest
     * @param headers ChatMemoAddGeneralFileHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatMemoAddGeneralFileResponse
     */
    chatMemoAddGeneralFileWithOptions(request: ChatMemoAddGeneralFileRequest, headers: ChatMemoAddGeneralFileHeaders, runtime: $Util.RuntimeOptions): Promise<ChatMemoAddGeneralFileResponse>;
    /**
     * @summary 新增普通文件
     *
     * @param request ChatMemoAddGeneralFileRequest
     * @return ChatMemoAddGeneralFileResponse
     */
    chatMemoAddGeneralFile(request: ChatMemoAddGeneralFileRequest): Promise<ChatMemoAddGeneralFileResponse>;
    /**
     * @summary 删除普通文件
     *
     * @param request ChatMemoDeleteGeneralFileRequest
     * @param headers ChatMemoDeleteGeneralFileHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatMemoDeleteGeneralFileResponse
     */
    chatMemoDeleteGeneralFileWithOptions(request: ChatMemoDeleteGeneralFileRequest, headers: ChatMemoDeleteGeneralFileHeaders, runtime: $Util.RuntimeOptions): Promise<ChatMemoDeleteGeneralFileResponse>;
    /**
     * @summary 删除普通文件
     *
     * @param request ChatMemoDeleteGeneralFileRequest
     * @return ChatMemoDeleteGeneralFileResponse
     */
    chatMemoDeleteGeneralFile(request: ChatMemoDeleteGeneralFileRequest): Promise<ChatMemoDeleteGeneralFileResponse>;
    /**
     * @summary 新增 FAQ
     *
     * @param request ChatMemoFaqAddRequest
     * @param headers ChatMemoFaqAddHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatMemoFaqAddResponse
     */
    chatMemoFaqAddWithOptions(request: ChatMemoFaqAddRequest, headers: ChatMemoFaqAddHeaders, runtime: $Util.RuntimeOptions): Promise<ChatMemoFaqAddResponse>;
    /**
     * @summary 新增 FAQ
     *
     * @param request ChatMemoFaqAddRequest
     * @return ChatMemoFaqAddResponse
     */
    chatMemoFaqAdd(request: ChatMemoFaqAddRequest): Promise<ChatMemoFaqAddResponse>;
    /**
     * @summary 删除指定数据集中的FAQ
     *
     * @param request ChatMemoFaqDeleteRequest
     * @param headers ChatMemoFaqDeleteHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatMemoFaqDeleteResponse
     */
    chatMemoFaqDeleteWithOptions(request: ChatMemoFaqDeleteRequest, headers: ChatMemoFaqDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<ChatMemoFaqDeleteResponse>;
    /**
     * @summary 删除指定数据集中的FAQ
     *
     * @param request ChatMemoFaqDeleteRequest
     * @return ChatMemoFaqDeleteResponse
     */
    chatMemoFaqDelete(request: ChatMemoFaqDeleteRequest): Promise<ChatMemoFaqDeleteResponse>;
    /**
     * @summary 查询指定数据集中的FAQ列表
     *
     * @param request ChatMemoFaqListRequest
     * @param headers ChatMemoFaqListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatMemoFaqListResponse
     */
    chatMemoFaqListWithOptions(request: ChatMemoFaqListRequest, headers: ChatMemoFaqListHeaders, runtime: $Util.RuntimeOptions): Promise<ChatMemoFaqListResponse>;
    /**
     * @summary 查询指定数据集中的FAQ列表
     *
     * @param request ChatMemoFaqListRequest
     * @return ChatMemoFaqListResponse
     */
    chatMemoFaqList(request: ChatMemoFaqListRequest): Promise<ChatMemoFaqListResponse>;
    /**
     * @summary 查询指定数据集中的文件列表
     *
     * @param request ChatMemoGetFileListRequest
     * @param headers ChatMemoGetFileListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatMemoGetFileListResponse
     */
    chatMemoGetFileListWithOptions(request: ChatMemoGetFileListRequest, headers: ChatMemoGetFileListHeaders, runtime: $Util.RuntimeOptions): Promise<ChatMemoGetFileListResponse>;
    /**
     * @summary 查询指定数据集中的文件列表
     *
     * @param request ChatMemoGetFileListRequest
     * @return ChatMemoGetFileListResponse
     */
    chatMemoGetFileList(request: ChatMemoGetFileListRequest): Promise<ChatMemoGetFileListResponse>;
    /**
     * @summary 获取文件状态
     *
     * @param request ChatMemoGetFileStatusRequest
     * @param headers ChatMemoGetFileStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChatMemoGetFileStatusResponse
     */
    chatMemoGetFileStatusWithOptions(request: ChatMemoGetFileStatusRequest, headers: ChatMemoGetFileStatusHeaders, runtime: $Util.RuntimeOptions): Promise<ChatMemoGetFileStatusResponse>;
    /**
     * @summary 获取文件状态
     *
     * @param request ChatMemoGetFileStatusRequest
     * @return ChatMemoGetFileStatusResponse
     */
    chatMemoGetFileStatus(request: ChatMemoGetFileStatusRequest): Promise<ChatMemoGetFileStatusResponse>;
    /**
     * @summary 开启学段/学院/年级/专业\系/班级群
     *
     * @param request CollegeActiveCollegeDeptGroupRequest
     * @param headers CollegeActiveCollegeDeptGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeActiveCollegeDeptGroupResponse
     */
    collegeActiveCollegeDeptGroupWithOptions(request: CollegeActiveCollegeDeptGroupRequest, headers: CollegeActiveCollegeDeptGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeActiveCollegeDeptGroupResponse>;
    /**
     * @summary 开启学段/学院/年级/专业\系/班级群
     *
     * @param request CollegeActiveCollegeDeptGroupRequest
     * @return CollegeActiveCollegeDeptGroupResponse
     */
    collegeActiveCollegeDeptGroup(request: CollegeActiveCollegeDeptGroupRequest): Promise<CollegeActiveCollegeDeptGroupResponse>;
    /**
     * @summary 创建学段/学院/年级/专业\系/班级
     *
     * @param request CollegeAddCollegeDeptRequest
     * @param headers CollegeAddCollegeDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeAddCollegeDeptResponse
     */
    collegeAddCollegeDeptWithOptions(request: CollegeAddCollegeDeptRequest, headers: CollegeAddCollegeDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeAddCollegeDeptResponse>;
    /**
     * @summary 创建学段/学院/年级/专业\系/班级
     *
     * @param request CollegeAddCollegeDeptRequest
     * @return CollegeAddCollegeDeptResponse
     */
    collegeAddCollegeDept(request: CollegeAddCollegeDeptRequest): Promise<CollegeAddCollegeDeptResponse>;
    /**
     * @summary 往部门中添加负责人
     *
     * @param request CollegeAddManagerRequest
     * @param headers CollegeAddManagerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeAddManagerResponse
     */
    collegeAddManagerWithOptions(request: CollegeAddManagerRequest, headers: CollegeAddManagerHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeAddManagerResponse>;
    /**
     * @summary 往部门中添加负责人
     *
     * @param request CollegeAddManagerRequest
     * @return CollegeAddManagerResponse
     */
    collegeAddManager(request: CollegeAddManagerRequest): Promise<CollegeAddManagerResponse>;
    /**
     * @summary 在班级中添加人员
     *
     * @param request CollegeAddStudentRequest
     * @param headers CollegeAddStudentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeAddStudentResponse
     */
    collegeAddStudentWithOptions(request: CollegeAddStudentRequest, headers: CollegeAddStudentHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeAddStudentResponse>;
    /**
     * @summary 在班级中添加人员
     *
     * @param request CollegeAddStudentRequest
     * @return CollegeAddStudentResponse
     */
    collegeAddStudent(request: CollegeAddStudentRequest): Promise<CollegeAddStudentResponse>;
    /**
     * @summary 移动学生到其他部门
     *
     * @param request CollegeChangeStudentDeptRequest
     * @param headers CollegeChangeStudentDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeChangeStudentDeptResponse
     */
    collegeChangeStudentDeptWithOptions(request: CollegeChangeStudentDeptRequest, headers: CollegeChangeStudentDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeChangeStudentDeptResponse>;
    /**
     * @summary 移动学生到其他部门
     *
     * @param request CollegeChangeStudentDeptRequest
     * @return CollegeChangeStudentDeptResponse
     */
    collegeChangeStudentDept(request: CollegeChangeStudentDeptRequest): Promise<CollegeChangeStudentDeptResponse>;
    /**
     * @summary 删除学段/学院/年级/专业\系/班级
     *
     * @param request CollegeDeleteCollegeDeptRequest
     * @param headers CollegeDeleteCollegeDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeDeleteCollegeDeptResponse
     */
    collegeDeleteCollegeDeptWithOptions(request: CollegeDeleteCollegeDeptRequest, headers: CollegeDeleteCollegeDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeDeleteCollegeDeptResponse>;
    /**
     * @summary 删除学段/学院/年级/专业\系/班级
     *
     * @param request CollegeDeleteCollegeDeptRequest
     * @return CollegeDeleteCollegeDeptResponse
     */
    collegeDeleteCollegeDept(request: CollegeDeleteCollegeDeptRequest): Promise<CollegeDeleteCollegeDeptResponse>;
    /**
     * @summary 获取下级节点列表
     *
     * @param request CollegeListCollegeSubDeptRequest
     * @param headers CollegeListCollegeSubDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeListCollegeSubDeptResponse
     */
    collegeListCollegeSubDeptWithOptions(request: CollegeListCollegeSubDeptRequest, headers: CollegeListCollegeSubDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeListCollegeSubDeptResponse>;
    /**
     * @summary 获取下级节点列表
     *
     * @param request CollegeListCollegeSubDeptRequest
     * @return CollegeListCollegeSubDeptResponse
     */
    collegeListCollegeSubDept(request: CollegeListCollegeSubDeptRequest): Promise<CollegeListCollegeSubDeptResponse>;
    /**
     * @summary 获取部门下所有负责人列表
     *
     * @param request CollegeListDeptManagerRequest
     * @param headers CollegeListDeptManagerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeListDeptManagerResponse
     */
    collegeListDeptManagerWithOptions(request: CollegeListDeptManagerRequest, headers: CollegeListDeptManagerHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeListDeptManagerResponse>;
    /**
     * @summary 获取部门下所有负责人列表
     *
     * @param request CollegeListDeptManagerRequest
     * @return CollegeListDeptManagerResponse
     */
    collegeListDeptManager(request: CollegeListDeptManagerRequest): Promise<CollegeListDeptManagerResponse>;
    /**
     * @summary 分页获取班级下所有学生列表
     *
     * @param request CollegeListStudentInfoRequest
     * @param headers CollegeListStudentInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeListStudentInfoResponse
     */
    collegeListStudentInfoWithOptions(request: CollegeListStudentInfoRequest, headers: CollegeListStudentInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeListStudentInfoResponse>;
    /**
     * @summary 分页获取班级下所有学生列表
     *
     * @param request CollegeListStudentInfoRequest
     * @return CollegeListStudentInfoResponse
     */
    collegeListStudentInfo(request: CollegeListStudentInfoRequest): Promise<CollegeListStudentInfoResponse>;
    /**
     * @summary 分页查询未加入组织的学生列表
     *
     * @param request CollegeListUncheckedStudentRequest
     * @param headers CollegeListUncheckedStudentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeListUncheckedStudentResponse
     */
    collegeListUncheckedStudentWithOptions(request: CollegeListUncheckedStudentRequest, headers: CollegeListUncheckedStudentHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeListUncheckedStudentResponse>;
    /**
     * @summary 分页查询未加入组织的学生列表
     *
     * @param request CollegeListUncheckedStudentRequest
     * @return CollegeListUncheckedStudentResponse
     */
    collegeListUncheckedStudent(request: CollegeListUncheckedStudentRequest): Promise<CollegeListUncheckedStudentResponse>;
    /**
     * @summary 获取学段/学院/年级/专业\系/班级群群信息
     *
     * @param request CollegeQueryCollegeDeptGroupInfoRequest
     * @param headers CollegeQueryCollegeDeptGroupInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeQueryCollegeDeptGroupInfoResponse
     */
    collegeQueryCollegeDeptGroupInfoWithOptions(request: CollegeQueryCollegeDeptGroupInfoRequest, headers: CollegeQueryCollegeDeptGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryCollegeDeptGroupInfoResponse>;
    /**
     * @summary 获取学段/学院/年级/专业\系/班级群群信息
     *
     * @param request CollegeQueryCollegeDeptGroupInfoRequest
     * @return CollegeQueryCollegeDeptGroupInfoResponse
     */
    collegeQueryCollegeDeptGroupInfo(request: CollegeQueryCollegeDeptGroupInfoRequest): Promise<CollegeQueryCollegeDeptGroupInfoResponse>;
    /**
     * @summary 获取学段/学院/年级/专业\系/班级信息
     *
     * @param request CollegeQueryCollegeDeptInfoRequest
     * @param headers CollegeQueryCollegeDeptInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeQueryCollegeDeptInfoResponse
     */
    collegeQueryCollegeDeptInfoWithOptions(request: CollegeQueryCollegeDeptInfoRequest, headers: CollegeQueryCollegeDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryCollegeDeptInfoResponse>;
    /**
     * @summary 获取学段/学院/年级/专业\系/班级信息
     *
     * @param request CollegeQueryCollegeDeptInfoRequest
     * @return CollegeQueryCollegeDeptInfoResponse
     */
    collegeQueryCollegeDeptInfo(request: CollegeQueryCollegeDeptInfoRequest): Promise<CollegeQueryCollegeDeptInfoResponse>;
    /**
     * @summary 获取指定部门下指定学生的信息
     *
     * @param request CollegeQueryStudentInfoByDeptRequest
     * @param headers CollegeQueryStudentInfoByDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeQueryStudentInfoByDeptResponse
     */
    collegeQueryStudentInfoByDeptWithOptions(request: CollegeQueryStudentInfoByDeptRequest, headers: CollegeQueryStudentInfoByDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryStudentInfoByDeptResponse>;
    /**
     * @summary 获取指定部门下指定学生的信息
     *
     * @param request CollegeQueryStudentInfoByDeptRequest
     * @return CollegeQueryStudentInfoByDeptResponse
     */
    collegeQueryStudentInfoByDept(request: CollegeQueryStudentInfoByDeptRequest): Promise<CollegeQueryStudentInfoByDeptResponse>;
    /**
     * @summary 根据手机号查询学生信息
     *
     * @param request CollegeQueryStudentInfoByMobileRequest
     * @param headers CollegeQueryStudentInfoByMobileHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeQueryStudentInfoByMobileResponse
     */
    collegeQueryStudentInfoByMobileWithOptions(request: CollegeQueryStudentInfoByMobileRequest, headers: CollegeQueryStudentInfoByMobileHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryStudentInfoByMobileResponse>;
    /**
     * @summary 根据手机号查询学生信息
     *
     * @param request CollegeQueryStudentInfoByMobileRequest
     * @return CollegeQueryStudentInfoByMobileResponse
     */
    collegeQueryStudentInfoByMobile(request: CollegeQueryStudentInfoByMobileRequest): Promise<CollegeQueryStudentInfoByMobileResponse>;
    /**
     * @summary 根据studentId查询学生信息
     *
     * @param request CollegeQueryStudentInfoByStudentIdRequest
     * @param headers CollegeQueryStudentInfoByStudentIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeQueryStudentInfoByStudentIdResponse
     */
    collegeQueryStudentInfoByStudentIdWithOptions(request: CollegeQueryStudentInfoByStudentIdRequest, headers: CollegeQueryStudentInfoByStudentIdHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeQueryStudentInfoByStudentIdResponse>;
    /**
     * @summary 根据studentId查询学生信息
     *
     * @param request CollegeQueryStudentInfoByStudentIdRequest
     * @return CollegeQueryStudentInfoByStudentIdResponse
     */
    collegeQueryStudentInfoByStudentId(request: CollegeQueryStudentInfoByStudentIdRequest): Promise<CollegeQueryStudentInfoByStudentIdResponse>;
    /**
     * @summary 从部门中移除负责人
     *
     * @param request CollegeRemoveManagerRequest
     * @param headers CollegeRemoveManagerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeRemoveManagerResponse
     */
    collegeRemoveManagerWithOptions(request: CollegeRemoveManagerRequest, headers: CollegeRemoveManagerHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeRemoveManagerResponse>;
    /**
     * @summary 从部门中移除负责人
     *
     * @param request CollegeRemoveManagerRequest
     * @return CollegeRemoveManagerResponse
     */
    collegeRemoveManager(request: CollegeRemoveManagerRequest): Promise<CollegeRemoveManagerResponse>;
    /**
     * @summary 从部门中移除学生
     *
     * @param request CollegeRemoveStudentRequest
     * @param headers CollegeRemoveStudentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeRemoveStudentResponse
     */
    collegeRemoveStudentWithOptions(request: CollegeRemoveStudentRequest, headers: CollegeRemoveStudentHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeRemoveStudentResponse>;
    /**
     * @summary 从部门中移除学生
     *
     * @param request CollegeRemoveStudentRequest
     * @return CollegeRemoveStudentResponse
     */
    collegeRemoveStudent(request: CollegeRemoveStudentRequest): Promise<CollegeRemoveStudentResponse>;
    /**
     * @summary 编辑学段/学院/年级/专业\系/班级
     *
     * @param request CollegeUpdateCollegeDeptRequest
     * @param headers CollegeUpdateCollegeDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeUpdateCollegeDeptResponse
     */
    collegeUpdateCollegeDeptWithOptions(request: CollegeUpdateCollegeDeptRequest, headers: CollegeUpdateCollegeDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeUpdateCollegeDeptResponse>;
    /**
     * @summary 编辑学段/学院/年级/专业\系/班级
     *
     * @param request CollegeUpdateCollegeDeptRequest
     * @return CollegeUpdateCollegeDeptResponse
     */
    collegeUpdateCollegeDept(request: CollegeUpdateCollegeDeptRequest): Promise<CollegeUpdateCollegeDeptResponse>;
    /**
     * @summary 更新学生的部门相关信息
     *
     * @param request CollegeUpdateStudentDeptInfoRequest
     * @param headers CollegeUpdateStudentDeptInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeUpdateStudentDeptInfoResponse
     */
    collegeUpdateStudentDeptInfoWithOptions(request: CollegeUpdateStudentDeptInfoRequest, headers: CollegeUpdateStudentDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeUpdateStudentDeptInfoResponse>;
    /**
     * @summary 更新学生的部门相关信息
     *
     * @param request CollegeUpdateStudentDeptInfoRequest
     * @return CollegeUpdateStudentDeptInfoResponse
     */
    collegeUpdateStudentDeptInfo(request: CollegeUpdateStudentDeptInfoRequest): Promise<CollegeUpdateStudentDeptInfoResponse>;
    /**
     * @summary 更新班级下学生信息
     *
     * @param request CollegeUpdateStudentInfoRequest
     * @param headers CollegeUpdateStudentInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeUpdateStudentInfoResponse
     */
    collegeUpdateStudentInfoWithOptions(request: CollegeUpdateStudentInfoRequest, headers: CollegeUpdateStudentInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeUpdateStudentInfoResponse>;
    /**
     * @summary 更新班级下学生信息
     *
     * @param request CollegeUpdateStudentInfoRequest
     * @return CollegeUpdateStudentInfoResponse
     */
    collegeUpdateStudentInfo(request: CollegeUpdateStudentInfoRequest): Promise<CollegeUpdateStudentInfoResponse>;
    /**
     * @summary 修改学生手机号
     *
     * @param request CollegeUpdateStudentMoblieRequest
     * @param headers CollegeUpdateStudentMoblieHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CollegeUpdateStudentMoblieResponse
     */
    collegeUpdateStudentMoblieWithOptions(request: CollegeUpdateStudentMoblieRequest, headers: CollegeUpdateStudentMoblieHeaders, runtime: $Util.RuntimeOptions): Promise<CollegeUpdateStudentMoblieResponse>;
    /**
     * @summary 修改学生手机号
     *
     * @param request CollegeUpdateStudentMoblieRequest
     * @return CollegeUpdateStudentMoblieResponse
     */
    collegeUpdateStudentMoblie(request: CollegeUpdateStudentMoblieRequest): Promise<CollegeUpdateStudentMoblieResponse>;
    /**
     * @summary 创建自定义通讯录
     *
     * @param request CustomizeContactCreateRequest
     * @param headers CustomizeContactCreateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactCreateResponse
     */
    customizeContactCreateWithOptions(request: CustomizeContactCreateRequest, headers: CustomizeContactCreateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactCreateResponse>;
    /**
     * @summary 创建自定义通讯录
     *
     * @param request CustomizeContactCreateRequest
     * @return CustomizeContactCreateResponse
     */
    customizeContactCreate(request: CustomizeContactCreateRequest): Promise<CustomizeContactCreateResponse>;
    /**
     * @summary 删除自定义通讯录
     *
     * @param request CustomizeContactDeleteRequest
     * @param headers CustomizeContactDeleteHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactDeleteResponse
     */
    customizeContactDeleteWithOptions(request: CustomizeContactDeleteRequest, headers: CustomizeContactDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeleteResponse>;
    /**
     * @summary 删除自定义通讯录
     *
     * @param request CustomizeContactDeleteRequest
     * @return CustomizeContactDeleteResponse
     */
    customizeContactDelete(request: CustomizeContactDeleteRequest): Promise<CustomizeContactDeleteResponse>;
    /**
     * @summary 创建部门
     *
     * @param request CustomizeContactDeptCreateRequest
     * @param headers CustomizeContactDeptCreateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactDeptCreateResponse
     */
    customizeContactDeptCreateWithOptions(request: CustomizeContactDeptCreateRequest, headers: CustomizeContactDeptCreateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptCreateResponse>;
    /**
     * @summary 创建部门
     *
     * @param request CustomizeContactDeptCreateRequest
     * @return CustomizeContactDeptCreateResponse
     */
    customizeContactDeptCreate(request: CustomizeContactDeptCreateRequest): Promise<CustomizeContactDeptCreateResponse>;
    /**
     * @summary 删除部门
     *
     * @param request CustomizeContactDeptDeleteRequest
     * @param headers CustomizeContactDeptDeleteHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactDeptDeleteResponse
     */
    customizeContactDeptDeleteWithOptions(request: CustomizeContactDeptDeleteRequest, headers: CustomizeContactDeptDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptDeleteResponse>;
    /**
     * @summary 删除部门
     *
     * @param request CustomizeContactDeptDeleteRequest
     * @return CustomizeContactDeptDeleteResponse
     */
    customizeContactDeptDelete(request: CustomizeContactDeptDeleteRequest): Promise<CustomizeContactDeptDeleteResponse>;
    /**
     * @summary 创建自定义通讯录某个部门的部门群
     *
     * @param request CustomizeContactDeptGroupCreateRequest
     * @param headers CustomizeContactDeptGroupCreateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactDeptGroupCreateResponse
     */
    customizeContactDeptGroupCreateWithOptions(request: CustomizeContactDeptGroupCreateRequest, headers: CustomizeContactDeptGroupCreateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptGroupCreateResponse>;
    /**
     * @summary 创建自定义通讯录某个部门的部门群
     *
     * @param request CustomizeContactDeptGroupCreateRequest
     * @return CustomizeContactDeptGroupCreateResponse
     */
    customizeContactDeptGroupCreate(request: CustomizeContactDeptGroupCreateRequest): Promise<CustomizeContactDeptGroupCreateResponse>;
    /**
     * @summary 获取部门详情
     *
     * @param request CustomizeContactDeptInfoRequest
     * @param headers CustomizeContactDeptInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactDeptInfoResponse
     */
    customizeContactDeptInfoWithOptions(request: CustomizeContactDeptInfoRequest, headers: CustomizeContactDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptInfoResponse>;
    /**
     * @summary 获取部门详情
     *
     * @param request CustomizeContactDeptInfoRequest
     * @return CustomizeContactDeptInfoResponse
     */
    customizeContactDeptInfo(request: CustomizeContactDeptInfoRequest): Promise<CustomizeContactDeptInfoResponse>;
    /**
     * @summary 获取子部门列表
     *
     * @param request CustomizeContactDeptListRequest
     * @param headers CustomizeContactDeptListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactDeptListResponse
     */
    customizeContactDeptListWithOptions(request: CustomizeContactDeptListRequest, headers: CustomizeContactDeptListHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptListResponse>;
    /**
     * @summary 获取子部门列表
     *
     * @param request CustomizeContactDeptListRequest
     * @return CustomizeContactDeptListResponse
     */
    customizeContactDeptList(request: CustomizeContactDeptListRequest): Promise<CustomizeContactDeptListResponse>;
    /**
     * @summary 更新部门
     *
     * @param request CustomizeContactDeptUpdateRequest
     * @param headers CustomizeContactDeptUpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactDeptUpdateResponse
     */
    customizeContactDeptUpdateWithOptions(request: CustomizeContactDeptUpdateRequest, headers: CustomizeContactDeptUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactDeptUpdateResponse>;
    /**
     * @summary 更新部门
     *
     * @param request CustomizeContactDeptUpdateRequest
     * @return CustomizeContactDeptUpdateResponse
     */
    customizeContactDeptUpdate(request: CustomizeContactDeptUpdateRequest): Promise<CustomizeContactDeptUpdateResponse>;
    /**
     * @summary 普通部门下添加人员
     *
     * @param request CustomizeContactEmpAddRequest
     * @param headers CustomizeContactEmpAddHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactEmpAddResponse
     */
    customizeContactEmpAddWithOptions(request: CustomizeContactEmpAddRequest, headers: CustomizeContactEmpAddHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactEmpAddResponse>;
    /**
     * @summary 普通部门下添加人员
     *
     * @param request CustomizeContactEmpAddRequest
     * @return CustomizeContactEmpAddResponse
     */
    customizeContactEmpAdd(request: CustomizeContactEmpAddRequest): Promise<CustomizeContactEmpAddResponse>;
    /**
     * @summary 普通部门下移除人员
     *
     * @param request CustomizeContactEmpDeleteRequest
     * @param headers CustomizeContactEmpDeleteHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactEmpDeleteResponse
     */
    customizeContactEmpDeleteWithOptions(request: CustomizeContactEmpDeleteRequest, headers: CustomizeContactEmpDeleteHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactEmpDeleteResponse>;
    /**
     * @summary 普通部门下移除人员
     *
     * @param request CustomizeContactEmpDeleteRequest
     * @return CustomizeContactEmpDeleteResponse
     */
    customizeContactEmpDelete(request: CustomizeContactEmpDeleteRequest): Promise<CustomizeContactEmpDeleteResponse>;
    /**
     * @summary 查询部门下人员
     *
     * @param request CustomizeContactEmpListRequest
     * @param headers CustomizeContactEmpListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactEmpListResponse
     */
    customizeContactEmpListWithOptions(request: CustomizeContactEmpListRequest, headers: CustomizeContactEmpListHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactEmpListResponse>;
    /**
     * @summary 查询部门下人员
     *
     * @param request CustomizeContactEmpListRequest
     * @return CustomizeContactEmpListResponse
     */
    customizeContactEmpList(request: CustomizeContactEmpListRequest): Promise<CustomizeContactEmpListResponse>;
    /**
     * @summary 获取自定义通讯录列表
     *
     * @param headers CustomizeContactListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactListResponse
     */
    customizeContactListWithOptions(headers: CustomizeContactListHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactListResponse>;
    /**
     * @summary 获取自定义通讯录列表
     *
     * @return CustomizeContactListResponse
     */
    customizeContactList(): Promise<CustomizeContactListResponse>;
    /**
     * @summary 更新自定义通讯录
     *
     * @param request CustomizeContactUpdateRequest
     * @param headers CustomizeContactUpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CustomizeContactUpdateResponse
     */
    customizeContactUpdateWithOptions(request: CustomizeContactUpdateRequest, headers: CustomizeContactUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<CustomizeContactUpdateResponse>;
    /**
     * @summary 更新自定义通讯录
     *
     * @param request CustomizeContactUpdateRequest
     * @return CustomizeContactUpdateResponse
     */
    customizeContactUpdate(request: CustomizeContactUpdateRequest): Promise<CustomizeContactUpdateResponse>;
    /**
     * @summary 门店通业务消息推送
     *
     * @param tmpReq DIgitalStoreMessagePushRequest
     * @param headers DIgitalStoreMessagePushHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DIgitalStoreMessagePushResponse
     */
    dIgitalStoreMessagePushWithOptions(tmpReq: DIgitalStoreMessagePushRequest, headers: DIgitalStoreMessagePushHeaders, runtime: $Util.RuntimeOptions): Promise<DIgitalStoreMessagePushResponse>;
    /**
     * @summary 门店通业务消息推送
     *
     * @param request DIgitalStoreMessagePushRequest
     * @return DIgitalStoreMessagePushResponse
     */
    dIgitalStoreMessagePush(request: DIgitalStoreMessagePushRequest): Promise<DIgitalStoreMessagePushResponse>;
    /**
     * @summary 群运营-场景卡片发送记录列表
     *
     * @param request DigitalStoreCardRecordRequest
     * @param headers DigitalStoreCardRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreCardRecordResponse
     */
    digitalStoreCardRecordWithOptions(request: DigitalStoreCardRecordRequest, headers: DigitalStoreCardRecordHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreCardRecordResponse>;
    /**
     * @summary 群运营-场景卡片发送记录列表
     *
     * @param request DigitalStoreCardRecordRequest
     * @return DigitalStoreCardRecordResponse
     */
    digitalStoreCardRecord(request: DigitalStoreCardRecordRequest): Promise<DigitalStoreCardRecordResponse>;
    /**
     * @summary 查询组织中门店通通讯录基础信息
     *
     * @param headers DigitalStoreContactInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreContactInfoResponse
     */
    digitalStoreContactInfoWithOptions(headers: DigitalStoreContactInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreContactInfoResponse>;
    /**
     * @summary 查询组织中门店通通讯录基础信息
     *
     * @return DigitalStoreContactInfoResponse
     */
    digitalStoreContactInfo(): Promise<DigitalStoreContactInfoResponse>;
    /**
     * @summary 获取门店通相关会话列表（区域群、门店群）
     *
     * @param request DigitalStoreConversationsRequest
     * @param headers DigitalStoreConversationsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreConversationsResponse
     */
    digitalStoreConversationsWithOptions(request: DigitalStoreConversationsRequest, headers: DigitalStoreConversationsHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreConversationsResponse>;
    /**
     * @summary 获取门店通相关会话列表（区域群、门店群）
     *
     * @param request DigitalStoreConversationsRequest
     * @return DigitalStoreConversationsResponse
     */
    digitalStoreConversations(request: DigitalStoreConversationsRequest): Promise<DigitalStoreConversationsResponse>;
    /**
     * @summary 群运营-数据监控-导出列表
     *
     * @param request DigitalStoreExportCardRecordRequest
     * @param headers DigitalStoreExportCardRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreExportCardRecordResponse
     */
    digitalStoreExportCardRecordWithOptions(request: DigitalStoreExportCardRecordRequest, headers: DigitalStoreExportCardRecordHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreExportCardRecordResponse>;
    /**
     * @summary 群运营-数据监控-导出列表
     *
     * @param request DigitalStoreExportCardRecordRequest
     * @return DigitalStoreExportCardRecordResponse
     */
    digitalStoreExportCardRecord(request: DigitalStoreExportCardRecordRequest): Promise<DigitalStoreExportCardRecordResponse>;
    /**
     * @summary 群运营-数据监控-导出明细
     *
     * @param request DigitalStoreExportCardRecordDetailRequest
     * @param headers DigitalStoreExportCardRecordDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreExportCardRecordDetailResponse
     */
    digitalStoreExportCardRecordDetailWithOptions(request: DigitalStoreExportCardRecordDetailRequest, headers: DigitalStoreExportCardRecordDetailHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreExportCardRecordDetailResponse>;
    /**
     * @summary 群运营-数据监控-导出明细
     *
     * @param request DigitalStoreExportCardRecordDetailRequest
     * @return DigitalStoreExportCardRecordDetailResponse
     */
    digitalStoreExportCardRecordDetail(request: DigitalStoreExportCardRecordDetailRequest): Promise<DigitalStoreExportCardRecordDetailResponse>;
    /**
     * @summary 查询门店通中的门店分组详情
     *
     * @param request DigitalStoreGroupInfoRequest
     * @param headers DigitalStoreGroupInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreGroupInfoResponse
     */
    digitalStoreGroupInfoWithOptions(request: DigitalStoreGroupInfoRequest, headers: DigitalStoreGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreGroupInfoResponse>;
    /**
     * @summary 查询门店通中的门店分组详情
     *
     * @param request DigitalStoreGroupInfoRequest
     * @return DigitalStoreGroupInfoResponse
     */
    digitalStoreGroupInfo(request: DigitalStoreGroupInfoRequest): Promise<DigitalStoreGroupInfoResponse>;
    /**
     * @summary 查询门店通中的分组列表
     *
     * @param headers DigitalStoreGroupsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreGroupsResponse
     */
    digitalStoreGroupsWithOptions(headers: DigitalStoreGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreGroupsResponse>;
    /**
     * @summary 查询门店通中的分组列表
     *
     * @return DigitalStoreGroupsResponse
     */
    digitalStoreGroups(): Promise<DigitalStoreGroupsResponse>;
    /**
     * @summary 查询门店通讯录某个节点信息
     *
     * @param request DigitalStoreNodeInfoRequest
     * @param headers DigitalStoreNodeInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreNodeInfoResponse
     */
    digitalStoreNodeInfoWithOptions(request: DigitalStoreNodeInfoRequest, headers: DigitalStoreNodeInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreNodeInfoResponse>;
    /**
     * @summary 查询门店通讯录某个节点信息
     *
     * @param request DigitalStoreNodeInfoRequest
     * @return DigitalStoreNodeInfoResponse
     */
    digitalStoreNodeInfo(request: DigitalStoreNodeInfoRequest): Promise<DigitalStoreNodeInfoResponse>;
    /**
     * @summary 门店通权益信息查询
     *
     * @param headers DigitalStoreRightsInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreRightsInfoResponse
     */
    digitalStoreRightsInfoWithOptions(headers: DigitalStoreRightsInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreRightsInfoResponse>;
    /**
     * @summary 门店通权益信息查询
     *
     * @return DigitalStoreRightsInfoResponse
     */
    digitalStoreRightsInfo(): Promise<DigitalStoreRightsInfoResponse>;
    /**
     * @summary 查询门店通中的角色列表
     *
     * @param headers DigitalStoreRolesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreRolesResponse
     */
    digitalStoreRolesWithOptions(headers: DigitalStoreRolesHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreRolesResponse>;
    /**
     * @summary 查询门店通中的角色列表
     *
     * @return DigitalStoreRolesResponse
     */
    digitalStoreRoles(): Promise<DigitalStoreRolesResponse>;
    /**
     * @summary 获取门店通场景群的业务范围
     *
     * @param request DigitalStoreSceneScopeRequest
     * @param headers DigitalStoreSceneScopeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreSceneScopeResponse
     */
    digitalStoreSceneScopeWithOptions(request: DigitalStoreSceneScopeRequest, headers: DigitalStoreSceneScopeHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreSceneScopeResponse>;
    /**
     * @summary 获取门店通场景群的业务范围
     *
     * @param request DigitalStoreSceneScopeRequest
     * @return DigitalStoreSceneScopeResponse
     */
    digitalStoreSceneScope(request: DigitalStoreSceneScopeRequest): Promise<DigitalStoreSceneScopeResponse>;
    /**
     * @summary 查询门店通中的门店详情
     *
     * @param request DigitalStoreStoreInfoRequest
     * @param headers DigitalStoreStoreInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreStoreInfoResponse
     */
    digitalStoreStoreInfoWithOptions(request: DigitalStoreStoreInfoRequest, headers: DigitalStoreStoreInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreStoreInfoResponse>;
    /**
     * @summary 查询门店通中的门店详情
     *
     * @param request DigitalStoreStoreInfoRequest
     * @return DigitalStoreStoreInfoResponse
     */
    digitalStoreStoreInfo(request: DigitalStoreStoreInfoRequest): Promise<DigitalStoreStoreInfoResponse>;
    /**
     * @summary 查询门店通讯录某个节点下的子节点
     *
     * @param request DigitalStoreSubNodesRequest
     * @param headers DigitalStoreSubNodesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreSubNodesResponse
     */
    digitalStoreSubNodesWithOptions(request: DigitalStoreSubNodesRequest, headers: DigitalStoreSubNodesHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreSubNodesResponse>;
    /**
     * @summary 查询门店通讯录某个节点下的子节点
     *
     * @param request DigitalStoreSubNodesRequest
     * @return DigitalStoreSubNodesResponse
     */
    digitalStoreSubNodes(request: DigitalStoreSubNodesRequest): Promise<DigitalStoreSubNodesResponse>;
    /**
     * @summary 修改人员管辖范围以及所属角色
     *
     * @param request DigitalStoreUpdateAuthInfoRequest
     * @param headers DigitalStoreUpdateAuthInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreUpdateAuthInfoResponse
     */
    digitalStoreUpdateAuthInfoWithOptions(request: DigitalStoreUpdateAuthInfoRequest, headers: DigitalStoreUpdateAuthInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreUpdateAuthInfoResponse>;
    /**
     * @summary 修改人员管辖范围以及所属角色
     *
     * @param request DigitalStoreUpdateAuthInfoRequest
     * @return DigitalStoreUpdateAuthInfoResponse
     */
    digitalStoreUpdateAuthInfo(request: DigitalStoreUpdateAuthInfoRequest): Promise<DigitalStoreUpdateAuthInfoResponse>;
    /**
     * @summary 查询门店通讯录人员信息
     *
     * @param request DigitalStoreUserInfoRequest
     * @param headers DigitalStoreUserInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreUserInfoResponse
     */
    digitalStoreUserInfoWithOptions(request: DigitalStoreUserInfoRequest, headers: DigitalStoreUserInfoHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreUserInfoResponse>;
    /**
     * @summary 查询门店通讯录人员信息
     *
     * @param request DigitalStoreUserInfoRequest
     * @return DigitalStoreUserInfoResponse
     */
    digitalStoreUserInfo(request: DigitalStoreUserInfoRequest): Promise<DigitalStoreUserInfoResponse>;
    /**
     * @summary 查询门店通讯录某个节点下的所有人员
     *
     * @param request DigitalStoreUsersRequest
     * @param headers DigitalStoreUsersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStoreUsersResponse
     */
    digitalStoreUsersWithOptions(request: DigitalStoreUsersRequest, headers: DigitalStoreUsersHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStoreUsersResponse>;
    /**
     * @summary 查询门店通讯录某个节点下的所有人员
     *
     * @param request DigitalStoreUsersRequest
     * @return DigitalStoreUsersResponse
     */
    digitalStoreUsers(request: DigitalStoreUsersRequest): Promise<DigitalStoreUsersResponse>;
    /**
     * @summary 群运营-数据监控-查询导出任务的记录列表
     *
     * @param request DigitalStorelistExportTaskRecordRequest
     * @param headers DigitalStorelistExportTaskRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DigitalStorelistExportTaskRecordResponse
     */
    digitalStorelistExportTaskRecordWithOptions(request: DigitalStorelistExportTaskRecordRequest, headers: DigitalStorelistExportTaskRecordHeaders, runtime: $Util.RuntimeOptions): Promise<DigitalStorelistExportTaskRecordResponse>;
    /**
     * @summary 群运营-数据监控-查询导出任务的记录列表
     *
     * @param request DigitalStorelistExportTaskRecordRequest
     * @return DigitalStorelistExportTaskRecordResponse
     */
    digitalStorelistExportTaskRecord(request: DigitalStorelistExportTaskRecordRequest): Promise<DigitalStorelistExportTaskRecordResponse>;
    /**
     * @summary 查询启用了当前应用的外部协作组织
     *
     * @param request ExternalQueryExternalAppOrgsRequest
     * @param headers ExternalQueryExternalAppOrgsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExternalQueryExternalAppOrgsResponse
     */
    externalQueryExternalAppOrgsWithOptions(request: ExternalQueryExternalAppOrgsRequest, headers: ExternalQueryExternalAppOrgsHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalQueryExternalAppOrgsResponse>;
    /**
     * @summary 查询启用了当前应用的外部协作组织
     *
     * @param request ExternalQueryExternalAppOrgsRequest
     * @return ExternalQueryExternalAppOrgsResponse
     */
    externalQueryExternalAppOrgs(request: ExternalQueryExternalAppOrgsRequest): Promise<ExternalQueryExternalAppOrgsResponse>;
    /**
     * @summary 查询归属的主组织
     *
     * @param request ExternalQueryExternalBelongMainOrgRequest
     * @param headers ExternalQueryExternalBelongMainOrgHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExternalQueryExternalBelongMainOrgResponse
     */
    externalQueryExternalBelongMainOrgWithOptions(request: ExternalQueryExternalBelongMainOrgRequest, headers: ExternalQueryExternalBelongMainOrgHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalQueryExternalBelongMainOrgResponse>;
    /**
     * @summary 查询归属的主组织
     *
     * @param request ExternalQueryExternalBelongMainOrgRequest
     * @return ExternalQueryExternalBelongMainOrgResponse
     */
    externalQueryExternalBelongMainOrg(request: ExternalQueryExternalBelongMainOrgRequest): Promise<ExternalQueryExternalBelongMainOrgResponse>;
    /**
     * @summary 查询外部协作组织
     *
     * @param request ExternalQueryExternalOrgsRequest
     * @param headers ExternalQueryExternalOrgsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExternalQueryExternalOrgsResponse
     */
    externalQueryExternalOrgsWithOptions(request: ExternalQueryExternalOrgsRequest, headers: ExternalQueryExternalOrgsHeaders, runtime: $Util.RuntimeOptions): Promise<ExternalQueryExternalOrgsResponse>;
    /**
     * @summary 查询外部协作组织
     *
     * @param request ExternalQueryExternalOrgsRequest
     * @return ExternalQueryExternalOrgsResponse
     */
    externalQueryExternalOrgs(request: ExternalQueryExternalOrgsRequest): Promise<ExternalQueryExternalOrgsResponse>;
    /**
     * @summary 医疗数据对账
     *
     * @param request HospitalDataCheckRequest
     * @param headers HospitalDataCheckHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return HospitalDataCheckResponse
     */
    hospitalDataCheckWithOptions(request: HospitalDataCheckRequest, headers: HospitalDataCheckHeaders, runtime: $Util.RuntimeOptions): Promise<HospitalDataCheckResponse>;
    /**
     * @summary 医疗数据对账
     *
     * @param request HospitalDataCheckRequest
     * @return HospitalDataCheckResponse
     */
    hospitalDataCheck(request: HospitalDataCheckRequest): Promise<HospitalDataCheckResponse>;
    /**
     * @summary 行业化制造业事件中心
     *
     * @param request IndustryManufactureCommonEventRequest
     * @param headers IndustryManufactureCommonEventHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureCommonEventResponse
     */
    industryManufactureCommonEventWithOptions(request: IndustryManufactureCommonEventRequest, headers: IndustryManufactureCommonEventHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureCommonEventResponse>;
    /**
     * @summary 行业化制造业事件中心
     *
     * @param request IndustryManufactureCommonEventRequest
     * @return IndustryManufactureCommonEventResponse
     */
    industryManufactureCommonEvent(request: IndustryManufactureCommonEventRequest): Promise<IndustryManufactureCommonEventResponse>;
    /**
     * @summary 物料成本开放服务
     *
     * @param request IndustryManufactureCostRecordListGetRequest
     * @param headers IndustryManufactureCostRecordListGetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureCostRecordListGetResponse
     */
    industryManufactureCostRecordListGetWithOptions(request: IndustryManufactureCostRecordListGetRequest, headers: IndustryManufactureCostRecordListGetHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureCostRecordListGetResponse>;
    /**
     * @summary 物料成本开放服务
     *
     * @param request IndustryManufactureCostRecordListGetRequest
     * @return IndustryManufactureCostRecordListGetResponse
     */
    industryManufactureCostRecordListGet(request: IndustryManufactureCostRecordListGetRequest): Promise<IndustryManufactureCostRecordListGetResponse>;
    /**
     * @summary 费用服务
     *
     * @param request IndustryManufactureFeeListGetRequest
     * @param headers IndustryManufactureFeeListGetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureFeeListGetResponse
     */
    industryManufactureFeeListGetWithOptions(request: IndustryManufactureFeeListGetRequest, headers: IndustryManufactureFeeListGetHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureFeeListGetResponse>;
    /**
     * @summary 费用服务
     *
     * @param request IndustryManufactureFeeListGetRequest
     * @return IndustryManufactureFeeListGetResponse
     */
    industryManufactureFeeListGet(request: IndustryManufactureFeeListGetRequest): Promise<IndustryManufactureFeeListGetResponse>;
    /**
     * @summary 行业化-制造业工价接口
     *
     * @param request IndustryManufactureLabourCostRequest
     * @param headers IndustryManufactureLabourCostHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureLabourCostResponse
     */
    industryManufactureLabourCostWithOptions(request: IndustryManufactureLabourCostRequest, headers: IndustryManufactureLabourCostHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureLabourCostResponse>;
    /**
     * @summary 行业化-制造业工价接口
     *
     * @param request IndustryManufactureLabourCostRequest
     * @return IndustryManufactureLabourCostResponse
     */
    industryManufactureLabourCost(request: IndustryManufactureLabourCostRequest): Promise<IndustryManufactureLabourCostResponse>;
    /**
     * @summary 查询行业物料列表
     *
     * @param request IndustryManufactureMaterialListRequest
     * @param headers IndustryManufactureMaterialListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureMaterialListResponse
     */
    industryManufactureMaterialListWithOptions(request: IndustryManufactureMaterialListRequest, headers: IndustryManufactureMaterialListHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMaterialListResponse>;
    /**
     * @summary 查询行业物料列表
     *
     * @param request IndustryManufactureMaterialListRequest
     * @return IndustryManufactureMaterialListResponse
     */
    industryManufactureMaterialList(request: IndustryManufactureMaterialListRequest): Promise<IndustryManufactureMaterialListResponse>;
    /**
     * @summary 派工任务管理
     *
     * @param request IndustryManufactureMesDispatchTaskRequest
     * @param headers IndustryManufactureMesDispatchTaskHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureMesDispatchTaskResponse
     */
    industryManufactureMesDispatchTaskWithOptions(request: IndustryManufactureMesDispatchTaskRequest, headers: IndustryManufactureMesDispatchTaskHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesDispatchTaskResponse>;
    /**
     * @summary 派工任务管理
     *
     * @param request IndustryManufactureMesDispatchTaskRequest
     * @return IndustryManufactureMesDispatchTaskResponse
     */
    industryManufactureMesDispatchTask(request: IndustryManufactureMesDispatchTaskRequest): Promise<IndustryManufactureMesDispatchTaskResponse>;
    /**
     * @summary MES系统物料管理
     *
     * @param request IndustryManufactureMesMaterialRequest
     * @param headers IndustryManufactureMesMaterialHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureMesMaterialResponse
     */
    industryManufactureMesMaterialWithOptions(request: IndustryManufactureMesMaterialRequest, headers: IndustryManufactureMesMaterialHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesMaterialResponse>;
    /**
     * @summary MES系统物料管理
     *
     * @param request IndustryManufactureMesMaterialRequest
     * @return IndustryManufactureMesMaterialResponse
     */
    industryManufactureMesMaterial(request: IndustryManufactureMesMaterialRequest): Promise<IndustryManufactureMesMaterialResponse>;
    /**
     * @summary 生产委外工单管理
     *
     * @param request IndustryManufactureMesOutPlanRequest
     * @param headers IndustryManufactureMesOutPlanHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureMesOutPlanResponse
     */
    industryManufactureMesOutPlanWithOptions(request: IndustryManufactureMesOutPlanRequest, headers: IndustryManufactureMesOutPlanHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesOutPlanResponse>;
    /**
     * @summary 生产委外工单管理
     *
     * @param request IndustryManufactureMesOutPlanRequest
     * @return IndustryManufactureMesOutPlanResponse
     */
    industryManufactureMesOutPlan(request: IndustryManufactureMesOutPlanRequest): Promise<IndustryManufactureMesOutPlanResponse>;
    /**
     * @summary 生产报工管理
     *
     * @param request IndustryManufactureMesOutputRequest
     * @param headers IndustryManufactureMesOutputHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureMesOutputResponse
     */
    industryManufactureMesOutputWithOptions(request: IndustryManufactureMesOutputRequest, headers: IndustryManufactureMesOutputHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesOutputResponse>;
    /**
     * @summary 生产报工管理
     *
     * @param request IndustryManufactureMesOutputRequest
     * @return IndustryManufactureMesOutputResponse
     */
    industryManufactureMesOutput(request: IndustryManufactureMesOutputRequest): Promise<IndustryManufactureMesOutputResponse>;
    /**
     * @summary MES系统工序管理
     *
     * @param request IndustryManufactureMesProcessRequest
     * @param headers IndustryManufactureMesProcessHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureMesProcessResponse
     */
    industryManufactureMesProcessWithOptions(request: IndustryManufactureMesProcessRequest, headers: IndustryManufactureMesProcessHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesProcessResponse>;
    /**
     * @summary MES系统工序管理
     *
     * @param request IndustryManufactureMesProcessRequest
     * @return IndustryManufactureMesProcessResponse
     */
    industryManufactureMesProcess(request: IndustryManufactureMesProcessRequest): Promise<IndustryManufactureMesProcessResponse>;
    /**
     * @summary 生产工单管理
     *
     * @param request IndustryManufactureMesProductionPlanRequest
     * @param headers IndustryManufactureMesProductionPlanHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureMesProductionPlanResponse
     */
    industryManufactureMesProductionPlanWithOptions(request: IndustryManufactureMesProductionPlanRequest, headers: IndustryManufactureMesProductionPlanHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesProductionPlanResponse>;
    /**
     * @summary 生产工单管理
     *
     * @param request IndustryManufactureMesProductionPlanRequest
     * @return IndustryManufactureMesProductionPlanResponse
     */
    industryManufactureMesProductionPlan(request: IndustryManufactureMesProductionPlanRequest): Promise<IndustryManufactureMesProductionPlanResponse>;
    /**
     * @summary 生产委外合作班组管理
     *
     * @param request IndustryManufactureMesSubCooperationTeamRequest
     * @param headers IndustryManufactureMesSubCooperationTeamHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureMesSubCooperationTeamResponse
     */
    industryManufactureMesSubCooperationTeamWithOptions(request: IndustryManufactureMesSubCooperationTeamRequest, headers: IndustryManufactureMesSubCooperationTeamHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesSubCooperationTeamResponse>;
    /**
     * @summary 生产委外合作班组管理
     *
     * @param request IndustryManufactureMesSubCooperationTeamRequest
     * @return IndustryManufactureMesSubCooperationTeamResponse
     */
    industryManufactureMesSubCooperationTeam(request: IndustryManufactureMesSubCooperationTeamRequest): Promise<IndustryManufactureMesSubCooperationTeamResponse>;
    /**
     * @summary MES系统班组管理
     *
     * @param request IndustryManufactureMesTeamMgmtRequest
     * @param headers IndustryManufactureMesTeamMgmtHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryManufactureMesTeamMgmtResponse
     */
    industryManufactureMesTeamMgmtWithOptions(request: IndustryManufactureMesTeamMgmtRequest, headers: IndustryManufactureMesTeamMgmtHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryManufactureMesTeamMgmtResponse>;
    /**
     * @summary MES系统班组管理
     *
     * @param request IndustryManufactureMesTeamMgmtRequest
     * @return IndustryManufactureMesTeamMgmtResponse
     */
    industryManufactureMesTeamMgmt(request: IndustryManufactureMesTeamMgmtRequest): Promise<IndustryManufactureMesTeamMgmtResponse>;
    /**
     * @summary 物料成本查询服务
     *
     * @param request IndustryMmanufactureMaterialCostGetRequest
     * @param headers IndustryMmanufactureMaterialCostGetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IndustryMmanufactureMaterialCostGetResponse
     */
    industryMmanufactureMaterialCostGetWithOptions(request: IndustryMmanufactureMaterialCostGetRequest, headers: IndustryMmanufactureMaterialCostGetHeaders, runtime: $Util.RuntimeOptions): Promise<IndustryMmanufactureMaterialCostGetResponse>;
    /**
     * @summary 物料成本查询服务
     *
     * @param request IndustryMmanufactureMaterialCostGetRequest
     * @return IndustryMmanufactureMaterialCostGetResponse
     */
    industryMmanufactureMaterialCostGet(request: IndustryMmanufactureMaterialCostGetRequest): Promise<IndustryMmanufactureMaterialCostGetResponse>;
    /**
     * @summary 提供text和card两种形式工作通知消息
     *
     * @param request PushDingMessageRequest
     * @param headers PushDingMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PushDingMessageResponse
     */
    pushDingMessageWithOptions(request: PushDingMessageRequest, headers: PushDingMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushDingMessageResponse>;
    /**
     * @summary 提供text和card两种形式工作通知消息
     *
     * @param request PushDingMessageRequest
     * @return PushDingMessageResponse
     */
    pushDingMessage(request: PushDingMessageRequest): Promise<PushDingMessageResponse>;
    /**
     * @summary 获取当前组织下的所有科室
     *
     * @param request QueryAllDepartmentRequest
     * @param headers QueryAllDepartmentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAllDepartmentResponse
     */
    queryAllDepartmentWithOptions(request: QueryAllDepartmentRequest, headers: QueryAllDepartmentHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllDepartmentResponse>;
    /**
     * @summary 获取当前组织下的所有科室
     *
     * @param request QueryAllDepartmentRequest
     * @return QueryAllDepartmentResponse
     */
    queryAllDepartment(request: QueryAllDepartmentRequest): Promise<QueryAllDepartmentResponse>;
    /**
     * @summary 查询医院下的所有医生
     *
     * @param request QueryAllDoctorsRequest
     * @param headers QueryAllDoctorsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAllDoctorsResponse
     */
    queryAllDoctorsWithOptions(request: QueryAllDoctorsRequest, headers: QueryAllDoctorsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllDoctorsResponse>;
    /**
     * @summary 查询医院下的所有医生
     *
     * @param request QueryAllDoctorsRequest
     * @return QueryAllDoctorsResponse
     */
    queryAllDoctors(request: QueryAllDoctorsRequest): Promise<QueryAllDoctorsResponse>;
    /**
     * @summary 查询所有医疗组
     *
     * @param request QueryAllGroupRequest
     * @param headers QueryAllGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAllGroupResponse
     */
    queryAllGroupWithOptions(request: QueryAllGroupRequest, headers: QueryAllGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllGroupResponse>;
    /**
     * @summary 查询所有医疗组
     *
     * @param request QueryAllGroupRequest
     * @return QueryAllGroupResponse
     */
    queryAllGroup(request: QueryAllGroupRequest): Promise<QueryAllGroupResponse>;
    /**
     * @summary 查询科室下的所有医疗组
     *
     * @param request QueryAllGroupsInDeptRequest
     * @param headers QueryAllGroupsInDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAllGroupsInDeptResponse
     */
    queryAllGroupsInDeptWithOptions(deptId: string, request: QueryAllGroupsInDeptRequest, headers: QueryAllGroupsInDeptHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllGroupsInDeptResponse>;
    /**
     * @summary 查询科室下的所有医疗组
     *
     * @param request QueryAllGroupsInDeptRequest
     * @return QueryAllGroupsInDeptResponse
     */
    queryAllGroupsInDept(deptId: string, request: QueryAllGroupsInDeptRequest): Promise<QueryAllGroupsInDeptResponse>;
    /**
     * @summary 查询科室下的所有人员
     *
     * @param request QueryAllMemberByDeptRequest
     * @param headers QueryAllMemberByDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAllMemberByDeptResponse
     */
    queryAllMemberByDeptWithOptions(deptId: string, request: QueryAllMemberByDeptRequest, headers: QueryAllMemberByDeptHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllMemberByDeptResponse>;
    /**
     * @summary 查询科室下的所有人员
     *
     * @param request QueryAllMemberByDeptRequest
     * @return QueryAllMemberByDeptResponse
     */
    queryAllMemberByDept(deptId: string, request: QueryAllMemberByDeptRequest): Promise<QueryAllMemberByDeptResponse>;
    /**
     * @summary 获取医疗组下面的所有成员
     *
     * @param request QueryAllMemberByGroupRequest
     * @param headers QueryAllMemberByGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAllMemberByGroupResponse
     */
    queryAllMemberByGroupWithOptions(groupId: string, request: QueryAllMemberByGroupRequest, headers: QueryAllMemberByGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllMemberByGroupResponse>;
    /**
     * @summary 获取医疗组下面的所有成员
     *
     * @param request QueryAllMemberByGroupRequest
     * @return QueryAllMemberByGroupResponse
     */
    queryAllMemberByGroup(groupId: string, request: QueryAllMemberByGroupRequest): Promise<QueryAllMemberByGroupResponse>;
    /**
     * @summary 获取当前企业医疗通讯录的业务操作日志
     *
     * @param request QueryBizOptLogRequest
     * @param headers QueryBizOptLogHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryBizOptLogResponse
     */
    queryBizOptLogWithOptions(request: QueryBizOptLogRequest, headers: QueryBizOptLogHeaders, runtime: $Util.RuntimeOptions): Promise<QueryBizOptLogResponse>;
    /**
     * @summary 获取当前企业医疗通讯录的业务操作日志
     *
     * @param request QueryBizOptLogRequest
     * @return QueryBizOptLogResponse
     */
    queryBizOptLog(request: QueryBizOptLogRequest): Promise<QueryBizOptLogResponse>;
    /**
     * @summary 查询科室和医疗组的扩展信息
     *
     * @param request QueryDepartmentExtendInfoRequest
     * @param headers QueryDepartmentExtendInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDepartmentExtendInfoResponse
     */
    queryDepartmentExtendInfoWithOptions(request: QueryDepartmentExtendInfoRequest, headers: QueryDepartmentExtendInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDepartmentExtendInfoResponse>;
    /**
     * @summary 查询科室和医疗组的扩展信息
     *
     * @param request QueryDepartmentExtendInfoRequest
     * @return QueryDepartmentExtendInfoResponse
     */
    queryDepartmentExtendInfo(request: QueryDepartmentExtendInfoRequest): Promise<QueryDepartmentExtendInfoResponse>;
    /**
     * @summary 查询部门详情
     *
     * @param headers QueryDepartmentInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDepartmentInfoResponse
     */
    queryDepartmentInfoWithOptions(deptId: string, headers: QueryDepartmentInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDepartmentInfoResponse>;
    /**
     * @summary 查询部门详情
     *
     * @return QueryDepartmentInfoResponse
     */
    queryDepartmentInfo(deptId: string): Promise<QueryDepartmentInfoResponse>;
    /**
     * @summary 通过工号查询人员信息
     *
     * @param request QueryDoctorDetailsByJobNumberRequest
     * @param headers QueryDoctorDetailsByJobNumberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDoctorDetailsByJobNumberResponse
     */
    queryDoctorDetailsByJobNumberWithOptions(jobNumber: string, request: QueryDoctorDetailsByJobNumberRequest, headers: QueryDoctorDetailsByJobNumberHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDoctorDetailsByJobNumberResponse>;
    /**
     * @summary 通过工号查询人员信息
     *
     * @param request QueryDoctorDetailsByJobNumberRequest
     * @return QueryDoctorDetailsByJobNumberResponse
     */
    queryDoctorDetailsByJobNumber(jobNumber: string, request: QueryDoctorDetailsByJobNumberRequest): Promise<QueryDoctorDetailsByJobNumberResponse>;
    /**
     * @summary 获取医疗组详情
     *
     * @param headers QueryGroupInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupInfoResponse
     */
    queryGroupInfoWithOptions(groupId: string, headers: QueryGroupInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupInfoResponse>;
    /**
     * @summary 获取医疗组详情
     *
     * @return QueryGroupInfoResponse
     */
    queryGroupInfo(groupId: string): Promise<QueryGroupInfoResponse>;
    /**
     * @summary 查询医院的院区和病区信息
     *
     * @param request QueryHospitalDistrictInfoRequest
     * @param headers QueryHospitalDistrictInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryHospitalDistrictInfoResponse
     */
    queryHospitalDistrictInfoWithOptions(request: QueryHospitalDistrictInfoRequest, headers: QueryHospitalDistrictInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHospitalDistrictInfoResponse>;
    /**
     * @summary 查询医院的院区和病区信息
     *
     * @param request QueryHospitalDistrictInfoRequest
     * @return QueryHospitalDistrictInfoResponse
     */
    queryHospitalDistrictInfo(request: QueryHospitalDistrictInfoRequest): Promise<QueryHospitalDistrictInfoResponse>;
    /**
     * @summary 查询医院所有角色的人员
     *
     * @param request QueryHospitalRoleUserInfoRequest
     * @param headers QueryHospitalRoleUserInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryHospitalRoleUserInfoResponse
     */
    queryHospitalRoleUserInfoWithOptions(request: QueryHospitalRoleUserInfoRequest, headers: QueryHospitalRoleUserInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHospitalRoleUserInfoResponse>;
    /**
     * @summary 查询医院所有角色的人员
     *
     * @param request QueryHospitalRoleUserInfoRequest
     * @return QueryHospitalRoleUserInfoResponse
     */
    queryHospitalRoleUserInfo(request: QueryHospitalRoleUserInfoRequest): Promise<QueryHospitalRoleUserInfoResponse>;
    /**
     * @summary 查询医院的角色
     *
     * @param headers QueryHospitalRolesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryHospitalRolesResponse
     */
    queryHospitalRolesWithOptions(headers: QueryHospitalRolesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHospitalRolesResponse>;
    /**
     * @summary 查询医院的角色
     *
     * @return QueryHospitalRolesResponse
     */
    queryHospitalRoles(): Promise<QueryHospitalRolesResponse>;
    /**
     * @summary 查询职称字典表
     *
     * @param headers QueryJobCodeDictionaryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryJobCodeDictionaryResponse
     */
    queryJobCodeDictionaryWithOptions(headers: QueryJobCodeDictionaryHeaders, runtime: $Util.RuntimeOptions): Promise<QueryJobCodeDictionaryResponse>;
    /**
     * @summary 查询职称字典表
     *
     * @return QueryJobCodeDictionaryResponse
     */
    queryJobCodeDictionary(): Promise<QueryJobCodeDictionaryResponse>;
    /**
     * @summary 查询工作状态字典表
     *
     * @param headers QueryJobStatusCodeDictionaryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryJobStatusCodeDictionaryResponse
     */
    queryJobStatusCodeDictionaryWithOptions(headers: QueryJobStatusCodeDictionaryHeaders, runtime: $Util.RuntimeOptions): Promise<QueryJobStatusCodeDictionaryResponse>;
    /**
     * @summary 查询工作状态字典表
     *
     * @return QueryJobStatusCodeDictionaryResponse
     */
    queryJobStatusCodeDictionary(): Promise<QueryJobStatusCodeDictionaryResponse>;
    /**
     * @summary 查询医疗行业事件
     *
     * @param headers QueryMedicalEventsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMedicalEventsResponse
     */
    queryMedicalEventsWithOptions(headers: QueryMedicalEventsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMedicalEventsResponse>;
    /**
     * @summary 查询医疗行业事件
     *
     * @return QueryMedicalEventsResponse
     */
    queryMedicalEvents(): Promise<QueryMedicalEventsResponse>;
    /**
     * @summary 查询用户的证书
     *
     * @param request QueryUserCredentialsRequest
     * @param headers QueryUserCredentialsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserCredentialsResponse
     */
    queryUserCredentialsWithOptions(request: QueryUserCredentialsRequest, headers: QueryUserCredentialsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserCredentialsResponse>;
    /**
     * @summary 查询用户的证书
     *
     * @param request QueryUserCredentialsRequest
     * @return QueryUserCredentialsResponse
     */
    queryUserCredentials(request: QueryUserCredentialsRequest): Promise<QueryUserCredentialsResponse>;
    /**
     * @summary 查询人员的扩展信息
     *
     * @param headers QueryUserExtInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserExtInfoResponse
     */
    queryUserExtInfoWithOptions(userId: string, headers: QueryUserExtInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserExtInfoResponse>;
    /**
     * @summary 查询人员的扩展信息
     *
     * @return QueryUserExtInfoResponse
     */
    queryUserExtInfo(userId: string): Promise<QueryUserExtInfoResponse>;
    /**
     * @summary 获取用户拓展字段
     *
     * @param request QueryUserExtendValuesRequest
     * @param headers QueryUserExtendValuesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserExtendValuesResponse
     */
    queryUserExtendValuesWithOptions(request: QueryUserExtendValuesRequest, headers: QueryUserExtendValuesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserExtendValuesResponse>;
    /**
     * @summary 获取用户拓展字段
     *
     * @param request QueryUserExtendValuesRequest
     * @return QueryUserExtendValuesResponse
     */
    queryUserExtendValues(request: QueryUserExtendValuesRequest): Promise<QueryUserExtendValuesResponse>;
    /**
     * @summary 查询人员详情
     *
     * @param request QueryUserInfoRequest
     * @param headers QueryUserInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserInfoResponse
     */
    queryUserInfoWithOptions(userId: string, request: QueryUserInfoRequest, headers: QueryUserInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserInfoResponse>;
    /**
     * @summary 查询人员详情
     *
     * @param request QueryUserInfoRequest
     * @return QueryUserInfoResponse
     */
    queryUserInfo(userId: string, request: QueryUserInfoRequest): Promise<QueryUserInfoResponse>;
    /**
     * @summary 查询人员属性字典表
     *
     * @param headers QueryUserProbCodeDictionaryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserProbCodeDictionaryResponse
     */
    queryUserProbCodeDictionaryWithOptions(headers: QueryUserProbCodeDictionaryHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserProbCodeDictionaryResponse>;
    /**
     * @summary 查询人员属性字典表
     *
     * @return QueryUserProbCodeDictionaryResponse
     */
    queryUserProbCodeDictionary(): Promise<QueryUserProbCodeDictionaryResponse>;
    /**
     * @summary 查询人员权限
     *
     * @param headers QueryUserRolesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserRolesResponse
     */
    queryUserRolesWithOptions(userId: string, headers: QueryUserRolesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserRolesResponse>;
    /**
     * @summary 查询人员权限
     *
     * @return QueryUserRolesResponse
     */
    queryUserRoles(userId: string): Promise<QueryUserRolesResponse>;
    /**
     * @summary 保存用户拓展字段
     *
     * @param request SaveUserExtendValuesRequest
     * @param headers SaveUserExtendValuesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveUserExtendValuesResponse
     */
    saveUserExtendValuesWithOptions(userId: string, request: SaveUserExtendValuesRequest, headers: SaveUserExtendValuesHeaders, runtime: $Util.RuntimeOptions): Promise<SaveUserExtendValuesResponse>;
    /**
     * @summary 保存用户拓展字段
     *
     * @param request SaveUserExtendValuesRequest
     * @return SaveUserExtendValuesResponse
     */
    saveUserExtendValues(userId: string, request: SaveUserExtendValuesRequest): Promise<SaveUserExtendValuesResponse>;
    /**
     * @summary 增加角色或角色组
     *
     * @param request SupplAddRoleRequest
     * @param headers SupplAddRoleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplAddRoleResponse
     */
    supplAddRoleWithOptions(request: SupplAddRoleRequest, headers: SupplAddRoleHeaders, runtime: $Util.RuntimeOptions): Promise<SupplAddRoleResponse>;
    /**
     * @summary 增加角色或角色组
     *
     * @param request SupplAddRoleRequest
     * @return SupplAddRoleResponse
     */
    supplAddRole(request: SupplAddRoleRequest): Promise<SupplAddRoleResponse>;
    /**
     * @summary 新增供应链节点
     *
     * @param request SupplyAddDeptRequest
     * @param headers SupplyAddDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyAddDeptResponse
     */
    supplyAddDeptWithOptions(request: SupplyAddDeptRequest, headers: SupplyAddDeptHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddDeptResponse>;
    /**
     * @summary 新增供应链节点
     *
     * @param request SupplyAddDeptRequest
     * @return SupplyAddDeptResponse
     */
    supplyAddDept(request: SupplyAddDeptRequest): Promise<SupplyAddDeptResponse>;
    /**
     * @summary 添加供应商人员
     *
     * @param request SupplyAddMemberRequest
     * @param headers SupplyAddMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyAddMemberResponse
     */
    supplyAddMemberWithOptions(request: SupplyAddMemberRequest, headers: SupplyAddMemberHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddMemberResponse>;
    /**
     * @summary 添加供应商人员
     *
     * @param request SupplyAddMemberRequest
     * @return SupplyAddMemberResponse
     */
    supplyAddMember(request: SupplyAddMemberRequest): Promise<SupplyAddMemberResponse>;
    /**
     * @summary 添加伙伴负责人
     *
     * @param request SupplyAddPartnerAdminsRequest
     * @param headers SupplyAddPartnerAdminsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyAddPartnerAdminsResponse
     */
    supplyAddPartnerAdminsWithOptions(request: SupplyAddPartnerAdminsRequest, headers: SupplyAddPartnerAdminsHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddPartnerAdminsResponse>;
    /**
     * @summary 添加伙伴负责人
     *
     * @param request SupplyAddPartnerAdminsRequest
     * @return SupplyAddPartnerAdminsResponse
     */
    supplyAddPartnerAdmins(request: SupplyAddPartnerAdminsRequest): Promise<SupplyAddPartnerAdminsResponse>;
    /**
     * @summary 添加伙伴的对接人或对接部门
     *
     * @param request SupplyAddPartnerManagersRequest
     * @param headers SupplyAddPartnerManagersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyAddPartnerManagersResponse
     */
    supplyAddPartnerManagersWithOptions(request: SupplyAddPartnerManagersRequest, headers: SupplyAddPartnerManagersHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddPartnerManagersResponse>;
    /**
     * @summary 添加伙伴的对接人或对接部门
     *
     * @param request SupplyAddPartnerManagersRequest
     * @return SupplyAddPartnerManagersResponse
     */
    supplyAddPartnerManagers(request: SupplyAddPartnerManagersRequest): Promise<SupplyAddPartnerManagersResponse>;
    /**
     * @summary 添加伙伴标签
     *
     * @param request SupplyAddPartnerTypeRequest
     * @param headers SupplyAddPartnerTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyAddPartnerTypeResponse
     */
    supplyAddPartnerTypeWithOptions(request: SupplyAddPartnerTypeRequest, headers: SupplyAddPartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyAddPartnerTypeResponse>;
    /**
     * @summary 添加伙伴标签
     *
     * @param request SupplyAddPartnerTypeRequest
     * @return SupplyAddPartnerTypeResponse
     */
    supplyAddPartnerType(request: SupplyAddPartnerTypeRequest): Promise<SupplyAddPartnerTypeResponse>;
    /**
     * @summary  删除上下游节点
     *
     * @param request SupplyChainDeleteDeptRequest
     * @param headers SupplyChainDeleteDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyChainDeleteDeptResponse
     */
    supplyChainDeleteDeptWithOptions(request: SupplyChainDeleteDeptRequest, headers: SupplyChainDeleteDeptHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyChainDeleteDeptResponse>;
    /**
     * @summary  删除上下游节点
     *
     * @param request SupplyChainDeleteDeptRequest
     * @return SupplyChainDeleteDeptResponse
     */
    supplyChainDeleteDept(request: SupplyChainDeleteDeptRequest): Promise<SupplyChainDeleteDeptResponse>;
    /**
     * @summary 查询上下游节点信息
     *
     * @param request SupplyChainQueryDeptInfoRequest
     * @param headers SupplyChainQueryDeptInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyChainQueryDeptInfoResponse
     */
    supplyChainQueryDeptInfoWithOptions(request: SupplyChainQueryDeptInfoRequest, headers: SupplyChainQueryDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyChainQueryDeptInfoResponse>;
    /**
     * @summary 查询上下游节点信息
     *
     * @param request SupplyChainQueryDeptInfoRequest
     * @return SupplyChainQueryDeptInfoResponse
     */
    supplyChainQueryDeptInfo(request: SupplyChainQueryDeptInfoRequest): Promise<SupplyChainQueryDeptInfoResponse>;
    /**
     * @summary 更新上下游节点信息
     *
     * @param request SupplyChainUpdateDeptInfoRequest
     * @param headers SupplyChainUpdateDeptInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyChainUpdateDeptInfoResponse
     */
    supplyChainUpdateDeptInfoWithOptions(request: SupplyChainUpdateDeptInfoRequest, headers: SupplyChainUpdateDeptInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyChainUpdateDeptInfoResponse>;
    /**
     * @summary 更新上下游节点信息
     *
     * @param request SupplyChainUpdateDeptInfoRequest
     * @return SupplyChainUpdateDeptInfoResponse
     */
    supplyChainUpdateDeptInfo(request: SupplyChainUpdateDeptInfoRequest): Promise<SupplyChainUpdateDeptInfoResponse>;
    /**
     * @summary 删除伙伴成员
     *
     * @param request SupplyDeleteMemberRequest
     * @param headers SupplyDeleteMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyDeleteMemberResponse
     */
    supplyDeleteMemberWithOptions(request: SupplyDeleteMemberRequest, headers: SupplyDeleteMemberHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeleteMemberResponse>;
    /**
     * @summary 删除伙伴成员
     *
     * @param request SupplyDeleteMemberRequest
     * @return SupplyDeleteMemberResponse
     */
    supplyDeleteMember(request: SupplyDeleteMemberRequest): Promise<SupplyDeleteMemberResponse>;
    /**
     * @summary 删除伙伴负责人
     *
     * @param request SupplyDeletePartnerAdminsRequest
     * @param headers SupplyDeletePartnerAdminsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyDeletePartnerAdminsResponse
     */
    supplyDeletePartnerAdminsWithOptions(request: SupplyDeletePartnerAdminsRequest, headers: SupplyDeletePartnerAdminsHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeletePartnerAdminsResponse>;
    /**
     * @summary 删除伙伴负责人
     *
     * @param request SupplyDeletePartnerAdminsRequest
     * @return SupplyDeletePartnerAdminsResponse
     */
    supplyDeletePartnerAdmins(request: SupplyDeletePartnerAdminsRequest): Promise<SupplyDeletePartnerAdminsResponse>;
    /**
     * @summary 移除伙伴的对接人或对接部门
     *
     * @param request SupplyDeletePartnerManagersRequest
     * @param headers SupplyDeletePartnerManagersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyDeletePartnerManagersResponse
     */
    supplyDeletePartnerManagersWithOptions(request: SupplyDeletePartnerManagersRequest, headers: SupplyDeletePartnerManagersHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeletePartnerManagersResponse>;
    /**
     * @summary 移除伙伴的对接人或对接部门
     *
     * @param request SupplyDeletePartnerManagersRequest
     * @return SupplyDeletePartnerManagersResponse
     */
    supplyDeletePartnerManagers(request: SupplyDeletePartnerManagersRequest): Promise<SupplyDeletePartnerManagersResponse>;
    /**
     * @summary 删除伙伴标签
     *
     * @param request SupplyDeletePartnerTypeRequest
     * @param headers SupplyDeletePartnerTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyDeletePartnerTypeResponse
     */
    supplyDeletePartnerTypeWithOptions(request: SupplyDeletePartnerTypeRequest, headers: SupplyDeletePartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeletePartnerTypeResponse>;
    /**
     * @summary 删除伙伴标签
     *
     * @param request SupplyDeletePartnerTypeRequest
     * @return SupplyDeletePartnerTypeResponse
     */
    supplyDeletePartnerType(request: SupplyDeletePartnerTypeRequest): Promise<SupplyDeletePartnerTypeResponse>;
    /**
     * @summary 删除角色或角色组
     *
     * @param request SupplyDeleteRoleRequest
     * @param headers SupplyDeleteRoleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyDeleteRoleResponse
     */
    supplyDeleteRoleWithOptions(request: SupplyDeleteRoleRequest, headers: SupplyDeleteRoleHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyDeleteRoleResponse>;
    /**
     * @summary 删除角色或角色组
     *
     * @param request SupplyDeleteRoleRequest
     * @return SupplyDeleteRoleResponse
     */
    supplyDeleteRole(request: SupplyDeleteRoleRequest): Promise<SupplyDeleteRoleResponse>;
    /**
     * @summary 获取供应链成员信息
     *
     * @param request SupplyGetMemberRequest
     * @param headers SupplyGetMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyGetMemberResponse
     */
    supplyGetMemberWithOptions(request: SupplyGetMemberRequest, headers: SupplyGetMemberHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyGetMemberResponse>;
    /**
     * @summary 获取供应链成员信息
     *
     * @param request SupplyGetMemberRequest
     * @return SupplyGetMemberResponse
     */
    supplyGetMember(request: SupplyGetMemberRequest): Promise<SupplyGetMemberResponse>;
    /**
     * @summary 获取供应链部门下成员
     *
     * @param request SupplyListDeptMembersRequest
     * @param headers SupplyListDeptMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyListDeptMembersResponse
     */
    supplyListDeptMembersWithOptions(request: SupplyListDeptMembersRequest, headers: SupplyListDeptMembersHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListDeptMembersResponse>;
    /**
     * @summary 获取供应链部门下成员
     *
     * @param request SupplyListDeptMembersRequest
     * @return SupplyListDeptMembersResponse
     */
    supplyListDeptMembers(request: SupplyListDeptMembersRequest): Promise<SupplyListDeptMembersResponse>;
    /**
     * @summary 获取伙伴负责人列表
     *
     * @param request SupplyListPartnerAdminsRequest
     * @param headers SupplyListPartnerAdminsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyListPartnerAdminsResponse
     */
    supplyListPartnerAdminsWithOptions(request: SupplyListPartnerAdminsRequest, headers: SupplyListPartnerAdminsHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListPartnerAdminsResponse>;
    /**
     * @summary 获取伙伴负责人列表
     *
     * @param request SupplyListPartnerAdminsRequest
     * @return SupplyListPartnerAdminsResponse
     */
    supplyListPartnerAdmins(request: SupplyListPartnerAdminsRequest): Promise<SupplyListPartnerAdminsResponse>;
    /**
     * @summary 获取伙伴的对接人/对接部门
     *
     * @param request SupplyListPartnerManagersRequest
     * @param headers SupplyListPartnerManagersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyListPartnerManagersResponse
     */
    supplyListPartnerManagersWithOptions(request: SupplyListPartnerManagersRequest, headers: SupplyListPartnerManagersHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListPartnerManagersResponse>;
    /**
     * @summary 获取伙伴的对接人/对接部门
     *
     * @param request SupplyListPartnerManagersRequest
     * @return SupplyListPartnerManagersResponse
     */
    supplyListPartnerManagers(request: SupplyListPartnerManagersRequest): Promise<SupplyListPartnerManagersResponse>;
    /**
     * @summary 查询下级伙伴标签
     *
     * @param request SupplyListPartnerTypeRequest
     * @param headers SupplyListPartnerTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyListPartnerTypeResponse
     */
    supplyListPartnerTypeWithOptions(request: SupplyListPartnerTypeRequest, headers: SupplyListPartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListPartnerTypeResponse>;
    /**
     * @summary 查询下级伙伴标签
     *
     * @param request SupplyListPartnerTypeRequest
     * @return SupplyListPartnerTypeResponse
     */
    supplyListPartnerType(request: SupplyListPartnerTypeRequest): Promise<SupplyListPartnerTypeResponse>;
    /**
     * @summary 查询角色组或角色
     *
     * @param request SupplyListRoleRequest
     * @param headers SupplyListRoleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyListRoleResponse
     */
    supplyListRoleWithOptions(request: SupplyListRoleRequest, headers: SupplyListRoleHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListRoleResponse>;
    /**
     * @summary 查询角色组或角色
     *
     * @param request SupplyListRoleRequest
     * @return SupplyListRoleResponse
     */
    supplyListRole(request: SupplyListRoleRequest): Promise<SupplyListRoleResponse>;
    /**
     * @summary 查询下级节点列表
     *
     * @param request SupplyListSubDeptRequest
     * @param headers SupplyListSubDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyListSubDeptResponse
     */
    supplyListSubDeptWithOptions(request: SupplyListSubDeptRequest, headers: SupplyListSubDeptHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyListSubDeptResponse>;
    /**
     * @summary 查询下级节点列表
     *
     * @param request SupplyListSubDeptRequest
     * @return SupplyListSubDeptResponse
     */
    supplyListSubDept(request: SupplyListSubDeptRequest): Promise<SupplyListSubDeptResponse>;
    /**
     * @summary 查询伙伴标签
     *
     * @param request SupplyQueryPartnerTypeRequest
     * @param headers SupplyQueryPartnerTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyQueryPartnerTypeResponse
     */
    supplyQueryPartnerTypeWithOptions(request: SupplyQueryPartnerTypeRequest, headers: SupplyQueryPartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyQueryPartnerTypeResponse>;
    /**
     * @summary 查询伙伴标签
     *
     * @param request SupplyQueryPartnerTypeRequest
     * @return SupplyQueryPartnerTypeResponse
     */
    supplyQueryPartnerType(request: SupplyQueryPartnerTypeRequest): Promise<SupplyQueryPartnerTypeResponse>;
    /**
     * @summary 更新供应商人员信息
     *
     * @param request SupplyUpdateMemberRequest
     * @param headers SupplyUpdateMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyUpdateMemberResponse
     */
    supplyUpdateMemberWithOptions(request: SupplyUpdateMemberRequest, headers: SupplyUpdateMemberHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyUpdateMemberResponse>;
    /**
     * @summary 更新供应商人员信息
     *
     * @param request SupplyUpdateMemberRequest
     * @return SupplyUpdateMemberResponse
     */
    supplyUpdateMember(request: SupplyUpdateMemberRequest): Promise<SupplyUpdateMemberResponse>;
    /**
     * @summary 更新伙伴标签
     *
     * @param request SupplyUpdatePartnerTypeRequest
     * @param headers SupplyUpdatePartnerTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyUpdatePartnerTypeResponse
     */
    supplyUpdatePartnerTypeWithOptions(request: SupplyUpdatePartnerTypeRequest, headers: SupplyUpdatePartnerTypeHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyUpdatePartnerTypeResponse>;
    /**
     * @summary 更新伙伴标签
     *
     * @param request SupplyUpdatePartnerTypeRequest
     * @return SupplyUpdatePartnerTypeResponse
     */
    supplyUpdatePartnerType(request: SupplyUpdatePartnerTypeRequest): Promise<SupplyUpdatePartnerTypeResponse>;
    /**
     * @summary 更新角色或角色组
     *
     * @param request SupplyUpdateRoleRequest
     * @param headers SupplyUpdateRoleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SupplyUpdateRoleResponse
     */
    supplyUpdateRoleWithOptions(request: SupplyUpdateRoleRequest, headers: SupplyUpdateRoleHeaders, runtime: $Util.RuntimeOptions): Promise<SupplyUpdateRoleResponse>;
    /**
     * @summary 更新角色或角色组
     *
     * @param request SupplyUpdateRoleRequest
     * @return SupplyUpdateRoleResponse
     */
    supplyUpdateRole(request: SupplyUpdateRoleRequest): Promise<SupplyUpdateRoleResponse>;
    /**
     * @summary 更新医疗用户扩展信息
     *
     * @param request UpdateUserExtendInfoRequest
     * @param headers UpdateUserExtendInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateUserExtendInfoResponse
     */
    updateUserExtendInfoWithOptions(userId: string, request: UpdateUserExtendInfoRequest, headers: UpdateUserExtendInfoHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateUserExtendInfoResponse>;
    /**
     * @summary 更新医疗用户扩展信息
     *
     * @param request UpdateUserExtendInfoRequest
     * @return UpdateUserExtendInfoResponse
     */
    updateUserExtendInfo(userId: string, request: UpdateUserExtendInfoRequest): Promise<UpdateUserExtendInfoResponse>;
}
