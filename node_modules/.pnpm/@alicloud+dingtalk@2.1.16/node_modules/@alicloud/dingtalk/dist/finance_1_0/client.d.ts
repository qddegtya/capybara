/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ApplyBatchPayHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyBatchPayRequest extends $tea.Model {
    accountId?: string;
    orderNo?: string;
    passBackParams?: {
        [key: string]: any;
    };
    payTerminal?: string;
    returnUrl?: string;
    staffId?: string;
    transAmount?: string;
    transExpireTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyBatchPayResponseBody extends $tea.Model {
    orderNo?: string;
    payData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ApplyBatchPayResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ApplyBatchPayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseLoanEntranceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseLoanEntranceRequest extends $tea.Model {
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseLoanEntranceResponseBody extends $tea.Model {
    requestId?: string;
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CloseLoanEntranceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CloseLoanEntranceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequest extends $tea.Model {
    bindingAlipayLogonId?: string;
    contactInfo?: ConsultCreateSubInstitutionRequestContactInfo;
    instId?: string;
    legalPersonCertInfo?: ConsultCreateSubInstitutionRequestLegalPersonCertInfo;
    outTradeNo?: string;
    payChannel?: string;
    qualificationInfos?: ConsultCreateSubInstitutionRequestQualificationInfos[];
    services?: string[];
    settleInfo?: ConsultCreateSubInstitutionRequestSettleInfo;
    solution?: string;
    subInstAddressInfo?: ConsultCreateSubInstitutionRequestSubInstAddressInfo;
    subInstAuthInfo?: ConsultCreateSubInstitutionRequestSubInstAuthInfo;
    subInstBasicInfo?: ConsultCreateSubInstitutionRequestSubInstBasicInfo;
    subInstCertifyInfo?: ConsultCreateSubInstitutionRequestSubInstCertifyInfo;
    subInstId?: string;
    subInstInvoiceInfo?: ConsultCreateSubInstitutionRequestSubInstInvoiceInfo;
    subInstShopInfo?: ConsultCreateSubInstitutionRequestSubInstShopInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionResponseBody extends $tea.Model {
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ConsultCreateSubInstitutionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatWithholdingOrderAndPayHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatWithholdingOrderAndPayRequest extends $tea.Model {
    amount?: string;
    instId?: string;
    otherPayChannelDetailInfoList?: CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoList[];
    outTradeNo?: string;
    payChannel?: string;
    payerUserId?: string;
    remark?: string;
    subInstId?: string;
    timeOutExpress?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatWithholdingOrderAndPayResponseBody extends $tea.Model {
    amount?: string;
    gmtPay?: string;
    instId?: string;
    orderNo?: string;
    outTradeNo?: string;
    payChannel?: string;
    payChannelAccountNo?: string;
    payerStaffId?: string;
    remark?: string;
    status?: string;
    subInstId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatWithholdingOrderAndPayResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreatWithholdingOrderAndPayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAcquireRefundOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAcquireRefundOrderRequest extends $tea.Model {
    instId?: string;
    operatorUserId?: string;
    originOutTradeNo?: string;
    otherPayChannelDetailInfoList?: CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoList[];
    outRefundNo?: string;
    refundAmount?: string;
    remark?: string;
    subInstId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAcquireRefundOrderResponseBody extends $tea.Model {
    outRefundNo?: string;
    refundOrderNo?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAcquireRefundOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAcquireRefundOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBatchTradeOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBatchTradeOrderRequest extends $tea.Model {
    accountId?: string;
    accountNo?: string;
    batchRemark?: string;
    batchTradeDetails?: CreateBatchTradeOrderRequestBatchTradeDetails[];
    outBatchNo?: string;
    staffId?: string;
    totalAmount?: string;
    totalCount?: number;
    tradeTitle?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBatchTradeOrderResponseBody extends $tea.Model {
    orderNo?: string;
    orderStatus?: string;
    outBatchNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBatchTradeOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateBatchTradeOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequest extends $tea.Model {
    bindingAlipayLogonId?: string;
    contactInfo?: CreateSubInstitutionRequestContactInfo;
    instId?: string;
    legalPersonCertInfo?: CreateSubInstitutionRequestLegalPersonCertInfo;
    outTradeNo?: string;
    payChannel?: string;
    qualificationInfos?: CreateSubInstitutionRequestQualificationInfos[];
    services?: string[];
    settleInfo?: CreateSubInstitutionRequestSettleInfo;
    solution?: string;
    subInstAddressInfo?: CreateSubInstitutionRequestSubInstAddressInfo;
    subInstAuthInfo?: CreateSubInstitutionRequestSubInstAuthInfo;
    subInstBasicInfo?: CreateSubInstitutionRequestSubInstBasicInfo;
    subInstCertifyInfo?: CreateSubInstitutionRequestSubInstCertifyInfo;
    subInstId?: string;
    subInstInvoiceInfo?: CreateSubInstitutionRequestSubInstInvoiceInfo;
    subInstShopInfo?: CreateSubInstitutionRequestSubInstShopInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionResponseBody extends $tea.Model {
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSubInstitutionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUserCodeInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUserCodeInstanceRequest extends $tea.Model {
    availableTimes?: CreateUserCodeInstanceRequestAvailableTimes[];
    codeIdentity?: string;
    codeValue?: string;
    codeValueType?: string;
    corpId?: string;
    extInfo?: {
        [key: string]: any;
    };
    gmtExpired?: string;
    requestId?: string;
    status?: string;
    userCorpRelationType?: string;
    userIdentity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUserCodeInstanceResponseBody extends $tea.Model {
    codeDetailUrl?: string;
    codeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUserCodeInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateUserCodeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodePayCodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodePayCodeRequest extends $tea.Model {
    payCode?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodePayCodeResponseBody extends $tea.Model {
    alipayCode?: string;
    codeId?: string;
    codeIdentity?: string;
    codeType?: string;
    corpId?: string;
    extInfo?: string;
    outBizId?: string;
    userCorpRelationType?: string;
    userId?: string;
    userInCorp?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DecodePayCodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DecodePayCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequest extends $tea.Model {
    bindingAlipayLogonId?: string;
    contactInfo?: ModifySubInstitutionRequestContactInfo;
    instId?: string;
    legalPersonCertInfo?: ModifySubInstitutionRequestLegalPersonCertInfo;
    outTradeNo?: string;
    payChannel?: string;
    qualificationInfos?: ModifySubInstitutionRequestQualificationInfos[];
    services?: string[];
    settleInfo?: ModifySubInstitutionRequestSettleInfo;
    subInstAddressInfo?: ModifySubInstitutionRequestSubInstAddressInfo;
    subInstAuthInfo?: ModifySubInstitutionRequestSubInstAuthInfo;
    subInstBasicInfo?: ModifySubInstitutionRequestSubInstBasicInfo;
    subInstCertifyInfo?: ModifySubInstitutionRequestSubInstCertifyInfo;
    subInstId?: string;
    subInstInvoiceInfo?: ModifySubInstitutionRequestSubInstInvoiceInfo;
    subInstShopInfo?: ModifySubInstitutionRequestSubInstShopInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionResponseBody extends $tea.Model {
    orderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifySubInstitutionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodePayResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodePayResultRequest extends $tea.Model {
    amount?: string;
    chargeAmount?: string;
    corpId?: string;
    extInfo?: string;
    gmtTradeCreate?: string;
    gmtTradeFinish?: string;
    merchantName?: string;
    payChannelDetailList?: NotifyPayCodePayResultRequestPayChannelDetailList[];
    payCode?: string;
    promotionAmount?: string;
    remark?: string;
    title?: string;
    tradeErrorCode?: string;
    tradeErrorMsg?: string;
    tradeNo?: string;
    tradeStatus?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodePayResultResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodePayResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: NotifyPayCodePayResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodeRefundResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodeRefundResultRequest extends $tea.Model {
    corpId?: string;
    gmtRefund?: string;
    payChannelDetailList?: NotifyPayCodeRefundResultRequestPayChannelDetailList[];
    payCode?: string;
    refundAmount?: string;
    refundOrderNo?: string;
    refundPromotionAmount?: string;
    remark?: string;
    tradeNo?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodeRefundResultResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodeRefundResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: NotifyPayCodeRefundResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyVerifyResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyVerifyResultRequest extends $tea.Model {
    corpId?: string;
    payCode?: string;
    remark?: string;
    userCorpRelationType?: string;
    userIdentity?: string;
    verifyEvent?: string;
    verifyLocation?: string;
    verifyNo?: string;
    verifyResult?: boolean;
    verifyTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyVerifyResultResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyVerifyResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: NotifyVerifyResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCreateGroupBillOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCreateGroupBillOrderRequest extends $tea.Model {
    billItemList?: PreCreateGroupBillOrderRequestBillItemList[];
    extParams?: {
        [key: string]: string;
    };
    headCount?: number;
    isAverageAmount?: number;
    merchantId?: string;
    openCid?: string;
    outBizNo?: string;
    payeeCorpId?: string;
    payeeUnionId?: string;
    remark?: string;
    totalAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCreateGroupBillOrderResponseBody extends $tea.Model {
    result?: PreCreateGroupBillOrderResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCreateGroupBillOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PreCreateGroupBillOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAcquireRefundOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAcquireRefundOrderRequest extends $tea.Model {
    outRefundNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAcquireRefundOrderResponseBody extends $tea.Model {
    amount?: string;
    gmtCreate?: string;
    gmtRefund?: string;
    instId?: string;
    orderNo?: string;
    originOutTradeNo?: string;
    outRefundNo?: string;
    payChannel?: string;
    payChannelAccountNo?: string;
    payerUserId?: string;
    remark?: string;
    status?: string;
    subInstId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAcquireRefundOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAcquireRefundOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeDetailListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeDetailListRequest extends $tea.Model {
    outBatchNo?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeDetailListResponseBody extends $tea.Model {
    batchTradeDetailList?: QueryBatchTradeDetailListResponseBodyBatchTradeDetailList[];
    pageNumber?: number;
    pageSize?: number;
    total?: number;
    totalPageNumber?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeDetailListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryBatchTradeDetailListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeOrderRequest extends $tea.Model {
    outBatchNos?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeOrderResponseBody extends $tea.Model {
    batchTradeOrderVOs?: QueryBatchTradeOrderResponseBodyBatchTradeOrderVOs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryBatchTradeOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayAccountListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayAccountListResponseBody extends $tea.Model {
    payAccountVOList?: QueryPayAccountListResponseBodyPayAccountVOList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayAccountListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryPayAccountListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRegisterOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRegisterOrderRequest extends $tea.Model {
    instId?: string;
    orderId?: string;
    outTradeNo?: string;
    subInstId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRegisterOrderResponseBody extends $tea.Model {
    failReason?: string;
    gmtAudit?: string;
    instId?: string;
    orderId?: string;
    outTradeNo?: string;
    status?: string;
    subInstId?: string;
    subInstName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRegisterOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryRegisterOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserAgreementHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserAgreementRequest extends $tea.Model {
    bizCode?: string;
    bizScene?: string;
    instId?: string;
    subInstId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserAgreementResponseBody extends $tea.Model {
    agreementNo?: string;
    corpId?: string;
    gmtExpire?: string;
    gmtSign?: string;
    gmtValid?: string;
    instId?: string;
    payChannel?: string;
    payChannelAccountName?: string;
    payChannelAccountNo?: string;
    status?: string;
    subInstId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserAgreementResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserAgreementResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserAlipayAccountHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserAlipayAccountResponseBody extends $tea.Model {
    alipayUid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserAlipayAccountResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserAlipayAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryWithholdingOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryWithholdingOrderRequest extends $tea.Model {
    outTradeNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryWithholdingOrderResponseBody extends $tea.Model {
    amount?: string;
    gmtCreate?: string;
    gmtPay?: string;
    instId?: string;
    orderNo?: string;
    outTradeNo?: string;
    payChannel?: string;
    payChannelAccountNo?: string;
    payerUserId?: string;
    remark?: string;
    status?: string;
    subInstId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryWithholdingOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryWithholdingOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCorpPayCodeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCorpPayCodeRequest extends $tea.Model {
    codeIdentity?: string;
    corpId?: string;
    extInfo?: {
        [key: string]: string;
    };
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCorpPayCodeResponseBody extends $tea.Model {
    codeIdentity?: string;
    corpId?: string;
    extInfo?: {
        [key: string]: string;
    };
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCorpPayCodeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveCorpPayCodeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsignUserAgreementHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsignUserAgreementRequest extends $tea.Model {
    agreementNo?: string;
    bizCode?: string;
    bizScene?: string;
    instId?: string;
    subInstId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsignUserAgreementResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpateUserCodeInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpateUserCodeInstanceRequest extends $tea.Model {
    availableTimes?: UpateUserCodeInstanceRequestAvailableTimes[];
    codeId?: string;
    codeIdentity?: string;
    codeValue?: string;
    corpId?: string;
    extInfo?: {
        [key: string]: any;
    };
    gmtExpired?: string;
    status?: string;
    userCorpRelationType?: string;
    userIdentity?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpateUserCodeInstanceResponseBody extends $tea.Model {
    codeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpateUserCodeInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpateUserCodeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInvoiceVerifyStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInvoiceVerifyStatusRequest extends $tea.Model {
    bizId?: string;
    checkingResult?: number;
    checkingStatus?: number;
    code?: string;
    corpId?: string;
    extension?: string;
    invoiceCode?: string;
    invoiceNo?: string;
    invoiceStatus?: number;
    invoiceVerifyId?: string;
    msg?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInvoiceVerifyStatusResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInvoiceVerifyStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateInvoiceVerifyStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceRequest extends $tea.Model {
    extension?: UploadInvoiceRequestExtension;
    invoices?: UploadInvoiceRequestInvoices[];
    userIdentity?: UploadInvoiceRequestUserIdentity;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceResponseBody extends $tea.Model {
    result?: UploadInvoiceResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UploadInvoiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByAuthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByAuthRequest extends $tea.Model {
    extension?: UploadInvoiceByAuthRequestExtension;
    invoices?: UploadInvoiceByAuthRequestInvoices[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByAuthResponseBody extends $tea.Model {
    result?: UploadInvoiceByAuthResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByAuthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UploadInvoiceByAuthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByMobileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByMobileRequest extends $tea.Model {
    invoices?: UploadInvoiceByMobileRequestInvoices[];
    mobile?: string;
    mobileStateCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByMobileResponseBody extends $tea.Model {
    result?: UploadInvoiceByMobileResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByMobileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UploadInvoiceByMobileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadRegisterImageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadRegisterImageRequest extends $tea.Model {
    imageContent?: string;
    imageName?: string;
    imageType?: string;
    instId?: string;
    payChannel?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadRegisterImageResponseBody extends $tea.Model {
    ossUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadRegisterImageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UploadRegisterImageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserAgreementPageSignHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserAgreementPageSignRequest extends $tea.Model {
    bizCode?: string;
    bizScene?: string;
    instId?: string;
    payChannel?: string;
    remark?: string;
    returnUrl?: string;
    signScene?: string;
    subInstId?: string;
    subMerchantName?: string;
    subMerchantServiceDesc?: string;
    subMerchantServiceName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserAgreementPageSignResponseBody extends $tea.Model {
    pageData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UserAgreementPageSignResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UserAgreementPageSignResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestContactInfo extends $tea.Model {
    contactName?: string;
    mobile?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestLegalPersonCertInfo extends $tea.Model {
    certBackImage?: string;
    certFrontImage?: string;
    certName?: string;
    certType?: string;
    idCardNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestQualificationInfos extends $tea.Model {
    qualificationImage?: string;
    qualificationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestSettleInfo extends $tea.Model {
    accountId?: string;
    accountName?: string;
    accountType?: string;
    bankBranchName?: string;
    bankCity?: string;
    bankCode?: string;
    bankName?: string;
    bankProvince?: string;
    bankShortNameCode?: string;
    type?: string;
    usageType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestSubInstAddressInfo extends $tea.Model {
    address?: string;
    cityCode?: string;
    districtCode?: string;
    provinceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestSubInstAuthInfo extends $tea.Model {
    authorizationLetterUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestSubInstBasicInfo extends $tea.Model {
    aliasName?: string;
    mcc?: string;
    subInstName?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestSubInstCertifyInfo extends $tea.Model {
    certImage?: string;
    certNo?: string;
    certType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestSubInstInvoiceInfoMailAddress extends $tea.Model {
    address?: string;
    cityCode?: string;
    districtCode?: string;
    provinceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestSubInstInvoiceInfo extends $tea.Model {
    acceptElectronic?: boolean;
    address?: string;
    autoInvoice?: boolean;
    bankAccount?: string;
    bankName?: string;
    mailAddress?: ConsultCreateSubInstitutionRequestSubInstInvoiceInfoMailAddress;
    mailName?: string;
    mailPhone?: string;
    taxNo?: string;
    taxPayerQualification?: string;
    taxPayerValidDate?: string;
    telephone?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsultCreateSubInstitutionRequestSubInstShopInfo extends $tea.Model {
    inDoorImages?: string[];
    outDoorImages?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoListFundToolDetailInfoList extends $tea.Model {
    amount?: string;
    extInfo?: string;
    fundToolName?: string;
    gmtCreate?: string;
    gmtFinish?: string;
    promotionFundTool?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoList extends $tea.Model {
    amount?: string;
    fundToolDetailInfoList?: CreatWithholdingOrderAndPayRequestOtherPayChannelDetailInfoListFundToolDetailInfoList[];
    payChannelName?: string;
    payChannelOrderNo?: string;
    payChannelType?: string;
    promotionAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoListFundToolDetailInfoList extends $tea.Model {
    amount?: string;
    extInfo?: string;
    fundToolName?: string;
    gmtCreate?: string;
    gmtFinish?: string;
    promotionFundTool?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoList extends $tea.Model {
    amount?: string;
    fundToolDetailInfoList?: CreateAcquireRefundOrderRequestOtherPayChannelDetailInfoListFundToolDetailInfoList[];
    payChannelName?: string;
    payChannelOrderNo?: string;
    payChannelType?: string;
    promotionAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateBatchTradeOrderRequestBatchTradeDetails extends $tea.Model {
    amount?: string;
    memo?: string;
    payeeAccountName?: string;
    payeeAccountNo?: string;
    payeeAccountType?: string;
    serialNo?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestContactInfo extends $tea.Model {
    contactName?: string;
    mobile?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestLegalPersonCertInfo extends $tea.Model {
    certBackImage?: string;
    certFrontImage?: string;
    certName?: string;
    certType?: string;
    idCardNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestQualificationInfos extends $tea.Model {
    qualificationImage?: string;
    qualificationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestSettleInfo extends $tea.Model {
    accountId?: string;
    accountName?: string;
    accountType?: string;
    bankBranchName?: string;
    bankCity?: string;
    bankCode?: string;
    bankName?: string;
    bankProvince?: string;
    bankShortNameCode?: string;
    type?: string;
    usageType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestSubInstAddressInfo extends $tea.Model {
    address?: string;
    cityCode?: string;
    districtCode?: string;
    provinceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestSubInstAuthInfo extends $tea.Model {
    authorizationLetterUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestSubInstBasicInfo extends $tea.Model {
    aliasName?: string;
    mcc?: string;
    subInstName?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestSubInstCertifyInfo extends $tea.Model {
    certImage?: string;
    certNo?: string;
    certType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestSubInstInvoiceInfoMailAddress extends $tea.Model {
    address?: string;
    cityCode?: string;
    districtCode?: string;
    provinceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestSubInstInvoiceInfo extends $tea.Model {
    acceptElectronic?: boolean;
    address?: string;
    autoInvoice?: boolean;
    bankAccount?: string;
    bankName?: string;
    mailAddress?: CreateSubInstitutionRequestSubInstInvoiceInfoMailAddress;
    mailName?: string;
    mailPhone?: string;
    taxNo?: string;
    taxPayerQualification?: string;
    taxPayerValidDate?: string;
    telephone?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSubInstitutionRequestSubInstShopInfo extends $tea.Model {
    inDoorImages?: string[];
    outDoorImages?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUserCodeInstanceRequestAvailableTimes extends $tea.Model {
    gmtEnd?: string;
    gmtStart?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestContactInfo extends $tea.Model {
    contactName?: string;
    mobile?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestLegalPersonCertInfo extends $tea.Model {
    certBackImage?: string;
    certFrontImage?: string;
    certName?: string;
    certType?: string;
    idCardNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestQualificationInfos extends $tea.Model {
    qualificationImage?: string;
    qualificationType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestSettleInfo extends $tea.Model {
    accountId?: string;
    accountName?: string;
    accountType?: string;
    bankBranchName?: string;
    bankCity?: string;
    bankCode?: string;
    bankName?: string;
    bankProvince?: string;
    bankShortNameCode?: string;
    type?: string;
    usageType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestSubInstAddressInfo extends $tea.Model {
    address?: string;
    cityCode?: string;
    districtCode?: string;
    provinceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestSubInstAuthInfo extends $tea.Model {
    authorizationLetterUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestSubInstBasicInfo extends $tea.Model {
    aliasName?: string;
    mcc?: string;
    subInstName?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestSubInstCertifyInfo extends $tea.Model {
    certImage?: string;
    certNo?: string;
    certType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestSubInstInvoiceInfoMailAddress extends $tea.Model {
    address?: string;
    cityCode?: string;
    districtCode?: string;
    provinceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestSubInstInvoiceInfo extends $tea.Model {
    acceptElectronic?: boolean;
    address?: string;
    autoInvoice?: boolean;
    bankAccount?: string;
    bankName?: string;
    mailAddress?: ModifySubInstitutionRequestSubInstInvoiceInfoMailAddress;
    mailName?: string;
    mailPhone?: string;
    taxNo?: string;
    taxPayerQualification?: string;
    taxPayerValidDate?: string;
    telephone?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifySubInstitutionRequestSubInstShopInfo extends $tea.Model {
    inDoorImages?: string[];
    outDoorImages?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodePayResultRequestPayChannelDetailListFundToolDetailList extends $tea.Model {
    amount?: string;
    extInfo?: string;
    fundToolName?: string;
    gmtCreate?: string;
    gmtFinish?: string;
    promotionFundTool?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodePayResultRequestPayChannelDetailList extends $tea.Model {
    amount?: string;
    fundToolDetailList?: NotifyPayCodePayResultRequestPayChannelDetailListFundToolDetailList[];
    gmtCreate?: string;
    gmtFinish?: string;
    payChannelName?: string;
    payChannelOrderNo?: string;
    payChannelType?: string;
    promotionAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodeRefundResultRequestPayChannelDetailListFundToolDetailList extends $tea.Model {
    amount?: string;
    extInfo?: string;
    fundToolName?: string;
    gmtCreate?: string;
    gmtFinish?: string;
    promotionFundTool?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class NotifyPayCodeRefundResultRequestPayChannelDetailList extends $tea.Model {
    amount?: string;
    fundToolDetailList?: NotifyPayCodeRefundResultRequestPayChannelDetailListFundToolDetailList[];
    payChannelName?: string;
    payChannelOrderNo?: string;
    payChannelRefundOrderNo?: string;
    payChannelType?: string;
    promotionAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCreateGroupBillOrderRequestBillItemList extends $tea.Model {
    amount?: string;
    payerUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCreateGroupBillOrderResponseBodyResult extends $tea.Model {
    orderNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeDetailListResponseBodyBatchTradeDetailList extends $tea.Model {
    amount?: string;
    detailNo?: string;
    gmtCreate?: string;
    gmtFinish?: string;
    memo?: string;
    payeeAccountName?: string;
    payeeAccountNo?: string;
    payeeAccountType?: string;
    serialNo?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBatchTradeOrderResponseBodyBatchTradeOrderVOs extends $tea.Model {
    alipayTransId?: string;
    failAmount?: string;
    failCount?: number;
    failReason?: string;
    gmtFinish?: string;
    gmtSubmit?: string;
    outBatchNo?: string;
    payerStaffId?: string;
    paymentAmount?: string;
    paymentCurrency?: string;
    status?: string;
    successAmount?: string;
    successCount?: number;
    totalAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayAccountListResponseBodyPayAccountVOList extends $tea.Model {
    accountClass?: string;
    accountId?: string;
    accountName?: string;
    accountNo?: string;
    accountRemark?: string;
    accountType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpateUserCodeInstanceRequestAvailableTimes extends $tea.Model {
    gmtEnd?: string;
    gmtStart?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceRequestExtension extends $tea.Model {
    bizCode?: string;
    orderNo?: string;
    orderNoList?: string[];
    orderType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceRequestInvoices extends $tea.Model {
    invoiceAmount?: string;
    invoiceCode?: string;
    invoiceDate?: string;
    invoiceNo?: string;
    invoiceType?: string;
    logoUrl?: string;
    payeeName?: string;
    payeeTaxNo?: string;
    payerName?: string;
    payerTaxNo?: string;
    pdfUrl?: string;
    taxAmount?: string;
    verifyCode?: string;
    withoutTaxAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceRequestUserIdentity extends $tea.Model {
    mobile?: string;
    mobileStateCode?: string;
    targetCorpId?: string;
    type?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceResponseBodyResultResults extends $tea.Model {
    errCode?: string;
    invoiceCode?: string;
    invoiceNo?: string;
    reason?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceResponseBodyResult extends $tea.Model {
    results?: UploadInvoiceResponseBodyResultResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByAuthRequestExtension extends $tea.Model {
    bizCode?: string;
    orderNo?: string;
    orderType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByAuthRequestInvoices extends $tea.Model {
    invoiceAmount?: string;
    invoiceCode?: string;
    invoiceDate?: string;
    invoiceNo?: string;
    invoiceType?: string;
    logoUrl?: string;
    payeeName?: string;
    payeeTaxNo?: string;
    payerName?: string;
    payerTaxNo?: string;
    pdfUrl?: string;
    taxAmount?: string;
    verifyCode?: string;
    withoutTaxAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByAuthResponseBodyResultResults extends $tea.Model {
    errCode?: string;
    invoiceCode?: string;
    invoiceNo?: string;
    reason?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByAuthResponseBodyResult extends $tea.Model {
    results?: UploadInvoiceByAuthResponseBodyResultResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByMobileRequestInvoices extends $tea.Model {
    invoiceAmount?: string;
    invoiceCode?: string;
    invoiceDate?: string;
    invoiceNo?: string;
    invoiceType?: string;
    logoUrl?: string;
    payeeName?: string;
    payeeTaxNo?: string;
    payerName?: string;
    payerTaxNo?: string;
    pdfUrl?: string;
    taxAmount?: string;
    verifyCode?: string;
    withoutTaxAmount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByMobileResponseBodyResultResults extends $tea.Model {
    errCode?: string;
    invoiceCode?: string;
    invoiceNo?: string;
    reason?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadInvoiceByMobileResponseBodyResult extends $tea.Model {
    results?: UploadInvoiceByMobileResponseBodyResultResults[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 批量付款
     *
     * @param request ApplyBatchPayRequest
     * @param headers ApplyBatchPayHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ApplyBatchPayResponse
     */
    applyBatchPayWithOptions(request: ApplyBatchPayRequest, headers: ApplyBatchPayHeaders, runtime: $Util.RuntimeOptions): Promise<ApplyBatchPayResponse>;
    /**
     * @summary 批量付款
     *
     * @param request ApplyBatchPayRequest
     * @return ApplyBatchPayResponse
     */
    applyBatchPay(request: ApplyBatchPayRequest): Promise<ApplyBatchPayResponse>;
    /**
     * @summary 助贷业务关闭借款入口
     *
     * @param request CloseLoanEntranceRequest
     * @param headers CloseLoanEntranceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CloseLoanEntranceResponse
     */
    closeLoanEntranceWithOptions(request: CloseLoanEntranceRequest, headers: CloseLoanEntranceHeaders, runtime: $Util.RuntimeOptions): Promise<CloseLoanEntranceResponse>;
    /**
     * @summary 助贷业务关闭借款入口
     *
     * @param request CloseLoanEntranceRequest
     * @return CloseLoanEntranceResponse
     */
    closeLoanEntrance(request: CloseLoanEntranceRequest): Promise<CloseLoanEntranceResponse>;
    /**
     * @summary 子机构创建进件预校验
     *
     * @param request ConsultCreateSubInstitutionRequest
     * @param headers ConsultCreateSubInstitutionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ConsultCreateSubInstitutionResponse
     */
    consultCreateSubInstitutionWithOptions(request: ConsultCreateSubInstitutionRequest, headers: ConsultCreateSubInstitutionHeaders, runtime: $Util.RuntimeOptions): Promise<ConsultCreateSubInstitutionResponse>;
    /**
     * @summary 子机构创建进件预校验
     *
     * @param request ConsultCreateSubInstitutionRequest
     * @return ConsultCreateSubInstitutionResponse
     */
    consultCreateSubInstitution(request: ConsultCreateSubInstitutionRequest): Promise<ConsultCreateSubInstitutionResponse>;
    /**
     * @summary 发起代扣交易
     *
     * @param request CreatWithholdingOrderAndPayRequest
     * @param headers CreatWithholdingOrderAndPayHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreatWithholdingOrderAndPayResponse
     */
    creatWithholdingOrderAndPayWithOptions(request: CreatWithholdingOrderAndPayRequest, headers: CreatWithholdingOrderAndPayHeaders, runtime: $Util.RuntimeOptions): Promise<CreatWithholdingOrderAndPayResponse>;
    /**
     * @summary 发起代扣交易
     *
     * @param request CreatWithholdingOrderAndPayRequest
     * @return CreatWithholdingOrderAndPayResponse
     */
    creatWithholdingOrderAndPay(request: CreatWithholdingOrderAndPayRequest): Promise<CreatWithholdingOrderAndPayResponse>;
    /**
     * @summary 收单退款交易
     *
     * @param request CreateAcquireRefundOrderRequest
     * @param headers CreateAcquireRefundOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAcquireRefundOrderResponse
     */
    createAcquireRefundOrderWithOptions(request: CreateAcquireRefundOrderRequest, headers: CreateAcquireRefundOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAcquireRefundOrderResponse>;
    /**
     * @summary 收单退款交易
     *
     * @param request CreateAcquireRefundOrderRequest
     * @return CreateAcquireRefundOrderResponse
     */
    createAcquireRefundOrder(request: CreateAcquireRefundOrderRequest): Promise<CreateAcquireRefundOrderResponse>;
    /**
     * @summary 创建批量支付单
     *
     * @param request CreateBatchTradeOrderRequest
     * @param headers CreateBatchTradeOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateBatchTradeOrderResponse
     */
    createBatchTradeOrderWithOptions(request: CreateBatchTradeOrderRequest, headers: CreateBatchTradeOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CreateBatchTradeOrderResponse>;
    /**
     * @summary 创建批量支付单
     *
     * @param request CreateBatchTradeOrderRequest
     * @return CreateBatchTradeOrderResponse
     */
    createBatchTradeOrder(request: CreateBatchTradeOrderRequest): Promise<CreateBatchTradeOrderResponse>;
    /**
     * @summary 创建子机构
     *
     * @param request CreateSubInstitutionRequest
     * @param headers CreateSubInstitutionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSubInstitutionResponse
     */
    createSubInstitutionWithOptions(request: CreateSubInstitutionRequest, headers: CreateSubInstitutionHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSubInstitutionResponse>;
    /**
     * @summary 创建子机构
     *
     * @param request CreateSubInstitutionRequest
     * @return CreateSubInstitutionResponse
     */
    createSubInstitution(request: CreateSubInstitutionRequest): Promise<CreateSubInstitutionResponse>;
    /**
     * @summary 创建用户码实例
     *
     * @param request CreateUserCodeInstanceRequest
     * @param headers CreateUserCodeInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateUserCodeInstanceResponse
     */
    createUserCodeInstanceWithOptions(request: CreateUserCodeInstanceRequest, headers: CreateUserCodeInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateUserCodeInstanceResponse>;
    /**
     * @summary 创建用户码实例
     *
     * @param request CreateUserCodeInstanceRequest
     * @return CreateUserCodeInstanceResponse
     */
    createUserCodeInstance(request: CreateUserCodeInstanceRequest): Promise<CreateUserCodeInstanceResponse>;
    /**
     * @summary 解码付款码
     *
     * @param request DecodePayCodeRequest
     * @param headers DecodePayCodeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DecodePayCodeResponse
     */
    decodePayCodeWithOptions(request: DecodePayCodeRequest, headers: DecodePayCodeHeaders, runtime: $Util.RuntimeOptions): Promise<DecodePayCodeResponse>;
    /**
     * @summary 解码付款码
     *
     * @param request DecodePayCodeRequest
     * @return DecodePayCodeResponse
     */
    decodePayCode(request: DecodePayCodeRequest): Promise<DecodePayCodeResponse>;
    /**
     * @summary 修改子机构信息
     *
     * @param request ModifySubInstitutionRequest
     * @param headers ModifySubInstitutionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifySubInstitutionResponse
     */
    modifySubInstitutionWithOptions(request: ModifySubInstitutionRequest, headers: ModifySubInstitutionHeaders, runtime: $Util.RuntimeOptions): Promise<ModifySubInstitutionResponse>;
    /**
     * @summary 修改子机构信息
     *
     * @param request ModifySubInstitutionRequest
     * @return ModifySubInstitutionResponse
     */
    modifySubInstitution(request: ModifySubInstitutionRequest): Promise<ModifySubInstitutionResponse>;
    /**
     * @summary 通知付款码支付结果
     *
     * @param request NotifyPayCodePayResultRequest
     * @param headers NotifyPayCodePayResultHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return NotifyPayCodePayResultResponse
     */
    notifyPayCodePayResultWithOptions(request: NotifyPayCodePayResultRequest, headers: NotifyPayCodePayResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyPayCodePayResultResponse>;
    /**
     * @summary 通知付款码支付结果
     *
     * @param request NotifyPayCodePayResultRequest
     * @return NotifyPayCodePayResultResponse
     */
    notifyPayCodePayResult(request: NotifyPayCodePayResultRequest): Promise<NotifyPayCodePayResultResponse>;
    /**
     * @summary 通知付款码退款结果
     *
     * @param request NotifyPayCodeRefundResultRequest
     * @param headers NotifyPayCodeRefundResultHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return NotifyPayCodeRefundResultResponse
     */
    notifyPayCodeRefundResultWithOptions(request: NotifyPayCodeRefundResultRequest, headers: NotifyPayCodeRefundResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyPayCodeRefundResultResponse>;
    /**
     * @summary 通知付款码退款结果
     *
     * @param request NotifyPayCodeRefundResultRequest
     * @return NotifyPayCodeRefundResultResponse
     */
    notifyPayCodeRefundResult(request: NotifyPayCodeRefundResultRequest): Promise<NotifyPayCodeRefundResultResponse>;
    /**
     * @summary 上报码验证结果
     *
     * @param request NotifyVerifyResultRequest
     * @param headers NotifyVerifyResultHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return NotifyVerifyResultResponse
     */
    notifyVerifyResultWithOptions(request: NotifyVerifyResultRequest, headers: NotifyVerifyResultHeaders, runtime: $Util.RuntimeOptions): Promise<NotifyVerifyResultResponse>;
    /**
     * @summary 上报码验证结果
     *
     * @param request NotifyVerifyResultRequest
     * @return NotifyVerifyResultResponse
     */
    notifyVerifyResult(request: NotifyVerifyResultRequest): Promise<NotifyVerifyResultResponse>;
    /**
     * @summary 预创建群收款订单返回订单号
     *
     * @param request PreCreateGroupBillOrderRequest
     * @param headers PreCreateGroupBillOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PreCreateGroupBillOrderResponse
     */
    preCreateGroupBillOrderWithOptions(request: PreCreateGroupBillOrderRequest, headers: PreCreateGroupBillOrderHeaders, runtime: $Util.RuntimeOptions): Promise<PreCreateGroupBillOrderResponse>;
    /**
     * @summary 预创建群收款订单返回订单号
     *
     * @param request PreCreateGroupBillOrderRequest
     * @return PreCreateGroupBillOrderResponse
     */
    preCreateGroupBillOrder(request: PreCreateGroupBillOrderRequest): Promise<PreCreateGroupBillOrderResponse>;
    /**
     * @summary 查询收单退款交易
     *
     * @param request QueryAcquireRefundOrderRequest
     * @param headers QueryAcquireRefundOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAcquireRefundOrderResponse
     */
    queryAcquireRefundOrderWithOptions(request: QueryAcquireRefundOrderRequest, headers: QueryAcquireRefundOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAcquireRefundOrderResponse>;
    /**
     * @summary 查询收单退款交易
     *
     * @param request QueryAcquireRefundOrderRequest
     * @return QueryAcquireRefundOrderResponse
     */
    queryAcquireRefundOrder(request: QueryAcquireRefundOrderRequest): Promise<QueryAcquireRefundOrderResponse>;
    /**
     * @summary 查询批量付款明细列表
     *
     * @param request QueryBatchTradeDetailListRequest
     * @param headers QueryBatchTradeDetailListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryBatchTradeDetailListResponse
     */
    queryBatchTradeDetailListWithOptions(request: QueryBatchTradeDetailListRequest, headers: QueryBatchTradeDetailListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryBatchTradeDetailListResponse>;
    /**
     * @summary 查询批量付款明细列表
     *
     * @param request QueryBatchTradeDetailListRequest
     * @return QueryBatchTradeDetailListResponse
     */
    queryBatchTradeDetailList(request: QueryBatchTradeDetailListRequest): Promise<QueryBatchTradeDetailListResponse>;
    /**
     * @summary 根据请求对象查询批量交易订单信息
     *
     * @param request QueryBatchTradeOrderRequest
     * @param headers QueryBatchTradeOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryBatchTradeOrderResponse
     */
    queryBatchTradeOrderWithOptions(request: QueryBatchTradeOrderRequest, headers: QueryBatchTradeOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QueryBatchTradeOrderResponse>;
    /**
     * @summary 根据请求对象查询批量交易订单信息
     *
     * @param request QueryBatchTradeOrderRequest
     * @return QueryBatchTradeOrderResponse
     */
    queryBatchTradeOrder(request: QueryBatchTradeOrderRequest): Promise<QueryBatchTradeOrderResponse>;
    /**
     * @summary 查询付款账号列表
     *
     * @param headers QueryPayAccountListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryPayAccountListResponse
     */
    queryPayAccountListWithOptions(headers: QueryPayAccountListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPayAccountListResponse>;
    /**
     * @summary 查询付款账号列表
     *
     * @return QueryPayAccountListResponse
     */
    queryPayAccountList(): Promise<QueryPayAccountListResponse>;
    /**
     * @summary 查询子机构申请单状态
     *
     * @param request QueryRegisterOrderRequest
     * @param headers QueryRegisterOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRegisterOrderResponse
     */
    queryRegisterOrderWithOptions(request: QueryRegisterOrderRequest, headers: QueryRegisterOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRegisterOrderResponse>;
    /**
     * @summary 查询子机构申请单状态
     *
     * @param request QueryRegisterOrderRequest
     * @return QueryRegisterOrderResponse
     */
    queryRegisterOrder(request: QueryRegisterOrderRequest): Promise<QueryRegisterOrderResponse>;
    /**
     * @summary 查询用户协议
     *
     * @param request QueryUserAgreementRequest
     * @param headers QueryUserAgreementHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserAgreementResponse
     */
    queryUserAgreementWithOptions(request: QueryUserAgreementRequest, headers: QueryUserAgreementHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserAgreementResponse>;
    /**
     * @summary 查询用户协议
     *
     * @param request QueryUserAgreementRequest
     * @return QueryUserAgreementResponse
     */
    queryUserAgreement(request: QueryUserAgreementRequest): Promise<QueryUserAgreementResponse>;
    /**
     * @summary 获取用户绑定支付宝信息
     *
     * @param headers QueryUserAlipayAccountHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserAlipayAccountResponse
     */
    queryUserAlipayAccountWithOptions(headers: QueryUserAlipayAccountHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserAlipayAccountResponse>;
    /**
     * @summary 获取用户绑定支付宝信息
     *
     * @return QueryUserAlipayAccountResponse
     */
    queryUserAlipayAccount(): Promise<QueryUserAlipayAccountResponse>;
    /**
     * @summary 查询代扣交易订单信息
     *
     * @param request QueryWithholdingOrderRequest
     * @param headers QueryWithholdingOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryWithholdingOrderResponse
     */
    queryWithholdingOrderWithOptions(request: QueryWithholdingOrderRequest, headers: QueryWithholdingOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QueryWithholdingOrderResponse>;
    /**
     * @summary 查询代扣交易订单信息
     *
     * @param request QueryWithholdingOrderRequest
     * @return QueryWithholdingOrderResponse
     */
    queryWithholdingOrder(request: QueryWithholdingOrderRequest): Promise<QueryWithholdingOrderResponse>;
    /**
     * @summary 保存付款码企业配置信息
     *
     * @param request SaveCorpPayCodeRequest
     * @param headers SaveCorpPayCodeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveCorpPayCodeResponse
     */
    saveCorpPayCodeWithOptions(request: SaveCorpPayCodeRequest, headers: SaveCorpPayCodeHeaders, runtime: $Util.RuntimeOptions): Promise<SaveCorpPayCodeResponse>;
    /**
     * @summary 保存付款码企业配置信息
     *
     * @param request SaveCorpPayCodeRequest
     * @return SaveCorpPayCodeResponse
     */
    saveCorpPayCode(request: SaveCorpPayCodeRequest): Promise<SaveCorpPayCodeResponse>;
    /**
     * @summary 解约用户协议
     *
     * @param request UnsignUserAgreementRequest
     * @param headers UnsignUserAgreementHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnsignUserAgreementResponse
     */
    unsignUserAgreementWithOptions(request: UnsignUserAgreementRequest, headers: UnsignUserAgreementHeaders, runtime: $Util.RuntimeOptions): Promise<UnsignUserAgreementResponse>;
    /**
     * @summary 解约用户协议
     *
     * @param request UnsignUserAgreementRequest
     * @return UnsignUserAgreementResponse
     */
    unsignUserAgreement(request: UnsignUserAgreementRequest): Promise<UnsignUserAgreementResponse>;
    /**
     * @summary 更新用户码实例
     *
     * @param request UpateUserCodeInstanceRequest
     * @param headers UpateUserCodeInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpateUserCodeInstanceResponse
     */
    upateUserCodeInstanceWithOptions(request: UpateUserCodeInstanceRequest, headers: UpateUserCodeInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<UpateUserCodeInstanceResponse>;
    /**
     * @summary 更新用户码实例
     *
     * @param request UpateUserCodeInstanceRequest
     * @return UpateUserCodeInstanceResponse
     */
    upateUserCodeInstance(request: UpateUserCodeInstanceRequest): Promise<UpateUserCodeInstanceResponse>;
    /**
     * @summary 用来给第三方企业提供发票验真结果更新的oapi
     *
     * @param request UpdateInvoiceVerifyStatusRequest
     * @param headers UpdateInvoiceVerifyStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateInvoiceVerifyStatusResponse
     */
    updateInvoiceVerifyStatusWithOptions(request: UpdateInvoiceVerifyStatusRequest, headers: UpdateInvoiceVerifyStatusHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateInvoiceVerifyStatusResponse>;
    /**
     * @summary 用来给第三方企业提供发票验真结果更新的oapi
     *
     * @param request UpdateInvoiceVerifyStatusRequest
     * @return UpdateInvoiceVerifyStatusResponse
     */
    updateInvoiceVerifyStatus(request: UpdateInvoiceVerifyStatusRequest): Promise<UpdateInvoiceVerifyStatusResponse>;
    /**
     * @summary 上传发票
     *
     * @param request UploadInvoiceRequest
     * @param headers UploadInvoiceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UploadInvoiceResponse
     */
    uploadInvoiceWithOptions(request: UploadInvoiceRequest, headers: UploadInvoiceHeaders, runtime: $Util.RuntimeOptions): Promise<UploadInvoiceResponse>;
    /**
     * @summary 上传发票
     *
     * @param request UploadInvoiceRequest
     * @return UploadInvoiceResponse
     */
    uploadInvoice(request: UploadInvoiceRequest): Promise<UploadInvoiceResponse>;
    /**
     * @summary 用户授权上传发票oapi
     *
     * @param request UploadInvoiceByAuthRequest
     * @param headers UploadInvoiceByAuthHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UploadInvoiceByAuthResponse
     */
    uploadInvoiceByAuthWithOptions(request: UploadInvoiceByAuthRequest, headers: UploadInvoiceByAuthHeaders, runtime: $Util.RuntimeOptions): Promise<UploadInvoiceByAuthResponse>;
    /**
     * @summary 用户授权上传发票oapi
     *
     * @param request UploadInvoiceByAuthRequest
     * @return UploadInvoiceByAuthResponse
     */
    uploadInvoiceByAuth(request: UploadInvoiceByAuthRequest): Promise<UploadInvoiceByAuthResponse>;
    /**
     * @summary 通过手机号上传发票
     *
     * @param request UploadInvoiceByMobileRequest
     * @param headers UploadInvoiceByMobileHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UploadInvoiceByMobileResponse
     */
    uploadInvoiceByMobileWithOptions(request: UploadInvoiceByMobileRequest, headers: UploadInvoiceByMobileHeaders, runtime: $Util.RuntimeOptions): Promise<UploadInvoiceByMobileResponse>;
    /**
     * @summary 通过手机号上传发票
     *
     * @param request UploadInvoiceByMobileRequest
     * @return UploadInvoiceByMobileResponse
     */
    uploadInvoiceByMobile(request: UploadInvoiceByMobileRequest): Promise<UploadInvoiceByMobileResponse>;
    /**
     * @summary 上传进件中的图片获得图片链接
     *
     * @param request UploadRegisterImageRequest
     * @param headers UploadRegisterImageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UploadRegisterImageResponse
     */
    uploadRegisterImageWithOptions(request: UploadRegisterImageRequest, headers: UploadRegisterImageHeaders, runtime: $Util.RuntimeOptions): Promise<UploadRegisterImageResponse>;
    /**
     * @summary 上传进件中的图片获得图片链接
     *
     * @param request UploadRegisterImageRequest
     * @return UploadRegisterImageResponse
     */
    uploadRegisterImage(request: UploadRegisterImageRequest): Promise<UploadRegisterImageResponse>;
    /**
     * @summary 用户协议签约
     *
     * @param request UserAgreementPageSignRequest
     * @param headers UserAgreementPageSignHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UserAgreementPageSignResponse
     */
    userAgreementPageSignWithOptions(request: UserAgreementPageSignRequest, headers: UserAgreementPageSignHeaders, runtime: $Util.RuntimeOptions): Promise<UserAgreementPageSignResponse>;
    /**
     * @summary 用户协议签约
     *
     * @param request UserAgreementPageSignRequest
     * @return UserAgreementPageSignResponse
     */
    userAgreementPageSign(request: UserAgreementPageSignRequest): Promise<UserAgreementPageSignResponse>;
}
