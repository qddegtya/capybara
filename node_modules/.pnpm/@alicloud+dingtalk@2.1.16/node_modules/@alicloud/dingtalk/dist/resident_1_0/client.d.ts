/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddPointHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPointRequest extends $tea.Model {
    actionTime?: number;
    isCircle?: boolean;
    ruleCode?: string;
    ruleName?: string;
    score?: number;
    userId?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddPointResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentDepartmentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentDepartmentRequest extends $tea.Model {
    departmentName?: string;
    isResidenceGroup?: boolean;
    parentDepartmentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentDepartmentResponseBody extends $tea.Model {
    result?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentDepartmentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddResidentDepartmentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentMemberRequest extends $tea.Model {
    residentAddInfo?: AddResidentMemberRequestResidentAddInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentMemberResponseBody extends $tea.Model {
    status?: number;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddResidentMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentUsersRequest extends $tea.Model {
    address?: string;
    departmentId?: number;
    extField?: AddResidentUsersRequestExtField[];
    isLeaseholder?: boolean;
    mobile?: string;
    relateType?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentUsersResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentUsersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddResidentUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResidentBlackBoardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResidentBlackBoardRequest extends $tea.Model {
    context?: string;
    mediaId?: string;
    sendTime?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResidentBlackBoardResponseBody extends $tea.Model {
    blackBoardId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateResidentBlackBoardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateResidentBlackBoardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceRequest extends $tea.Model {
    billingArea?: number;
    buildingArea?: number;
    floor?: string;
    houseState?: number;
    name?: string;
    parentDeptId?: string;
    tagCode?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceResponseBody extends $tea.Model {
    deptId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteResidentBlackBoardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteResidentBlackBoardRequest extends $tea.Model {
    blackboardId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteResidentBlackBoardResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteResidentBlackBoardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteResidentBlackBoardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteResidentDepartmentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteResidentDepartmentRequest extends $tea.Model {
    departmentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteResidentDepartmentResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteResidentDepartmentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteResidentDepartmentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpaceRequest extends $tea.Model {
    deptIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpaceResponseBody extends $tea.Model {
    delFailedDept?: DeleteSpaceResponseBodyDelFailedDept[];
    delSuccessCount?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationIdRequest extends $tea.Model {
    chatId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationIdResponseBody extends $tea.Model {
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetConversationIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetConversationIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIndustryTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIndustryTypeResponseBody extends $tea.Model {
    industryType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIndustryTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetIndustryTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPropertyInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPropertyInfoRequest extends $tea.Model {
    propertyCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPropertyInfoResponseBody extends $tea.Model {
    adminName?: string;
    adminUserId?: string;
    name?: string;
    orgId?: number;
    unifiedSocialCredit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPropertyInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPropertyInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentInfoRequest extends $tea.Model {
    residentCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentInfoResponseBody extends $tea.Model {
    address?: string;
    allUserGroupOpenConversationId?: string;
    allUserGroupOwnerUserId?: string;
    buildingArea?: number;
    cityId?: number;
    contactMode?: number;
    countyId?: number;
    deliveryTime?: number;
    location?: string;
    name?: string;
    projectManager?: GetResidentInfoResponseBodyProjectManager;
    propertyDeptGroupOpenConversationId?: string;
    propertyDeptGroupOwnerUserId?: string;
    provId?: number;
    scopeEast?: string;
    scopeNorth?: string;
    scopeSouth?: string;
    scopeWest?: string;
    telephone?: string;
    townId?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetResidentInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentMembersInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentMembersInfoRequest extends $tea.Model {
    residentCropId?: string;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentMembersInfoResponseBody extends $tea.Model {
    residenceList?: GetResidentMembersInfoResponseBodyResidenceList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentMembersInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetResidentMembersInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceIdByTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceIdByTypeRequest extends $tea.Model {
    departmentType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceIdByTypeResponseBody extends $tea.Model {
    referId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpaceIdByTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSpaceIdByTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpacesInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpacesInfoRequest extends $tea.Model {
    referIds?: number[];
    residentCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpacesInfoResponseBody extends $tea.Model {
    spaceList?: GetSpacesInfoResponseBodySpaceList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpacesInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSpacesInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIndustryRoleUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIndustryRoleUsersRequest extends $tea.Model {
    tagCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIndustryRoleUsersResponseBody extends $tea.Model {
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListIndustryRoleUsersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListIndustryRoleUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPointRulesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPointRulesRequest extends $tea.Model {
    isCircle?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPointRulesResponseBody extends $tea.Model {
    pointRuleList?: ListPointRulesResponseBodyPointRuleList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPointRulesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListPointRulesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSubSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSubSpaceRequest extends $tea.Model {
    referId?: number;
    residentCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSubSpaceResponseBody extends $tea.Model {
    spaceList?: ListSubSpaceResponseBodySpaceList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSubSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListSubSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUncheckUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUncheckUsersRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    startTime?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUncheckUsersResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: number;
    values?: ListUncheckUsersResponseBodyValues[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUncheckUsersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListUncheckUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserIndustryRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserIndustryRolesRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserIndustryRolesResponseBody extends $tea.Model {
    roleList?: ListUserIndustryRolesResponseBodyRoleList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserIndustryRolesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListUserIndustryRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PagePointHistoryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PagePointHistoryRequest extends $tea.Model {
    endTime?: number;
    isCircle?: boolean;
    maxResults?: number;
    nextToken?: number;
    startTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PagePointHistoryResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: number;
    pointRecordList?: PagePointHistoryResponseBodyPointRecordList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PagePointHistoryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PagePointHistoryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveResidentMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveResidentMemberRequest extends $tea.Model {
    deptId?: number;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveResidentMemberResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveResidentMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveResidentMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveResidentUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveResidentUserRequest extends $tea.Model {
    departmentId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveResidentUserResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveResidentUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveResidentUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResidentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResidentRequest extends $tea.Model {
    residentCropId?: string;
    searchWord?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResidentResponseBody extends $tea.Model {
    residenceList?: SearchResidentResponseBodyResidenceList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResidentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchResidentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResideceGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResideceGroupRequest extends $tea.Model {
    departmentId?: number;
    departmentName?: string;
    managerUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResideceGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResideceGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateResideceGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidenceRequest extends $tea.Model {
    departmentId?: number;
    departmentName?: string;
    destitute?: boolean;
    grid?: string;
    homeTel?: string;
    managerUserId?: string;
    parentDepartmentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidenceResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateResidenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentBlackBoardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentBlackBoardRequest extends $tea.Model {
    blackboardId?: string;
    context?: string;
    mediaId?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentBlackBoardResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentBlackBoardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateResidentBlackBoardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentInfoRequest extends $tea.Model {
    address?: string;
    buildingArea?: number;
    cityName?: string;
    communityType?: number;
    countyName?: string;
    location?: string;
    name?: string;
    provName?: string;
    state?: number;
    telephone?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentInfoResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateResidentInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentMemberHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentMemberRequest extends $tea.Model {
    residentUpdateInfo?: UpdateResidentMemberRequestResidentUpdateInfo;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentMemberResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentMemberResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateResidentMemberResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentUserRequest extends $tea.Model {
    address?: string;
    departmentId?: number;
    extField?: UpdateResidentUserRequestExtField[];
    isRetainOldDept?: boolean;
    mobile?: string;
    oldDepartmentId?: number;
    relateType?: string;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentUserResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateResidentUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpaceRequest extends $tea.Model {
    spaceInfoVOList?: UpdateSpaceRequestSpaceInfoVOList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpaceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentMemberRequestResidentAddInfo extends $tea.Model {
    deptId?: number;
    isPropertyOwner?: boolean;
    memberDeptExtension?: {
        [key: string]: any;
    };
    mobile?: string;
    name?: string;
    relateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddResidentUsersRequestExtField extends $tea.Model {
    itemName?: string;
    itemValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSpaceResponseBodyDelFailedDept extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentInfoResponseBodyProjectManager extends $tea.Model {
    avatar?: string;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetResidentMembersInfoResponseBodyResidenceList extends $tea.Model {
    active?: boolean;
    extField?: string;
    isPropertyOwner?: boolean;
    name?: string;
    relateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSpacesInfoResponseBodySpaceList extends $tea.Model {
    billingArea?: number;
    buildingArea?: number;
    floor?: string;
    houseState?: number;
    isVirtual?: number;
    parentReferId?: number;
    referId?: number;
    spaceName?: string;
    tagCode?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListPointRulesResponseBodyPointRuleList extends $tea.Model {
    dayLimitTimes?: number;
    extension?: string;
    groupId?: number;
    orderId?: number;
    ruleCode?: string;
    ruleName?: string;
    score?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSubSpaceResponseBodySpaceList extends $tea.Model {
    billingArea?: number;
    buildingArea?: number;
    floor?: string;
    houseState?: number;
    isVirtual?: number;
    parentReferId?: number;
    referId?: number;
    spaceName?: string;
    tagCode?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUncheckUsersResponseBodyValues extends $tea.Model {
    deptId?: number;
    extension?: string;
    gmtCreate?: number;
    gmtModified?: number;
    isPropertyOwner?: boolean;
    name?: string;
    status?: number;
    unionId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListUserIndustryRolesResponseBodyRoleList extends $tea.Model {
    roleId?: number;
    roleName?: string;
    tagCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PagePointHistoryResponseBodyPointRecordList extends $tea.Model {
    createAt?: number;
    ruleCode?: string;
    ruleName?: string;
    score?: number;
    userId?: string;
    uuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchResidentResponseBodyResidenceList extends $tea.Model {
    active?: boolean;
    extField?: string;
    isPropertyOwner?: boolean;
    name?: string;
    relateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentMemberRequestResidentUpdateInfo extends $tea.Model {
    deptId?: number;
    isPropertyOwner?: boolean;
    memberDeptExtension?: {
        [key: string]: string;
    };
    name?: string;
    oldDeptId?: number;
    relateType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateResidentUserRequestExtField extends $tea.Model {
    itemName?: string;
    itemValue?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSpaceRequestSpaceInfoVOList extends $tea.Model {
    billingArea?: number;
    buildingArea?: number;
    buildingType?: number;
    deptId?: number;
    floor?: string;
    houseState?: number;
    houseType?: number;
    name?: string;
    parentDeptId?: number;
    tagCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 增加积分
     *
     * @param request AddPointRequest
     * @param headers AddPointHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddPointResponse
     */
    addPointWithOptions(request: AddPointRequest, headers: AddPointHeaders, runtime: $Util.RuntimeOptions): Promise<AddPointResponse>;
    /**
     * @summary 增加积分
     *
     * @param request AddPointRequest
     * @return AddPointResponse
     */
    addPoint(request: AddPointRequest): Promise<AddPointResponse>;
    /**
     * @summary 增加组户
     *
     * @param request AddResidentDepartmentRequest
     * @param headers AddResidentDepartmentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddResidentDepartmentResponse
     */
    addResidentDepartmentWithOptions(request: AddResidentDepartmentRequest, headers: AddResidentDepartmentHeaders, runtime: $Util.RuntimeOptions): Promise<AddResidentDepartmentResponse>;
    /**
     * @summary 增加组户
     *
     * @param request AddResidentDepartmentRequest
     * @return AddResidentDepartmentResponse
     */
    addResidentDepartment(request: AddResidentDepartmentRequest): Promise<AddResidentDepartmentResponse>;
    /**
     * @summary 添加小区成员
     *
     * @param request AddResidentMemberRequest
     * @param headers AddResidentMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddResidentMemberResponse
     */
    addResidentMemberWithOptions(request: AddResidentMemberRequest, headers: AddResidentMemberHeaders, runtime: $Util.RuntimeOptions): Promise<AddResidentMemberResponse>;
    /**
     * @summary 添加小区成员
     *
     * @param request AddResidentMemberRequest
     * @return AddResidentMemberResponse
     */
    addResidentMember(request: AddResidentMemberRequest): Promise<AddResidentMemberResponse>;
    /**
     * @summary 新增居民
     *
     * @param request AddResidentUsersRequest
     * @param headers AddResidentUsersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddResidentUsersResponse
     */
    addResidentUsersWithOptions(request: AddResidentUsersRequest, headers: AddResidentUsersHeaders, runtime: $Util.RuntimeOptions): Promise<AddResidentUsersResponse>;
    /**
     * @summary 新增居民
     *
     * @param request AddResidentUsersRequest
     * @return AddResidentUsersResponse
     */
    addResidentUsers(request: AddResidentUsersRequest): Promise<AddResidentUsersResponse>;
    /**
     * @summary 创建小区公告
     *
     * @param request CreateResidentBlackBoardRequest
     * @param headers CreateResidentBlackBoardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateResidentBlackBoardResponse
     */
    createResidentBlackBoardWithOptions(request: CreateResidentBlackBoardRequest, headers: CreateResidentBlackBoardHeaders, runtime: $Util.RuntimeOptions): Promise<CreateResidentBlackBoardResponse>;
    /**
     * @summary 创建小区公告
     *
     * @param request CreateResidentBlackBoardRequest
     * @return CreateResidentBlackBoardResponse
     */
    createResidentBlackBoard(request: CreateResidentBlackBoardRequest): Promise<CreateResidentBlackBoardResponse>;
    /**
     * @summary 创建小区空间，含分区，楼栋，单元，房屋等
     *
     * @param request CreateSpaceRequest
     * @param headers CreateSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSpaceResponse
     */
    createSpaceWithOptions(request: CreateSpaceRequest, headers: CreateSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSpaceResponse>;
    /**
     * @summary 创建小区空间，含分区，楼栋，单元，房屋等
     *
     * @param request CreateSpaceRequest
     * @return CreateSpaceResponse
     */
    createSpace(request: CreateSpaceRequest): Promise<CreateSpaceResponse>;
    /**
     * @summary 删除小区公告
     *
     * @param request DeleteResidentBlackBoardRequest
     * @param headers DeleteResidentBlackBoardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteResidentBlackBoardResponse
     */
    deleteResidentBlackBoardWithOptions(request: DeleteResidentBlackBoardRequest, headers: DeleteResidentBlackBoardHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteResidentBlackBoardResponse>;
    /**
     * @summary 删除小区公告
     *
     * @param request DeleteResidentBlackBoardRequest
     * @return DeleteResidentBlackBoardResponse
     */
    deleteResidentBlackBoard(request: DeleteResidentBlackBoardRequest): Promise<DeleteResidentBlackBoardResponse>;
    /**
     * @summary 删除组户信息
     *
     * @param request DeleteResidentDepartmentRequest
     * @param headers DeleteResidentDepartmentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteResidentDepartmentResponse
     */
    deleteResidentDepartmentWithOptions(request: DeleteResidentDepartmentRequest, headers: DeleteResidentDepartmentHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteResidentDepartmentResponse>;
    /**
     * @summary 删除组户信息
     *
     * @param request DeleteResidentDepartmentRequest
     * @return DeleteResidentDepartmentResponse
     */
    deleteResidentDepartment(request: DeleteResidentDepartmentRequest): Promise<DeleteResidentDepartmentResponse>;
    /**
     * @summary 删除小区空间，含分区，楼栋，单元，房屋
     *
     * @param request DeleteSpaceRequest
     * @param headers DeleteSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSpaceResponse
     */
    deleteSpaceWithOptions(request: DeleteSpaceRequest, headers: DeleteSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteSpaceResponse>;
    /**
     * @summary 删除小区空间，含分区，楼栋，单元，房屋
     *
     * @param request DeleteSpaceRequest
     * @return DeleteSpaceResponse
     */
    deleteSpace(request: DeleteSpaceRequest): Promise<DeleteSpaceResponse>;
    /**
     * @summary 获取指定群的openConversationId
     *
     * @param request GetConversationIdRequest
     * @param headers GetConversationIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetConversationIdResponse
     */
    getConversationIdWithOptions(request: GetConversationIdRequest, headers: GetConversationIdHeaders, runtime: $Util.RuntimeOptions): Promise<GetConversationIdResponse>;
    /**
     * @summary 获取指定群的openConversationId
     *
     * @param request GetConversationIdRequest
     * @return GetConversationIdResponse
     */
    getConversationId(request: GetConversationIdRequest): Promise<GetConversationIdResponse>;
    /**
     * @summary 获取组织的行业类型
     *
     * @param headers GetIndustryTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetIndustryTypeResponse
     */
    getIndustryTypeWithOptions(headers: GetIndustryTypeHeaders, runtime: $Util.RuntimeOptions): Promise<GetIndustryTypeResponse>;
    /**
     * @summary 获取组织的行业类型
     *
     * @return GetIndustryTypeResponse
     */
    getIndustryType(): Promise<GetIndustryTypeResponse>;
    /**
     * @summary 获取物业公司信息
     *
     * @param request GetPropertyInfoRequest
     * @param headers GetPropertyInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPropertyInfoResponse
     */
    getPropertyInfoWithOptions(request: GetPropertyInfoRequest, headers: GetPropertyInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPropertyInfoResponse>;
    /**
     * @summary 获取物业公司信息
     *
     * @param request GetPropertyInfoRequest
     * @return GetPropertyInfoResponse
     */
    getPropertyInfo(request: GetPropertyInfoRequest): Promise<GetPropertyInfoResponse>;
    /**
     * @summary 获取小区信息
     *
     * @param request GetResidentInfoRequest
     * @param headers GetResidentInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetResidentInfoResponse
     */
    getResidentInfoWithOptions(request: GetResidentInfoRequest, headers: GetResidentInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetResidentInfoResponse>;
    /**
     * @summary 获取小区信息
     *
     * @param request GetResidentInfoRequest
     * @return GetResidentInfoResponse
     */
    getResidentInfo(request: GetResidentInfoRequest): Promise<GetResidentInfoResponse>;
    /**
     * @summary 获取小区人员信息，包括居民和物业人员
     *
     * @param request GetResidentMembersInfoRequest
     * @param headers GetResidentMembersInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetResidentMembersInfoResponse
     */
    getResidentMembersInfoWithOptions(request: GetResidentMembersInfoRequest, headers: GetResidentMembersInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetResidentMembersInfoResponse>;
    /**
     * @summary 获取小区人员信息，包括居民和物业人员
     *
     * @param request GetResidentMembersInfoRequest
     * @return GetResidentMembersInfoResponse
     */
    getResidentMembersInfo(request: GetResidentMembersInfoRequest): Promise<GetResidentMembersInfoResponse>;
    /**
     * @summary 根据类型获取部门id
     *
     * @param request GetSpaceIdByTypeRequest
     * @param headers GetSpaceIdByTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSpaceIdByTypeResponse
     */
    getSpaceIdByTypeWithOptions(request: GetSpaceIdByTypeRequest, headers: GetSpaceIdByTypeHeaders, runtime: $Util.RuntimeOptions): Promise<GetSpaceIdByTypeResponse>;
    /**
     * @summary 根据类型获取部门id
     *
     * @param request GetSpaceIdByTypeRequest
     * @return GetSpaceIdByTypeResponse
     */
    getSpaceIdByType(request: GetSpaceIdByTypeRequest): Promise<GetSpaceIdByTypeResponse>;
    /**
     * @summary 获取空间信息
     *
     * @param request GetSpacesInfoRequest
     * @param headers GetSpacesInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSpacesInfoResponse
     */
    getSpacesInfoWithOptions(request: GetSpacesInfoRequest, headers: GetSpacesInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetSpacesInfoResponse>;
    /**
     * @summary 获取空间信息
     *
     * @param request GetSpacesInfoRequest
     * @return GetSpacesInfoResponse
     */
    getSpacesInfo(request: GetSpacesInfoRequest): Promise<GetSpacesInfoResponse>;
    /**
     * @summary 获取行业角色下的用户列表
     *
     * @param request ListIndustryRoleUsersRequest
     * @param headers ListIndustryRoleUsersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListIndustryRoleUsersResponse
     */
    listIndustryRoleUsersWithOptions(request: ListIndustryRoleUsersRequest, headers: ListIndustryRoleUsersHeaders, runtime: $Util.RuntimeOptions): Promise<ListIndustryRoleUsersResponse>;
    /**
     * @summary 获取行业角色下的用户列表
     *
     * @param request ListIndustryRoleUsersRequest
     * @return ListIndustryRoleUsersResponse
     */
    listIndustryRoleUsers(request: ListIndustryRoleUsersRequest): Promise<ListIndustryRoleUsersResponse>;
    /**
     * @summary 查询组织维度配置的的积分规则
     *
     * @param request ListPointRulesRequest
     * @param headers ListPointRulesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPointRulesResponse
     */
    listPointRulesWithOptions(request: ListPointRulesRequest, headers: ListPointRulesHeaders, runtime: $Util.RuntimeOptions): Promise<ListPointRulesResponse>;
    /**
     * @summary 查询组织维度配置的的积分规则
     *
     * @param request ListPointRulesRequest
     * @return ListPointRulesResponse
     */
    listPointRules(request: ListPointRulesRequest): Promise<ListPointRulesResponse>;
    /**
     * @summary 获取子空间信息
     *
     * @param request ListSubSpaceRequest
     * @param headers ListSubSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSubSpaceResponse
     */
    listSubSpaceWithOptions(request: ListSubSpaceRequest, headers: ListSubSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<ListSubSpaceResponse>;
    /**
     * @summary 获取子空间信息
     *
     * @param request ListSubSpaceRequest
     * @return ListSubSpaceResponse
     */
    listSubSpace(request: ListSubSpaceRequest): Promise<ListSubSpaceResponse>;
    /**
     * @summary 获取未确认加入组织的用户
     *
     * @param request ListUncheckUsersRequest
     * @param headers ListUncheckUsersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUncheckUsersResponse
     */
    listUncheckUsersWithOptions(request: ListUncheckUsersRequest, headers: ListUncheckUsersHeaders, runtime: $Util.RuntimeOptions): Promise<ListUncheckUsersResponse>;
    /**
     * @summary 获取未确认加入组织的用户
     *
     * @param request ListUncheckUsersRequest
     * @return ListUncheckUsersResponse
     */
    listUncheckUsers(request: ListUncheckUsersRequest): Promise<ListUncheckUsersResponse>;
    /**
     * @summary 获取用户行业化角色
     *
     * @param request ListUserIndustryRolesRequest
     * @param headers ListUserIndustryRolesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListUserIndustryRolesResponse
     */
    listUserIndustryRolesWithOptions(request: ListUserIndustryRolesRequest, headers: ListUserIndustryRolesHeaders, runtime: $Util.RuntimeOptions): Promise<ListUserIndustryRolesResponse>;
    /**
     * @summary 获取用户行业化角色
     *
     * @param request ListUserIndustryRolesRequest
     * @return ListUserIndustryRolesResponse
     */
    listUserIndustryRoles(request: ListUserIndustryRolesRequest): Promise<ListUserIndustryRolesResponse>;
    /**
     * @summary 查询数字区县居民积分流水
     *
     * @param request PagePointHistoryRequest
     * @param headers PagePointHistoryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PagePointHistoryResponse
     */
    pagePointHistoryWithOptions(request: PagePointHistoryRequest, headers: PagePointHistoryHeaders, runtime: $Util.RuntimeOptions): Promise<PagePointHistoryResponse>;
    /**
     * @summary 查询数字区县居民积分流水
     *
     * @param request PagePointHistoryRequest
     * @return PagePointHistoryResponse
     */
    pagePointHistory(request: PagePointHistoryRequest): Promise<PagePointHistoryResponse>;
    /**
     * @summary 从空间中删除人员
     *
     * @param request RemoveResidentMemberRequest
     * @param headers RemoveResidentMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveResidentMemberResponse
     */
    removeResidentMemberWithOptions(request: RemoveResidentMemberRequest, headers: RemoveResidentMemberHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveResidentMemberResponse>;
    /**
     * @summary 从空间中删除人员
     *
     * @param request RemoveResidentMemberRequest
     * @return RemoveResidentMemberResponse
     */
    removeResidentMember(request: RemoveResidentMemberRequest): Promise<RemoveResidentMemberResponse>;
    /**
     * @summary 从户内移除居民
     *
     * @param request RemoveResidentUserRequest
     * @param headers RemoveResidentUserHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveResidentUserResponse
     */
    removeResidentUserWithOptions(request: RemoveResidentUserRequest, headers: RemoveResidentUserHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveResidentUserResponse>;
    /**
     * @summary 从户内移除居民
     *
     * @param request RemoveResidentUserRequest
     * @return RemoveResidentUserResponse
     */
    removeResidentUser(request: RemoveResidentUserRequest): Promise<RemoveResidentUserResponse>;
    /**
     * @summary 搜索指定人员
     *
     * @param request SearchResidentRequest
     * @param headers SearchResidentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchResidentResponse
     */
    searchResidentWithOptions(request: SearchResidentRequest, headers: SearchResidentHeaders, runtime: $Util.RuntimeOptions): Promise<SearchResidentResponse>;
    /**
     * @summary 搜索指定人员
     *
     * @param request SearchResidentRequest
     * @return SearchResidentResponse
     */
    searchResident(request: SearchResidentRequest): Promise<SearchResidentResponse>;
    /**
     * @summary 更新组信息
     *
     * @param request UpdateResideceGroupRequest
     * @param headers UpdateResideceGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateResideceGroupResponse
     */
    updateResideceGroupWithOptions(request: UpdateResideceGroupRequest, headers: UpdateResideceGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateResideceGroupResponse>;
    /**
     * @summary 更新组信息
     *
     * @param request UpdateResideceGroupRequest
     * @return UpdateResideceGroupResponse
     */
    updateResideceGroup(request: UpdateResideceGroupRequest): Promise<UpdateResideceGroupResponse>;
    /**
     * @summary 更新户信息
     *
     * @param request UpdateResidenceRequest
     * @param headers UpdateResidenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateResidenceResponse
     */
    updateResidenceWithOptions(request: UpdateResidenceRequest, headers: UpdateResidenceHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateResidenceResponse>;
    /**
     * @summary 更新户信息
     *
     * @param request UpdateResidenceRequest
     * @return UpdateResidenceResponse
     */
    updateResidence(request: UpdateResidenceRequest): Promise<UpdateResidenceResponse>;
    /**
     * @summary 更新小区公告
     *
     * @param request UpdateResidentBlackBoardRequest
     * @param headers UpdateResidentBlackBoardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateResidentBlackBoardResponse
     */
    updateResidentBlackBoardWithOptions(request: UpdateResidentBlackBoardRequest, headers: UpdateResidentBlackBoardHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateResidentBlackBoardResponse>;
    /**
     * @summary 更新小区公告
     *
     * @param request UpdateResidentBlackBoardRequest
     * @return UpdateResidentBlackBoardResponse
     */
    updateResidentBlackBoard(request: UpdateResidentBlackBoardRequest): Promise<UpdateResidentBlackBoardResponse>;
    /**
     * @summary 更新小区信息
     *
     * @param request UpdateResidentInfoRequest
     * @param headers UpdateResidentInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateResidentInfoResponse
     */
    updateResidentInfoWithOptions(request: UpdateResidentInfoRequest, headers: UpdateResidentInfoHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateResidentInfoResponse>;
    /**
     * @summary 更新小区信息
     *
     * @param request UpdateResidentInfoRequest
     * @return UpdateResidentInfoResponse
     */
    updateResidentInfo(request: UpdateResidentInfoRequest): Promise<UpdateResidentInfoResponse>;
    /**
     * @summary 更新小区成员
     *
     * @param request UpdateResidentMemberRequest
     * @param headers UpdateResidentMemberHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateResidentMemberResponse
     */
    updateResidentMemberWithOptions(request: UpdateResidentMemberRequest, headers: UpdateResidentMemberHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateResidentMemberResponse>;
    /**
     * @summary 更新小区成员
     *
     * @param request UpdateResidentMemberRequest
     * @return UpdateResidentMemberResponse
     */
    updateResidentMember(request: UpdateResidentMemberRequest): Promise<UpdateResidentMemberResponse>;
    /**
     * @summary 更新居民信息
     *
     * @param request UpdateResidentUserRequest
     * @param headers UpdateResidentUserHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateResidentUserResponse
     */
    updateResidentUserWithOptions(request: UpdateResidentUserRequest, headers: UpdateResidentUserHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateResidentUserResponse>;
    /**
     * @summary 更新居民信息
     *
     * @param request UpdateResidentUserRequest
     * @return UpdateResidentUserResponse
     */
    updateResidentUser(request: UpdateResidentUserRequest): Promise<UpdateResidentUserResponse>;
    /**
     * @summary 更新小区空间，含分区，楼栋，单元，房屋等信息
     *
     * @param request UpdateSpaceRequest
     * @param headers UpdateSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateSpaceResponse
     */
    updateSpaceWithOptions(request: UpdateSpaceRequest, headers: UpdateSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateSpaceResponse>;
    /**
     * @summary 更新小区空间，含分区，楼栋，单元，房屋等信息
     *
     * @param request UpdateSpaceRequest
     * @return UpdateSpaceResponse
     */
    updateSpace(request: UpdateSpaceRequest): Promise<UpdateSpaceResponse>;
}
