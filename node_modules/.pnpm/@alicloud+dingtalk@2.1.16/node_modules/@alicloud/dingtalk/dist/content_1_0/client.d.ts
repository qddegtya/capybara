/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedRequest extends $tea.Model {
    courseInfo?: CreateFeedRequestCourseInfo;
    createUserId?: string;
    feedInfo?: CreateFeedRequestFeedInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedResponseBody extends $tea.Model {
    feedId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFeedRequest extends $tea.Model {
    mcnId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFeedResponseBody extends $tea.Model {
    feedId?: string;
    feedItem?: GetFeedResponseBodyFeedItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaCerficateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaCerficateRequest extends $tea.Model {
    fileName?: string;
    mcnId?: string;
    mediaId?: string;
    mediaIntroduction?: string;
    mediaTitle?: string;
    thumbUrl?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaCerficateResponseBody extends $tea.Model {
    mediaId?: string;
    ossAccessKeyId?: string;
    ossAccessKeySecret?: string;
    ossBucketName?: string;
    ossEndpoint?: string;
    ossExpiration?: string;
    ossFileName?: string;
    ossSecurityToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMediaCerficateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMediaCerficateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListItemUserDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListItemUserDataRequest extends $tea.Model {
    body?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListItemUserDataResponseBody extends $tea.Model {
    studyInfos?: ListItemUserDataResponseBodyStudyInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListItemUserDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListItemUserDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFeedRequest extends $tea.Model {
    body?: string[];
    maxResults?: number;
    mcnId?: string;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFeedResponseBody extends $tea.Model {
    feedList?: PageFeedResponseBodyFeedList[];
    hasNext?: boolean;
    nextCursor?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PageFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedRequestCourseInfoLectorUserInfo extends $tea.Model {
    avatar?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedRequestCourseInfoPayInfoCsUserInfo extends $tea.Model {
    avatar?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedRequestCourseInfoPayInfoDiscountInfo extends $tea.Model {
    endTimeMillis?: number;
    price?: number;
    startTimeMillis?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedRequestCourseInfoPayInfo extends $tea.Model {
    csUserInfo?: CreateFeedRequestCourseInfoPayInfoCsUserInfo;
    discountInfo?: CreateFeedRequestCourseInfoPayInfoDiscountInfo;
    price?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedRequestCourseInfo extends $tea.Model {
    lectorUserInfo?: CreateFeedRequestCourseInfoLectorUserInfo;
    payInfo?: CreateFeedRequestCourseInfoPayInfo;
    studyGroupName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedRequestFeedInfoMediaContents extends $tea.Model {
    mediaId?: string;
    title?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedRequestFeedInfoRecommends extends $tea.Model {
    objectId?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFeedRequestFeedInfo extends $tea.Model {
    actionType?: number;
    belongsTo?: number;
    feedCategory?: number;
    feedId?: string;
    feedTag?: string;
    feedType?: number;
    industryId?: number;
    introduction?: string;
    introductionPicUrl?: string;
    mcnId?: string;
    mediaContents?: CreateFeedRequestFeedInfoMediaContents[];
    recommends?: CreateFeedRequestFeedInfoRecommends[];
    thumbUrl?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFeedResponseBodyFeedItem extends $tea.Model {
    durationMillis?: number;
    feedContentType?: number;
    itemId?: string;
    title?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListItemUserDataResponseBodyStudyInfos extends $tea.Model {
    durationMillis?: number;
    uid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageFeedResponseBodyFeedList extends $tea.Model {
    feedCategory?: string;
    feedId?: string;
    feedType?: number;
    name?: string;
    thumbUrl?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 创建内容
     *
     * @param request CreateFeedRequest
     * @param headers CreateFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFeedResponse
     */
    createFeedWithOptions(request: CreateFeedRequest, headers: CreateFeedHeaders, runtime: $Util.RuntimeOptions): Promise<CreateFeedResponse>;
    /**
     * @summary 创建内容
     *
     * @param request CreateFeedRequest
     * @return CreateFeedResponse
     */
    createFeed(request: CreateFeedRequest): Promise<CreateFeedResponse>;
    /**
     * @summary 获取feed的详细信息，包括子课程的信息
     *
     * @param request GetFeedRequest
     * @param headers GetFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFeedResponse
     */
    getFeedWithOptions(feedId: string, request: GetFeedRequest, headers: GetFeedHeaders, runtime: $Util.RuntimeOptions): Promise<GetFeedResponse>;
    /**
     * @summary 获取feed的详细信息，包括子课程的信息
     *
     * @param request GetFeedRequest
     * @return GetFeedResponse
     */
    getFeed(feedId: string, request: GetFeedRequest): Promise<GetFeedResponse>;
    /**
     * @summary 获取oss上传凭证
     *
     * @param request GetMediaCerficateRequest
     * @param headers GetMediaCerficateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMediaCerficateResponse
     */
    getMediaCerficateWithOptions(request: GetMediaCerficateRequest, headers: GetMediaCerficateHeaders, runtime: $Util.RuntimeOptions): Promise<GetMediaCerficateResponse>;
    /**
     * @summary 获取oss上传凭证
     *
     * @param request GetMediaCerficateRequest
     * @return GetMediaCerficateResponse
     */
    getMediaCerficate(request: GetMediaCerficateRequest): Promise<GetMediaCerficateResponse>;
    /**
     * @summary 展示机构内观看内容的统计信息
     *
     * @param request ListItemUserDataRequest
     * @param headers ListItemUserDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListItemUserDataResponse
     */
    listItemUserDataWithOptions(itemId: string, request: ListItemUserDataRequest, headers: ListItemUserDataHeaders, runtime: $Util.RuntimeOptions): Promise<ListItemUserDataResponse>;
    /**
     * @summary 展示机构内观看内容的统计信息
     *
     * @param request ListItemUserDataRequest
     * @return ListItemUserDataResponse
     */
    listItemUserData(itemId: string, request: ListItemUserDataRequest): Promise<ListItemUserDataResponse>;
    /**
     * @summary 获取机构下课程列表
     *
     * @param request PageFeedRequest
     * @param headers PageFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PageFeedResponse
     */
    pageFeedWithOptions(request: PageFeedRequest, headers: PageFeedHeaders, runtime: $Util.RuntimeOptions): Promise<PageFeedResponse>;
    /**
     * @summary 获取机构下课程列表
     *
     * @param request PageFeedRequest
     * @return PageFeedResponse
     */
    pageFeed(request: PageFeedRequest): Promise<PageFeedResponse>;
}
