"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetSignNoticeUrlResponse = exports.GetSignNoticeUrlResponseBody = exports.GetSignNoticeUrlRequest = exports.GetSignNoticeUrlHeaders = exports.GetProcessStartUrlResponse = exports.GetProcessStartUrlResponseBody = exports.GetProcessStartUrlRequest = exports.GetProcessStartUrlHeaders = exports.GetFlowSignDetailResponse = exports.GetFlowSignDetailResponseBody = exports.GetFlowSignDetailRequest = exports.GetFlowSignDetailHeaders = exports.GetFlowDetailResponse = exports.GetFlowDetailResponseBody = exports.GetFlowDetailRequest = exports.GetFlowDetailHeaders = exports.GetFileResponse = exports.GetFileResponseBody = exports.GetFileHeaders = exports.GetCropStatusResponse = exports.GetCropStatusResponseBody = exports.GetCropStatusHeaders = exports.GetCorpRealnameUrlResponse = exports.GetCorpRealnameUrlResponseBody = exports.GetCorpRealnameUrlRequest = exports.GetCorpRealnameUrlHeaders = exports.CreateDeveloperResponse = exports.CreateDeveloperResponseBody = exports.CreateDeveloperRequest = exports.CreateDeveloperHeaders = exports.CorpInfoResponse = exports.CorpInfoResponseBody = exports.CorpInfoHeaders = exports.CorpConsoleResponse = exports.CorpConsoleResponseBody = exports.CorpConsoleHeaders = exports.ContractMarginResponse = exports.ContractMarginResponseBody = exports.ContractMarginHeaders = exports.ChannelOrderResponse = exports.ChannelOrderResponseBody = exports.ChannelOrderRequest = exports.ChannelOrderHeaders = exports.CancelCorpAuthResponse = exports.CancelCorpAuthResponseBody = exports.CancelCorpAuthHeaders = exports.AuthUrlResponse = exports.AuthUrlResponseBody = exports.AuthUrlRequest = exports.AuthUrlHeaders = void 0;
exports.OrderResaleResponseBodyData = exports.ListSealApprovalResponseBodyData = exports.ListSealApprovalResponseBodyDataApprovalNodes = exports.ListFlowDocsResponseBodyData = exports.GetUserRealnameUrlResponseBodyData = exports.GetUserInfoResponseBodyData = exports.GetUploadUrlResponseBodyData = exports.GetSignNoticeUrlResponseBodyData = exports.GetProcessStartUrlResponseBodyData = exports.GetProcessStartUrlRequestSourceInfo = exports.GetProcessStartUrlRequestParticipants = exports.GetProcessStartUrlRequestFiles = exports.GetProcessStartUrlRequestCcs = exports.GetFlowSignDetailResponseBodyData = exports.GetFlowSignDetailResponseBodyDataSigners = exports.GetFlowDetailResponseBodyData = exports.GetFlowDetailResponseBodyDataLogs = exports.GetFileResponseBodyData = exports.GetCropStatusResponseBodyData = exports.GetCorpRealnameUrlResponseBodyData = exports.CorpInfoResponseBodyData = exports.CorpConsoleResponseBodyData = exports.ContractMarginResponseBodyData = exports.ChannelOrderResponseBodyData = exports.CancelCorpAuthResponseBodyData = exports.AuthUrlResponseBodyData = exports.OrderResaleResponse = exports.OrderResaleResponseBody = exports.OrderResaleRequest = exports.OrderResaleHeaders = exports.ListSealApprovalResponse = exports.ListSealApprovalResponseBody = exports.ListSealApprovalRequest = exports.ListSealApprovalHeaders = exports.ListFlowDocsResponse = exports.ListFlowDocsResponseBody = exports.ListFlowDocsRequest = exports.ListFlowDocsHeaders = exports.GetUserRealnameUrlResponse = exports.GetUserRealnameUrlResponseBody = exports.GetUserRealnameUrlRequest = exports.GetUserRealnameUrlHeaders = exports.GetUserInfoResponse = exports.GetUserInfoResponseBody = exports.GetUserInfoHeaders = exports.GetUploadUrlResponse = exports.GetUploadUrlResponseBody = exports.GetUploadUrlRequest = exports.GetUploadUrlHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AuthUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AuthUrlHeaders = AuthUrlHeaders;
class AuthUrlRequest extends $tea.Model {
    static names() {
        return {
            redirectUrl: 'redirectUrl',
        };
    }
    static types() {
        return {
            redirectUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AuthUrlRequest = AuthUrlRequest;
class AuthUrlResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: AuthUrlResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AuthUrlResponseBody = AuthUrlResponseBody;
class AuthUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AuthUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AuthUrlResponse = AuthUrlResponse;
class CancelCorpAuthHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelCorpAuthHeaders = CancelCorpAuthHeaders;
class CancelCorpAuthResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: CancelCorpAuthResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelCorpAuthResponseBody = CancelCorpAuthResponseBody;
class CancelCorpAuthResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CancelCorpAuthResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelCorpAuthResponse = CancelCorpAuthResponse;
class ChannelOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChannelOrderHeaders = ChannelOrderHeaders;
class ChannelOrderRequest extends $tea.Model {
    static names() {
        return {
            itemCode: 'itemCode',
            itemName: 'itemName',
            orderCreateTime: 'orderCreateTime',
            orderId: 'orderId',
            payFee: 'payFee',
            quantity: 'quantity',
        };
    }
    static types() {
        return {
            itemCode: 'string',
            itemName: 'string',
            orderCreateTime: 'number',
            orderId: 'string',
            payFee: 'number',
            quantity: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChannelOrderRequest = ChannelOrderRequest;
class ChannelOrderResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: ChannelOrderResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChannelOrderResponseBody = ChannelOrderResponseBody;
class ChannelOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ChannelOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChannelOrderResponse = ChannelOrderResponse;
class ContractMarginHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ContractMarginHeaders = ContractMarginHeaders;
class ContractMarginResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: ContractMarginResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ContractMarginResponseBody = ContractMarginResponseBody;
class ContractMarginResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ContractMarginResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ContractMarginResponse = ContractMarginResponse;
class CorpConsoleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CorpConsoleHeaders = CorpConsoleHeaders;
class CorpConsoleResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: CorpConsoleResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CorpConsoleResponseBody = CorpConsoleResponseBody;
class CorpConsoleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CorpConsoleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CorpConsoleResponse = CorpConsoleResponse;
class CorpInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CorpInfoHeaders = CorpInfoHeaders;
class CorpInfoResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: CorpInfoResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CorpInfoResponseBody = CorpInfoResponseBody;
class CorpInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CorpInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CorpInfoResponse = CorpInfoResponse;
class CreateDeveloperHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDeveloperHeaders = CreateDeveloperHeaders;
class CreateDeveloperRequest extends $tea.Model {
    static names() {
        return {
            redirectUrl: 'redirectUrl',
        };
    }
    static types() {
        return {
            redirectUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDeveloperRequest = CreateDeveloperRequest;
class CreateDeveloperResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: 'boolean',
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDeveloperResponseBody = CreateDeveloperResponseBody;
class CreateDeveloperResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateDeveloperResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDeveloperResponse = CreateDeveloperResponse;
class GetCorpRealnameUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCorpRealnameUrlHeaders = GetCorpRealnameUrlHeaders;
class GetCorpRealnameUrlRequest extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCorpRealnameUrlRequest = GetCorpRealnameUrlRequest;
class GetCorpRealnameUrlResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetCorpRealnameUrlResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCorpRealnameUrlResponseBody = GetCorpRealnameUrlResponseBody;
class GetCorpRealnameUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCorpRealnameUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCorpRealnameUrlResponse = GetCorpRealnameUrlResponse;
class GetCropStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCropStatusHeaders = GetCropStatusHeaders;
class GetCropStatusResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetCropStatusResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCropStatusResponseBody = GetCropStatusResponseBody;
class GetCropStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCropStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCropStatusResponse = GetCropStatusResponse;
class GetFileHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileHeaders = GetFileHeaders;
class GetFileResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetFileResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileResponseBody = GetFileResponseBody;
class GetFileResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFileResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileResponse = GetFileResponse;
class GetFlowDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowDetailHeaders = GetFlowDetailHeaders;
class GetFlowDetailRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowDetailRequest = GetFlowDetailRequest;
class GetFlowDetailResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetFlowDetailResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowDetailResponseBody = GetFlowDetailResponseBody;
class GetFlowDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFlowDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowDetailResponse = GetFlowDetailResponse;
class GetFlowSignDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowSignDetailHeaders = GetFlowSignDetailHeaders;
class GetFlowSignDetailRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowSignDetailRequest = GetFlowSignDetailRequest;
class GetFlowSignDetailResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetFlowSignDetailResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowSignDetailResponseBody = GetFlowSignDetailResponseBody;
class GetFlowSignDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFlowSignDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowSignDetailResponse = GetFlowSignDetailResponse;
class GetProcessStartUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProcessStartUrlHeaders = GetProcessStartUrlHeaders;
class GetProcessStartUrlRequest extends $tea.Model {
    static names() {
        return {
            ccs: 'ccs',
            files: 'files',
            initiatorUserId: 'initiatorUserId',
            participants: 'participants',
            redirectUrl: 'redirectUrl',
            sourceInfo: 'sourceInfo',
            taskName: 'taskName',
        };
    }
    static types() {
        return {
            ccs: { 'type': 'array', 'itemType': GetProcessStartUrlRequestCcs },
            files: { 'type': 'array', 'itemType': GetProcessStartUrlRequestFiles },
            initiatorUserId: 'string',
            participants: { 'type': 'array', 'itemType': GetProcessStartUrlRequestParticipants },
            redirectUrl: 'string',
            sourceInfo: GetProcessStartUrlRequestSourceInfo,
            taskName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProcessStartUrlRequest = GetProcessStartUrlRequest;
class GetProcessStartUrlResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetProcessStartUrlResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProcessStartUrlResponseBody = GetProcessStartUrlResponseBody;
class GetProcessStartUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetProcessStartUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProcessStartUrlResponse = GetProcessStartUrlResponse;
class GetSignNoticeUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignNoticeUrlHeaders = GetSignNoticeUrlHeaders;
class GetSignNoticeUrlRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignNoticeUrlRequest = GetSignNoticeUrlRequest;
class GetSignNoticeUrlResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetSignNoticeUrlResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignNoticeUrlResponseBody = GetSignNoticeUrlResponseBody;
class GetSignNoticeUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSignNoticeUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignNoticeUrlResponse = GetSignNoticeUrlResponse;
class GetUploadUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUploadUrlHeaders = GetUploadUrlHeaders;
class GetUploadUrlRequest extends $tea.Model {
    static names() {
        return {
            contentMd5: 'contentMd5',
            contentType: 'contentType',
            convert2Pdf: 'convert2Pdf',
            fileName: 'fileName',
            fileSize: 'fileSize',
        };
    }
    static types() {
        return {
            contentMd5: 'string',
            contentType: 'string',
            convert2Pdf: 'boolean',
            fileName: 'string',
            fileSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUploadUrlRequest = GetUploadUrlRequest;
class GetUploadUrlResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetUploadUrlResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUploadUrlResponseBody = GetUploadUrlResponseBody;
class GetUploadUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUploadUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUploadUrlResponse = GetUploadUrlResponse;
class GetUserInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserInfoHeaders = GetUserInfoHeaders;
class GetUserInfoResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetUserInfoResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserInfoResponseBody = GetUserInfoResponseBody;
class GetUserInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserInfoResponse = GetUserInfoResponse;
class GetUserRealnameUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealnameUrlHeaders = GetUserRealnameUrlHeaders;
class GetUserRealnameUrlRequest extends $tea.Model {
    static names() {
        return {
            redirectUrl: 'redirectUrl',
            userId: 'userId',
        };
    }
    static types() {
        return {
            redirectUrl: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealnameUrlRequest = GetUserRealnameUrlRequest;
class GetUserRealnameUrlResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: GetUserRealnameUrlResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealnameUrlResponseBody = GetUserRealnameUrlResponseBody;
class GetUserRealnameUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserRealnameUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealnameUrlResponse = GetUserRealnameUrlResponse;
class ListFlowDocsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFlowDocsHeaders = ListFlowDocsHeaders;
class ListFlowDocsRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFlowDocsRequest = ListFlowDocsRequest;
class ListFlowDocsResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: { 'type': 'array', 'itemType': ListFlowDocsResponseBodyData },
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFlowDocsResponseBody = ListFlowDocsResponseBody;
class ListFlowDocsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListFlowDocsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFlowDocsResponse = ListFlowDocsResponse;
class ListSealApprovalHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSealApprovalHeaders = ListSealApprovalHeaders;
class ListSealApprovalRequest extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSealApprovalRequest = ListSealApprovalRequest;
class ListSealApprovalResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: { 'type': 'array', 'itemType': ListSealApprovalResponseBodyData },
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSealApprovalResponseBody = ListSealApprovalResponseBody;
class ListSealApprovalResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListSealApprovalResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSealApprovalResponse = ListSealApprovalResponse;
class OrderResaleHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderResaleHeaders = OrderResaleHeaders;
class OrderResaleRequest extends $tea.Model {
    static names() {
        return {
            orderCreateTime: 'orderCreateTime',
            orderId: 'orderId',
            quantity: 'quantity',
            serviceStartTime: 'serviceStartTime',
            serviceStopTime: 'serviceStopTime',
        };
    }
    static types() {
        return {
            orderCreateTime: 'number',
            orderId: 'string',
            quantity: 'number',
            serviceStartTime: 'number',
            serviceStopTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderResaleRequest = OrderResaleRequest;
class OrderResaleResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
        };
    }
    static types() {
        return {
            code: 'number',
            data: OrderResaleResponseBodyData,
            message: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderResaleResponseBody = OrderResaleResponseBody;
class OrderResaleResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: OrderResaleResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderResaleResponse = OrderResaleResponse;
class AuthUrlResponseBodyData extends $tea.Model {
    static names() {
        return {
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            mobileUrl: 'string',
            pcUrl: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AuthUrlResponseBodyData = AuthUrlResponseBodyData;
class CancelCorpAuthResponseBodyData extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CancelCorpAuthResponseBodyData = CancelCorpAuthResponseBodyData;
class ChannelOrderResponseBodyData extends $tea.Model {
    static names() {
        return {
            esignOrderId: 'esignOrderId',
        };
    }
    static types() {
        return {
            esignOrderId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ChannelOrderResponseBodyData = ChannelOrderResponseBodyData;
class ContractMarginResponseBodyData extends $tea.Model {
    static names() {
        return {
            margin: 'margin',
        };
    }
    static types() {
        return {
            margin: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ContractMarginResponseBodyData = ContractMarginResponseBodyData;
class CorpConsoleResponseBodyData extends $tea.Model {
    static names() {
        return {
            orgConsoleUrl: 'orgConsoleUrl',
        };
    }
    static types() {
        return {
            orgConsoleUrl: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CorpConsoleResponseBodyData = CorpConsoleResponseBodyData;
class CorpInfoResponseBodyData extends $tea.Model {
    static names() {
        return {
            orgRealName: 'orgRealName',
            realName: 'realName',
        };
    }
    static types() {
        return {
            orgRealName: 'string',
            realName: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CorpInfoResponseBodyData = CorpInfoResponseBodyData;
class GetCorpRealnameUrlResponseBodyData extends $tea.Model {
    static names() {
        return {
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            mobileUrl: 'string',
            pcUrl: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCorpRealnameUrlResponseBodyData = GetCorpRealnameUrlResponseBodyData;
class GetCropStatusResponseBodyData extends $tea.Model {
    static names() {
        return {
            authStatus: 'authStatus',
            installStatus: 'installStatus',
        };
    }
    static types() {
        return {
            authStatus: 'string',
            installStatus: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCropStatusResponseBodyData = GetCropStatusResponseBodyData;
class GetFileResponseBodyData extends $tea.Model {
    static names() {
        return {
            downloadUrl: 'downloadUrl',
            fileId: 'fileId',
            name: 'name',
            pdfTotalPages: 'pdfTotalPages',
            size: 'size',
            status: 'status',
        };
    }
    static types() {
        return {
            downloadUrl: 'string',
            fileId: 'string',
            name: 'string',
            pdfTotalPages: 'number',
            size: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFileResponseBodyData = GetFileResponseBodyData;
class GetFlowDetailResponseBodyDataLogs extends $tea.Model {
    static names() {
        return {
            logType: 'logType',
            operateDescription: 'operateDescription',
            operateTime: 'operateTime',
            operatorAccountName: 'operatorAccountName',
        };
    }
    static types() {
        return {
            logType: 'string',
            operateDescription: 'string',
            operateTime: 'number',
            operatorAccountName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowDetailResponseBodyDataLogs = GetFlowDetailResponseBodyDataLogs;
class GetFlowDetailResponseBodyData extends $tea.Model {
    static names() {
        return {
            businessSense: 'businessSense',
            flowStatus: 'flowStatus',
            initiatorAuthorizedName: 'initiatorAuthorizedName',
            initiatorName: 'initiatorName',
            logs: 'logs',
        };
    }
    static types() {
        return {
            businessSense: 'string',
            flowStatus: 'number',
            initiatorAuthorizedName: 'string',
            initiatorName: 'string',
            logs: { 'type': 'array', 'itemType': GetFlowDetailResponseBodyDataLogs },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowDetailResponseBodyData = GetFlowDetailResponseBodyData;
class GetFlowSignDetailResponseBodyDataSigners extends $tea.Model {
    static names() {
        return {
            signStatus: 'signStatus',
            signerName: 'signerName',
        };
    }
    static types() {
        return {
            signStatus: 'number',
            signerName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowSignDetailResponseBodyDataSigners = GetFlowSignDetailResponseBodyDataSigners;
class GetFlowSignDetailResponseBodyData extends $tea.Model {
    static names() {
        return {
            businessSense: 'businessSense',
            flowStatus: 'flowStatus',
            signers: 'signers',
        };
    }
    static types() {
        return {
            businessSense: 'string',
            flowStatus: 'number',
            signers: { 'type': 'array', 'itemType': GetFlowSignDetailResponseBodyDataSigners },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFlowSignDetailResponseBodyData = GetFlowSignDetailResponseBodyData;
class GetProcessStartUrlRequestCcs extends $tea.Model {
    static names() {
        return {
            account: 'account',
            accountName: 'accountName',
            accountType: 'accountType',
            orgName: 'orgName',
            userId: 'userId',
        };
    }
    static types() {
        return {
            account: 'string',
            accountName: 'string',
            accountType: 'string',
            orgName: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProcessStartUrlRequestCcs = GetProcessStartUrlRequestCcs;
class GetProcessStartUrlRequestFiles extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            fileName: 'fileName',
        };
    }
    static types() {
        return {
            fileId: 'string',
            fileName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProcessStartUrlRequestFiles = GetProcessStartUrlRequestFiles;
class GetProcessStartUrlRequestParticipants extends $tea.Model {
    static names() {
        return {
            account: 'account',
            accountName: 'accountName',
            accountType: 'accountType',
            orgName: 'orgName',
            signRequirements: 'signRequirements',
            userId: 'userId',
        };
    }
    static types() {
        return {
            account: 'string',
            accountName: 'string',
            accountType: 'string',
            orgName: 'string',
            signRequirements: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProcessStartUrlRequestParticipants = GetProcessStartUrlRequestParticipants;
class GetProcessStartUrlRequestSourceInfo extends $tea.Model {
    static names() {
        return {
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
            showText: 'showText',
        };
    }
    static types() {
        return {
            mobileUrl: 'string',
            pcUrl: 'string',
            showText: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProcessStartUrlRequestSourceInfo = GetProcessStartUrlRequestSourceInfo;
class GetProcessStartUrlResponseBodyData extends $tea.Model {
    static names() {
        return {
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            mobileUrl: 'string',
            pcUrl: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProcessStartUrlResponseBodyData = GetProcessStartUrlResponseBodyData;
class GetSignNoticeUrlResponseBodyData extends $tea.Model {
    static names() {
        return {
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            mobileUrl: 'string',
            pcUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSignNoticeUrlResponseBodyData = GetSignNoticeUrlResponseBodyData;
class GetUploadUrlResponseBodyData extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            uploadUrl: 'uploadUrl',
        };
    }
    static types() {
        return {
            fileId: 'string',
            uploadUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUploadUrlResponseBodyData = GetUploadUrlResponseBodyData;
class GetUserInfoResponseBodyData extends $tea.Model {
    static names() {
        return {
            realName: 'realName',
            userRealName: 'userRealName',
        };
    }
    static types() {
        return {
            realName: 'boolean',
            userRealName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserInfoResponseBodyData = GetUserInfoResponseBodyData;
class GetUserRealnameUrlResponseBodyData extends $tea.Model {
    static names() {
        return {
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            mobileUrl: 'string',
            pcUrl: 'string',
            taskId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserRealnameUrlResponseBodyData = GetUserRealnameUrlResponseBodyData;
class ListFlowDocsResponseBodyData extends $tea.Model {
    static names() {
        return {
            fileId: 'fileId',
            fileName: 'fileName',
            fileUrl: 'fileUrl',
        };
    }
    static types() {
        return {
            fileId: 'string',
            fileName: 'string',
            fileUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFlowDocsResponseBodyData = ListFlowDocsResponseBodyData;
class ListSealApprovalResponseBodyDataApprovalNodes extends $tea.Model {
    static names() {
        return {
            approvalTime: 'approvalTime',
            approverName: 'approverName',
            startTime: 'startTime',
            status: 'status',
        };
    }
    static types() {
        return {
            approvalTime: 'number',
            approverName: 'string',
            startTime: 'number',
            status: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSealApprovalResponseBodyDataApprovalNodes = ListSealApprovalResponseBodyDataApprovalNodes;
class ListSealApprovalResponseBodyData extends $tea.Model {
    static names() {
        return {
            approvalName: 'approvalName',
            approvalNodes: 'approvalNodes',
            endTime: 'endTime',
            refuseReason: 'refuseReason',
            sealIdImg: 'sealIdImg',
            sponsorAccountName: 'sponsorAccountName',
            startTime: 'startTime',
            status: 'status',
        };
    }
    static types() {
        return {
            approvalName: 'string',
            approvalNodes: { 'type': 'array', 'itemType': ListSealApprovalResponseBodyDataApprovalNodes },
            endTime: 'number',
            refuseReason: 'string',
            sealIdImg: 'string',
            sponsorAccountName: 'string',
            startTime: 'number',
            status: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSealApprovalResponseBodyData = ListSealApprovalResponseBodyData;
class OrderResaleResponseBodyData extends $tea.Model {
    static names() {
        return {
            esignOrderId: 'esignOrderId',
        };
    }
    static types() {
        return {
            esignOrderId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OrderResaleResponseBodyData = OrderResaleResponseBodyData;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 获取授权的页面地址
     *
     * @param request AuthUrlRequest
     * @param headers AuthUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AuthUrlResponse
     */
    async authUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.redirectUrl)) {
            body["redirectUrl"] = request.redirectUrl;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AuthUrl",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/auths/url`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AuthUrlResponse({}));
    }
    /**
     * @summary 获取授权的页面地址
     *
     * @param request AuthUrlRequest
     * @return AuthUrlResponse
     */
    async authUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AuthUrlHeaders({});
        return await this.authUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 取消企业的授权
     *
     * @param headers CancelCorpAuthHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CancelCorpAuthResponse
     */
    async cancelCorpAuthWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "CancelCorpAuth",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/corps/auth/cancel`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CancelCorpAuthResponse({}));
    }
    /**
     * @summary 取消企业的授权
     *
     * @return CancelCorpAuthResponse
     */
    async cancelCorpAuth() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CancelCorpAuthHeaders({});
        return await this.cancelCorpAuthWithOptions(headers, runtime);
    }
    /**
     * @summary 套餐转售1（分润模式）
     *
     * @param request ChannelOrderRequest
     * @param headers ChannelOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChannelOrderResponse
     */
    async channelOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.itemCode)) {
            body["itemCode"] = request.itemCode;
        }
        if (!tea_util_1.default.isUnset(request.itemName)) {
            body["itemName"] = request.itemName;
        }
        if (!tea_util_1.default.isUnset(request.orderCreateTime)) {
            body["orderCreateTime"] = request.orderCreateTime;
        }
        if (!tea_util_1.default.isUnset(request.orderId)) {
            body["orderId"] = request.orderId;
        }
        if (!tea_util_1.default.isUnset(request.payFee)) {
            body["payFee"] = request.payFee;
        }
        if (!tea_util_1.default.isUnset(request.quantity)) {
            body["quantity"] = request.quantity;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ChannelOrder",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/orders/channel`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ChannelOrderResponse({}));
    }
    /**
     * @summary 套餐转售1（分润模式）
     *
     * @param request ChannelOrderRequest
     * @return ChannelOrderResponse
     */
    async channelOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ChannelOrderHeaders({});
        return await this.channelOrderWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询套餐余量
     *
     * @param headers ContractMarginHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ContractMarginResponse
     */
    async contractMarginWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "ContractMargin",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/contracts/margin`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ContractMarginResponse({}));
    }
    /**
     * @summary 查询套餐余量
     *
     * @return ContractMarginResponse
     */
    async contractMargin() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ContractMarginHeaders({});
        return await this.contractMarginWithOptions(headers, runtime);
    }
    /**
     * @summary 查询个人信息
     *
     * @param headers CorpConsoleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CorpConsoleResponse
     */
    async corpConsoleWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "CorpConsole",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/corps/console`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CorpConsoleResponse({}));
    }
    /**
     * @summary 查询个人信息
     *
     * @return CorpConsoleResponse
     */
    async corpConsole() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CorpConsoleHeaders({});
        return await this.corpConsoleWithOptions(headers, runtime);
    }
    /**
     * @summary 查询企业信息
     *
     * @param headers CorpInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CorpInfoResponse
     */
    async corpInfoWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "CorpInfo",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/corps/info`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CorpInfoResponse({}));
    }
    /**
     * @summary 查询企业信息
     *
     * @return CorpInfoResponse
     */
    async corpInfo() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CorpInfoHeaders({});
        return await this.corpInfoWithOptions(headers, runtime);
    }
    /**
     * @summary 钉钉ISV服务商的数据初始化
     *
     * @param request CreateDeveloperRequest
     * @param headers CreateDeveloperHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateDeveloperResponse
     */
    async createDeveloperWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.redirectUrl)) {
            body["redirectUrl"] = request.redirectUrl;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateDeveloper",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/developers/create`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateDeveloperResponse({}));
    }
    /**
     * @summary 钉钉ISV服务商的数据初始化
     *
     * @param request CreateDeveloperRequest
     * @return CreateDeveloperResponse
     */
    async createDeveloper(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateDeveloperHeaders({});
        return await this.createDeveloperWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取跳转到个人实名的地址
     *
     * @param request GetCorpRealnameUrlRequest
     * @param headers GetCorpRealnameUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCorpRealnameUrlResponse
     */
    async getCorpRealnameUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetCorpRealnameUrl",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/corps/realname`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCorpRealnameUrlResponse({}));
    }
    /**
     * @summary 获取跳转到个人实名的地址
     *
     * @param request GetCorpRealnameUrlRequest
     * @return GetCorpRealnameUrlResponse
     */
    async getCorpRealnameUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCorpRealnameUrlHeaders({});
        return await this.getCorpRealnameUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业e签宝微应用状态
     *
     * @param headers GetCropStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCropStatusResponse
     */
    async getCropStatusWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetCropStatus",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/corps/statuses`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCropStatusResponse({}));
    }
    /**
     * @summary 获取企业e签宝微应用状态
     *
     * @return GetCropStatusResponse
     */
    async getCropStatus() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCropStatusHeaders({});
        return await this.getCropStatusWithOptions(headers, runtime);
    }
    /**
     * @summary 查询文件详情/下载文件
     *
     * @param headers GetFileHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileResponse
     */
    async getFileWithOptions(fileId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetFile",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/files/${fileId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFileResponse({}));
    }
    /**
     * @summary 查询文件详情/下载文件
     *
     * @return GetFileResponse
     */
    async getFile(fileId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFileHeaders({});
        return await this.getFileWithOptions(fileId, headers, runtime);
    }
    /**
     * @summary 获取对应流程任务详情
     *
     * @param request GetFlowDetailRequest
     * @param headers GetFlowDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFlowDetailResponse
     */
    async getFlowDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFlowDetail",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/flows/detail`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFlowDetailResponse({}));
    }
    /**
     * @summary 获取对应流程任务详情
     *
     * @param request GetFlowDetailRequest
     * @return GetFlowDetailResponse
     */
    async getFlowDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFlowDetailHeaders({});
        return await this.getFlowDetailWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取对应流程任务详情
     *
     * @param request GetFlowSignDetailRequest
     * @param headers GetFlowSignDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFlowSignDetailResponse
     */
    async getFlowSignDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFlowSignDetail",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/flows/sign/detail`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFlowSignDetailResponse({}));
    }
    /**
     * @summary 获取对应流程任务详情
     *
     * @param request GetFlowSignDetailRequest
     * @return GetFlowSignDetailResponse
     */
    async getFlowSignDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFlowSignDetailHeaders({});
        return await this.getFlowSignDetailWithOptions(request, headers, runtime);
    }
    /**
     * @summary 发起签署的地址
     *
     * @param request GetProcessStartUrlRequest
     * @param headers GetProcessStartUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetProcessStartUrlResponse
     */
    async getProcessStartUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.ccs)) {
            body["ccs"] = request.ccs;
        }
        if (!tea_util_1.default.isUnset(request.files)) {
            body["files"] = request.files;
        }
        if (!tea_util_1.default.isUnset(request.initiatorUserId)) {
            body["initiatorUserId"] = request.initiatorUserId;
        }
        if (!tea_util_1.default.isUnset(request.participants)) {
            body["participants"] = request.participants;
        }
        if (!tea_util_1.default.isUnset(request.redirectUrl)) {
            body["redirectUrl"] = request.redirectUrl;
        }
        if (!tea_util_1.default.isUnset(request.sourceInfo)) {
            body["sourceInfo"] = request.sourceInfo;
        }
        if (!tea_util_1.default.isUnset(request.taskName)) {
            body["taskName"] = request.taskName;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetProcessStartUrl",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/process/start`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetProcessStartUrlResponse({}));
    }
    /**
     * @summary 发起签署的地址
     *
     * @param request GetProcessStartUrlRequest
     * @return GetProcessStartUrlResponse
     */
    async getProcessStartUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetProcessStartUrlHeaders({});
        return await this.getProcessStartUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取签署人签署地址
     *
     * @param request GetSignNoticeUrlRequest
     * @param headers GetSignNoticeUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSignNoticeUrlResponse
     */
    async getSignNoticeUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetSignNoticeUrl",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/signs/notice/url`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSignNoticeUrlResponse({}));
    }
    /**
     * @summary 获取签署人签署地址
     *
     * @param request GetSignNoticeUrlRequest
     * @return GetSignNoticeUrlResponse
     */
    async getSignNoticeUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSignNoticeUrlHeaders({});
        return await this.getSignNoticeUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 通过上传方式创建文件
     *
     * @param request GetUploadUrlRequest
     * @param headers GetUploadUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUploadUrlResponse
     */
    async getUploadUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.contentMd5)) {
            body["contentMd5"] = request.contentMd5;
        }
        if (!tea_util_1.default.isUnset(request.contentType)) {
            body["contentType"] = request.contentType;
        }
        if (!tea_util_1.default.isUnset(request.convert2Pdf)) {
            body["convert2Pdf"] = request.convert2Pdf;
        }
        if (!tea_util_1.default.isUnset(request.fileName)) {
            body["fileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.fileSize)) {
            body["fileSize"] = request.fileSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetUploadUrl",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/files/getUploadUrl`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUploadUrlResponse({}));
    }
    /**
     * @summary 通过上传方式创建文件
     *
     * @param request GetUploadUrlRequest
     * @return GetUploadUrlResponse
     */
    async getUploadUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUploadUrlHeaders({});
        return await this.getUploadUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询个人信息
     *
     * @param headers GetUserInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserInfoResponse
     */
    async getUserInfoWithOptions(userId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "GetUserInfo",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/users/${userId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserInfoResponse({}));
    }
    /**
     * @summary 查询个人信息
     *
     * @return GetUserInfoResponse
     */
    async getUserInfo(userId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserInfoHeaders({});
        return await this.getUserInfoWithOptions(userId, headers, runtime);
    }
    /**
     * @summary 获取跳转到个人实名的地址
     *
     * @param request GetUserRealnameUrlRequest
     * @param headers GetUserRealnameUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserRealnameUrlResponse
     */
    async getUserRealnameUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.redirectUrl)) {
            body["redirectUrl"] = request.redirectUrl;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetUserRealnameUrl",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/users/realname`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserRealnameUrlResponse({}));
    }
    /**
     * @summary 获取跳转到个人实名的地址
     *
     * @param request GetUserRealnameUrlRequest
     * @return GetUserRealnameUrlResponse
     */
    async getUserRealnameUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserRealnameUrlHeaders({});
        return await this.getUserRealnameUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取流程任务合同列表
     *
     * @param request ListFlowDocsRequest
     * @param headers ListFlowDocsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFlowDocsResponse
     */
    async listFlowDocsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListFlowDocs",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/flows/docs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListFlowDocsResponse({}));
    }
    /**
     * @summary 获取流程任务合同列表
     *
     * @param request ListFlowDocsRequest
     * @return ListFlowDocsResponse
     */
    async listFlowDocs(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListFlowDocsHeaders({});
        return await this.listFlowDocsWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取流程任务用印审批列表
     *
     * @param request ListSealApprovalRequest
     * @param headers ListSealApprovalHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSealApprovalResponse
     */
    async listSealApprovalWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.taskId)) {
            query["taskId"] = request.taskId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListSealApproval",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/seals/approval/list`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListSealApprovalResponse({}));
    }
    /**
     * @summary 获取流程任务用印审批列表
     *
     * @param request ListSealApprovalRequest
     * @return ListSealApprovalResponse
     */
    async listSealApproval(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListSealApprovalHeaders({});
        return await this.listSealApprovalWithOptions(request, headers, runtime);
    }
    /**
     * @summary 套餐转售2（底价结算模式）
     *
     * @param request OrderResaleRequest
     * @param headers OrderResaleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return OrderResaleResponse
     */
    async orderResaleWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.orderCreateTime)) {
            body["orderCreateTime"] = request.orderCreateTime;
        }
        if (!tea_util_1.default.isUnset(request.orderId)) {
            body["orderId"] = request.orderId;
        }
        if (!tea_util_1.default.isUnset(request.quantity)) {
            body["quantity"] = request.quantity;
        }
        if (!tea_util_1.default.isUnset(request.serviceStartTime)) {
            body["serviceStartTime"] = request.serviceStartTime;
        }
        if (!tea_util_1.default.isUnset(request.serviceStopTime)) {
            body["serviceStopTime"] = request.serviceStopTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "OrderResale",
            version: "esign_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/esign/orders/resale`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new OrderResaleResponse({}));
    }
    /**
     * @summary 套餐转售2（底价结算模式）
     *
     * @param request OrderResaleRequest
     * @return OrderResaleResponse
     */
    async orderResale(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new OrderResaleHeaders({});
        return await this.orderResaleWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map