/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AuthUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AuthUrlRequest extends $tea.Model {
    redirectUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AuthUrlResponseBody extends $tea.Model {
    code?: number;
    data?: AuthUrlResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AuthUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AuthUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelCorpAuthHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelCorpAuthResponseBody extends $tea.Model {
    code?: number;
    data?: CancelCorpAuthResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelCorpAuthResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CancelCorpAuthResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChannelOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChannelOrderRequest extends $tea.Model {
    itemCode?: string;
    itemName?: string;
    orderCreateTime?: number;
    orderId?: string;
    payFee?: number;
    quantity?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChannelOrderResponseBody extends $tea.Model {
    code?: number;
    data?: ChannelOrderResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChannelOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ChannelOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractMarginHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractMarginResponseBody extends $tea.Model {
    code?: number;
    data?: ContractMarginResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractMarginResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ContractMarginResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpConsoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpConsoleResponseBody extends $tea.Model {
    code?: number;
    data?: CorpConsoleResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpConsoleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CorpConsoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpInfoResponseBody extends $tea.Model {
    code?: number;
    data?: CorpInfoResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CorpInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperRequest extends $tea.Model {
    redirectUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperResponseBody extends $tea.Model {
    code?: number;
    data?: boolean;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeveloperResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDeveloperResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpRealnameUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpRealnameUrlRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpRealnameUrlResponseBody extends $tea.Model {
    code?: number;
    data?: GetCorpRealnameUrlResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpRealnameUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCorpRealnameUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCropStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCropStatusResponseBody extends $tea.Model {
    code?: number;
    data?: GetCropStatusResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCropStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCropStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileResponseBody extends $tea.Model {
    code?: number;
    data?: GetFileResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFileResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailResponseBody extends $tea.Model {
    code?: number;
    data?: GetFlowDetailResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFlowDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowSignDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowSignDetailRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowSignDetailResponseBody extends $tea.Model {
    code?: number;
    data?: GetFlowSignDetailResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowSignDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFlowSignDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessStartUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessStartUrlRequest extends $tea.Model {
    ccs?: GetProcessStartUrlRequestCcs[];
    files?: GetProcessStartUrlRequestFiles[];
    initiatorUserId?: string;
    participants?: GetProcessStartUrlRequestParticipants[];
    redirectUrl?: string;
    sourceInfo?: GetProcessStartUrlRequestSourceInfo;
    taskName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessStartUrlResponseBody extends $tea.Model {
    code?: number;
    data?: GetProcessStartUrlResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessStartUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetProcessStartUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignNoticeUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignNoticeUrlRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignNoticeUrlResponseBody extends $tea.Model {
    code?: number;
    data?: GetSignNoticeUrlResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignNoticeUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSignNoticeUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlRequest extends $tea.Model {
    contentMd5?: string;
    contentType?: string;
    convert2Pdf?: boolean;
    fileName?: string;
    fileSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlResponseBody extends $tea.Model {
    code?: number;
    data?: GetUploadUrlResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUploadUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoResponseBody extends $tea.Model {
    code?: number;
    data?: GetUserInfoResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealnameUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealnameUrlRequest extends $tea.Model {
    redirectUrl?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealnameUrlResponseBody extends $tea.Model {
    code?: number;
    data?: GetUserRealnameUrlResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealnameUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserRealnameUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFlowDocsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFlowDocsRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFlowDocsResponseBody extends $tea.Model {
    code?: number;
    data?: ListFlowDocsResponseBodyData[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFlowDocsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListFlowDocsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSealApprovalHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSealApprovalRequest extends $tea.Model {
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSealApprovalResponseBody extends $tea.Model {
    code?: number;
    data?: ListSealApprovalResponseBodyData[];
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSealApprovalResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListSealApprovalResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrderResaleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrderResaleRequest extends $tea.Model {
    orderCreateTime?: number;
    orderId?: string;
    quantity?: number;
    serviceStartTime?: number;
    serviceStopTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrderResaleResponseBody extends $tea.Model {
    code?: number;
    data?: OrderResaleResponseBodyData;
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrderResaleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: OrderResaleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AuthUrlResponseBodyData extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelCorpAuthResponseBodyData extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ChannelOrderResponseBodyData extends $tea.Model {
    esignOrderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractMarginResponseBodyData extends $tea.Model {
    margin?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpConsoleResponseBodyData extends $tea.Model {
    orgConsoleUrl?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CorpInfoResponseBodyData extends $tea.Model {
    orgRealName?: string;
    realName?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCorpRealnameUrlResponseBodyData extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCropStatusResponseBodyData extends $tea.Model {
    authStatus?: string;
    installStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFileResponseBodyData extends $tea.Model {
    downloadUrl?: string;
    fileId?: string;
    name?: string;
    pdfTotalPages?: number;
    size?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailResponseBodyDataLogs extends $tea.Model {
    logType?: string;
    operateDescription?: string;
    operateTime?: number;
    operatorAccountName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowDetailResponseBodyData extends $tea.Model {
    businessSense?: string;
    flowStatus?: number;
    initiatorAuthorizedName?: string;
    initiatorName?: string;
    logs?: GetFlowDetailResponseBodyDataLogs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowSignDetailResponseBodyDataSigners extends $tea.Model {
    signStatus?: number;
    signerName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFlowSignDetailResponseBodyData extends $tea.Model {
    businessSense?: string;
    flowStatus?: number;
    signers?: GetFlowSignDetailResponseBodyDataSigners[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessStartUrlRequestCcs extends $tea.Model {
    account?: string;
    accountName?: string;
    accountType?: string;
    orgName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessStartUrlRequestFiles extends $tea.Model {
    fileId?: string;
    fileName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessStartUrlRequestParticipants extends $tea.Model {
    account?: string;
    accountName?: string;
    accountType?: string;
    orgName?: string;
    signRequirements?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessStartUrlRequestSourceInfo extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    showText?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProcessStartUrlResponseBodyData extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSignNoticeUrlResponseBodyData extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUploadUrlResponseBodyData extends $tea.Model {
    fileId?: string;
    uploadUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserInfoResponseBodyData extends $tea.Model {
    realName?: boolean;
    userRealName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserRealnameUrlResponseBodyData extends $tea.Model {
    mobileUrl?: string;
    pcUrl?: string;
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFlowDocsResponseBodyData extends $tea.Model {
    fileId?: string;
    fileName?: string;
    fileUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSealApprovalResponseBodyDataApprovalNodes extends $tea.Model {
    approvalTime?: number;
    approverName?: string;
    startTime?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSealApprovalResponseBodyData extends $tea.Model {
    approvalName?: string;
    approvalNodes?: ListSealApprovalResponseBodyDataApprovalNodes[];
    endTime?: number;
    refuseReason?: string;
    sealIdImg?: string;
    sponsorAccountName?: string;
    startTime?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class OrderResaleResponseBodyData extends $tea.Model {
    esignOrderId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 获取授权的页面地址
     *
     * @param request AuthUrlRequest
     * @param headers AuthUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AuthUrlResponse
     */
    authUrlWithOptions(request: AuthUrlRequest, headers: AuthUrlHeaders, runtime: $Util.RuntimeOptions): Promise<AuthUrlResponse>;
    /**
     * @summary 获取授权的页面地址
     *
     * @param request AuthUrlRequest
     * @return AuthUrlResponse
     */
    authUrl(request: AuthUrlRequest): Promise<AuthUrlResponse>;
    /**
     * @summary 取消企业的授权
     *
     * @param headers CancelCorpAuthHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CancelCorpAuthResponse
     */
    cancelCorpAuthWithOptions(headers: CancelCorpAuthHeaders, runtime: $Util.RuntimeOptions): Promise<CancelCorpAuthResponse>;
    /**
     * @summary 取消企业的授权
     *
     * @return CancelCorpAuthResponse
     */
    cancelCorpAuth(): Promise<CancelCorpAuthResponse>;
    /**
     * @summary 套餐转售1（分润模式）
     *
     * @param request ChannelOrderRequest
     * @param headers ChannelOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ChannelOrderResponse
     */
    channelOrderWithOptions(request: ChannelOrderRequest, headers: ChannelOrderHeaders, runtime: $Util.RuntimeOptions): Promise<ChannelOrderResponse>;
    /**
     * @summary 套餐转售1（分润模式）
     *
     * @param request ChannelOrderRequest
     * @return ChannelOrderResponse
     */
    channelOrder(request: ChannelOrderRequest): Promise<ChannelOrderResponse>;
    /**
     * @summary 查询套餐余量
     *
     * @param headers ContractMarginHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ContractMarginResponse
     */
    contractMarginWithOptions(headers: ContractMarginHeaders, runtime: $Util.RuntimeOptions): Promise<ContractMarginResponse>;
    /**
     * @summary 查询套餐余量
     *
     * @return ContractMarginResponse
     */
    contractMargin(): Promise<ContractMarginResponse>;
    /**
     * @summary 查询个人信息
     *
     * @param headers CorpConsoleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CorpConsoleResponse
     */
    corpConsoleWithOptions(headers: CorpConsoleHeaders, runtime: $Util.RuntimeOptions): Promise<CorpConsoleResponse>;
    /**
     * @summary 查询个人信息
     *
     * @return CorpConsoleResponse
     */
    corpConsole(): Promise<CorpConsoleResponse>;
    /**
     * @summary 查询企业信息
     *
     * @param headers CorpInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CorpInfoResponse
     */
    corpInfoWithOptions(headers: CorpInfoHeaders, runtime: $Util.RuntimeOptions): Promise<CorpInfoResponse>;
    /**
     * @summary 查询企业信息
     *
     * @return CorpInfoResponse
     */
    corpInfo(): Promise<CorpInfoResponse>;
    /**
     * @summary 钉钉ISV服务商的数据初始化
     *
     * @param request CreateDeveloperRequest
     * @param headers CreateDeveloperHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateDeveloperResponse
     */
    createDeveloperWithOptions(request: CreateDeveloperRequest, headers: CreateDeveloperHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDeveloperResponse>;
    /**
     * @summary 钉钉ISV服务商的数据初始化
     *
     * @param request CreateDeveloperRequest
     * @return CreateDeveloperResponse
     */
    createDeveloper(request: CreateDeveloperRequest): Promise<CreateDeveloperResponse>;
    /**
     * @summary 获取跳转到个人实名的地址
     *
     * @param request GetCorpRealnameUrlRequest
     * @param headers GetCorpRealnameUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCorpRealnameUrlResponse
     */
    getCorpRealnameUrlWithOptions(request: GetCorpRealnameUrlRequest, headers: GetCorpRealnameUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetCorpRealnameUrlResponse>;
    /**
     * @summary 获取跳转到个人实名的地址
     *
     * @param request GetCorpRealnameUrlRequest
     * @return GetCorpRealnameUrlResponse
     */
    getCorpRealnameUrl(request: GetCorpRealnameUrlRequest): Promise<GetCorpRealnameUrlResponse>;
    /**
     * @summary 获取企业e签宝微应用状态
     *
     * @param headers GetCropStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCropStatusResponse
     */
    getCropStatusWithOptions(headers: GetCropStatusHeaders, runtime: $Util.RuntimeOptions): Promise<GetCropStatusResponse>;
    /**
     * @summary 获取企业e签宝微应用状态
     *
     * @return GetCropStatusResponse
     */
    getCropStatus(): Promise<GetCropStatusResponse>;
    /**
     * @summary 查询文件详情/下载文件
     *
     * @param headers GetFileHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFileResponse
     */
    getFileWithOptions(fileId: string, headers: GetFileHeaders, runtime: $Util.RuntimeOptions): Promise<GetFileResponse>;
    /**
     * @summary 查询文件详情/下载文件
     *
     * @return GetFileResponse
     */
    getFile(fileId: string): Promise<GetFileResponse>;
    /**
     * @summary 获取对应流程任务详情
     *
     * @param request GetFlowDetailRequest
     * @param headers GetFlowDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFlowDetailResponse
     */
    getFlowDetailWithOptions(request: GetFlowDetailRequest, headers: GetFlowDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetFlowDetailResponse>;
    /**
     * @summary 获取对应流程任务详情
     *
     * @param request GetFlowDetailRequest
     * @return GetFlowDetailResponse
     */
    getFlowDetail(request: GetFlowDetailRequest): Promise<GetFlowDetailResponse>;
    /**
     * @summary 获取对应流程任务详情
     *
     * @param request GetFlowSignDetailRequest
     * @param headers GetFlowSignDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFlowSignDetailResponse
     */
    getFlowSignDetailWithOptions(request: GetFlowSignDetailRequest, headers: GetFlowSignDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetFlowSignDetailResponse>;
    /**
     * @summary 获取对应流程任务详情
     *
     * @param request GetFlowSignDetailRequest
     * @return GetFlowSignDetailResponse
     */
    getFlowSignDetail(request: GetFlowSignDetailRequest): Promise<GetFlowSignDetailResponse>;
    /**
     * @summary 发起签署的地址
     *
     * @param request GetProcessStartUrlRequest
     * @param headers GetProcessStartUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetProcessStartUrlResponse
     */
    getProcessStartUrlWithOptions(request: GetProcessStartUrlRequest, headers: GetProcessStartUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetProcessStartUrlResponse>;
    /**
     * @summary 发起签署的地址
     *
     * @param request GetProcessStartUrlRequest
     * @return GetProcessStartUrlResponse
     */
    getProcessStartUrl(request: GetProcessStartUrlRequest): Promise<GetProcessStartUrlResponse>;
    /**
     * @summary 获取签署人签署地址
     *
     * @param request GetSignNoticeUrlRequest
     * @param headers GetSignNoticeUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSignNoticeUrlResponse
     */
    getSignNoticeUrlWithOptions(request: GetSignNoticeUrlRequest, headers: GetSignNoticeUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetSignNoticeUrlResponse>;
    /**
     * @summary 获取签署人签署地址
     *
     * @param request GetSignNoticeUrlRequest
     * @return GetSignNoticeUrlResponse
     */
    getSignNoticeUrl(request: GetSignNoticeUrlRequest): Promise<GetSignNoticeUrlResponse>;
    /**
     * @summary 通过上传方式创建文件
     *
     * @param request GetUploadUrlRequest
     * @param headers GetUploadUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUploadUrlResponse
     */
    getUploadUrlWithOptions(request: GetUploadUrlRequest, headers: GetUploadUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetUploadUrlResponse>;
    /**
     * @summary 通过上传方式创建文件
     *
     * @param request GetUploadUrlRequest
     * @return GetUploadUrlResponse
     */
    getUploadUrl(request: GetUploadUrlRequest): Promise<GetUploadUrlResponse>;
    /**
     * @summary 查询个人信息
     *
     * @param headers GetUserInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserInfoResponse
     */
    getUserInfoWithOptions(userId: string, headers: GetUserInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserInfoResponse>;
    /**
     * @summary 查询个人信息
     *
     * @return GetUserInfoResponse
     */
    getUserInfo(userId: string): Promise<GetUserInfoResponse>;
    /**
     * @summary 获取跳转到个人实名的地址
     *
     * @param request GetUserRealnameUrlRequest
     * @param headers GetUserRealnameUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserRealnameUrlResponse
     */
    getUserRealnameUrlWithOptions(request: GetUserRealnameUrlRequest, headers: GetUserRealnameUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserRealnameUrlResponse>;
    /**
     * @summary 获取跳转到个人实名的地址
     *
     * @param request GetUserRealnameUrlRequest
     * @return GetUserRealnameUrlResponse
     */
    getUserRealnameUrl(request: GetUserRealnameUrlRequest): Promise<GetUserRealnameUrlResponse>;
    /**
     * @summary 获取流程任务合同列表
     *
     * @param request ListFlowDocsRequest
     * @param headers ListFlowDocsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFlowDocsResponse
     */
    listFlowDocsWithOptions(request: ListFlowDocsRequest, headers: ListFlowDocsHeaders, runtime: $Util.RuntimeOptions): Promise<ListFlowDocsResponse>;
    /**
     * @summary 获取流程任务合同列表
     *
     * @param request ListFlowDocsRequest
     * @return ListFlowDocsResponse
     */
    listFlowDocs(request: ListFlowDocsRequest): Promise<ListFlowDocsResponse>;
    /**
     * @summary 获取流程任务用印审批列表
     *
     * @param request ListSealApprovalRequest
     * @param headers ListSealApprovalHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSealApprovalResponse
     */
    listSealApprovalWithOptions(request: ListSealApprovalRequest, headers: ListSealApprovalHeaders, runtime: $Util.RuntimeOptions): Promise<ListSealApprovalResponse>;
    /**
     * @summary 获取流程任务用印审批列表
     *
     * @param request ListSealApprovalRequest
     * @return ListSealApprovalResponse
     */
    listSealApproval(request: ListSealApprovalRequest): Promise<ListSealApprovalResponse>;
    /**
     * @summary 套餐转售2（底价结算模式）
     *
     * @param request OrderResaleRequest
     * @param headers OrderResaleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return OrderResaleResponse
     */
    orderResaleWithOptions(request: OrderResaleRequest, headers: OrderResaleHeaders, runtime: $Util.RuntimeOptions): Promise<OrderResaleResponse>;
    /**
     * @summary 套餐转售2（底价结算模式）
     *
     * @param request OrderResaleRequest
     * @return OrderResaleResponse
     */
    orderResale(request: OrderResaleRequest): Promise<OrderResaleResponse>;
}
