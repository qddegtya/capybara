"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryGoodsListResponseBodyResult = exports.QueryGoodsListResponseBodyResultList = exports.QueryGoodsListResponse = exports.QueryGoodsListResponseBody = exports.QueryGoodsListRequest = exports.QueryGoodsListHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class QueryGoodsListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGoodsListHeaders = QueryGoodsListHeaders;
class QueryGoodsListRequest extends $tea.Model {
    static names() {
        return {
            endTimeInMills: 'endTimeInMills',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            startTimeInMills: 'startTimeInMills',
        };
    }
    static types() {
        return {
            endTimeInMills: 'number',
            maxResults: 'number',
            nextToken: 'number',
            startTimeInMills: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGoodsListRequest = QueryGoodsListRequest;
class QueryGoodsListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryGoodsListResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGoodsListResponseBody = QueryGoodsListResponseBody;
class QueryGoodsListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGoodsListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGoodsListResponse = QueryGoodsListResponse;
class QueryGoodsListResponseBodyResultList extends $tea.Model {
    static names() {
        return {
            goodsName: 'goodsName',
            goodsNo: 'goodsNo',
            instanceId: 'instanceId',
            productSpecs: 'productSpecs',
            unit: 'unit',
        };
    }
    static types() {
        return {
            goodsName: 'string',
            goodsNo: 'string',
            instanceId: 'string',
            productSpecs: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGoodsListResponseBodyResultList = QueryGoodsListResponseBodyResultList;
class QueryGoodsListResponseBodyResult extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryGoodsListResponseBodyResultList },
            maxResults: 'number',
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGoodsListResponseBodyResult = QueryGoodsListResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 获取物料列表
     *
     * @param request QueryGoodsListRequest
     * @param headers QueryGoodsListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGoodsListResponse
     */
    async queryGoodsListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTimeInMills)) {
            query["endTimeInMills"] = request.endTimeInMills;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.startTimeInMills)) {
            query["startTimeInMills"] = request.startTimeInMills;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryGoodsList",
            version: "wms_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/wms/goods`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGoodsListResponse({}));
    }
    /**
     * @summary 获取物料列表
     *
     * @param request QueryGoodsListRequest
     * @return QueryGoodsListResponse
     */
    async queryGoodsList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGoodsListHeaders({});
        return await this.queryGoodsListWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map