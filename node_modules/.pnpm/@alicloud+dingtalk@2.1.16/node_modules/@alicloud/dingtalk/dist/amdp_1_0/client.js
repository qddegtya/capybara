"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmdpOrganizationDataPushRequestParam = exports.AmdpJobPositionDataPushRequestParam = exports.AmdpEmployeeDataPushRequestParam = exports.AmdpOrganizationDataPushResponse = exports.AmdpOrganizationDataPushResponseBody = exports.AmdpOrganizationDataPushRequest = exports.AmdpOrganizationDataPushHeaders = exports.AmdpJobPositionDataPushResponse = exports.AmdpJobPositionDataPushResponseBody = exports.AmdpJobPositionDataPushRequest = exports.AmdpJobPositionDataPushHeaders = exports.AmdpEmployeeDataPushResponse = exports.AmdpEmployeeDataPushResponseBody = exports.AmdpEmployeeDataPushRequest = exports.AmdpEmployeeDataPushHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AmdpEmployeeDataPushHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpEmployeeDataPushHeaders = AmdpEmployeeDataPushHeaders;
class AmdpEmployeeDataPushRequest extends $tea.Model {
    static names() {
        return {
            param: 'param',
        };
    }
    static types() {
        return {
            param: { 'type': 'array', 'itemType': AmdpEmployeeDataPushRequestParam },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpEmployeeDataPushRequest = AmdpEmployeeDataPushRequest;
class AmdpEmployeeDataPushResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            status: 'status',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            status: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpEmployeeDataPushResponseBody = AmdpEmployeeDataPushResponseBody;
class AmdpEmployeeDataPushResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AmdpEmployeeDataPushResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpEmployeeDataPushResponse = AmdpEmployeeDataPushResponse;
class AmdpJobPositionDataPushHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpJobPositionDataPushHeaders = AmdpJobPositionDataPushHeaders;
class AmdpJobPositionDataPushRequest extends $tea.Model {
    static names() {
        return {
            param: 'param',
        };
    }
    static types() {
        return {
            param: { 'type': 'array', 'itemType': AmdpJobPositionDataPushRequestParam },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpJobPositionDataPushRequest = AmdpJobPositionDataPushRequest;
class AmdpJobPositionDataPushResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            status: 'status',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            status: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpJobPositionDataPushResponseBody = AmdpJobPositionDataPushResponseBody;
class AmdpJobPositionDataPushResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AmdpJobPositionDataPushResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpJobPositionDataPushResponse = AmdpJobPositionDataPushResponse;
class AmdpOrganizationDataPushHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpOrganizationDataPushHeaders = AmdpOrganizationDataPushHeaders;
class AmdpOrganizationDataPushRequest extends $tea.Model {
    static names() {
        return {
            param: 'param',
        };
    }
    static types() {
        return {
            param: { 'type': 'array', 'itemType': AmdpOrganizationDataPushRequestParam },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpOrganizationDataPushRequest = AmdpOrganizationDataPushRequest;
class AmdpOrganizationDataPushResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
            status: 'status',
            success: 'success',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: 'boolean',
            status: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpOrganizationDataPushResponseBody = AmdpOrganizationDataPushResponseBody;
class AmdpOrganizationDataPushResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AmdpOrganizationDataPushResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpOrganizationDataPushResponse = AmdpOrganizationDataPushResponse;
class AmdpEmployeeDataPushRequestParam extends $tea.Model {
    static names() {
        return {
            avatar: 'avatar',
            isDelete: 'isDelete',
            name: 'name',
            unionId: 'unionId',
            userId: 'userId',
            workNo: 'workNo',
        };
    }
    static types() {
        return {
            avatar: 'string',
            isDelete: 'string',
            name: 'string',
            unionId: 'string',
            userId: 'string',
            workNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpEmployeeDataPushRequestParam = AmdpEmployeeDataPushRequestParam;
class AmdpJobPositionDataPushRequestParam extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptLeader: 'deptLeader',
            isDelete: 'isDelete',
            leaderDeptId: 'leaderDeptId',
            orderNumber: 'orderNumber',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptLeader: 'string',
            isDelete: 'string',
            leaderDeptId: 'string',
            orderNumber: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpJobPositionDataPushRequestParam = AmdpJobPositionDataPushRequestParam;
class AmdpOrganizationDataPushRequestParam extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptManagerIdList: 'deptManagerIdList',
            dingTalkDeptId: 'dingTalkDeptId',
            dingTalkParentId: 'dingTalkParentId',
            isDelete: 'isDelete',
            name: 'name',
            parentId: 'parentId',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptManagerIdList: { 'type': 'array', 'itemType': 'string' },
            dingTalkDeptId: 'string',
            dingTalkParentId: 'string',
            isDelete: 'string',
            name: 'string',
            parentId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AmdpOrganizationDataPushRequestParam = AmdpOrganizationDataPushRequestParam;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 人员数据推送
     *
     * @param request AmdpEmployeeDataPushRequest
     * @param headers AmdpEmployeeDataPushHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AmdpEmployeeDataPushResponse
     */
    async amdpEmployeeDataPushWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AmdpEmployeeDataPush",
            version: "amdp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/amdp/employees/datas/push`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AmdpEmployeeDataPushResponse({}));
    }
    /**
     * @summary 人员数据推送
     *
     * @param request AmdpEmployeeDataPushRequest
     * @return AmdpEmployeeDataPushResponse
     */
    async amdpEmployeeDataPush(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AmdpEmployeeDataPushHeaders({});
        return await this.amdpEmployeeDataPushWithOptions(request, headers, runtime);
    }
    /**
     * @summary 任职数据推送
     *
     * @param request AmdpJobPositionDataPushRequest
     * @param headers AmdpJobPositionDataPushHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AmdpJobPositionDataPushResponse
     */
    async amdpJobPositionDataPushWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AmdpJobPositionDataPush",
            version: "amdp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/amdp/empJobs/datas/push`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AmdpJobPositionDataPushResponse({}));
    }
    /**
     * @summary 任职数据推送
     *
     * @param request AmdpJobPositionDataPushRequest
     * @return AmdpJobPositionDataPushResponse
     */
    async amdpJobPositionDataPush(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AmdpJobPositionDataPushHeaders({});
        return await this.amdpJobPositionDataPushWithOptions(request, headers, runtime);
    }
    /**
     * @summary 组织部门数据推送
     *
     * @param request AmdpOrganizationDataPushRequest
     * @param headers AmdpOrganizationDataPushHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AmdpOrganizationDataPushResponse
     */
    async amdpOrganizationDataPushWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AmdpOrganizationDataPush",
            version: "amdp_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/amdp/organizations/departments/datas/push`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AmdpOrganizationDataPushResponse({}));
    }
    /**
     * @summary 组织部门数据推送
     *
     * @param request AmdpOrganizationDataPushRequest
     * @return AmdpOrganizationDataPushResponse
     */
    async amdpOrganizationDataPush(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AmdpOrganizationDataPushHeaders({});
        return await this.amdpOrganizationDataPushWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map