/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class BatchInsertSearchItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchInsertSearchItemRequest extends $tea.Model {
    searchItemModels?: BatchInsertSearchItemRequestSearchItemModels[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchInsertSearchItemResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSearchTabHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSearchTabRequest extends $tea.Model {
    darkIcon?: string;
    icon?: string;
    name?: string;
    priority?: number;
    source?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSearchTabResponseBody extends $tea.Model {
    tabId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSearchTabResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSearchTabResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSearchItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSearchItemResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSearchTabHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteSearchTabResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchItemResponseBody extends $tea.Model {
    footer?: string;
    gmtCreate?: string;
    gmtModified?: string;
    icon?: string;
    itemId?: string;
    mobileUrl?: string;
    pcUrl?: string;
    summary?: string;
    tabId?: number;
    title?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchItemResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSearchItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchItemsByKeyWordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchItemsByKeyWordRequest extends $tea.Model {
    keyWord?: string;
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchItemsByKeyWordResponseBody extends $tea.Model {
    nextToken?: string;
    totalCount?: number;
    value?: GetSearchItemsByKeyWordResponseBodyValue[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchItemsByKeyWordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSearchItemsByKeyWordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchTabHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchTabResponseBody extends $tea.Model {
    darkIcon?: string;
    gmtCreate?: string;
    gmtModified?: string;
    icon?: string;
    name?: string;
    priority?: number;
    source?: string;
    status?: number;
    tabId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchTabResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSearchTabResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSearchItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSearchItemRequest extends $tea.Model {
    footer?: string;
    icon?: string;
    itemId?: string;
    mobileUrl?: string;
    pcUrl?: string;
    summary?: string;
    title?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSearchItemResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSearchTabsByOrgIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSearchTabsByOrgIdResponseBody extends $tea.Model {
    searchTabResult?: ListSearchTabsByOrgIdResponseBodySearchTabResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSearchTabsByOrgIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListSearchTabsByOrgIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSearchTabHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSearchTabRequest extends $tea.Model {
    darkIcon?: string;
    icon?: string;
    name?: string;
    priority?: number;
    source?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateSearchTabResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchInsertSearchItemRequestSearchItemModels extends $tea.Model {
    footer?: string;
    icon?: string;
    itemId?: string;
    mobileUrl?: string;
    pcUrl?: string;
    summary?: string;
    title?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSearchItemsByKeyWordResponseBodyValue extends $tea.Model {
    footer?: string;
    gmtCreate?: string;
    gmtModified?: string;
    icon?: string;
    itemId?: string;
    mobileUrl?: string;
    pcUrl?: string;
    summary?: string;
    tabId?: number;
    title?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListSearchTabsByOrgIdResponseBodySearchTabResult extends $tea.Model {
    darkIcon?: string;
    gmtCreate?: string;
    gmtModified?: string;
    icon?: string;
    name?: string;
    priority?: number;
    source?: string;
    status?: number;
    tabId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 为指定的数据源批量添加数据项
     *
     * @param request BatchInsertSearchItemRequest
     * @param headers BatchInsertSearchItemHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchInsertSearchItemResponse
     */
    batchInsertSearchItemWithOptions(tabId: string, request: BatchInsertSearchItemRequest, headers: BatchInsertSearchItemHeaders, runtime: $Util.RuntimeOptions): Promise<BatchInsertSearchItemResponse>;
    /**
     * @summary 为指定的数据源批量添加数据项
     *
     * @param request BatchInsertSearchItemRequest
     * @return BatchInsertSearchItemResponse
     */
    batchInsertSearchItem(tabId: string, request: BatchInsertSearchItemRequest): Promise<BatchInsertSearchItemResponse>;
    /**
     * @summary 创建搜索数据源
     *
     * @param request CreateSearchTabRequest
     * @param headers CreateSearchTabHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSearchTabResponse
     */
    createSearchTabWithOptions(request: CreateSearchTabRequest, headers: CreateSearchTabHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSearchTabResponse>;
    /**
     * @summary 创建搜索数据源
     *
     * @param request CreateSearchTabRequest
     * @return CreateSearchTabResponse
     */
    createSearchTab(request: CreateSearchTabRequest): Promise<CreateSearchTabResponse>;
    /**
     * @summary 从指定的数据源中删除一条数据项
     *
     * @param headers DeleteSearchItemHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSearchItemResponse
     */
    deleteSearchItemWithOptions(tabId: string, itemId: string, headers: DeleteSearchItemHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteSearchItemResponse>;
    /**
     * @summary 从指定的数据源中删除一条数据项
     *
     * @return DeleteSearchItemResponse
     */
    deleteSearchItem(tabId: string, itemId: string): Promise<DeleteSearchItemResponse>;
    /**
     * @summary 删除搜索数据源
     *
     * @param headers DeleteSearchTabHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteSearchTabResponse
     */
    deleteSearchTabWithOptions(tabId: string, headers: DeleteSearchTabHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteSearchTabResponse>;
    /**
     * @summary 删除搜索数据源
     *
     * @return DeleteSearchTabResponse
     */
    deleteSearchTab(tabId: string): Promise<DeleteSearchTabResponse>;
    /**
     * @summary 获取指定数据源中的一条数据项
     *
     * @param headers GetSearchItemHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSearchItemResponse
     */
    getSearchItemWithOptions(tabId: string, itemId: string, headers: GetSearchItemHeaders, runtime: $Util.RuntimeOptions): Promise<GetSearchItemResponse>;
    /**
     * @summary 获取指定数据源中的一条数据项
     *
     * @return GetSearchItemResponse
     */
    getSearchItem(tabId: string, itemId: string): Promise<GetSearchItemResponse>;
    /**
     * @summary 根据搜索关键词获取相关数据项
     *
     * @param request GetSearchItemsByKeyWordRequest
     * @param headers GetSearchItemsByKeyWordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSearchItemsByKeyWordResponse
     */
    getSearchItemsByKeyWordWithOptions(tabId: string, request: GetSearchItemsByKeyWordRequest, headers: GetSearchItemsByKeyWordHeaders, runtime: $Util.RuntimeOptions): Promise<GetSearchItemsByKeyWordResponse>;
    /**
     * @summary 根据搜索关键词获取相关数据项
     *
     * @param request GetSearchItemsByKeyWordRequest
     * @return GetSearchItemsByKeyWordResponse
     */
    getSearchItemsByKeyWord(tabId: string, request: GetSearchItemsByKeyWordRequest): Promise<GetSearchItemsByKeyWordResponse>;
    /**
     * @summary 获取搜索数据源
     *
     * @param headers GetSearchTabHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSearchTabResponse
     */
    getSearchTabWithOptions(tabId: string, headers: GetSearchTabHeaders, runtime: $Util.RuntimeOptions): Promise<GetSearchTabResponse>;
    /**
     * @summary 获取搜索数据源
     *
     * @return GetSearchTabResponse
     */
    getSearchTab(tabId: string): Promise<GetSearchTabResponse>;
    /**
     * @summary 为指定的数据源添加一条数据项
     *
     * @param request InsertSearchItemRequest
     * @param headers InsertSearchItemHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InsertSearchItemResponse
     */
    insertSearchItemWithOptions(tabId: string, request: InsertSearchItemRequest, headers: InsertSearchItemHeaders, runtime: $Util.RuntimeOptions): Promise<InsertSearchItemResponse>;
    /**
     * @summary 为指定的数据源添加一条数据项
     *
     * @param request InsertSearchItemRequest
     * @return InsertSearchItemResponse
     */
    insertSearchItem(tabId: string, request: InsertSearchItemRequest): Promise<InsertSearchItemResponse>;
    /**
     * @summary 列出企业所有的搜索数据源
     *
     * @param headers ListSearchTabsByOrgIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSearchTabsByOrgIdResponse
     */
    listSearchTabsByOrgIdWithOptions(headers: ListSearchTabsByOrgIdHeaders, runtime: $Util.RuntimeOptions): Promise<ListSearchTabsByOrgIdResponse>;
    /**
     * @summary 列出企业所有的搜索数据源
     *
     * @return ListSearchTabsByOrgIdResponse
     */
    listSearchTabsByOrgId(): Promise<ListSearchTabsByOrgIdResponse>;
    /**
     * @summary 更新搜索数据源
     *
     * @param request UpdateSearchTabRequest
     * @param headers UpdateSearchTabHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateSearchTabResponse
     */
    updateSearchTabWithOptions(tabId: string, request: UpdateSearchTabRequest, headers: UpdateSearchTabHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateSearchTabResponse>;
    /**
     * @summary 更新搜索数据源
     *
     * @param request UpdateSearchTabRequest
     * @return UpdateSearchTabResponse
     */
    updateSearchTab(tabId: string, request: UpdateSearchTabRequest): Promise<UpdateSearchTabResponse>;
}
