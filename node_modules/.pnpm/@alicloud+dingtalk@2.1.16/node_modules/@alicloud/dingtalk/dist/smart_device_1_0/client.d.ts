/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddDeviceVideoConferenceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceVideoConferenceMembersRequest extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceVideoConferenceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceVideoConferenceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceVideoConferenceRequest extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceVideoConferenceResponseBody extends $tea.Model {
    code?: string;
    conferenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateDeviceVideoConferenceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateDeviceVideoConferenceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExtractFacialFeatureHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExtractFacialFeatureRequest extends $tea.Model {
    mediaId?: string;
    userid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExtractFacialFeatureResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExtractFacialFeatureResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExtractFacialFeatureResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickDeviceVideoConferenceMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickDeviceVideoConferenceMembersRequest extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class KickDeviceVideoConferenceMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineManagerUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineManagerUpdateRequest extends $tea.Model {
    atmManagerRightMap?: MachineManagerUpdateRequestAtmManagerRightMap;
    deviceId?: number;
    scopeDeptIds?: number[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineManagerUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineUsersUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineUsersUpdateRequest extends $tea.Model {
    addDeptIds?: number[];
    addUserIds?: string[];
    delDeptIds?: number[];
    delUserIds?: string[];
    devIds?: number[];
    deviceIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineUsersUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceVideoConferenceBookHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceVideoConferenceBookResponseBody extends $tea.Model {
    code?: string;
    conferenceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceVideoConferenceBookResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDeviceVideoConferenceBookResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MachineManagerUpdateRequestAtmManagerRightMap extends $tea.Model {
    attendancePersonManage?: boolean;
    bluetoothPunchManage?: boolean;
    deviceReset?: boolean;
    deviceSettings?: boolean;
    facePunchManage?: boolean;
    fingerPunchManage?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 添加硬件视频会议参会人
     *
     * @param request AddDeviceVideoConferenceMembersRequest
     * @param headers AddDeviceVideoConferenceMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddDeviceVideoConferenceMembersResponse
     */
    addDeviceVideoConferenceMembersWithOptions(deviceId: string, conferenceId: string, request: AddDeviceVideoConferenceMembersRequest, headers: AddDeviceVideoConferenceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<AddDeviceVideoConferenceMembersResponse>;
    /**
     * @summary 添加硬件视频会议参会人
     *
     * @param request AddDeviceVideoConferenceMembersRequest
     * @return AddDeviceVideoConferenceMembersResponse
     */
    addDeviceVideoConferenceMembers(deviceId: string, conferenceId: string, request: AddDeviceVideoConferenceMembersRequest): Promise<AddDeviceVideoConferenceMembersResponse>;
    /**
     * @summary 创建硬件视频会议
     *
     * @param request CreateDeviceVideoConferenceRequest
     * @param headers CreateDeviceVideoConferenceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateDeviceVideoConferenceResponse
     */
    createDeviceVideoConferenceWithOptions(deviceId: string, request: CreateDeviceVideoConferenceRequest, headers: CreateDeviceVideoConferenceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateDeviceVideoConferenceResponse>;
    /**
     * @summary 创建硬件视频会议
     *
     * @param request CreateDeviceVideoConferenceRequest
     * @return CreateDeviceVideoConferenceResponse
     */
    createDeviceVideoConference(deviceId: string, request: CreateDeviceVideoConferenceRequest): Promise<CreateDeviceVideoConferenceResponse>;
    /**
     * @summary 基于企业员工照片为终端提取人脸识别特征
     *
     * @param request ExtractFacialFeatureRequest
     * @param headers ExtractFacialFeatureHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExtractFacialFeatureResponse
     */
    extractFacialFeatureWithOptions(request: ExtractFacialFeatureRequest, headers: ExtractFacialFeatureHeaders, runtime: $Util.RuntimeOptions): Promise<ExtractFacialFeatureResponse>;
    /**
     * @summary 基于企业员工照片为终端提取人脸识别特征
     *
     * @param request ExtractFacialFeatureRequest
     * @return ExtractFacialFeatureResponse
     */
    extractFacialFeature(request: ExtractFacialFeatureRequest): Promise<ExtractFacialFeatureResponse>;
    /**
     * @summary 踢出硬件视频会议参会人
     *
     * @param request KickDeviceVideoConferenceMembersRequest
     * @param headers KickDeviceVideoConferenceMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return KickDeviceVideoConferenceMembersResponse
     */
    kickDeviceVideoConferenceMembersWithOptions(deviceId: string, conferenceId: string, request: KickDeviceVideoConferenceMembersRequest, headers: KickDeviceVideoConferenceMembersHeaders, runtime: $Util.RuntimeOptions): Promise<KickDeviceVideoConferenceMembersResponse>;
    /**
     * @summary 踢出硬件视频会议参会人
     *
     * @param request KickDeviceVideoConferenceMembersRequest
     * @return KickDeviceVideoConferenceMembersResponse
     */
    kickDeviceVideoConferenceMembers(deviceId: string, conferenceId: string, request: KickDeviceVideoConferenceMembersRequest): Promise<KickDeviceVideoConferenceMembersResponse>;
    /**
     * @summary 变更智能考勤机设备管理员
     *
     * @param request MachineManagerUpdateRequest
     * @param headers MachineManagerUpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MachineManagerUpdateResponse
     */
    machineManagerUpdateWithOptions(request: MachineManagerUpdateRequest, headers: MachineManagerUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<MachineManagerUpdateResponse>;
    /**
     * @summary 变更智能考勤机设备管理员
     *
     * @param request MachineManagerUpdateRequest
     * @return MachineManagerUpdateResponse
     */
    machineManagerUpdate(request: MachineManagerUpdateRequest): Promise<MachineManagerUpdateResponse>;
    /**
     * @summary 变更智能考勤机员工
     *
     * @param request MachineUsersUpdateRequest
     * @param headers MachineUsersUpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MachineUsersUpdateResponse
     */
    machineUsersUpdateWithOptions(request: MachineUsersUpdateRequest, headers: MachineUsersUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<MachineUsersUpdateResponse>;
    /**
     * @summary 变更智能考勤机员工
     *
     * @param request MachineUsersUpdateRequest
     * @return MachineUsersUpdateResponse
     */
    machineUsersUpdate(request: MachineUsersUpdateRequest): Promise<MachineUsersUpdateResponse>;
    /**
     * @summary 查询硬件视频会议预约信息
     *
     * @param headers QueryDeviceVideoConferenceBookHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDeviceVideoConferenceBookResponse
     */
    queryDeviceVideoConferenceBookWithOptions(deviceId: string, bookId: string, headers: QueryDeviceVideoConferenceBookHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDeviceVideoConferenceBookResponse>;
    /**
     * @summary 查询硬件视频会议预约信息
     *
     * @return QueryDeviceVideoConferenceBookResponse
     */
    queryDeviceVideoConferenceBook(deviceId: string, bookId: string): Promise<QueryDeviceVideoConferenceBookResponse>;
}
