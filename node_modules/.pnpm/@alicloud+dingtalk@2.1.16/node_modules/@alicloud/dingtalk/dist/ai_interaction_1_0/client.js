"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateResponseBodyResult = exports.SendResponseBodyResult = exports.ReplyResponseBodyResult = exports.PrepareResponseBodyResult = exports.FinishResponseBodyResult = exports.UpdateResponse = exports.UpdateResponseBody = exports.UpdateRequest = exports.UpdateHeaders = exports.SendResponse = exports.SendResponseBody = exports.SendRequest = exports.SendHeaders = exports.ReplyResponse = exports.ReplyResponseBody = exports.ReplyRequest = exports.ReplyHeaders = exports.PrepareResponse = exports.PrepareResponseBody = exports.PrepareRequest = exports.PrepareHeaders = exports.FinishResponse = exports.FinishResponseBody = exports.FinishRequest = exports.FinishHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class FinishHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishHeaders = FinishHeaders;
class FinishRequest extends $tea.Model {
    static names() {
        return {
            conversationToken: 'conversationToken',
        };
    }
    static types() {
        return {
            conversationToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishRequest = FinishRequest;
class FinishResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: FinishResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishResponseBody = FinishResponseBody;
class FinishResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: FinishResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishResponse = FinishResponse;
class PrepareHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PrepareHeaders = PrepareHeaders;
class PrepareRequest extends $tea.Model {
    static names() {
        return {
            content: 'content',
            contentType: 'contentType',
            openConversationId: 'openConversationId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            content: 'string',
            contentType: 'string',
            openConversationId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PrepareRequest = PrepareRequest;
class PrepareResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: PrepareResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PrepareResponseBody = PrepareResponseBody;
class PrepareResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PrepareResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PrepareResponse = PrepareResponse;
class ReplyHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReplyHeaders = ReplyHeaders;
class ReplyRequest extends $tea.Model {
    static names() {
        return {
            content: 'content',
            contentType: 'contentType',
            conversationToken: 'conversationToken',
        };
    }
    static types() {
        return {
            content: 'string',
            contentType: 'string',
            conversationToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReplyRequest = ReplyRequest;
class ReplyResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: ReplyResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReplyResponseBody = ReplyResponseBody;
class ReplyResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ReplyResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReplyResponse = ReplyResponse;
class SendHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendHeaders = SendHeaders;
class SendRequest extends $tea.Model {
    static names() {
        return {
            content: 'content',
            contentType: 'contentType',
            openConversationId: 'openConversationId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            content: 'string',
            contentType: 'string',
            openConversationId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendRequest = SendRequest;
class SendResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: SendResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendResponseBody = SendResponseBody;
class SendResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SendResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendResponse = SendResponse;
class UpdateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateHeaders = UpdateHeaders;
class UpdateRequest extends $tea.Model {
    static names() {
        return {
            content: 'content',
            contentType: 'contentType',
            conversationToken: 'conversationToken',
        };
    }
    static types() {
        return {
            content: 'string',
            contentType: 'string',
            conversationToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateRequest = UpdateRequest;
class UpdateResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateResponseBody = UpdateResponseBody;
class UpdateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateResponse = UpdateResponse;
class FinishResponseBodyResult extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.FinishResponseBodyResult = FinishResponseBodyResult;
class PrepareResponseBodyResult extends $tea.Model {
    static names() {
        return {
            conversationToken: 'conversationToken',
        };
    }
    static types() {
        return {
            conversationToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PrepareResponseBodyResult = PrepareResponseBodyResult;
class ReplyResponseBodyResult extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ReplyResponseBodyResult = ReplyResponseBodyResult;
class SendResponseBodyResult extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SendResponseBodyResult = SendResponseBodyResult;
class UpdateResponseBodyResult extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateResponseBodyResult = UpdateResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 在主动模式下完结会话框
     *
     * @param request FinishRequest
     * @param headers FinishHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return FinishResponse
     */
    async finishWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.conversationToken)) {
            body["conversationToken"] = request.conversationToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Finish",
            version: "aiInteraction_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiInteraction/finish`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new FinishResponse({}));
    }
    /**
     * @summary 在主动模式下完结会话框
     *
     * @param request FinishRequest
     * @return FinishResponse
     */
    async finish(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new FinishHeaders({});
        return await this.finishWithOptions(request, headers, runtime);
    }
    /**
     * @summary 在主动模式下准备会话框
     *
     * @param request PrepareRequest
     * @param headers PrepareHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PrepareResponse
     */
    async prepareWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.contentType)) {
            body["contentType"] = request.contentType;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Prepare",
            version: "aiInteraction_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiInteraction/prepare`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PrepareResponse({}));
    }
    /**
     * @summary 在主动模式下准备会话框
     *
     * @param request PrepareRequest
     * @return PrepareResponse
     */
    async prepare(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PrepareHeaders({});
        return await this.prepareWithOptions(request, headers, runtime);
    }
    /**
     * @summary 在回复模式下更新会话框
     *
     * @param request ReplyRequest
     * @param headers ReplyHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ReplyResponse
     */
    async replyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.contentType)) {
            body["contentType"] = request.contentType;
        }
        if (!tea_util_1.default.isUnset(request.conversationToken)) {
            body["conversationToken"] = request.conversationToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Reply",
            version: "aiInteraction_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiInteraction/reply`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ReplyResponse({}));
    }
    /**
     * @summary 在回复模式下更新会话框
     *
     * @param request ReplyRequest
     * @return ReplyResponse
     */
    async reply(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ReplyHeaders({});
        return await this.replyWithOptions(request, headers, runtime);
    }
    /**
     * @summary 直接发送消息
     *
     * @param request SendRequest
     * @param headers SendHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendResponse
     */
    async sendWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.contentType)) {
            body["contentType"] = request.contentType;
        }
        if (!tea_util_1.default.isUnset(request.openConversationId)) {
            body["openConversationId"] = request.openConversationId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Send",
            version: "aiInteraction_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiInteraction/send`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SendResponse({}));
    }
    /**
     * @summary 直接发送消息
     *
     * @param request SendRequest
     * @return SendResponse
     */
    async send(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SendHeaders({});
        return await this.sendWithOptions(request, headers, runtime);
    }
    /**
     * @summary 在主动模式下更新会话框
     *
     * @param request UpdateRequest
     * @param headers UpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateResponse
     */
    async updateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.contentType)) {
            body["contentType"] = request.contentType;
        }
        if (!tea_util_1.default.isUnset(request.conversationToken)) {
            body["conversationToken"] = request.conversationToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Update",
            version: "aiInteraction_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiInteraction/update`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateResponse({}));
    }
    /**
     * @summary 在主动模式下更新会话框
     *
     * @param request UpdateRequest
     * @return UpdateResponse
     */
    async update(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateHeaders({});
        return await this.updateWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map