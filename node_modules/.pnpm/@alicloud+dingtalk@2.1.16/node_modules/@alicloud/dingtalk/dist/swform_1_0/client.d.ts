/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class GetFormInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormInstanceRequest extends $tea.Model {
    bizType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormInstanceResponseBody extends $tea.Model {
    result?: GetFormInstanceResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFormInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormInstancesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormInstancesRequest extends $tea.Model {
    actionDate?: string;
    bizType?: number;
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormInstancesResponseBody extends $tea.Model {
    result?: ListFormInstancesResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormInstancesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListFormInstancesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormSchemasByCreatorHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormSchemasByCreatorRequest extends $tea.Model {
    bizType?: number;
    creator?: string;
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormSchemasByCreatorResponseBody extends $tea.Model {
    result?: ListFormSchemasByCreatorResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormSchemasByCreatorResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListFormSchemasByCreatorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormInstanceResponseBodyResultForms extends $tea.Model {
    key?: string;
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFormInstanceResponseBodyResult extends $tea.Model {
    createTime?: string;
    creator?: string;
    formCode?: string;
    forms?: GetFormInstanceResponseBodyResultForms[];
    modifyTime?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormInstancesResponseBodyResultListForms extends $tea.Model {
    key?: string;
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormInstancesResponseBodyResultList extends $tea.Model {
    createTime?: string;
    formCode?: string;
    formInstanceId?: string;
    forms?: ListFormInstancesResponseBodyResultListForms[];
    modifyTime?: string;
    studentClassId?: string;
    studentClassName?: string;
    studentName?: string;
    studentUserId?: string;
    submitterUserId?: string;
    submitterUserName?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormInstancesResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    list?: ListFormInstancesResponseBodyResultList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormSchemasByCreatorResponseBodyResultListSetting extends $tea.Model {
    bizType?: number;
    createTime?: string;
    endTime?: string;
    formType?: number;
    loopDays?: number[];
    loopTime?: string;
    stop?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormSchemasByCreatorResponseBodyResultList extends $tea.Model {
    creator?: string;
    formCode?: string;
    memo?: string;
    name?: string;
    setting?: ListFormSchemasByCreatorResponseBodyResultListSetting;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListFormSchemasByCreatorResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    list?: ListFormSchemasByCreatorResponseBodyResultList[];
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 获取单个填表实例详情接口
     *
     * @param request GetFormInstanceRequest
     * @param headers GetFormInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFormInstanceResponse
     */
    getFormInstanceWithOptions(formInstanceId: string, request: GetFormInstanceRequest, headers: GetFormInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<GetFormInstanceResponse>;
    /**
     * @summary 获取单个填表实例详情接口
     *
     * @param request GetFormInstanceRequest
     * @return GetFormInstanceResponse
     */
    getFormInstance(formInstanceId: string, request: GetFormInstanceRequest): Promise<GetFormInstanceResponse>;
    /**
     * @summary 获取填表模版下的填表实例列表接口
     *
     * @param request ListFormInstancesRequest
     * @param headers ListFormInstancesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFormInstancesResponse
     */
    listFormInstancesWithOptions(formCode: string, request: ListFormInstancesRequest, headers: ListFormInstancesHeaders, runtime: $Util.RuntimeOptions): Promise<ListFormInstancesResponse>;
    /**
     * @summary 获取填表模版下的填表实例列表接口
     *
     * @param request ListFormInstancesRequest
     * @return ListFormInstancesResponse
     */
    listFormInstances(formCode: string, request: ListFormInstancesRequest): Promise<ListFormInstancesResponse>;
    /**
     * @summary 获取用户创建的填表模板列表接口
     *
     * @param request ListFormSchemasByCreatorRequest
     * @param headers ListFormSchemasByCreatorHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFormSchemasByCreatorResponse
     */
    listFormSchemasByCreatorWithOptions(request: ListFormSchemasByCreatorRequest, headers: ListFormSchemasByCreatorHeaders, runtime: $Util.RuntimeOptions): Promise<ListFormSchemasByCreatorResponse>;
    /**
     * @summary 获取用户创建的填表模板列表接口
     *
     * @param request ListFormSchemasByCreatorRequest
     * @return ListFormSchemasByCreatorResponse
     */
    listFormSchemasByCreator(request: ListFormSchemasByCreatorRequest): Promise<ListFormSchemasByCreatorResponse>;
}
