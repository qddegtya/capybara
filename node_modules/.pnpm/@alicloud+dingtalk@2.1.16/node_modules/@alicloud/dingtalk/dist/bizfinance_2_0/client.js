"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryInstancePaymentOrderDetailRequest = exports.QueryInstancePaymentOrderDetailHeaders = exports.QueryEnterpriseAccountByPageResponse = exports.QueryEnterpriseAccountByPageResponseBody = exports.QueryEnterpriseAccountByPageRequest = exports.QueryEnterpriseAccountByPageHeaders = exports.QueryCustomerByPageResponse = exports.QueryCustomerByPageResponseBody = exports.QueryCustomerByPageRequest = exports.QueryCustomerByPageHeaders = exports.QueryCategoryByPageResponse = exports.QueryCategoryByPageResponseBody = exports.QueryCategoryByPageRequest = exports.QueryCategoryByPageHeaders = exports.LinkCommonInvokeResponse = exports.LinkCommonInvokeResponseBody = exports.LinkCommonInvokeRequest = exports.LinkCommonInvokeHeaders = exports.GetSupplierResponse = exports.GetSupplierResponseBody = exports.GetSupplierRequest = exports.GetSupplierHeaders = exports.GetReceiptResponse = exports.GetReceiptResponseBody = exports.GetReceiptRequest = exports.GetReceiptHeaders = exports.GetProjectResponse = exports.GetProjectResponseBody = exports.GetProjectRequest = exports.GetProjectHeaders = exports.GetFinanceAccountResponse = exports.GetFinanceAccountResponseBody = exports.GetFinanceAccountRequest = exports.GetFinanceAccountHeaders = exports.GetCategoryResponse = exports.GetCategoryResponseBody = exports.GetCategoryRequest = exports.GetCategoryHeaders = exports.BatchSyncBankReceiptResponse = exports.BatchSyncBankReceiptResponseBody = exports.BatchSyncBankReceiptRequest = exports.BatchSyncBankReceiptHeaders = exports.BatchDeleteReceiptResponse = exports.BatchDeleteReceiptResponseBody = exports.BatchDeleteReceiptRequest = exports.BatchDeleteReceiptHeaders = exports.BankGatewayInvokeResponse = exports.BankGatewayInvokeResponseBody = exports.BankGatewayInvokeRequest = exports.BankGatewayInvokeHeaders = void 0;
exports.UpdateInstanceOrderInfoRequestPayerBank = exports.QueryUserRoleListResponseBodyRoleVOList = exports.QueryUserRoleListResponseBodyFinanceEmpDeptOpenList = exports.QuerySupplierByPageResponseBodyList = exports.QueryProjectByPageResponseBodyList = exports.QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO = exports.QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO = exports.QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO = exports.QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO = exports.QueryEnterpriseAccountByPageResponseBodyList = exports.QueryCustomerByPageResponseBodyList = exports.QueryCategoryByPageResponseBodyList = exports.BatchSyncBankReceiptRequestBody = exports.UpdateInstanceOrderInfoResponse = exports.UpdateInstanceOrderInfoResponseBody = exports.UpdateInstanceOrderInfoShrinkRequest = exports.UpdateInstanceOrderInfoRequest = exports.UpdateInstanceOrderInfoHeaders = exports.SyncReceiptRecallResponse = exports.SyncReceiptRecallResponseBody = exports.SyncReceiptRecallRequest = exports.SyncReceiptRecallHeaders = exports.SignEnterpriseAccountResponse = exports.SignEnterpriseAccountResponseBody = exports.SignEnterpriseAccountRequest = exports.SignEnterpriseAccountHeaders = exports.QueryUserRoleListResponse = exports.QueryUserRoleListResponseBody = exports.QueryUserRoleListRequest = exports.QueryUserRoleListHeaders = exports.QuerySupplierByPageResponse = exports.QuerySupplierByPageResponseBody = exports.QuerySupplierByPageRequest = exports.QuerySupplierByPageHeaders = exports.QueryProjectByPageResponse = exports.QueryProjectByPageResponseBody = exports.QueryProjectByPageRequest = exports.QueryProjectByPageHeaders = exports.QueryInstancePaymentOrderDetailResponse = exports.QueryInstancePaymentOrderDetailResponseBody = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class BankGatewayInvokeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BankGatewayInvokeHeaders = BankGatewayInvokeHeaders;
class BankGatewayInvokeRequest extends $tea.Model {
    static names() {
        return {
            actionType: 'actionType',
            inputData: 'inputData',
            url: 'url',
        };
    }
    static types() {
        return {
            actionType: 'string',
            inputData: 'string',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BankGatewayInvokeRequest = BankGatewayInvokeRequest;
class BankGatewayInvokeResponseBody extends $tea.Model {
    static names() {
        return {
            outputData: 'outputData',
        };
    }
    static types() {
        return {
            outputData: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BankGatewayInvokeResponseBody = BankGatewayInvokeResponseBody;
class BankGatewayInvokeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BankGatewayInvokeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BankGatewayInvokeResponse = BankGatewayInvokeResponse;
class BatchDeleteReceiptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteReceiptHeaders = BatchDeleteReceiptHeaders;
class BatchDeleteReceiptRequest extends $tea.Model {
    static names() {
        return {
            instanceIdList: 'instanceIdList',
            operator: 'operator',
        };
    }
    static types() {
        return {
            instanceIdList: { 'type': 'array', 'itemType': 'string' },
            operator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteReceiptRequest = BatchDeleteReceiptRequest;
class BatchDeleteReceiptResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteReceiptResponseBody = BatchDeleteReceiptResponseBody;
class BatchDeleteReceiptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchDeleteReceiptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteReceiptResponse = BatchDeleteReceiptResponse;
class BatchSyncBankReceiptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptHeaders = BatchSyncBankReceiptHeaders;
class BatchSyncBankReceiptRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
        };
    }
    static types() {
        return {
            body: { 'type': 'array', 'itemType': BatchSyncBankReceiptRequestBody },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptRequest = BatchSyncBankReceiptRequest;
class BatchSyncBankReceiptResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptResponseBody = BatchSyncBankReceiptResponseBody;
class BatchSyncBankReceiptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchSyncBankReceiptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptResponse = BatchSyncBankReceiptResponse;
class GetCategoryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCategoryHeaders = GetCategoryHeaders;
class GetCategoryRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCategoryRequest = GetCategoryRequest;
class GetCategoryResponseBody extends $tea.Model {
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            isDir: 'isDir',
            name: 'name',
            parentCode: 'parentCode',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            isDir: 'boolean',
            name: 'string',
            parentCode: 'string',
            status: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCategoryResponseBody = GetCategoryResponseBody;
class GetCategoryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetCategoryResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetCategoryResponse = GetCategoryResponse;
class GetFinanceAccountHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFinanceAccountHeaders = GetFinanceAccountHeaders;
class GetFinanceAccountRequest extends $tea.Model {
    static names() {
        return {
            accountCode: 'accountCode',
        };
    }
    static types() {
        return {
            accountCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFinanceAccountRequest = GetFinanceAccountRequest;
class GetFinanceAccountResponseBody extends $tea.Model {
    static names() {
        return {
            accountCode: 'accountCode',
            accountId: 'accountId',
            accountName: 'accountName',
            accountRemark: 'accountRemark',
            accountType: 'accountType',
            accountantBookIdList: 'accountantBookIdList',
            amount: 'amount',
            bankCode: 'bankCode',
            bankName: 'bankName',
            createTime: 'createTime',
            creator: 'creator',
        };
    }
    static types() {
        return {
            accountCode: 'string',
            accountId: 'string',
            accountName: 'string',
            accountRemark: 'string',
            accountType: 'string',
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            amount: 'string',
            bankCode: 'string',
            bankName: 'string',
            createTime: 'number',
            creator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFinanceAccountResponseBody = GetFinanceAccountResponseBody;
class GetFinanceAccountResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetFinanceAccountResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetFinanceAccountResponse = GetFinanceAccountResponse;
class GetProjectHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProjectHeaders = GetProjectHeaders;
class GetProjectRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProjectRequest = GetProjectRequest;
class GetProjectResponseBody extends $tea.Model {
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            creator: 'creator',
            description: 'description',
            name: 'name',
            projectCode: 'projectCode',
            projectName: 'projectName',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            creator: 'string',
            description: 'string',
            name: 'string',
            projectCode: 'string',
            projectName: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProjectResponseBody = GetProjectResponseBody;
class GetProjectResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetProjectResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetProjectResponse = GetProjectResponse;
class GetReceiptHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetReceiptHeaders = GetReceiptHeaders;
class GetReceiptRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
            modelId: 'modelId',
        };
    }
    static types() {
        return {
            code: 'string',
            modelId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetReceiptRequest = GetReceiptRequest;
class GetReceiptResponseBody extends $tea.Model {
    static names() {
        return {
            appId: 'appId',
            data: 'data',
            modelId: 'modelId',
            source: 'source',
        };
    }
    static types() {
        return {
            appId: 'string',
            data: 'string',
            modelId: 'string',
            source: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetReceiptResponseBody = GetReceiptResponseBody;
class GetReceiptResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetReceiptResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetReceiptResponse = GetReceiptResponse;
class GetSupplierHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSupplierHeaders = GetSupplierHeaders;
class GetSupplierRequest extends $tea.Model {
    static names() {
        return {
            code: 'code',
        };
    }
    static types() {
        return {
            code: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSupplierRequest = GetSupplierRequest;
class GetSupplierResponseBody extends $tea.Model {
    static names() {
        return {
            accountantBookIdList: 'accountantBookIdList',
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            accountantBookIdList: { 'type': 'array', 'itemType': 'string' },
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSupplierResponseBody = GetSupplierResponseBody;
class GetSupplierResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSupplierResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSupplierResponse = GetSupplierResponse;
class LinkCommonInvokeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkCommonInvokeHeaders = LinkCommonInvokeHeaders;
class LinkCommonInvokeRequest extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            data: 'data',
            invokeId: 'invokeId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            bizType: 'string',
            data: 'string',
            invokeId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkCommonInvokeRequest = LinkCommonInvokeRequest;
class LinkCommonInvokeResponseBody extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            data: 'data',
            invokeId: 'invokeId',
        };
    }
    static types() {
        return {
            bizType: 'string',
            data: 'string',
            invokeId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkCommonInvokeResponseBody = LinkCommonInvokeResponseBody;
class LinkCommonInvokeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LinkCommonInvokeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkCommonInvokeResponse = LinkCommonInvokeResponse;
class QueryCategoryByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageHeaders = QueryCategoryByPageHeaders;
class QueryCategoryByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            type: 'type',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageRequest = QueryCategoryByPageRequest;
class QueryCategoryByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCategoryByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageResponseBody = QueryCategoryByPageResponseBody;
class QueryCategoryByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCategoryByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageResponse = QueryCategoryByPageResponse;
class QueryCustomerByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageHeaders = QueryCustomerByPageHeaders;
class QueryCustomerByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageRequest = QueryCustomerByPageRequest;
class QueryCustomerByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryCustomerByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageResponseBody = QueryCustomerByPageResponseBody;
class QueryCustomerByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCustomerByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageResponse = QueryCustomerByPageResponse;
class QueryEnterpriseAccountByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageHeaders = QueryEnterpriseAccountByPageHeaders;
class QueryEnterpriseAccountByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageRequest = QueryEnterpriseAccountByPageRequest;
class QueryEnterpriseAccountByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryEnterpriseAccountByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageResponseBody = QueryEnterpriseAccountByPageResponseBody;
class QueryEnterpriseAccountByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryEnterpriseAccountByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageResponse = QueryEnterpriseAccountByPageResponse;
class QueryInstancePaymentOrderDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailHeaders = QueryInstancePaymentOrderDetailHeaders;
class QueryInstancePaymentOrderDetailRequest extends $tea.Model {
    static names() {
        return {
            orderNo: 'orderNo',
        };
    }
    static types() {
        return {
            orderNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailRequest = QueryInstancePaymentOrderDetailRequest;
class QueryInstancePaymentOrderDetailResponseBody extends $tea.Model {
    static names() {
        return {
            amount: 'amount',
            instanceId: 'instanceId',
            payeeAccountDTO: 'payeeAccountDTO',
            payerAccountDTO: 'payerAccountDTO',
            remark: 'remark',
            usage: 'usage',
            userId: 'userId',
        };
    }
    static types() {
        return {
            amount: 'string',
            instanceId: 'string',
            payeeAccountDTO: QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO,
            payerAccountDTO: QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO,
            remark: 'string',
            usage: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBody = QueryInstancePaymentOrderDetailResponseBody;
class QueryInstancePaymentOrderDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryInstancePaymentOrderDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponse = QueryInstancePaymentOrderDetailResponse;
class QueryProjectByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageHeaders = QueryProjectByPageHeaders;
class QueryProjectByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageRequest = QueryProjectByPageRequest;
class QueryProjectByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QueryProjectByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageResponseBody = QueryProjectByPageResponseBody;
class QueryProjectByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryProjectByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageResponse = QueryProjectByPageResponse;
class QuerySupplierByPageHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageHeaders = QuerySupplierByPageHeaders;
class QuerySupplierByPageRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageRequest = QuerySupplierByPageRequest;
class QuerySupplierByPageResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            list: 'list',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            list: { 'type': 'array', 'itemType': QuerySupplierByPageResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageResponseBody = QuerySupplierByPageResponseBody;
class QuerySupplierByPageResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySupplierByPageResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageResponse = QuerySupplierByPageResponse;
class QueryUserRoleListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListHeaders = QueryUserRoleListHeaders;
class QueryUserRoleListRequest extends $tea.Model {
    static names() {
        return {
            companyCode: 'companyCode',
            userId: 'userId',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListRequest = QueryUserRoleListRequest;
class QueryUserRoleListResponseBody extends $tea.Model {
    static names() {
        return {
            companyCode: 'companyCode',
            financeEmpDeptOpenList: 'financeEmpDeptOpenList',
            roleVOList: 'roleVOList',
        };
    }
    static types() {
        return {
            companyCode: 'string',
            financeEmpDeptOpenList: { 'type': 'array', 'itemType': QueryUserRoleListResponseBodyFinanceEmpDeptOpenList },
            roleVOList: { 'type': 'array', 'itemType': QueryUserRoleListResponseBodyRoleVOList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListResponseBody = QueryUserRoleListResponseBody;
class QueryUserRoleListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryUserRoleListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListResponse = QueryUserRoleListResponse;
class SignEnterpriseAccountHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SignEnterpriseAccountHeaders = SignEnterpriseAccountHeaders;
class SignEnterpriseAccountRequest extends $tea.Model {
    static names() {
        return {
            bankCardNo: 'bankCardNo',
            bankOpenId: 'bankOpenId',
            channelType: 'channelType',
            operator: 'operator',
            signOperateType: 'signOperateType',
        };
    }
    static types() {
        return {
            bankCardNo: 'string',
            bankOpenId: 'string',
            channelType: 'string',
            operator: 'string',
            signOperateType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SignEnterpriseAccountRequest = SignEnterpriseAccountRequest;
class SignEnterpriseAccountResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SignEnterpriseAccountResponseBody = SignEnterpriseAccountResponseBody;
class SignEnterpriseAccountResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SignEnterpriseAccountResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SignEnterpriseAccountResponse = SignEnterpriseAccountResponse;
class SyncReceiptRecallHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncReceiptRecallHeaders = SyncReceiptRecallHeaders;
class SyncReceiptRecallRequest extends $tea.Model {
    static names() {
        return {
            fileDownloadUrl: 'fileDownloadUrl',
            fileName: 'fileName',
            orderNo: 'orderNo',
        };
    }
    static types() {
        return {
            fileDownloadUrl: 'string',
            fileName: 'string',
            orderNo: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncReceiptRecallRequest = SyncReceiptRecallRequest;
class SyncReceiptRecallResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncReceiptRecallResponseBody = SyncReceiptRecallResponseBody;
class SyncReceiptRecallResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SyncReceiptRecallResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SyncReceiptRecallResponse = SyncReceiptRecallResponse;
class UpdateInstanceOrderInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoHeaders = UpdateInstanceOrderInfoHeaders;
class UpdateInstanceOrderInfoRequest extends $tea.Model {
    static names() {
        return {
            failReason: 'failReason',
            orderNo: 'orderNo',
            outOrderNo: 'outOrderNo',
            payerBank: 'payerBank',
            paymentTime: 'paymentTime',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            failReason: 'string',
            orderNo: 'string',
            outOrderNo: 'string',
            payerBank: UpdateInstanceOrderInfoRequestPayerBank,
            paymentTime: 'number',
            status: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoRequest = UpdateInstanceOrderInfoRequest;
class UpdateInstanceOrderInfoShrinkRequest extends $tea.Model {
    static names() {
        return {
            failReason: 'failReason',
            orderNo: 'orderNo',
            outOrderNo: 'outOrderNo',
            payerBankShrink: 'payerBank',
            paymentTime: 'paymentTime',
            status: 'status',
            userId: 'userId',
        };
    }
    static types() {
        return {
            failReason: 'string',
            orderNo: 'string',
            outOrderNo: 'string',
            payerBankShrink: 'string',
            paymentTime: 'number',
            status: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoShrinkRequest = UpdateInstanceOrderInfoShrinkRequest;
class UpdateInstanceOrderInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoResponseBody = UpdateInstanceOrderInfoResponseBody;
class UpdateInstanceOrderInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateInstanceOrderInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoResponse = UpdateInstanceOrderInfoResponse;
class BatchSyncBankReceiptRequestBody extends $tea.Model {
    static names() {
        return {
            fileDownloadUrl: 'fileDownloadUrl',
            fileName: 'fileName',
            messageId: 'messageId',
            messageIdType: 'messageIdType',
        };
    }
    static types() {
        return {
            fileDownloadUrl: 'string',
            fileName: 'string',
            messageId: 'string',
            messageIdType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchSyncBankReceiptRequestBody = BatchSyncBankReceiptRequestBody;
class QueryCategoryByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            isDir: 'isDir',
            name: 'name',
            parentCode: 'parentCode',
            status: 'status',
            type: 'type',
        };
    }
    static types() {
        return {
            code: 'string',
            isDir: 'boolean',
            name: 'string',
            parentCode: 'string',
            status: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCategoryByPageResponseBodyList = QueryCategoryByPageResponseBodyList;
class QueryCustomerByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCustomerByPageResponseBodyList = QueryCustomerByPageResponseBodyList;
class QueryEnterpriseAccountByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            accountCode: 'accountCode',
            accountId: 'accountId',
            accountName: 'accountName',
            accountRemark: 'accountRemark',
            accountType: 'accountType',
            amount: 'amount',
            bankCode: 'bankCode',
            bankName: 'bankName',
            createTime: 'createTime',
            creator: 'creator',
        };
    }
    static types() {
        return {
            accountCode: 'string',
            accountId: 'string',
            accountName: 'string',
            accountRemark: 'string',
            accountType: 'string',
            amount: 'string',
            bankCode: 'string',
            bankName: 'string',
            createTime: 'number',
            creator: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEnterpriseAccountByPageResponseBodyList = QueryEnterpriseAccountByPageResponseBodyList;
class QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO extends $tea.Model {
    static names() {
        return {
            accountName: 'accountName',
            bankBranchCode: 'bankBranchCode',
            bankBranchName: 'bankBranchName',
            bankCardNo: 'bankCardNo',
            bankCode: 'bankCode',
            bankName: 'bankName',
            type: 'type',
        };
    }
    static types() {
        return {
            accountName: 'string',
            bankBranchCode: 'string',
            bankBranchName: 'string',
            bankCardNo: 'string',
            bankCode: 'string',
            bankName: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO = QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO;
class QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO extends $tea.Model {
    static names() {
        return {
            bankOpenDTO: 'bankOpenDTO',
        };
    }
    static types() {
        return {
            bankOpenDTO: QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO = QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO;
class QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO extends $tea.Model {
    static names() {
        return {
            accountName: 'accountName',
            bankBranchCode: 'bankBranchCode',
            bankBranchName: 'bankBranchName',
            bankCardNo: 'bankCardNo',
            bankCode: 'bankCode',
            bankName: 'bankName',
            type: 'type',
        };
    }
    static types() {
        return {
            accountName: 'string',
            bankBranchCode: 'string',
            bankBranchName: 'string',
            bankCardNo: 'string',
            bankCode: 'string',
            bankName: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO = QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO;
class QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO extends $tea.Model {
    static names() {
        return {
            bankOpenDTO: 'bankOpenDTO',
            enterpriseAccountCode: 'enterpriseAccountCode',
        };
    }
    static types() {
        return {
            bankOpenDTO: QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO,
            enterpriseAccountCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO = QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO;
class QueryProjectByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            caode: 'caode',
            code: 'code',
            createTime: 'createTime',
            creator: 'creator',
            description: 'description',
            name: 'name',
            projectCode: 'projectCode',
            projectName: 'projectName',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            caode: 'string',
            code: 'string',
            createTime: 'number',
            creator: 'string',
            description: 'string',
            name: 'string',
            projectCode: 'string',
            projectName: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryProjectByPageResponseBodyList = QueryProjectByPageResponseBodyList;
class QuerySupplierByPageResponseBodyList extends $tea.Model {
    static names() {
        return {
            code: 'code',
            createTime: 'createTime',
            description: 'description',
            name: 'name',
            status: 'status',
            userDefineCode: 'userDefineCode',
        };
    }
    static types() {
        return {
            code: 'string',
            createTime: 'number',
            description: 'string',
            name: 'string',
            status: 'string',
            userDefineCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySupplierByPageResponseBodyList = QuerySupplierByPageResponseBodyList;
class QueryUserRoleListResponseBodyFinanceEmpDeptOpenList extends $tea.Model {
    static names() {
        return {
            cascadeDeptId: 'cascadeDeptId',
            deptId: 'deptId',
            name: 'name',
            superDeptId: 'superDeptId',
        };
    }
    static types() {
        return {
            cascadeDeptId: 'string',
            deptId: 'number',
            name: 'string',
            superDeptId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListResponseBodyFinanceEmpDeptOpenList = QueryUserRoleListResponseBodyFinanceEmpDeptOpenList;
class QueryUserRoleListResponseBodyRoleVOList extends $tea.Model {
    static names() {
        return {
            roleCode: 'roleCode',
            roleName: 'roleName',
        };
    }
    static types() {
        return {
            roleCode: 'string',
            roleName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryUserRoleListResponseBodyRoleVOList = QueryUserRoleListResponseBodyRoleVOList;
class UpdateInstanceOrderInfoRequestPayerBank extends $tea.Model {
    static names() {
        return {
            cardNo: 'cardNo',
            name: 'name',
        };
    }
    static types() {
        return {
            cardNo: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateInstanceOrderInfoRequestPayerBank = UpdateInstanceOrderInfoRequestPayerBank;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 银行接入层通用接口
     *
     * @param request BankGatewayInvokeRequest
     * @param headers BankGatewayInvokeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BankGatewayInvokeResponse
     */
    async bankGatewayInvokeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.actionType)) {
            body["actionType"] = request.actionType;
        }
        if (!tea_util_1.default.isUnset(request.inputData)) {
            body["inputData"] = request.inputData;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            body["url"] = request.url;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BankGatewayInvoke",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/bankGateways/invoke`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BankGatewayInvokeResponse({}));
    }
    /**
     * @summary 银行接入层通用接口
     *
     * @param request BankGatewayInvokeRequest
     * @return BankGatewayInvokeResponse
     */
    async bankGatewayInvoke(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BankGatewayInvokeHeaders({});
        return await this.bankGatewayInvokeWithOptions(request, headers, runtime);
    }
    /**
     * @summary 批量删除智能财务单据
     *
     * @param request BatchDeleteReceiptRequest
     * @param headers BatchDeleteReceiptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchDeleteReceiptResponse
     */
    async batchDeleteReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.instanceIdList)) {
            body["instanceIdList"] = request.instanceIdList;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            body["operator"] = request.operator;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchDeleteReceipt",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/instances/remove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchDeleteReceiptResponse({}));
    }
    /**
     * @summary 批量删除智能财务单据
     *
     * @param request BatchDeleteReceiptRequest
     * @return BatchDeleteReceiptResponse
     */
    async batchDeleteReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchDeleteReceiptHeaders({});
        return await this.batchDeleteReceiptWithOptions(request, headers, runtime);
    }
    /**
     * @summary 批量同步银行回单
     *
     * @param request BatchSyncBankReceiptRequest
     * @param headers BatchSyncBankReceiptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchSyncBankReceiptResponse
     */
    async batchSyncBankReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: tea_util_1.default.toArray(request.body),
        });
        let params = new $OpenApi.Params({
            action: "BatchSyncBankReceipt",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/receipts/batchSync`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchSyncBankReceiptResponse({}));
    }
    /**
     * @summary 批量同步银行回单
     *
     * @param request BatchSyncBankReceiptRequest
     * @return BatchSyncBankReceiptResponse
     */
    async batchSyncBankReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchSyncBankReceiptHeaders({});
        return await this.batchSyncBankReceiptWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取费用类别
     *
     * @param request GetCategoryRequest
     * @param headers GetCategoryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCategoryResponse
     */
    async getCategoryWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetCategory",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/categories`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetCategoryResponse({}));
    }
    /**
     * @summary 获取费用类别
     *
     * @param request GetCategoryRequest
     * @return GetCategoryResponse
     */
    async getCategory(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetCategoryHeaders({});
        return await this.getCategoryWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业账户
     *
     * @param request GetFinanceAccountRequest
     * @param headers GetFinanceAccountHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFinanceAccountResponse
     */
    async getFinanceAccountWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.accountCode)) {
            query["accountCode"] = request.accountCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetFinanceAccount",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/financeAccounts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetFinanceAccountResponse({}));
    }
    /**
     * @summary 获取企业账户
     *
     * @param request GetFinanceAccountRequest
     * @return GetFinanceAccountResponse
     */
    async getFinanceAccount(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetFinanceAccountHeaders({});
        return await this.getFinanceAccountWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取单条项目
     *
     * @param request GetProjectRequest
     * @param headers GetProjectHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetProjectResponse
     */
    async getProjectWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetProject",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/projects`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetProjectResponse({}));
    }
    /**
     * @summary 获取单条项目
     *
     * @param request GetProjectRequest
     * @return GetProjectResponse
     */
    async getProject(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetProjectHeaders({});
        return await this.getProjectWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取智能财务单据详情
     *
     * @param request GetReceiptRequest
     * @param headers GetReceiptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetReceiptResponse
     */
    async getReceiptWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        if (!tea_util_1.default.isUnset(request.modelId)) {
            query["modelId"] = request.modelId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetReceipt",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/receipts/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetReceiptResponse({}));
    }
    /**
     * @summary 获取智能财务单据详情
     *
     * @param request GetReceiptRequest
     * @return GetReceiptResponse
     */
    async getReceipt(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetReceiptHeaders({});
        return await this.getReceiptWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取智能财务应用内维护的供应商信息
     *
     * @param request GetSupplierRequest
     * @param headers GetSupplierHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSupplierResponse
     */
    async getSupplierWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.code)) {
            query["code"] = request.code;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSupplier",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/suppliers/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSupplierResponse({}));
    }
    /**
     * @summary 获取智能财务应用内维护的供应商信息
     *
     * @param request GetSupplierRequest
     * @return GetSupplierResponse
     */
    async getSupplier(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSupplierHeaders({});
        return await this.getSupplierWithOptions(request, headers, runtime);
    }
    /**
     * @summary 根据不同的bizType查询不同的数据
     *
     * @param request LinkCommonInvokeRequest
     * @param headers LinkCommonInvokeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LinkCommonInvokeResponse
     */
    async linkCommonInvokeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.bizType)) {
            body["bizType"] = request.bizType;
        }
        if (!tea_util_1.default.isUnset(request.data)) {
            body["data"] = request.data;
        }
        if (!tea_util_1.default.isUnset(request.invokeId)) {
            body["invokeId"] = request.invokeId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "LinkCommonInvoke",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/link/bizTypes/invoke`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LinkCommonInvokeResponse({}));
    }
    /**
     * @summary 根据不同的bizType查询不同的数据
     *
     * @param request LinkCommonInvokeRequest
     * @return LinkCommonInvokeResponse
     */
    async linkCommonInvoke(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LinkCommonInvokeHeaders({});
        return await this.linkCommonInvokeWithOptions(request, headers, runtime);
    }
    /**
     * @summary 批量获取费用类别
     *
     * @param request QueryCategoryByPageRequest
     * @param headers QueryCategoryByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCategoryByPageResponse
     */
    async queryCategoryByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCategoryByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/categories/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCategoryByPageResponse({}));
    }
    /**
     * @summary 批量获取费用类别
     *
     * @param request QueryCategoryByPageRequest
     * @return QueryCategoryByPageResponse
     */
    async queryCategoryByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCategoryByPageHeaders({});
        return await this.queryCategoryByPageWithOptions(request, headers, runtime);
    }
    /**
     * @summary 分页批量获取智能财务应用内维护的客户信息
     *
     * @param request QueryCustomerByPageRequest
     * @param headers QueryCustomerByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCustomerByPageResponse
     */
    async queryCustomerByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCustomerByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/customers/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCustomerByPageResponse({}));
    }
    /**
     * @summary 分页批量获取智能财务应用内维护的客户信息
     *
     * @param request QueryCustomerByPageRequest
     * @return QueryCustomerByPageResponse
     */
    async queryCustomerByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCustomerByPageHeaders({});
        return await this.queryCustomerByPageWithOptions(request, headers, runtime);
    }
    /**
     * @summary 批量获取企业账户
     *
     * @param request QueryEnterpriseAccountByPageRequest
     * @param headers QueryEnterpriseAccountByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryEnterpriseAccountByPageResponse
     */
    async queryEnterpriseAccountByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEnterpriseAccountByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/financeAccounts/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryEnterpriseAccountByPageResponse({}));
    }
    /**
     * @summary 批量获取企业账户
     *
     * @param request QueryEnterpriseAccountByPageRequest
     * @return QueryEnterpriseAccountByPageResponse
     */
    async queryEnterpriseAccountByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryEnterpriseAccountByPageHeaders({});
        return await this.queryEnterpriseAccountByPageWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询支付订单详情
     *
     * @param request QueryInstancePaymentOrderDetailRequest
     * @param headers QueryInstancePaymentOrderDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryInstancePaymentOrderDetailResponse
     */
    async queryInstancePaymentOrderDetailWithOptions(instanceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryInstancePaymentOrderDetail",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/instances/${instanceId}/paymentOrders/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryInstancePaymentOrderDetailResponse({}));
    }
    /**
     * @summary 查询支付订单详情
     *
     * @param request QueryInstancePaymentOrderDetailRequest
     * @return QueryInstancePaymentOrderDetailResponse
     */
    async queryInstancePaymentOrderDetail(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryInstancePaymentOrderDetailHeaders({});
        return await this.queryInstancePaymentOrderDetailWithOptions(instanceId, request, headers, runtime);
    }
    /**
     * @summary 批量获取项目信息
     *
     * @param request QueryProjectByPageRequest
     * @param headers QueryProjectByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryProjectByPageResponse
     */
    async queryProjectByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryProjectByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/projects/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryProjectByPageResponse({}));
    }
    /**
     * @summary 批量获取项目信息
     *
     * @param request QueryProjectByPageRequest
     * @return QueryProjectByPageResponse
     */
    async queryProjectByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryProjectByPageHeaders({});
        return await this.queryProjectByPageWithOptions(request, headers, runtime);
    }
    /**
     * @summary 分页批量获取智能财务应用内维护的供应商信息
     *
     * @param request QuerySupplierByPageRequest
     * @param headers QuerySupplierByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySupplierByPageResponse
     */
    async querySupplierByPageWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySupplierByPage",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/suppliers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySupplierByPageResponse({}));
    }
    /**
     * @summary 分页批量获取智能财务应用内维护的供应商信息
     *
     * @param request QuerySupplierByPageRequest
     * @return QuerySupplierByPageResponse
     */
    async querySupplierByPage(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySupplierByPageHeaders({});
        return await this.querySupplierByPageWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询用户角色成员，支持分页，可获取某个企业主体下的角色成员
     *
     * @param request QueryUserRoleListRequest
     * @param headers QueryUserRoleListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserRoleListResponse
     */
    async queryUserRoleListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.companyCode)) {
            query["companyCode"] = request.companyCode;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryUserRoleList",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/users/roles`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryUserRoleListResponse({}));
    }
    /**
     * @summary 查询用户角色成员，支持分页，可获取某个企业主体下的角色成员
     *
     * @param request QueryUserRoleListRequest
     * @return QueryUserRoleListResponse
     */
    async queryUserRoleList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryUserRoleListHeaders({});
        return await this.queryUserRoleListWithOptions(request, headers, runtime);
    }
    /**
     * @summary 签约企业账户
     *
     * @param request SignEnterpriseAccountRequest
     * @param headers SignEnterpriseAccountHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SignEnterpriseAccountResponse
     */
    async signEnterpriseAccountWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.bankCardNo)) {
            query["bankCardNo"] = request.bankCardNo;
        }
        if (!tea_util_1.default.isUnset(request.bankOpenId)) {
            query["bankOpenId"] = request.bankOpenId;
        }
        if (!tea_util_1.default.isUnset(request.channelType)) {
            query["channelType"] = request.channelType;
        }
        if (!tea_util_1.default.isUnset(request.operator)) {
            query["operator"] = request.operator;
        }
        if (!tea_util_1.default.isUnset(request.signOperateType)) {
            query["signOperateType"] = request.signOperateType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SignEnterpriseAccount",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/enterpriseAccounts/sign`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SignEnterpriseAccountResponse({}));
    }
    /**
     * @summary 签约企业账户
     *
     * @param request SignEnterpriseAccountRequest
     * @return SignEnterpriseAccountResponse
     */
    async signEnterpriseAccount(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SignEnterpriseAccountHeaders({});
        return await this.signEnterpriseAccountWithOptions(request, headers, runtime);
    }
    /**
     * @summary 发送银企支付回单文件信息
     *
     * @param request SyncReceiptRecallRequest
     * @param headers SyncReceiptRecallHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncReceiptRecallResponse
     */
    async syncReceiptRecallWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.fileDownloadUrl)) {
            query["fileDownloadUrl"] = request.fileDownloadUrl;
        }
        if (!tea_util_1.default.isUnset(request.fileName)) {
            query["fileName"] = request.fileName;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SyncReceiptRecall",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/receipts/syncRecall`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SyncReceiptRecallResponse({}));
    }
    /**
     * @summary 发送银企支付回单文件信息
     *
     * @param request SyncReceiptRecallRequest
     * @return SyncReceiptRecallResponse
     */
    async syncReceiptRecall(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SyncReceiptRecallHeaders({});
        return await this.syncReceiptRecallWithOptions(request, headers, runtime);
    }
    /**
     * @summary 更新单据的支付状态
     *
     * @param tmpReq UpdateInstanceOrderInfoRequest
     * @param headers UpdateInstanceOrderInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateInstanceOrderInfoResponse
     */
    async updateInstanceOrderInfoWithOptions(instanceId, tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new UpdateInstanceOrderInfoShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.payerBank)) {
            request.payerBankShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.payerBank, "payerBank", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.failReason)) {
            query["failReason"] = request.failReason;
        }
        if (!tea_util_1.default.isUnset(request.orderNo)) {
            query["orderNo"] = request.orderNo;
        }
        if (!tea_util_1.default.isUnset(request.outOrderNo)) {
            query["outOrderNo"] = request.outOrderNo;
        }
        if (!tea_util_1.default.isUnset(request.payerBankShrink)) {
            query["payerBank"] = request.payerBankShrink;
        }
        if (!tea_util_1.default.isUnset(request.paymentTime)) {
            query["paymentTime"] = request.paymentTime;
        }
        if (!tea_util_1.default.isUnset(request.status)) {
            query["status"] = request.status;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateInstanceOrderInfo",
            version: "bizfinance_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/bizfinance/instances/${instanceId}/paymentOrders/states`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateInstanceOrderInfoResponse({}));
    }
    /**
     * @summary 更新单据的支付状态
     *
     * @param request UpdateInstanceOrderInfoRequest
     * @return UpdateInstanceOrderInfoResponse
     */
    async updateInstanceOrderInfo(instanceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateInstanceOrderInfoHeaders({});
        return await this.updateInstanceOrderInfoWithOptions(instanceId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map