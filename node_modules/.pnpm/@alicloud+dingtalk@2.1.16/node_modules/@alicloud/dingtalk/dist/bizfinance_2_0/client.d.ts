/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class BankGatewayInvokeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BankGatewayInvokeRequest extends $tea.Model {
    actionType?: string;
    inputData?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BankGatewayInvokeResponseBody extends $tea.Model {
    outputData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BankGatewayInvokeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BankGatewayInvokeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteReceiptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteReceiptRequest extends $tea.Model {
    instanceIdList?: string[];
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteReceiptResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchDeleteReceiptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchDeleteReceiptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSyncBankReceiptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSyncBankReceiptRequest extends $tea.Model {
    body?: BatchSyncBankReceiptRequestBody[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSyncBankReceiptResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSyncBankReceiptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchSyncBankReceiptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCategoryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCategoryRequest extends $tea.Model {
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCategoryResponseBody extends $tea.Model {
    accountantBookIdList?: string[];
    code?: string;
    isDir?: boolean;
    name?: string;
    parentCode?: string;
    status?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCategoryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCategoryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFinanceAccountHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFinanceAccountRequest extends $tea.Model {
    accountCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFinanceAccountResponseBody extends $tea.Model {
    accountCode?: string;
    accountId?: string;
    accountName?: string;
    accountRemark?: string;
    accountType?: string;
    accountantBookIdList?: string[];
    amount?: string;
    bankCode?: string;
    bankName?: string;
    createTime?: number;
    creator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetFinanceAccountResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetFinanceAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectRequest extends $tea.Model {
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectResponseBody extends $tea.Model {
    accountantBookIdList?: string[];
    code?: string;
    createTime?: number;
    creator?: string;
    description?: string;
    name?: string;
    projectCode?: string;
    projectName?: string;
    status?: string;
    userDefineCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetProjectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetProjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetReceiptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetReceiptRequest extends $tea.Model {
    code?: string;
    modelId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetReceiptResponseBody extends $tea.Model {
    appId?: string;
    data?: string;
    modelId?: string;
    source?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetReceiptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetReceiptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSupplierHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSupplierRequest extends $tea.Model {
    code?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSupplierResponseBody extends $tea.Model {
    accountantBookIdList?: string[];
    code?: string;
    createTime?: number;
    description?: string;
    name?: string;
    status?: string;
    userDefineCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSupplierResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSupplierResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkCommonInvokeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkCommonInvokeRequest extends $tea.Model {
    bizType?: string;
    data?: string;
    invokeId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkCommonInvokeResponseBody extends $tea.Model {
    bizType?: string;
    data?: string;
    invokeId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LinkCommonInvokeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LinkCommonInvokeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCategoryByPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCategoryByPageRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCategoryByPageResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryCategoryByPageResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCategoryByPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCategoryByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerByPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerByPageRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerByPageResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryCustomerByPageResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerByPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCustomerByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEnterpriseAccountByPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEnterpriseAccountByPageRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEnterpriseAccountByPageResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryEnterpriseAccountByPageResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEnterpriseAccountByPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryEnterpriseAccountByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancePaymentOrderDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancePaymentOrderDetailRequest extends $tea.Model {
    orderNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancePaymentOrderDetailResponseBody extends $tea.Model {
    amount?: string;
    instanceId?: string;
    payeeAccountDTO?: QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO;
    payerAccountDTO?: QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO;
    remark?: string;
    usage?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancePaymentOrderDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryInstancePaymentOrderDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectByPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectByPageRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectByPageResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QueryProjectByPageResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectByPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryProjectByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySupplierByPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySupplierByPageRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySupplierByPageResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: QuerySupplierByPageResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySupplierByPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySupplierByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRoleListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRoleListRequest extends $tea.Model {
    companyCode?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRoleListResponseBody extends $tea.Model {
    companyCode?: string;
    financeEmpDeptOpenList?: QueryUserRoleListResponseBodyFinanceEmpDeptOpenList[];
    roleVOList?: QueryUserRoleListResponseBodyRoleVOList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRoleListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserRoleListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignEnterpriseAccountHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignEnterpriseAccountRequest extends $tea.Model {
    bankCardNo?: string;
    bankOpenId?: string;
    channelType?: string;
    operator?: string;
    signOperateType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignEnterpriseAccountResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SignEnterpriseAccountResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SignEnterpriseAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncReceiptRecallHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncReceiptRecallRequest extends $tea.Model {
    fileDownloadUrl?: string;
    fileName?: string;
    orderNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncReceiptRecallResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncReceiptRecallResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncReceiptRecallResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceOrderInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceOrderInfoRequest extends $tea.Model {
    failReason?: string;
    orderNo?: string;
    outOrderNo?: string;
    payerBank?: UpdateInstanceOrderInfoRequestPayerBank;
    paymentTime?: number;
    status?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceOrderInfoShrinkRequest extends $tea.Model {
    failReason?: string;
    orderNo?: string;
    outOrderNo?: string;
    payerBankShrink?: string;
    paymentTime?: number;
    status?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceOrderInfoResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceOrderInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateInstanceOrderInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchSyncBankReceiptRequestBody extends $tea.Model {
    fileDownloadUrl?: string;
    fileName?: string;
    messageId?: string;
    messageIdType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCategoryByPageResponseBodyList extends $tea.Model {
    code?: string;
    isDir?: boolean;
    name?: string;
    parentCode?: string;
    status?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCustomerByPageResponseBodyList extends $tea.Model {
    code?: string;
    createTime?: number;
    description?: string;
    name?: string;
    status?: string;
    userDefineCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEnterpriseAccountByPageResponseBodyList extends $tea.Model {
    accountCode?: string;
    accountId?: string;
    accountName?: string;
    accountRemark?: string;
    accountType?: string;
    amount?: string;
    bankCode?: string;
    bankName?: string;
    createTime?: number;
    creator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO extends $tea.Model {
    accountName?: string;
    bankBranchCode?: string;
    bankBranchName?: string;
    bankCardNo?: string;
    bankCode?: string;
    bankName?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTO extends $tea.Model {
    bankOpenDTO?: QueryInstancePaymentOrderDetailResponseBodyPayeeAccountDTOBankOpenDTO;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO extends $tea.Model {
    accountName?: string;
    bankBranchCode?: string;
    bankBranchName?: string;
    bankCardNo?: string;
    bankCode?: string;
    bankName?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTO extends $tea.Model {
    bankOpenDTO?: QueryInstancePaymentOrderDetailResponseBodyPayerAccountDTOBankOpenDTO;
    enterpriseAccountCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryProjectByPageResponseBodyList extends $tea.Model {
    caode?: string;
    code?: string;
    createTime?: number;
    creator?: string;
    description?: string;
    name?: string;
    projectCode?: string;
    projectName?: string;
    status?: string;
    userDefineCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySupplierByPageResponseBodyList extends $tea.Model {
    code?: string;
    createTime?: number;
    description?: string;
    name?: string;
    status?: string;
    userDefineCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRoleListResponseBodyFinanceEmpDeptOpenList extends $tea.Model {
    cascadeDeptId?: string;
    deptId?: number;
    name?: string;
    superDeptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserRoleListResponseBodyRoleVOList extends $tea.Model {
    roleCode?: string;
    roleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateInstanceOrderInfoRequestPayerBank extends $tea.Model {
    cardNo?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 银行接入层通用接口
     *
     * @param request BankGatewayInvokeRequest
     * @param headers BankGatewayInvokeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BankGatewayInvokeResponse
     */
    bankGatewayInvokeWithOptions(request: BankGatewayInvokeRequest, headers: BankGatewayInvokeHeaders, runtime: $Util.RuntimeOptions): Promise<BankGatewayInvokeResponse>;
    /**
     * @summary 银行接入层通用接口
     *
     * @param request BankGatewayInvokeRequest
     * @return BankGatewayInvokeResponse
     */
    bankGatewayInvoke(request: BankGatewayInvokeRequest): Promise<BankGatewayInvokeResponse>;
    /**
     * @summary 批量删除智能财务单据
     *
     * @param request BatchDeleteReceiptRequest
     * @param headers BatchDeleteReceiptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchDeleteReceiptResponse
     */
    batchDeleteReceiptWithOptions(request: BatchDeleteReceiptRequest, headers: BatchDeleteReceiptHeaders, runtime: $Util.RuntimeOptions): Promise<BatchDeleteReceiptResponse>;
    /**
     * @summary 批量删除智能财务单据
     *
     * @param request BatchDeleteReceiptRequest
     * @return BatchDeleteReceiptResponse
     */
    batchDeleteReceipt(request: BatchDeleteReceiptRequest): Promise<BatchDeleteReceiptResponse>;
    /**
     * @summary 批量同步银行回单
     *
     * @param request BatchSyncBankReceiptRequest
     * @param headers BatchSyncBankReceiptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchSyncBankReceiptResponse
     */
    batchSyncBankReceiptWithOptions(request: BatchSyncBankReceiptRequest, headers: BatchSyncBankReceiptHeaders, runtime: $Util.RuntimeOptions): Promise<BatchSyncBankReceiptResponse>;
    /**
     * @summary 批量同步银行回单
     *
     * @param request BatchSyncBankReceiptRequest
     * @return BatchSyncBankReceiptResponse
     */
    batchSyncBankReceipt(request: BatchSyncBankReceiptRequest): Promise<BatchSyncBankReceiptResponse>;
    /**
     * @summary 获取费用类别
     *
     * @param request GetCategoryRequest
     * @param headers GetCategoryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCategoryResponse
     */
    getCategoryWithOptions(request: GetCategoryRequest, headers: GetCategoryHeaders, runtime: $Util.RuntimeOptions): Promise<GetCategoryResponse>;
    /**
     * @summary 获取费用类别
     *
     * @param request GetCategoryRequest
     * @return GetCategoryResponse
     */
    getCategory(request: GetCategoryRequest): Promise<GetCategoryResponse>;
    /**
     * @summary 获取企业账户
     *
     * @param request GetFinanceAccountRequest
     * @param headers GetFinanceAccountHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetFinanceAccountResponse
     */
    getFinanceAccountWithOptions(request: GetFinanceAccountRequest, headers: GetFinanceAccountHeaders, runtime: $Util.RuntimeOptions): Promise<GetFinanceAccountResponse>;
    /**
     * @summary 获取企业账户
     *
     * @param request GetFinanceAccountRequest
     * @return GetFinanceAccountResponse
     */
    getFinanceAccount(request: GetFinanceAccountRequest): Promise<GetFinanceAccountResponse>;
    /**
     * @summary 获取单条项目
     *
     * @param request GetProjectRequest
     * @param headers GetProjectHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetProjectResponse
     */
    getProjectWithOptions(request: GetProjectRequest, headers: GetProjectHeaders, runtime: $Util.RuntimeOptions): Promise<GetProjectResponse>;
    /**
     * @summary 获取单条项目
     *
     * @param request GetProjectRequest
     * @return GetProjectResponse
     */
    getProject(request: GetProjectRequest): Promise<GetProjectResponse>;
    /**
     * @summary 获取智能财务单据详情
     *
     * @param request GetReceiptRequest
     * @param headers GetReceiptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetReceiptResponse
     */
    getReceiptWithOptions(request: GetReceiptRequest, headers: GetReceiptHeaders, runtime: $Util.RuntimeOptions): Promise<GetReceiptResponse>;
    /**
     * @summary 获取智能财务单据详情
     *
     * @param request GetReceiptRequest
     * @return GetReceiptResponse
     */
    getReceipt(request: GetReceiptRequest): Promise<GetReceiptResponse>;
    /**
     * @summary 获取智能财务应用内维护的供应商信息
     *
     * @param request GetSupplierRequest
     * @param headers GetSupplierHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSupplierResponse
     */
    getSupplierWithOptions(request: GetSupplierRequest, headers: GetSupplierHeaders, runtime: $Util.RuntimeOptions): Promise<GetSupplierResponse>;
    /**
     * @summary 获取智能财务应用内维护的供应商信息
     *
     * @param request GetSupplierRequest
     * @return GetSupplierResponse
     */
    getSupplier(request: GetSupplierRequest): Promise<GetSupplierResponse>;
    /**
     * @summary 根据不同的bizType查询不同的数据
     *
     * @param request LinkCommonInvokeRequest
     * @param headers LinkCommonInvokeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LinkCommonInvokeResponse
     */
    linkCommonInvokeWithOptions(request: LinkCommonInvokeRequest, headers: LinkCommonInvokeHeaders, runtime: $Util.RuntimeOptions): Promise<LinkCommonInvokeResponse>;
    /**
     * @summary 根据不同的bizType查询不同的数据
     *
     * @param request LinkCommonInvokeRequest
     * @return LinkCommonInvokeResponse
     */
    linkCommonInvoke(request: LinkCommonInvokeRequest): Promise<LinkCommonInvokeResponse>;
    /**
     * @summary 批量获取费用类别
     *
     * @param request QueryCategoryByPageRequest
     * @param headers QueryCategoryByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCategoryByPageResponse
     */
    queryCategoryByPageWithOptions(request: QueryCategoryByPageRequest, headers: QueryCategoryByPageHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCategoryByPageResponse>;
    /**
     * @summary 批量获取费用类别
     *
     * @param request QueryCategoryByPageRequest
     * @return QueryCategoryByPageResponse
     */
    queryCategoryByPage(request: QueryCategoryByPageRequest): Promise<QueryCategoryByPageResponse>;
    /**
     * @summary 分页批量获取智能财务应用内维护的客户信息
     *
     * @param request QueryCustomerByPageRequest
     * @param headers QueryCustomerByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCustomerByPageResponse
     */
    queryCustomerByPageWithOptions(request: QueryCustomerByPageRequest, headers: QueryCustomerByPageHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCustomerByPageResponse>;
    /**
     * @summary 分页批量获取智能财务应用内维护的客户信息
     *
     * @param request QueryCustomerByPageRequest
     * @return QueryCustomerByPageResponse
     */
    queryCustomerByPage(request: QueryCustomerByPageRequest): Promise<QueryCustomerByPageResponse>;
    /**
     * @summary 批量获取企业账户
     *
     * @param request QueryEnterpriseAccountByPageRequest
     * @param headers QueryEnterpriseAccountByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryEnterpriseAccountByPageResponse
     */
    queryEnterpriseAccountByPageWithOptions(request: QueryEnterpriseAccountByPageRequest, headers: QueryEnterpriseAccountByPageHeaders, runtime: $Util.RuntimeOptions): Promise<QueryEnterpriseAccountByPageResponse>;
    /**
     * @summary 批量获取企业账户
     *
     * @param request QueryEnterpriseAccountByPageRequest
     * @return QueryEnterpriseAccountByPageResponse
     */
    queryEnterpriseAccountByPage(request: QueryEnterpriseAccountByPageRequest): Promise<QueryEnterpriseAccountByPageResponse>;
    /**
     * @summary 查询支付订单详情
     *
     * @param request QueryInstancePaymentOrderDetailRequest
     * @param headers QueryInstancePaymentOrderDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryInstancePaymentOrderDetailResponse
     */
    queryInstancePaymentOrderDetailWithOptions(instanceId: string, request: QueryInstancePaymentOrderDetailRequest, headers: QueryInstancePaymentOrderDetailHeaders, runtime: $Util.RuntimeOptions): Promise<QueryInstancePaymentOrderDetailResponse>;
    /**
     * @summary 查询支付订单详情
     *
     * @param request QueryInstancePaymentOrderDetailRequest
     * @return QueryInstancePaymentOrderDetailResponse
     */
    queryInstancePaymentOrderDetail(instanceId: string, request: QueryInstancePaymentOrderDetailRequest): Promise<QueryInstancePaymentOrderDetailResponse>;
    /**
     * @summary 批量获取项目信息
     *
     * @param request QueryProjectByPageRequest
     * @param headers QueryProjectByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryProjectByPageResponse
     */
    queryProjectByPageWithOptions(request: QueryProjectByPageRequest, headers: QueryProjectByPageHeaders, runtime: $Util.RuntimeOptions): Promise<QueryProjectByPageResponse>;
    /**
     * @summary 批量获取项目信息
     *
     * @param request QueryProjectByPageRequest
     * @return QueryProjectByPageResponse
     */
    queryProjectByPage(request: QueryProjectByPageRequest): Promise<QueryProjectByPageResponse>;
    /**
     * @summary 分页批量获取智能财务应用内维护的供应商信息
     *
     * @param request QuerySupplierByPageRequest
     * @param headers QuerySupplierByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySupplierByPageResponse
     */
    querySupplierByPageWithOptions(request: QuerySupplierByPageRequest, headers: QuerySupplierByPageHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySupplierByPageResponse>;
    /**
     * @summary 分页批量获取智能财务应用内维护的供应商信息
     *
     * @param request QuerySupplierByPageRequest
     * @return QuerySupplierByPageResponse
     */
    querySupplierByPage(request: QuerySupplierByPageRequest): Promise<QuerySupplierByPageResponse>;
    /**
     * @summary 查询用户角色成员，支持分页，可获取某个企业主体下的角色成员
     *
     * @param request QueryUserRoleListRequest
     * @param headers QueryUserRoleListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserRoleListResponse
     */
    queryUserRoleListWithOptions(request: QueryUserRoleListRequest, headers: QueryUserRoleListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserRoleListResponse>;
    /**
     * @summary 查询用户角色成员，支持分页，可获取某个企业主体下的角色成员
     *
     * @param request QueryUserRoleListRequest
     * @return QueryUserRoleListResponse
     */
    queryUserRoleList(request: QueryUserRoleListRequest): Promise<QueryUserRoleListResponse>;
    /**
     * @summary 签约企业账户
     *
     * @param request SignEnterpriseAccountRequest
     * @param headers SignEnterpriseAccountHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SignEnterpriseAccountResponse
     */
    signEnterpriseAccountWithOptions(request: SignEnterpriseAccountRequest, headers: SignEnterpriseAccountHeaders, runtime: $Util.RuntimeOptions): Promise<SignEnterpriseAccountResponse>;
    /**
     * @summary 签约企业账户
     *
     * @param request SignEnterpriseAccountRequest
     * @return SignEnterpriseAccountResponse
     */
    signEnterpriseAccount(request: SignEnterpriseAccountRequest): Promise<SignEnterpriseAccountResponse>;
    /**
     * @summary 发送银企支付回单文件信息
     *
     * @param request SyncReceiptRecallRequest
     * @param headers SyncReceiptRecallHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncReceiptRecallResponse
     */
    syncReceiptRecallWithOptions(request: SyncReceiptRecallRequest, headers: SyncReceiptRecallHeaders, runtime: $Util.RuntimeOptions): Promise<SyncReceiptRecallResponse>;
    /**
     * @summary 发送银企支付回单文件信息
     *
     * @param request SyncReceiptRecallRequest
     * @return SyncReceiptRecallResponse
     */
    syncReceiptRecall(request: SyncReceiptRecallRequest): Promise<SyncReceiptRecallResponse>;
    /**
     * @summary 更新单据的支付状态
     *
     * @param tmpReq UpdateInstanceOrderInfoRequest
     * @param headers UpdateInstanceOrderInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateInstanceOrderInfoResponse
     */
    updateInstanceOrderInfoWithOptions(instanceId: string, tmpReq: UpdateInstanceOrderInfoRequest, headers: UpdateInstanceOrderInfoHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateInstanceOrderInfoResponse>;
    /**
     * @summary 更新单据的支付状态
     *
     * @param request UpdateInstanceOrderInfoRequest
     * @return UpdateInstanceOrderInfoResponse
     */
    updateInstanceOrderInfo(instanceId: string, request: UpdateInstanceOrderInfoRequest): Promise<UpdateInstanceOrderInfoResponse>;
}
