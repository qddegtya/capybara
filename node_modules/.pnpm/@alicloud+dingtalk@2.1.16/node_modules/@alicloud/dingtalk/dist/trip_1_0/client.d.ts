/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class GetTravelProcessDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailRequest extends $tea.Model {
    processCorpId?: string;
    processInstanceId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBody extends $tea.Model {
    result?: GetTravelProcessDetailResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTravelProcessDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckTemplateRequest extends $tea.Model {
    customerCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckTemplateResponseBody extends $tea.Model {
    result?: PreCheckTemplateResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PreCheckTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTripProcessTemplatesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTripProcessTemplatesRequest extends $tea.Model {
    customerCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTripProcessTemplatesResponseBody extends $tea.Model {
    result?: QueryTripProcessTemplatesResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTripProcessTemplatesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryTripProcessTemplatesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoRequest extends $tea.Model {
    bizTypeList?: string[];
    gmtOrgPay?: string;
    gmtSign?: string;
    orgPayStatus?: string;
    signStatus?: string;
    targetCorpId?: string;
    tmcProductDetailList?: SyncBusinessSignInfoRequestTmcProductDetailList[];
    tmcProductList?: SyncBusinessSignInfoRequestTmcProductList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoResponseBody extends $tea.Model {
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncBusinessSignInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncCostCenterHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncCostCenterRequest extends $tea.Model {
    channelCorpId?: string;
    costCenterId?: string;
    deleteFlag?: boolean;
    extension?: string;
    gmtAction?: string;
    number?: string;
    scope?: number;
    source?: string;
    thirdPartId?: string;
    title?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncCostCenterResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncCostCenterResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncCostCenterResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncCostCenterEntityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncCostCenterEntityRequest extends $tea.Model {
    channelCorpId?: string;
    costCenterId?: string;
    delAll?: boolean;
    entityList?: SyncCostCenterEntityRequestEntityList[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncCostCenterEntityResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncCostCenterEntityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncCostCenterEntityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncInvoiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncInvoiceRequest extends $tea.Model {
    address?: string;
    bankName?: string;
    bankNo?: string;
    channelCorpId?: string;
    deleteFlag?: boolean;
    gmtAction?: string;
    invoiceId?: string;
    projectIds?: string[];
    scope?: number;
    source?: string;
    taxNo?: string;
    tel?: string;
    thirdPartId?: string;
    title?: string;
    type?: number;
    unitType?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncInvoiceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncInvoiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncInvoiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncInvoiceEntityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncInvoiceEntityRequest extends $tea.Model {
    channelCorpId?: string;
    delAll?: boolean;
    entityList?: SyncInvoiceEntityRequestEntityList[];
    invoiceId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncInvoiceEntityResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncInvoiceEntityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncInvoiceEntityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncProjectHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncProjectRequest extends $tea.Model {
    channelCorpId?: string;
    code?: string;
    costCenterId?: string;
    deleteFlag?: boolean;
    extension?: string;
    gmtAction?: string;
    invoiceId?: string;
    managerIds?: string[];
    projectId?: string;
    projectName?: string;
    scope?: number;
    source?: string;
    thirdPartId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncProjectResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncProjectResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncProjectResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncProjectEntityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncProjectEntityRequest extends $tea.Model {
    channelCorpId?: string;
    delAll?: boolean;
    entityList?: SyncProjectEntityRequestEntityList[];
    projectId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncProjectEntityResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncProjectEntityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncProjectEntityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyRequest extends $tea.Model {
    actionType?: string;
    secretString?: string;
    targetCorpId?: string;
    tripAppKey?: string;
    tripAppSecurity?: string;
    tripCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyResponseBody extends $tea.Model {
    result?: SyncSecretKeyResponseBodyResult;
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncSecretKeyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequest extends $tea.Model {
    bizExtension?: string;
    channelType?: string;
    currency?: string;
    dingUserId?: string;
    discountAmount?: string;
    endorseFlag?: boolean;
    event?: SyncTripOrderRequestEvent;
    gmtOrder?: string;
    gmtPay?: string;
    gmtRefund?: string;
    invoiceApplyUrl?: string;
    journeyBizNo?: string;
    orderDetails?: SyncTripOrderRequestOrderDetails[];
    orderNo?: string;
    orderUrl?: string;
    processId?: string;
    realAmount?: string;
    refundAmount?: string;
    relativeOrderNo?: string;
    source?: string;
    supplyLogo?: string;
    supplyName?: string;
    targetCorpId?: string;
    tmcCorpId?: string;
    totalAmount?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderResponseBody extends $tea.Model {
    requestId?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncTripOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripProductConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripProductConfigRequest extends $tea.Model {
    targetCorpId?: string;
    tripProductConfigList?: SyncTripProductConfigRequestTripProductConfigList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripProductConfigResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripProductConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncTripProductConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TripPlatformUnifiedEntryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TripPlatformUnifiedEntryRequest extends $tea.Model {
    messages?: string;
    method?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TripPlatformUnifiedEntryResponseBody extends $tea.Model {
    requestId?: string;
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TripPlatformUnifiedEntryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: TripPlatformUnifiedEntryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeTemplateRequest extends $tea.Model {
    channelCorpId?: string;
    forceUpgrade?: boolean;
    tmcCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeTemplateResponseBody extends $tea.Model {
    result?: UpgradeTemplateResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpgradeTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBodyResultExtFormComponent extends $tea.Model {
    bizAlias?: string;
    componentType?: string;
    extValue?: string;
    id?: string;
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBodyResultJourneysArrival extends $tea.Model {
    code?: string;
    countryCode?: string;
    countryName?: string;
    name?: string;
    nationalCityCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBodyResultJourneysDeparture extends $tea.Model {
    code?: string;
    countryCode?: string;
    countryName?: string;
    name?: string;
    nationalCityCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBodyResultJourneys extends $tea.Model {
    arrival?: GetTravelProcessDetailResponseBodyResultJourneysArrival;
    costCenter?: string;
    costCenterId?: string;
    costCenterThirdPartyId?: string;
    departure?: GetTravelProcessDetailResponseBodyResultJourneysDeparture;
    endTime?: string;
    endTimeAcc?: string;
    invoiceTitle?: string;
    invoiceTitleId?: string;
    invoiceTitleThirdPartyId?: string;
    itineraryProject?: string;
    itineraryProjectId?: string;
    itineraryProjectThirdPartyId?: string;
    journeyBizNo?: string;
    startTime?: string;
    startTimeAcc?: string;
    timeUnit?: string;
    travelType?: string;
    tripWay?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTravelProcessDetailResponseBodyResult extends $tea.Model {
    bizCategoryId?: string;
    businessId?: string;
    corpId?: string;
    costCenter?: string;
    costCenterId?: string;
    costCenterThirdPartyId?: string;
    createTime?: string;
    extFormComponent?: GetTravelProcessDetailResponseBodyResultExtFormComponent[];
    feeType?: string;
    invoiceTitle?: string;
    invoiceTitleId?: string;
    invoiceTitleThirdPartyId?: string;
    itineraryProject?: string;
    itineraryProjectThirdPartyId?: string;
    journeys?: GetTravelProcessDetailResponseBodyResultJourneys[];
    mainProcessInstanceId?: string;
    memo?: string;
    originatorId?: string;
    processInstanceId?: string;
    processResult?: string;
    processStatus?: string;
    remark?: string;
    travelCategory?: string;
    travelers?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckTemplateResponseBodyResultBlockRecords extends $tea.Model {
    blockType?: string;
    reason?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreCheckTemplateResponseBodyResult extends $tea.Model {
    blockRecords?: PreCheckTemplateResponseBodyResultBlockRecords[];
    pass?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTripProcessTemplatesResponseBodyResultSchemas extends $tea.Model {
    processCode?: string;
    processName?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTripProcessTemplatesResponseBodyResult extends $tea.Model {
    schemas?: QueryTripProcessTemplatesResponseBodyResultSchemas[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoRequestTmcProductDetailList extends $tea.Model {
    gmtOrgPay?: string;
    payType?: string;
    product?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoRequestTmcProductListProductDetailList extends $tea.Model {
    categoryType?: string;
    gmtOrgPay?: string;
    openStatus?: boolean;
    payType?: string;
    product?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncBusinessSignInfoRequestTmcProductList extends $tea.Model {
    productDetailList?: SyncBusinessSignInfoRequestTmcProductListProductDetailList[];
    tmcCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncCostCenterEntityRequestEntityList extends $tea.Model {
    entityId?: string;
    entityType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncInvoiceEntityRequestEntityList extends $tea.Model {
    entityId?: string;
    entityType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncProjectEntityRequestEntityList extends $tea.Model {
    entityId?: string;
    entityType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncSecretKeyResponseBodyResult extends $tea.Model {
    secretString?: string;
    targetCorpId?: string;
    tripAppKey?: string;
    tripAppSecurity?: string;
    tripCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequestEvent extends $tea.Model {
    action?: string;
    gmtAction?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequestOrderDetailsHotelLocation extends $tea.Model {
    lat?: string;
    lon?: string;
    source?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequestOrderDetailsOpenConsumerInfo extends $tea.Model {
    corpId?: string;
    name?: string;
    staffFlag?: boolean;
    status?: string;
    ticketAmount?: string;
    ticketNo?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripOrderRequestOrderDetails extends $tea.Model {
    arrivalTime?: string;
    carColor?: string;
    carModel?: string;
    carNumber?: string;
    cateringType?: string;
    checkInTime?: string;
    checkOutTime?: string;
    departTime?: string;
    destinationCity?: string;
    destinationCityCode?: string;
    destinationStation?: string;
    destinationTerminalBuilding?: string;
    detailAmount?: string;
    hotelAddress?: string;
    hotelCity?: string;
    hotelLocation?: SyncTripOrderRequestOrderDetailsHotelLocation;
    hotelName?: string;
    openConsumerInfo?: SyncTripOrderRequestOrderDetailsOpenConsumerInfo[];
    originCity?: string;
    originCityCode?: string;
    originStation?: string;
    originTerminalBuilding?: string;
    roomCount?: number;
    seatInfo?: string;
    serviceType?: string;
    subSupplyLogo?: string;
    subSupplyName?: string;
    taxiType?: string;
    telephone?: string;
    transportNumber?: string;
    typeDescription?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripProductConfigRequestTripProductConfigListTmcInfos extends $tea.Model {
    categoryType?: string;
    gmtOrgPay?: string;
    payType?: string;
    tmcCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncTripProductConfigRequestTripProductConfigList extends $tea.Model {
    allVisible?: boolean;
    deptVisibleScopes?: string[];
    openStatus?: boolean;
    productType?: string;
    roleVisibleScopes?: string[];
    staffVisibleScopes?: string[];
    tmcInfos?: SyncTripProductConfigRequestTripProductConfigListTmcInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpgradeTemplateResponseBodyResult extends $tea.Model {
    upgradeResult?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 获取差旅审批实例详情
     *
     * @param request GetTravelProcessDetailRequest
     * @param headers GetTravelProcessDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTravelProcessDetailResponse
     */
    getTravelProcessDetailWithOptions(request: GetTravelProcessDetailRequest, headers: GetTravelProcessDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetTravelProcessDetailResponse>;
    /**
     * @summary 获取差旅审批实例详情
     *
     * @param request GetTravelProcessDetailRequest
     * @return GetTravelProcessDetailResponse
     */
    getTravelProcessDetail(request: GetTravelProcessDetailRequest): Promise<GetTravelProcessDetailResponse>;
    /**
     * @summary 表单升级预校验
     *
     * @param request PreCheckTemplateRequest
     * @param headers PreCheckTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PreCheckTemplateResponse
     */
    preCheckTemplateWithOptions(request: PreCheckTemplateRequest, headers: PreCheckTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<PreCheckTemplateResponse>;
    /**
     * @summary 表单升级预校验
     *
     * @param request PreCheckTemplateRequest
     * @return PreCheckTemplateResponse
     */
    preCheckTemplate(request: PreCheckTemplateRequest): Promise<PreCheckTemplateResponse>;
    /**
     * @summary 查询审批套件详情
     *
     * @param request QueryTripProcessTemplatesRequest
     * @param headers QueryTripProcessTemplatesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryTripProcessTemplatesResponse
     */
    queryTripProcessTemplatesWithOptions(request: QueryTripProcessTemplatesRequest, headers: QueryTripProcessTemplatesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTripProcessTemplatesResponse>;
    /**
     * @summary 查询审批套件详情
     *
     * @param request QueryTripProcessTemplatesRequest
     * @return QueryTripProcessTemplatesResponse
     */
    queryTripProcessTemplates(request: QueryTripProcessTemplatesRequest): Promise<QueryTripProcessTemplatesResponse>;
    /**
     * @summary 同步服务商企业签约变更事件
     *
     * @param request SyncBusinessSignInfoRequest
     * @param headers SyncBusinessSignInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncBusinessSignInfoResponse
     */
    syncBusinessSignInfoWithOptions(request: SyncBusinessSignInfoRequest, headers: SyncBusinessSignInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SyncBusinessSignInfoResponse>;
    /**
     * @summary 同步服务商企业签约变更事件
     *
     * @param request SyncBusinessSignInfoRequest
     * @return SyncBusinessSignInfoResponse
     */
    syncBusinessSignInfo(request: SyncBusinessSignInfoRequest): Promise<SyncBusinessSignInfoResponse>;
    /**
     * @summary 出差表单成本中心同步
     *
     * @param request SyncCostCenterRequest
     * @param headers SyncCostCenterHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncCostCenterResponse
     */
    syncCostCenterWithOptions(request: SyncCostCenterRequest, headers: SyncCostCenterHeaders, runtime: $Util.RuntimeOptions): Promise<SyncCostCenterResponse>;
    /**
     * @summary 出差表单成本中心同步
     *
     * @param request SyncCostCenterRequest
     * @return SyncCostCenterResponse
     */
    syncCostCenter(request: SyncCostCenterRequest): Promise<SyncCostCenterResponse>;
    /**
     * @summary 出差表单成本中心可用范围
     *
     * @param request SyncCostCenterEntityRequest
     * @param headers SyncCostCenterEntityHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncCostCenterEntityResponse
     */
    syncCostCenterEntityWithOptions(request: SyncCostCenterEntityRequest, headers: SyncCostCenterEntityHeaders, runtime: $Util.RuntimeOptions): Promise<SyncCostCenterEntityResponse>;
    /**
     * @summary 出差表单成本中心可用范围
     *
     * @param request SyncCostCenterEntityRequest
     * @return SyncCostCenterEntityResponse
     */
    syncCostCenterEntity(request: SyncCostCenterEntityRequest): Promise<SyncCostCenterEntityResponse>;
    /**
     * @summary 出差表单发票抬头
     *
     * @param request SyncInvoiceRequest
     * @param headers SyncInvoiceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncInvoiceResponse
     */
    syncInvoiceWithOptions(request: SyncInvoiceRequest, headers: SyncInvoiceHeaders, runtime: $Util.RuntimeOptions): Promise<SyncInvoiceResponse>;
    /**
     * @summary 出差表单发票抬头
     *
     * @param request SyncInvoiceRequest
     * @return SyncInvoiceResponse
     */
    syncInvoice(request: SyncInvoiceRequest): Promise<SyncInvoiceResponse>;
    /**
     * @summary 出差表单发票抬头可用范围
     *
     * @param request SyncInvoiceEntityRequest
     * @param headers SyncInvoiceEntityHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncInvoiceEntityResponse
     */
    syncInvoiceEntityWithOptions(request: SyncInvoiceEntityRequest, headers: SyncInvoiceEntityHeaders, runtime: $Util.RuntimeOptions): Promise<SyncInvoiceEntityResponse>;
    /**
     * @summary 出差表单发票抬头可用范围
     *
     * @param request SyncInvoiceEntityRequest
     * @return SyncInvoiceEntityResponse
     */
    syncInvoiceEntity(request: SyncInvoiceEntityRequest): Promise<SyncInvoiceEntityResponse>;
    /**
     * @summary 出差表单项目
     *
     * @param request SyncProjectRequest
     * @param headers SyncProjectHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncProjectResponse
     */
    syncProjectWithOptions(request: SyncProjectRequest, headers: SyncProjectHeaders, runtime: $Util.RuntimeOptions): Promise<SyncProjectResponse>;
    /**
     * @summary 出差表单项目
     *
     * @param request SyncProjectRequest
     * @return SyncProjectResponse
     */
    syncProject(request: SyncProjectRequest): Promise<SyncProjectResponse>;
    /**
     * @summary 出差表单项目可用范围
     *
     * @param request SyncProjectEntityRequest
     * @param headers SyncProjectEntityHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncProjectEntityResponse
     */
    syncProjectEntityWithOptions(request: SyncProjectEntityRequest, headers: SyncProjectEntityHeaders, runtime: $Util.RuntimeOptions): Promise<SyncProjectEntityResponse>;
    /**
     * @summary 出差表单项目可用范围
     *
     * @param request SyncProjectEntityRequest
     * @return SyncProjectEntityResponse
     */
    syncProjectEntity(request: SyncProjectEntityRequest): Promise<SyncProjectEntityResponse>;
    /**
     * @summary 调用本接口同步公司密钥信息。
     *
     * @param request SyncSecretKeyRequest
     * @param headers SyncSecretKeyHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncSecretKeyResponse
     */
    syncSecretKeyWithOptions(request: SyncSecretKeyRequest, headers: SyncSecretKeyHeaders, runtime: $Util.RuntimeOptions): Promise<SyncSecretKeyResponse>;
    /**
     * @summary 调用本接口同步公司密钥信息。
     *
     * @param request SyncSecretKeyRequest
     * @return SyncSecretKeyResponse
     */
    syncSecretKey(request: SyncSecretKeyRequest): Promise<SyncSecretKeyResponse>;
    /**
     * @summary 同步出行订单变更事件
     *
     * @param request SyncTripOrderRequest
     * @param headers SyncTripOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncTripOrderResponse
     */
    syncTripOrderWithOptions(request: SyncTripOrderRequest, headers: SyncTripOrderHeaders, runtime: $Util.RuntimeOptions): Promise<SyncTripOrderResponse>;
    /**
     * @summary 同步出行订单变更事件
     *
     * @param request SyncTripOrderRequest
     * @return SyncTripOrderResponse
     */
    syncTripOrder(request: SyncTripOrderRequest): Promise<SyncTripOrderResponse>;
    /**
     * @summary 预订管理产品线配置同步
     *
     * @param request SyncTripProductConfigRequest
     * @param headers SyncTripProductConfigHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncTripProductConfigResponse
     */
    syncTripProductConfigWithOptions(request: SyncTripProductConfigRequest, headers: SyncTripProductConfigHeaders, runtime: $Util.RuntimeOptions): Promise<SyncTripProductConfigResponse>;
    /**
     * @summary 预订管理产品线配置同步
     *
     * @param request SyncTripProductConfigRequest
     * @return SyncTripProductConfigResponse
     */
    syncTripProductConfig(request: SyncTripProductConfigRequest): Promise<SyncTripProductConfigResponse>;
    /**
     * @summary 智能差旅平台数据互通统一入口
     *
     * @param request TripPlatformUnifiedEntryRequest
     * @param headers TripPlatformUnifiedEntryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return TripPlatformUnifiedEntryResponse
     */
    tripPlatformUnifiedEntryWithOptions(request: TripPlatformUnifiedEntryRequest, headers: TripPlatformUnifiedEntryHeaders, runtime: $Util.RuntimeOptions): Promise<TripPlatformUnifiedEntryResponse>;
    /**
     * @summary 智能差旅平台数据互通统一入口
     *
     * @param request TripPlatformUnifiedEntryRequest
     * @return TripPlatformUnifiedEntryResponse
     */
    tripPlatformUnifiedEntry(request: TripPlatformUnifiedEntryRequest): Promise<TripPlatformUnifiedEntryResponse>;
    /**
     * @summary 升级套件
     *
     * @param request UpgradeTemplateRequest
     * @param headers UpgradeTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpgradeTemplateResponse
     */
    upgradeTemplateWithOptions(request: UpgradeTemplateRequest, headers: UpgradeTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<UpgradeTemplateResponse>;
    /**
     * @summary 升级套件
     *
     * @param request UpgradeTemplateRequest
     * @return UpgradeTemplateResponse
     */
    upgradeTemplate(request: UpgradeTemplateRequest): Promise<UpgradeTemplateResponse>;
}
