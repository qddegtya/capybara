/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ResultDurationSettingsValue extends $tea.Model {
    calcType?: number;
    durationType?: number;
    overtimeRedress?: boolean;
    settings?: {
        [key: string]: any;
    };
    overtimeRedressBy?: string;
    vacationRate?: number;
    skipTime?: string;
    skipTimeByFrames?: ResultDurationSettingsValueSkipTimeByFrames[];
    skipTimeByDurations?: ResultDurationSettingsValueSkipTimeByDurations[];
    holidayPlanOvertimeRedress?: boolean;
    holidayPlanOvertimeRedressBy?: string;
    holidayPlanVacationRate?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeRequest extends $tea.Model {
    bizType?: string;
    extras?: string;
    freedomLeave?: boolean;
    hoursInPerDay?: number;
    leaveCertificate?: AddLeaveTypeRequestLeaveCertificate;
    leaveHourCeil?: string;
    leaveName?: string;
    leaveTimeCeil?: boolean;
    leaveTimeCeilMinUnit?: string;
    leaveViewUnit?: string;
    maxLeaveTime?: number;
    minLeaveHour?: number;
    naturalDayLeave?: boolean;
    paidLeave?: boolean;
    submitTimeRule?: AddLeaveTypeRequestSubmitTimeRule;
    visibilityRules?: AddLeaveTypeRequestVisibilityRules[];
    whenCanLeave?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBody extends $tea.Model {
    result?: AddLeaveTypeResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddLeaveTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddRequest extends $tea.Model {
    deviceIdList?: number[];
    groupKey?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponseBody extends $tea.Model {
    errorList?: AttendanceBleDevicesAddResponseBodyErrorList[];
    successList?: AttendanceBleDevicesAddResponseBodySuccessList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AttendanceBleDevicesAddResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryRequest extends $tea.Model {
    groupKey?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryResponseBody extends $tea.Model {
    result?: AttendanceBleDevicesQueryResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AttendanceBleDevicesQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveRequest extends $tea.Model {
    deviceIdList?: number[];
    groupKey?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveResponseBody extends $tea.Model {
    errorList?: AttendanceBleDevicesRemoveResponseBodyErrorList[];
    successList?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AttendanceBleDevicesRemoveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBossCheckHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBossCheckRequest extends $tea.Model {
    models?: BatchBossCheckRequestModels[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBossCheckResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBossCheckResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchBossCheckResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDurationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDurationRequest extends $tea.Model {
    bizType?: number;
    calculateModel?: number;
    durationUnit?: string;
    fromTime?: string;
    leaveCode?: string;
    toTime?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDurationResponseBody extends $tea.Model {
    result?: CalculateDurationResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDurationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CalculateDurationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountRequest extends $tea.Model {
    bizCode?: string;
    userIds?: string[];
    userTimeRange?: CheckClosingAccountRequestUserTimeRange[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountResponseBody extends $tea.Model {
    code?: string;
    mesage?: string;
    pass?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CheckClosingAccountResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckWritePermissionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckWritePermissionRequest extends $tea.Model {
    category?: string;
    entityIds?: number[];
    opUserId?: string;
    resourceKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckWritePermissionResponseBody extends $tea.Model {
    entityPermissionMap?: {
        [key: string]: boolean;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckWritePermissionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CheckWritePermissionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveRequest extends $tea.Model {
    approveId?: string;
    opUserid?: string;
    punchParam?: CreateApproveRequestPunchParam;
    subType?: string;
    tagName?: string;
    userid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveResponseBody extends $tea.Model {
    dingtalkApproveId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateApproveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLeaveRequestHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLeaveRequestRequest extends $tea.Model {
    outerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLeaveRequestResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLeaveRequestResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteLeaveRequestResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWaterMarkTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWaterMarkTemplateRequest extends $tea.Model {
    formCode?: string;
    formContent?: string;
    openConversationId?: string;
    systemTemplate?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWaterMarkTemplateResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteWaterMarkTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteWaterMarkTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckRequest extends $tea.Model {
    clientVer?: string;
    platform?: string;
    platformVer?: string;
    sec?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckResponseBody extends $tea.Model {
    result?: DingTalkSecurityCheckResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DingTalkSecurityCheckResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetATManageScopeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetATManageScopeRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetATManageScopeResponseBody extends $tea.Model {
    result?: GetATManageScopeResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetATManageScopeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetATManageScopeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsResponseBody extends $tea.Model {
    result?: GetAdjustmentsResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAdjustmentsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateRequest extends $tea.Model {
    bizCode?: string;
    openConversationId?: string;
    sceneCode?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateResponseBody extends $tea.Model {
    result?: GetCheckInSchemaTemplateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCheckInSchemaTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckinRecordByUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckinRecordByUserRequest extends $tea.Model {
    endTime?: number;
    maxResults?: number;
    nextToken?: number;
    operatorUserId?: string;
    startTime?: number;
    userIdList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckinRecordByUserResponseBody extends $tea.Model {
    result?: GetCheckinRecordByUserResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckinRecordByUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetCheckinRecordByUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedResponseBody extends $tea.Model {
    result?: GetClassWithDeletedResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetClassWithDeletedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsRequest extends $tea.Model {
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponseBody extends $tea.Model {
    result?: GetClosingAccountsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetClosingAccountsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetColumnvalsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetColumnvalsRequest extends $tea.Model {
    columnIdList?: string[];
    fromDate?: number;
    toDate?: number;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetColumnvalsResponseBody extends $tea.Model {
    result?: GetColumnvalsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetColumnvalsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetColumnvalsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveRecordsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveRecordsRequest extends $tea.Model {
    leaveCode?: string;
    opUserId?: string;
    pageNumber?: number;
    pageSize?: number;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveRecordsResponseBody extends $tea.Model {
    result?: GetLeaveRecordsResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveRecordsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetLeaveRecordsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeRequest extends $tea.Model {
    opUserId?: string;
    vacationSource?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBody extends $tea.Model {
    result?: GetLeaveTypeResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetLeaveTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineResponseBody extends $tea.Model {
    result?: GetMachineResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMachineResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserResponseBody extends $tea.Model {
    result?: GetMachineUserResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetMachineUserResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingRequest extends $tea.Model {
    overtimeSettingIds?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponseBody extends $tea.Model {
    result?: GetOvertimeSettingResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOvertimeSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftRequest extends $tea.Model {
    opUserId?: string;
    shiftId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftResponseBody extends $tea.Model {
    result?: GetShiftResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetShiftResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBody extends $tea.Model {
    result?: GetSimpleGroupsResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSimpleGroupsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingResponseBody extends $tea.Model {
    result?: GetSimpleOvertimeSettingResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSimpleOvertimeSettingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysRequest extends $tea.Model {
    userIds?: string[];
    workDateFrom?: number;
    workDateTo?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysResponseBody extends $tea.Model {
    result?: GetUserHolidaysResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserHolidaysResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddRequest extends $tea.Model {
    adjustmentSettingId?: number;
    bleDeviceList?: GroupAddRequestBleDeviceList[];
    checkNeedHealthyCode?: boolean;
    defaultClassId?: number;
    disableCheckWhenRest?: boolean;
    disableCheckWithoutSchedule?: boolean;
    enableCameraCheck?: boolean;
    enableEmpSelectClass?: boolean;
    enableFaceCheck?: boolean;
    enableFaceStrictMode?: boolean;
    enableNextDay?: boolean;
    enableOutSideUpdateNormalCheck?: boolean;
    enableOutsideApply?: boolean;
    enableOutsideCameraCheck?: boolean;
    enableOutsideCheck?: boolean;
    enableOutsideRemark?: boolean;
    enablePositionBle?: boolean;
    enableTrimDistance?: boolean;
    forbidHideOutSideAddress?: boolean;
    freeCheckSetting?: GroupAddRequestFreeCheckSetting;
    freeCheckTypeId?: number;
    freecheckDayStartMinOffset?: number;
    freecheckWorkDays?: number[];
    groupId?: number;
    groupName?: string;
    managerList?: string[];
    members?: GroupAddRequestMembers[];
    modifyMember?: boolean;
    offset?: number;
    openCameraCheck?: boolean;
    openFaceCheck?: boolean;
    outsideCheckApproveModeId?: number;
    overtimeSettingId?: number;
    owner?: string;
    positions?: GroupAddRequestPositions[];
    resourcePermissionMap?: {
        [key: string]: any;
    };
    shiftVOList?: GroupAddRequestShiftVOList[];
    skipHolidays?: boolean;
    specialDays?: string;
    trimDistance?: number;
    type?: string;
    wifis?: GroupAddRequestWifis[];
    workdayClassList?: number[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddResponseBody extends $tea.Model {
    result?: GroupAddResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupAddResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupUpdateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupUpdateRequest extends $tea.Model {
    adjustmentSettingId?: number;
    disableCheckWhenRest?: boolean;
    disableCheckWithoutSchedule?: boolean;
    enableCameraCheck?: boolean;
    enableEmpSelectClass?: boolean;
    enableFaceCheck?: boolean;
    enableFaceStrictMode?: boolean;
    enableOutSideUpdateNormalCheck?: boolean;
    enableOutsideApply?: boolean;
    enableOutsideCheck?: boolean;
    enableOutsideRemark?: boolean;
    enableTrimDistance?: boolean;
    forbidHideOutSideAddress?: boolean;
    freeCheckSetting?: GroupUpdateRequestFreeCheckSetting;
    freeCheckTypeId?: number;
    groupId?: number;
    groupName?: string;
    managerList?: string[];
    offset?: number;
    openCameraCheck?: boolean;
    openFaceCheck?: boolean;
    outsideCheckApproveModeId?: number;
    overtimeSettingId?: number;
    owner?: string;
    positions?: GroupUpdateRequestPositions[];
    resourcePermissionMap?: {
        [key: string]: any;
    };
    shiftVOList?: GroupUpdateRequestShiftVOList[];
    skipHolidays?: boolean;
    trimDistance?: number;
    workdayClassList?: number[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupUpdateResponseBody extends $tea.Model {
    result?: GroupUpdateResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupUpdateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GroupUpdateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasRequest extends $tea.Model {
    leaveCode?: string;
    opUserId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasResponseBody extends $tea.Model {
    result?: InitAndGetLeaveALlocationQuotasResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InitAndGetLeaveALlocationQuotasResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApproveByUsersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApproveByUsersRequest extends $tea.Model {
    bizTypes?: number[];
    fromDateTime?: number;
    toDateTime?: number;
    userIds?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApproveByUsersResponseBody extends $tea.Model {
    result?: ListApproveByUsersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApproveByUsersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListApproveByUsersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWaterMarkTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWaterMarkTemplateRequest extends $tea.Model {
    formCode?: string;
    icon?: string;
    layoutDesignId?: string;
    schemaContent?: string;
    title?: string;
    waterMarkId?: string;
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWaterMarkTemplateResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyWaterMarkTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyWaterMarkTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateRequest extends $tea.Model {
    approveId?: string;
    opUserId?: string;
    punchParam?: ProcessApproveCreateRequestPunchParam;
    subType?: string;
    tagName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateResponseBody extends $tea.Model {
    result?: ProcessApproveCreateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ProcessApproveCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveFinishHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveFinishRequest extends $tea.Model {
    approveId?: string;
    jumpUrl?: string;
    overTimeToMore?: number;
    overtimeDuration?: string;
    subType?: string;
    tagName?: string;
    topCalculateApproveDurationParam?: ProcessApproveFinishRequestTopCalculateApproveDurationParam;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveFinishResponseBody extends $tea.Model {
    result?: ProcessApproveFinishResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveFinishResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ProcessApproveFinishResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReduceQuotaWithLeaveRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReduceQuotaWithLeaveRecordRequest extends $tea.Model {
    endTime?: number;
    leaveCode?: string;
    outerId?: string;
    quotaNum?: number;
    reason?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReduceQuotaWithLeaveRecordResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReduceQuotaWithLeaveRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ReduceQuotaWithLeaveRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetainLeaveTypesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetainLeaveTypesRequest extends $tea.Model {
    leaveCodes?: string[];
    opUserId?: string;
    source?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetainLeaveTypesResponseBody extends $tea.Model {
    result?: RetainLeaveTypesResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetainLeaveTypesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RetainLeaveTypesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReverseTrialAdvancedLeaveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReverseTrialAdvancedLeaveRequest extends $tea.Model {
    opUserId?: string;
    servCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReverseTrialAdvancedLeaveResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReverseTrialAdvancedLeaveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ReverseTrialAdvancedLeaveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateRequest extends $tea.Model {
    bizCode?: string;
    icon?: string;
    layoutDesignId?: string;
    sceneCode?: string;
    schemaContent?: string;
    title?: string;
    openConversationId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateResponseBody extends $tea.Model {
    result?: SaveCustomWaterMarkTemplateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveCustomWaterMarkTemplateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShiftAddHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShiftAddRequest extends $tea.Model {
    name?: string;
    owner?: string;
    sections?: ShiftAddRequestSections[];
    serviceId?: number;
    setting?: ShiftAddRequestSetting;
    shiftId?: number;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShiftAddResponseBody extends $tea.Model {
    result?: ShiftAddResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShiftAddResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ShiftAddResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncScheduleInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncScheduleInfoRequest extends $tea.Model {
    opUserId?: string;
    scheduleInfos?: SyncScheduleInfoRequestScheduleInfos[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncScheduleInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeRequest extends $tea.Model {
    bizType?: string;
    extras?: string;
    hoursInPerDay?: number;
    leaveCertificate?: UpdateLeaveTypeRequestLeaveCertificate;
    leaveCode?: string;
    leaveName?: string;
    leaveViewUnit?: string;
    naturalDayLeave?: boolean;
    submitTimeRule?: UpdateLeaveTypeRequestSubmitTimeRule;
    visibilityRules?: UpdateLeaveTypeRequestVisibilityRules[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBody extends $tea.Model {
    result?: UpdateLeaveTypeResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateLeaveTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResultDurationSettingsValueSkipTimeByFrames extends $tea.Model {
    startTime?: string;
    endTime?: string;
    valid?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ResultDurationSettingsValueSkipTimeByDurations extends $tea.Model {
    duration?: number;
    minus?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeRequestLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeRequestSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeRequestVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBodyResultLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBodyResultSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBodyResultVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddLeaveTypeResponseBodyResult extends $tea.Model {
    bizType?: string;
    hoursInPerDay?: number;
    leaveCertificate?: AddLeaveTypeResponseBodyResultLeaveCertificate;
    leaveCode?: string;
    leaveName?: string;
    leaveViewUnit?: string;
    naturalDayLeave?: boolean;
    submitTimeRule?: AddLeaveTypeResponseBodyResultSubmitTimeRule;
    visibilityRules?: AddLeaveTypeResponseBodyResultVisibilityRules[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponseBodyErrorListFailureList extends $tea.Model {
    deviceId?: number;
    deviceName?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponseBodyErrorList extends $tea.Model {
    code?: string;
    failureList?: AttendanceBleDevicesAddResponseBodyErrorListFailureList[];
    msg?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesAddResponseBodySuccessList extends $tea.Model {
    deviceId?: number;
    deviceName?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesQueryResponseBodyResult extends $tea.Model {
    deviceId?: number;
    deviceName?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AttendanceBleDevicesRemoveResponseBodyErrorList extends $tea.Model {
    code?: string;
    failureList?: number[];
    msg?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchBossCheckRequestModels extends $tea.Model {
    absentMin?: number;
    planId?: number;
    remark?: string;
    timeResult?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDurationResponseBodyResultDurationDetail extends $tea.Model {
    date?: string;
    duration?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CalculateDurationResponseBodyResult extends $tea.Model {
    duration?: number;
    durationDetail?: CalculateDurationResponseBodyResultDurationDetail[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckClosingAccountRequestUserTimeRange extends $tea.Model {
    endTime?: number;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateApproveRequestPunchParam extends $tea.Model {
    positionId?: string;
    positionName?: string;
    positionType?: string;
    punchTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DingTalkSecurityCheckResponseBodyResult extends $tea.Model {
    hasRisk?: boolean;
    riskInfo?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetATManageScopeResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    manageScope?: string;
    userIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsResponseBodyResultItems extends $tea.Model {
    id?: number;
    name?: string;
    settingId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdjustmentsResponseBodyResult extends $tea.Model {
    items?: GetAdjustmentsResponseBodyResultItems[];
    pageNumber?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateResponseBodyResultWaterMarkTemplateModels extends $tea.Model {
    canModify?: boolean;
    formCode?: string;
    icon?: string;
    layoutDesign?: string;
    sceneCode?: string;
    schemaContent?: string;
    suiteKey?: string;
    systemTemplate?: boolean;
    title?: string;
    waterMarkId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckInSchemaTemplateResponseBodyResult extends $tea.Model {
    bizCode?: string;
    canModifyAndAddTemplate?: boolean;
    conversationAdmin?: boolean;
    customTemplateMaxSize?: number;
    openConversationId?: string;
    showStat?: boolean;
    templateDegrade?: boolean;
    waterMarkTemplateModels?: GetCheckInSchemaTemplateResponseBodyResultWaterMarkTemplateModels[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckinRecordByUserResponseBodyResultPageListCustomDataList extends $tea.Model {
    key?: string;
    label?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckinRecordByUserResponseBodyResultPageList extends $tea.Model {
    checkinTime?: number;
    customDataList?: GetCheckinRecordByUserResponseBodyResultPageListCustomDataList[];
    detailPlace?: string;
    imageList?: string[];
    latitude?: string;
    longitude?: string;
    place?: string;
    remark?: string;
    userId?: string;
    visitUser?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetCheckinRecordByUserResponseBodyResult extends $tea.Model {
    nextToken?: number;
    pageList?: GetCheckinRecordByUserResponseBodyResultPageList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedResponseBodyResultClassSettingRestTimeListBegin extends $tea.Model {
    across?: number;
    checkTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedResponseBodyResultClassSettingRestTimeListEnd extends $tea.Model {
    across?: number;
    checkTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedResponseBodyResultClassSettingRestTimeList extends $tea.Model {
    begin?: GetClassWithDeletedResponseBodyResultClassSettingRestTimeListBegin;
    end?: GetClassWithDeletedResponseBodyResultClassSettingRestTimeListEnd;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedResponseBodyResultClassSetting extends $tea.Model {
    classSettingId?: number;
    restTimeList?: GetClassWithDeletedResponseBodyResultClassSettingRestTimeList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedResponseBodyResultSectionsTimes extends $tea.Model {
    across?: number;
    beginMin?: number;
    checkTime?: string;
    checkType?: string;
    endMin?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedResponseBodyResultSections extends $tea.Model {
    times?: GetClassWithDeletedResponseBodyResultSectionsTimes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClassWithDeletedResponseBodyResult extends $tea.Model {
    classId?: number;
    classSetting?: GetClassWithDeletedResponseBodyResultClassSetting;
    corpId?: string;
    name?: string;
    sections?: GetClassWithDeletedResponseBodyResultSections[];
    workDays?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponseBodyResultClosingAccountModel extends $tea.Model {
    closingDay?: number;
    closingHourMinutes?: number;
    endDay?: number;
    endMonth?: number;
    startDay?: number;
    startMonth?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponseBodyResultUnsealClosingAccountModel extends $tea.Model {
    invalidTimeStamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetClosingAccountsResponseBodyResult extends $tea.Model {
    closingAccountModel?: GetClosingAccountsResponseBodyResultClosingAccountModel;
    switchOn?: boolean;
    unsealClosingAccountModel?: GetClosingAccountsResponseBodyResultUnsealClosingAccountModel;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetColumnvalsResponseBodyResultColumnDataColumnValues extends $tea.Model {
    date?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetColumnvalsResponseBodyResultColumnData extends $tea.Model {
    columnValues?: GetColumnvalsResponseBodyResultColumnDataColumnValues[];
    fixedValue?: string;
    id?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetColumnvalsResponseBodyResult extends $tea.Model {
    columnData?: GetColumnvalsResponseBodyResultColumnData[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveRecordsResponseBodyResultLeaveRecords extends $tea.Model {
    calType?: string;
    endTime?: number;
    gmtCreate?: number;
    gmtModified?: number;
    leaveCode?: string;
    leaveReason?: string;
    leaveRecordType?: string;
    leaveStatus?: string;
    leaveViewUnit?: string;
    opUserId?: string;
    quotaId?: string;
    recordId?: string;
    recordNumPerDay?: number;
    recordNumPerHour?: number;
    startTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveRecordsResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    leaveRecords?: GetLeaveRecordsResponseBodyResultLeaveRecords[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBodyResultLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBodyResultSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBodyResultVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLeaveTypeResponseBodyResult extends $tea.Model {
    bizType?: string;
    hoursInPerDay?: number;
    leaveCertificate?: GetLeaveTypeResponseBodyResultLeaveCertificate;
    leaveCode?: string;
    leaveName?: string;
    leaveViewUnit?: string;
    naturalDayLeave?: boolean;
    source?: string;
    submitTimeRule?: GetLeaveTypeResponseBodyResultSubmitTimeRule;
    validityType?: string;
    validityValue?: string;
    visibilityRules?: GetLeaveTypeResponseBodyResultVisibilityRules[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineResponseBodyResultMachineBluetoothVO extends $tea.Model {
    address?: string;
    bluetoothCheckWithFace?: boolean;
    bluetoothDistanceMode?: string;
    bluetoothDistanceModeDesc?: string;
    bluetoothValue?: boolean;
    latitude?: number;
    limitUserDeviceCount?: boolean;
    longitude?: number;
    monitorLocationAbnormal?: boolean;
    userDeviceCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineResponseBodyResult extends $tea.Model {
    atmManagerList?: string[];
    devId?: number;
    deviceId?: string;
    deviceName?: string;
    deviceSn?: string;
    machineBluetoothVO?: GetMachineResponseBodyResultMachineBluetoothVO;
    maxFace?: number;
    netStatus?: string;
    productName?: string;
    productVersion?: string;
    voiceMode?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserResponseBodyResultUserList extends $tea.Model {
    hasFace?: boolean;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetMachineUserResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    userList?: GetMachineUserResponseBodyResultUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponseBodyResultOvertimeDivisions extends $tea.Model {
    nextDayType?: string;
    previousDayType?: string;
    timeSplitPoint?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponseBodyResultWarningSettings extends $tea.Model {
    action?: string;
    threshold?: number;
    time?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOvertimeSettingResponseBodyResult extends $tea.Model {
    default?: boolean;
    durationSettings?: {
        [key: string]: ResultDurationSettingsValue;
    };
    id?: number;
    name?: string;
    overtimeDivisions?: GetOvertimeSettingResponseBodyResultOvertimeDivisions[];
    settingId?: number;
    stepType?: number;
    stepValue?: number;
    warningSettings?: GetOvertimeSettingResponseBodyResultWarningSettings[];
    workMinutesPerDay?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftResponseBodyResultSectionsPunchesLateBackSettingLateBackPairs extends $tea.Model {
    extra?: number;
    late?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftResponseBodyResultSectionsPunchesLateBackSetting extends $tea.Model {
    lateBackPairs?: GetShiftResponseBodyResultSectionsPunchesLateBackSettingLateBackPairs[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftResponseBodyResultSectionsPunches extends $tea.Model {
    absenteeismLateMinutes?: number;
    across?: number;
    beginMin?: number;
    checkTime?: string;
    checkType?: string;
    endMin?: number;
    flexMinutes?: number[];
    freeCheck?: boolean;
    lateBackSetting?: GetShiftResponseBodyResultSectionsPunchesLateBackSetting;
    permitMinutes?: number;
    puncheId?: number;
    seriousLateMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftResponseBodyResultSectionsRests extends $tea.Model {
    across?: number;
    checkTime?: string;
    checkType?: string;
    restId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftResponseBodyResultSections extends $tea.Model {
    punches?: GetShiftResponseBodyResultSectionsPunches[];
    rests?: GetShiftResponseBodyResultSectionsRests[];
    sectionId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftResponseBodyResultShiftSetting extends $tea.Model {
    attendDays?: string;
    corpId?: string;
    gmtCreate?: string;
    gmtModified?: string;
    shiftId?: number;
    shiftSettingId?: number;
    workTimeMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShiftResponseBodyResult extends $tea.Model {
    corpId?: string;
    id?: number;
    name?: string;
    owner?: string;
    sections?: GetShiftResponseBodyResultSections[];
    shiftGroupId?: number;
    shiftGroupName?: string;
    shiftSetting?: GetShiftResponseBodyResultShiftSetting;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBodyResultGroupsSelectedClassSectionsTimes extends $tea.Model {
    across?: number;
    checkTime?: string;
    checkType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBodyResultGroupsSelectedClassSections extends $tea.Model {
    times?: GetSimpleGroupsResponseBodyResultGroupsSelectedClassSectionsTimes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBodyResultGroupsSelectedClassSettingRestTimeListBegin extends $tea.Model {
    across?: number;
    checkTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBodyResultGroupsSelectedClassSettingRestTimeListEnd extends $tea.Model {
    across?: number;
    checkTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBodyResultGroupsSelectedClassSettingRestTimeList extends $tea.Model {
    begin?: GetSimpleGroupsResponseBodyResultGroupsSelectedClassSettingRestTimeListBegin;
    end?: GetSimpleGroupsResponseBodyResultGroupsSelectedClassSettingRestTimeListEnd;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBodyResultGroupsSelectedClassSetting extends $tea.Model {
    absenteeismLateMinutes?: number;
    classSettingId?: number;
    isOffDutyFreeCheck?: string;
    permitLateMinutes?: number;
    restTimeList?: GetSimpleGroupsResponseBodyResultGroupsSelectedClassSettingRestTimeList[];
    seriousLateMinutes?: number;
    workTimeMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBodyResultGroupsSelectedClass extends $tea.Model {
    classId?: number;
    className?: string;
    sections?: GetSimpleGroupsResponseBodyResultGroupsSelectedClassSections[];
    setting?: GetSimpleGroupsResponseBodyResultGroupsSelectedClassSetting;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBodyResultGroups extends $tea.Model {
    classesList?: string[];
    defaultClassId?: number;
    deptIds?: number[];
    deptNameList?: string[];
    disableCheckWhenRest?: boolean;
    disableCheckWithoutSchedule?: boolean;
    enableEmpSelectClass?: boolean;
    freeCheckDayStartMinOffset?: number;
    freecheckWorkDays?: number[];
    groupId?: number;
    groupName?: string;
    isDefault?: boolean;
    managerList?: string[];
    memberCount?: number;
    ownerUserId?: string;
    selectedClass?: GetSimpleGroupsResponseBodyResultGroupsSelectedClass[];
    type?: string;
    userIds?: string[];
    workDayList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleGroupsResponseBodyResult extends $tea.Model {
    groups?: GetSimpleGroupsResponseBodyResultGroups[];
    hasMore?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingResponseBodyResultItems extends $tea.Model {
    id?: number;
    name?: string;
    settingId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSimpleOvertimeSettingResponseBodyResult extends $tea.Model {
    items?: GetSimpleOvertimeSettingResponseBodyResultItems[];
    pageNumber?: number;
    totalPage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysResponseBodyResultHolidays extends $tea.Model {
    holidayName?: string;
    holidayType?: string;
    realWorkDate?: number;
    workDate?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserHolidaysResponseBodyResult extends $tea.Model {
    holidays?: GetUserHolidaysResponseBodyResultHolidays[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddRequestBleDeviceList extends $tea.Model {
    deviceId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddRequestFreeCheckSettingFreeCheckGap extends $tea.Model {
    offOnCheckGapMinutes?: number;
    onOffCheckGapMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddRequestFreeCheckSetting extends $tea.Model {
    delimitOffsetMinutesBetweenDays?: number;
    freeCheckGap?: GroupAddRequestFreeCheckSettingFreeCheckGap;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddRequestMembers extends $tea.Model {
    role?: string;
    type?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddRequestPositions extends $tea.Model {
    address?: string;
    latitude?: string;
    longitude?: string;
    offset?: number;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddRequestShiftVOList extends $tea.Model {
    shiftId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddRequestWifis extends $tea.Model {
    macAddr?: string;
    ssid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupAddResponseBodyResult extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupUpdateRequestFreeCheckSettingFreeCheckGap extends $tea.Model {
    offOnCheckGapMinutes?: number;
    onOffCheckGapMinutes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupUpdateRequestFreeCheckSetting extends $tea.Model {
    delimitOffsetMinutesBetweenDays?: number;
    freeCheckGap?: GroupUpdateRequestFreeCheckSettingFreeCheckGap;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupUpdateRequestPositions extends $tea.Model {
    address?: string;
    latitude?: string;
    longitude?: string;
    offset?: number;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupUpdateRequestShiftVOList extends $tea.Model {
    shiftId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GroupUpdateResponseBodyResult extends $tea.Model {
    id?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitAndGetLeaveALlocationQuotasResponseBodyResult extends $tea.Model {
    endTime?: number;
    leaveCode?: string;
    quotaCycle?: string;
    quotaId?: string;
    quotaNumPerDay?: number;
    quotaNumPerHour?: number;
    startTime?: number;
    usedNumPerDay?: number;
    usedNumPerHour?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListApproveByUsersResponseBodyResult extends $tea.Model {
    approveId?: string;
    beginTime?: string;
    bizType?: number;
    calculateModel?: number;
    durationUnit?: string;
    endTime?: string;
    subType?: string;
    tagName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateRequestPunchParam extends $tea.Model {
    positionId?: string;
    positionName?: string;
    positionType?: string;
    punchTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveCreateResponseBodyResult extends $tea.Model {
    dingtalkApproveId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveFinishRequestTopCalculateApproveDurationParam extends $tea.Model {
    bizType?: number;
    calculateModel?: number;
    durationUnit?: string;
    fromTime?: string;
    leaveCode?: string;
    toTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveFinishResponseBodyResultDurationDetail extends $tea.Model {
    date?: string;
    duration?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProcessApproveFinishResponseBodyResult extends $tea.Model {
    duration?: number;
    durationDetail?: ProcessApproveFinishResponseBodyResultDurationDetail[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetainLeaveTypesResponseBodyResultLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetainLeaveTypesResponseBodyResultSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetainLeaveTypesResponseBodyResultVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RetainLeaveTypesResponseBodyResult extends $tea.Model {
    bizType?: string;
    hoursInPerDay?: number;
    leaveCertificate?: RetainLeaveTypesResponseBodyResultLeaveCertificate;
    leaveCode?: string;
    leaveHourCeil?: string;
    leaveName?: string;
    leaveTimeCeil?: boolean;
    leaveTimeCeilMinUnit?: string;
    leaveViewUnit?: string;
    lieuDelayNum?: number;
    lieuDelayUnit?: string;
    maxLeaveTime?: number;
    minLeaveHour?: number;
    naturalDayLeave?: boolean;
    paidLeave?: boolean;
    submitTimeRule?: RetainLeaveTypesResponseBodyResultSubmitTimeRule;
    visibilityRules?: RetainLeaveTypesResponseBodyResultVisibilityRules[];
    whenCanLeave?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveCustomWaterMarkTemplateResponseBodyResult extends $tea.Model {
    formCode?: string;
    waterMarkId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShiftAddRequestSectionsTimes extends $tea.Model {
    across?: number;
    beginMin?: number;
    checkTime?: number;
    checkType?: string;
    endMin?: number;
    flexMinutes?: number[];
    freeCheck?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShiftAddRequestSections extends $tea.Model {
    times?: ShiftAddRequestSectionsTimes[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShiftAddRequestSettingTopRestTimeList extends $tea.Model {
    across?: number;
    checkTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShiftAddRequestSetting extends $tea.Model {
    absenteeismLateMinutes?: number;
    attendDays?: number;
    extras?: {
        [key: string]: any;
    };
    isFlexible?: boolean;
    seriousLateMinutes?: number;
    tags?: string;
    topRestTimeList?: ShiftAddRequestSettingTopRestTimeList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ShiftAddResponseBodyResult extends $tea.Model {
    name?: string;
    shiftId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncScheduleInfoRequestScheduleInfos extends $tea.Model {
    planId?: number;
    positionKeys?: string[];
    retainAttendanceCheck?: boolean;
    wifiKeys?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeRequestLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeRequestSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeRequestVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBodyResultLeaveCertificate extends $tea.Model {
    duration?: number;
    enable?: boolean;
    promptInformation?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBodyResultSubmitTimeRule extends $tea.Model {
    enableTimeLimit?: boolean;
    timeType?: string;
    timeUnit?: string;
    timeValue?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBodyResultVisibilityRules extends $tea.Model {
    type?: string;
    visible?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLeaveTypeResponseBodyResult extends $tea.Model {
    bizType?: string;
    hoursInPerDay?: number;
    leaveCertificate?: UpdateLeaveTypeResponseBodyResultLeaveCertificate;
    leaveCode?: string;
    leaveName?: string;
    leaveViewUnit?: string;
    naturalDayLeave?: boolean;
    submitTimeRule?: UpdateLeaveTypeResponseBodyResultSubmitTimeRule;
    visibilityRules?: UpdateLeaveTypeResponseBodyResultVisibilityRules[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 添加假期规则
     *
     * @param request AddLeaveTypeRequest
     * @param headers AddLeaveTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddLeaveTypeResponse
     */
    addLeaveTypeWithOptions(request: AddLeaveTypeRequest, headers: AddLeaveTypeHeaders, runtime: $Util.RuntimeOptions): Promise<AddLeaveTypeResponse>;
    /**
     * @summary 添加假期规则
     *
     * @param request AddLeaveTypeRequest
     * @return AddLeaveTypeResponse
     */
    addLeaveType(request: AddLeaveTypeRequest): Promise<AddLeaveTypeResponse>;
    /**
     * @summary 批量给考勤组添加蓝牙设备
     *
     * @param request AttendanceBleDevicesAddRequest
     * @param headers AttendanceBleDevicesAddHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AttendanceBleDevicesAddResponse
     */
    attendanceBleDevicesAddWithOptions(request: AttendanceBleDevicesAddRequest, headers: AttendanceBleDevicesAddHeaders, runtime: $Util.RuntimeOptions): Promise<AttendanceBleDevicesAddResponse>;
    /**
     * @summary 批量给考勤组添加蓝牙设备
     *
     * @param request AttendanceBleDevicesAddRequest
     * @return AttendanceBleDevicesAddResponse
     */
    attendanceBleDevicesAdd(request: AttendanceBleDevicesAddRequest): Promise<AttendanceBleDevicesAddResponse>;
    /**
     * @summary 批量查询蓝牙设备
     *
     * @param request AttendanceBleDevicesQueryRequest
     * @param headers AttendanceBleDevicesQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AttendanceBleDevicesQueryResponse
     */
    attendanceBleDevicesQueryWithOptions(request: AttendanceBleDevicesQueryRequest, headers: AttendanceBleDevicesQueryHeaders, runtime: $Util.RuntimeOptions): Promise<AttendanceBleDevicesQueryResponse>;
    /**
     * @summary 批量查询蓝牙设备
     *
     * @param request AttendanceBleDevicesQueryRequest
     * @return AttendanceBleDevicesQueryResponse
     */
    attendanceBleDevicesQuery(request: AttendanceBleDevicesQueryRequest): Promise<AttendanceBleDevicesQueryResponse>;
    /**
     * @summary 批量删除考勤组的蓝牙设备
     *
     * @param request AttendanceBleDevicesRemoveRequest
     * @param headers AttendanceBleDevicesRemoveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AttendanceBleDevicesRemoveResponse
     */
    attendanceBleDevicesRemoveWithOptions(request: AttendanceBleDevicesRemoveRequest, headers: AttendanceBleDevicesRemoveHeaders, runtime: $Util.RuntimeOptions): Promise<AttendanceBleDevicesRemoveResponse>;
    /**
     * @summary 批量删除考勤组的蓝牙设备
     *
     * @param request AttendanceBleDevicesRemoveRequest
     * @return AttendanceBleDevicesRemoveResponse
     */
    attendanceBleDevicesRemove(request: AttendanceBleDevicesRemoveRequest): Promise<AttendanceBleDevicesRemoveResponse>;
    /**
     * @summary 批量修改考勤结果
     *
     * @param request BatchBossCheckRequest
     * @param headers BatchBossCheckHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchBossCheckResponse
     */
    batchBossCheckWithOptions(request: BatchBossCheckRequest, headers: BatchBossCheckHeaders, runtime: $Util.RuntimeOptions): Promise<BatchBossCheckResponse>;
    /**
     * @summary 批量修改考勤结果
     *
     * @param request BatchBossCheckRequest
     * @return BatchBossCheckResponse
     */
    batchBossCheck(request: BatchBossCheckRequest): Promise<BatchBossCheckResponse>;
    /**
     * @summary 预计算时长
     *
     * @param request CalculateDurationRequest
     * @param headers CalculateDurationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CalculateDurationResponse
     */
    calculateDurationWithOptions(request: CalculateDurationRequest, headers: CalculateDurationHeaders, runtime: $Util.RuntimeOptions): Promise<CalculateDurationResponse>;
    /**
     * @summary 预计算时长
     *
     * @param request CalculateDurationRequest
     * @return CalculateDurationResponse
     */
    calculateDuration(request: CalculateDurationRequest): Promise<CalculateDurationResponse>;
    /**
     * @summary 针对某些员工某段时间内封账状态的查询
     *
     * @param request CheckClosingAccountRequest
     * @param headers CheckClosingAccountHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckClosingAccountResponse
     */
    checkClosingAccountWithOptions(request: CheckClosingAccountRequest, headers: CheckClosingAccountHeaders, runtime: $Util.RuntimeOptions): Promise<CheckClosingAccountResponse>;
    /**
     * @summary 针对某些员工某段时间内封账状态的查询
     *
     * @param request CheckClosingAccountRequest
     * @return CheckClosingAccountResponse
     */
    checkClosingAccount(request: CheckClosingAccountRequest): Promise<CheckClosingAccountResponse>;
    /**
     * @summary 考勤资源的写权限查询
     *
     * @param request CheckWritePermissionRequest
     * @param headers CheckWritePermissionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckWritePermissionResponse
     */
    checkWritePermissionWithOptions(request: CheckWritePermissionRequest, headers: CheckWritePermissionHeaders, runtime: $Util.RuntimeOptions): Promise<CheckWritePermissionResponse>;
    /**
     * @summary 考勤资源的写权限查询
     *
     * @param request CheckWritePermissionRequest
     * @return CheckWritePermissionResponse
     */
    checkWritePermission(request: CheckWritePermissionRequest): Promise<CheckWritePermissionResponse>;
    /**
     * @summary 创建考勤打卡审批单
     *
     * @param request CreateApproveRequest
     * @param headers CreateApproveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateApproveResponse
     */
    createApproveWithOptions(request: CreateApproveRequest, headers: CreateApproveHeaders, runtime: $Util.RuntimeOptions): Promise<CreateApproveResponse>;
    /**
     * @summary 创建考勤打卡审批单
     *
     * @param request CreateApproveRequest
     * @return CreateApproveResponse
     */
    createApprove(request: CreateApproveRequest): Promise<CreateApproveResponse>;
    /**
     * @summary 撤销请假
     *
     * @param request DeleteLeaveRequestRequest
     * @param headers DeleteLeaveRequestHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteLeaveRequestResponse
     */
    deleteLeaveRequestWithOptions(unionId: string, request: DeleteLeaveRequestRequest, headers: DeleteLeaveRequestHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteLeaveRequestResponse>;
    /**
     * @summary 撤销请假
     *
     * @param request DeleteLeaveRequestRequest
     * @return DeleteLeaveRequestResponse
     */
    deleteLeaveRequest(unionId: string, request: DeleteLeaveRequestRequest): Promise<DeleteLeaveRequestResponse>;
    /**
     * @summary 删除水印模板
     *
     * @param request DeleteWaterMarkTemplateRequest
     * @param headers DeleteWaterMarkTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteWaterMarkTemplateResponse
     */
    deleteWaterMarkTemplateWithOptions(request: DeleteWaterMarkTemplateRequest, headers: DeleteWaterMarkTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteWaterMarkTemplateResponse>;
    /**
     * @summary 删除水印模板
     *
     * @param request DeleteWaterMarkTemplateRequest
     * @return DeleteWaterMarkTemplateResponse
     */
    deleteWaterMarkTemplate(request: DeleteWaterMarkTemplateRequest): Promise<DeleteWaterMarkTemplateResponse>;
    /**
     * @summary 钉钉安全检查
     *
     * @param request DingTalkSecurityCheckRequest
     * @param headers DingTalkSecurityCheckHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DingTalkSecurityCheckResponse
     */
    dingTalkSecurityCheckWithOptions(request: DingTalkSecurityCheckRequest, headers: DingTalkSecurityCheckHeaders, runtime: $Util.RuntimeOptions): Promise<DingTalkSecurityCheckResponse>;
    /**
     * @summary 钉钉安全检查
     *
     * @param request DingTalkSecurityCheckRequest
     * @return DingTalkSecurityCheckResponse
     */
    dingTalkSecurityCheck(request: DingTalkSecurityCheckRequest): Promise<DingTalkSecurityCheckResponse>;
    /**
     * @summary 查询管理员管理范围下的userid
     *
     * @param request GetATManageScopeRequest
     * @param headers GetATManageScopeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetATManageScopeResponse
     */
    getATManageScopeWithOptions(request: GetATManageScopeRequest, headers: GetATManageScopeHeaders, runtime: $Util.RuntimeOptions): Promise<GetATManageScopeResponse>;
    /**
     * @summary 查询管理员管理范围下的userid
     *
     * @param request GetATManageScopeRequest
     * @return GetATManageScopeResponse
     */
    getATManageScope(request: GetATManageScopeRequest): Promise<GetATManageScopeResponse>;
    /**
     * @summary 获取补卡规则列表
     *
     * @param request GetAdjustmentsRequest
     * @param headers GetAdjustmentsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAdjustmentsResponse
     */
    getAdjustmentsWithOptions(request: GetAdjustmentsRequest, headers: GetAdjustmentsHeaders, runtime: $Util.RuntimeOptions): Promise<GetAdjustmentsResponse>;
    /**
     * @summary 获取补卡规则列表
     *
     * @param request GetAdjustmentsRequest
     * @return GetAdjustmentsResponse
     */
    getAdjustments(request: GetAdjustmentsRequest): Promise<GetAdjustmentsResponse>;
    /**
     * @summary 获取水印打卡模板
     *
     * @param request GetCheckInSchemaTemplateRequest
     * @param headers GetCheckInSchemaTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckInSchemaTemplateResponse
     */
    getCheckInSchemaTemplateWithOptions(request: GetCheckInSchemaTemplateRequest, headers: GetCheckInSchemaTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<GetCheckInSchemaTemplateResponse>;
    /**
     * @summary 获取水印打卡模板
     *
     * @param request GetCheckInSchemaTemplateRequest
     * @return GetCheckInSchemaTemplateResponse
     */
    getCheckInSchemaTemplate(request: GetCheckInSchemaTemplateRequest): Promise<GetCheckInSchemaTemplateResponse>;
    /**
     * @summary 调用本接口，获取用户签到记录。
     *
     * @param request GetCheckinRecordByUserRequest
     * @param headers GetCheckinRecordByUserHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetCheckinRecordByUserResponse
     */
    getCheckinRecordByUserWithOptions(request: GetCheckinRecordByUserRequest, headers: GetCheckinRecordByUserHeaders, runtime: $Util.RuntimeOptions): Promise<GetCheckinRecordByUserResponse>;
    /**
     * @summary 调用本接口，获取用户签到记录。
     *
     * @param request GetCheckinRecordByUserRequest
     * @return GetCheckinRecordByUserResponse
     */
    getCheckinRecordByUser(request: GetCheckinRecordByUserRequest): Promise<GetCheckinRecordByUserResponse>;
    /**
     * @summary 班次查询（包含已删除班次）
     *
     * @param headers GetClassWithDeletedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClassWithDeletedResponse
     */
    getClassWithDeletedWithOptions(classId: string, headers: GetClassWithDeletedHeaders, runtime: $Util.RuntimeOptions): Promise<GetClassWithDeletedResponse>;
    /**
     * @summary 班次查询（包含已删除班次）
     *
     * @return GetClassWithDeletedResponse
     */
    getClassWithDeleted(classId: string): Promise<GetClassWithDeletedResponse>;
    /**
     * @summary 查询指定用户的封账规则
     *
     * @param request GetClosingAccountsRequest
     * @param headers GetClosingAccountsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetClosingAccountsResponse
     */
    getClosingAccountsWithOptions(request: GetClosingAccountsRequest, headers: GetClosingAccountsHeaders, runtime: $Util.RuntimeOptions): Promise<GetClosingAccountsResponse>;
    /**
     * @summary 查询指定用户的封账规则
     *
     * @param request GetClosingAccountsRequest
     * @return GetClosingAccountsResponse
     */
    getClosingAccounts(request: GetClosingAccountsRequest): Promise<GetClosingAccountsResponse>;
    /**
     * @summary 获取多个用户的智能考勤报表的列值
     *
     * @param request GetColumnvalsRequest
     * @param headers GetColumnvalsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetColumnvalsResponse
     */
    getColumnvalsWithOptions(request: GetColumnvalsRequest, headers: GetColumnvalsHeaders, runtime: $Util.RuntimeOptions): Promise<GetColumnvalsResponse>;
    /**
     * @summary 获取多个用户的智能考勤报表的列值
     *
     * @param request GetColumnvalsRequest
     * @return GetColumnvalsResponse
     */
    getColumnvals(request: GetColumnvalsRequest): Promise<GetColumnvalsResponse>;
    /**
     * @summary 批量查询员工假期余额变更记录
     *
     * @param request GetLeaveRecordsRequest
     * @param headers GetLeaveRecordsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetLeaveRecordsResponse
     */
    getLeaveRecordsWithOptions(request: GetLeaveRecordsRequest, headers: GetLeaveRecordsHeaders, runtime: $Util.RuntimeOptions): Promise<GetLeaveRecordsResponse>;
    /**
     * @summary 批量查询员工假期余额变更记录
     *
     * @param request GetLeaveRecordsRequest
     * @return GetLeaveRecordsResponse
     */
    getLeaveRecords(request: GetLeaveRecordsRequest): Promise<GetLeaveRecordsResponse>;
    /**
     * @summary 查询假期规则列表
     *
     * @param request GetLeaveTypeRequest
     * @param headers GetLeaveTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetLeaveTypeResponse
     */
    getLeaveTypeWithOptions(request: GetLeaveTypeRequest, headers: GetLeaveTypeHeaders, runtime: $Util.RuntimeOptions): Promise<GetLeaveTypeResponse>;
    /**
     * @summary 查询假期规则列表
     *
     * @param request GetLeaveTypeRequest
     * @return GetLeaveTypeResponse
     */
    getLeaveType(request: GetLeaveTypeRequest): Promise<GetLeaveTypeResponse>;
    /**
     * @summary 根据设备id获取考勤机信息
     *
     * @param headers GetMachineHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMachineResponse
     */
    getMachineWithOptions(devId: string, headers: GetMachineHeaders, runtime: $Util.RuntimeOptions): Promise<GetMachineResponse>;
    /**
     * @summary 根据设备id获取考勤机信息
     *
     * @return GetMachineResponse
     */
    getMachine(devId: string): Promise<GetMachineResponse>;
    /**
     * @summary 根据设备id获取员工信息
     *
     * @param request GetMachineUserRequest
     * @param headers GetMachineUserHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMachineUserResponse
     */
    getMachineUserWithOptions(devId: string, request: GetMachineUserRequest, headers: GetMachineUserHeaders, runtime: $Util.RuntimeOptions): Promise<GetMachineUserResponse>;
    /**
     * @summary 根据设备id获取员工信息
     *
     * @param request GetMachineUserRequest
     * @return GetMachineUserResponse
     */
    getMachineUser(devId: string, request: GetMachineUserRequest): Promise<GetMachineUserResponse>;
    /**
     * @summary 批量获取加班规则设置
     *
     * @param request GetOvertimeSettingRequest
     * @param headers GetOvertimeSettingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOvertimeSettingResponse
     */
    getOvertimeSettingWithOptions(request: GetOvertimeSettingRequest, headers: GetOvertimeSettingHeaders, runtime: $Util.RuntimeOptions): Promise<GetOvertimeSettingResponse>;
    /**
     * @summary 批量获取加班规则设置
     *
     * @param request GetOvertimeSettingRequest
     * @return GetOvertimeSettingResponse
     */
    getOvertimeSetting(request: GetOvertimeSettingRequest): Promise<GetOvertimeSettingResponse>;
    /**
     * @summary 班次详情
     *
     * @param request GetShiftRequest
     * @param headers GetShiftHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetShiftResponse
     */
    getShiftWithOptions(request: GetShiftRequest, headers: GetShiftHeaders, runtime: $Util.RuntimeOptions): Promise<GetShiftResponse>;
    /**
     * @summary 班次详情
     *
     * @param request GetShiftRequest
     * @return GetShiftResponse
     */
    getShift(request: GetShiftRequest): Promise<GetShiftResponse>;
    /**
     * @summary 获取考勤组列表详情
     *
     * @param request GetSimpleGroupsRequest
     * @param headers GetSimpleGroupsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSimpleGroupsResponse
     */
    getSimpleGroupsWithOptions(request: GetSimpleGroupsRequest, headers: GetSimpleGroupsHeaders, runtime: $Util.RuntimeOptions): Promise<GetSimpleGroupsResponse>;
    /**
     * @summary 获取考勤组列表详情
     *
     * @param request GetSimpleGroupsRequest
     * @return GetSimpleGroupsResponse
     */
    getSimpleGroups(request: GetSimpleGroupsRequest): Promise<GetSimpleGroupsResponse>;
    /**
     * @summary 加班规则列表
     *
     * @param request GetSimpleOvertimeSettingRequest
     * @param headers GetSimpleOvertimeSettingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSimpleOvertimeSettingResponse
     */
    getSimpleOvertimeSettingWithOptions(request: GetSimpleOvertimeSettingRequest, headers: GetSimpleOvertimeSettingHeaders, runtime: $Util.RuntimeOptions): Promise<GetSimpleOvertimeSettingResponse>;
    /**
     * @summary 加班规则列表
     *
     * @param request GetSimpleOvertimeSettingRequest
     * @return GetSimpleOvertimeSettingResponse
     */
    getSimpleOvertimeSetting(request: GetSimpleOvertimeSettingRequest): Promise<GetSimpleOvertimeSettingResponse>;
    /**
     * @summary 查询员工某段时间的假期
     *
     * @param request GetUserHolidaysRequest
     * @param headers GetUserHolidaysHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserHolidaysResponse
     */
    getUserHolidaysWithOptions(request: GetUserHolidaysRequest, headers: GetUserHolidaysHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserHolidaysResponse>;
    /**
     * @summary 查询员工某段时间的假期
     *
     * @param request GetUserHolidaysRequest
     * @return GetUserHolidaysResponse
     */
    getUserHolidays(request: GetUserHolidaysRequest): Promise<GetUserHolidaysResponse>;
    /**
     * @summary 创建考勤组
     *
     * @param request GroupAddRequest
     * @param headers GroupAddHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GroupAddResponse
     */
    groupAddWithOptions(request: GroupAddRequest, headers: GroupAddHeaders, runtime: $Util.RuntimeOptions): Promise<GroupAddResponse>;
    /**
     * @summary 创建考勤组
     *
     * @param request GroupAddRequest
     * @return GroupAddResponse
     */
    groupAdd(request: GroupAddRequest): Promise<GroupAddResponse>;
    /**
     * @summary 修改考勤组
     *
     * @param request GroupUpdateRequest
     * @param headers GroupUpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GroupUpdateResponse
     */
    groupUpdateWithOptions(request: GroupUpdateRequest, headers: GroupUpdateHeaders, runtime: $Util.RuntimeOptions): Promise<GroupUpdateResponse>;
    /**
     * @summary 修改考勤组
     *
     * @param request GroupUpdateRequest
     * @return GroupUpdateResponse
     */
    groupUpdate(request: GroupUpdateRequest): Promise<GroupUpdateResponse>;
    /**
     * @summary 生态系统假期初始化查询余额接口
     *
     * @param request InitAndGetLeaveALlocationQuotasRequest
     * @param headers InitAndGetLeaveALlocationQuotasHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InitAndGetLeaveALlocationQuotasResponse
     */
    initAndGetLeaveALlocationQuotasWithOptions(request: InitAndGetLeaveALlocationQuotasRequest, headers: InitAndGetLeaveALlocationQuotasHeaders, runtime: $Util.RuntimeOptions): Promise<InitAndGetLeaveALlocationQuotasResponse>;
    /**
     * @summary 生态系统假期初始化查询余额接口
     *
     * @param request InitAndGetLeaveALlocationQuotasRequest
     * @return InitAndGetLeaveALlocationQuotasResponse
     */
    initAndGetLeaveALlocationQuotas(request: InitAndGetLeaveALlocationQuotasRequest): Promise<InitAndGetLeaveALlocationQuotasResponse>;
    /**
     * @summary 获取用户某段时间内同步到考勤的审批单信息
     *
     * @param request ListApproveByUsersRequest
     * @param headers ListApproveByUsersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListApproveByUsersResponse
     */
    listApproveByUsersWithOptions(request: ListApproveByUsersRequest, headers: ListApproveByUsersHeaders, runtime: $Util.RuntimeOptions): Promise<ListApproveByUsersResponse>;
    /**
     * @summary 获取用户某段时间内同步到考勤的审批单信息
     *
     * @param request ListApproveByUsersRequest
     * @return ListApproveByUsersResponse
     */
    listApproveByUsers(request: ListApproveByUsersRequest): Promise<ListApproveByUsersResponse>;
    /**
     * @summary 修改水印模板
     *
     * @param request ModifyWaterMarkTemplateRequest
     * @param headers ModifyWaterMarkTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyWaterMarkTemplateResponse
     */
    modifyWaterMarkTemplateWithOptions(request: ModifyWaterMarkTemplateRequest, headers: ModifyWaterMarkTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<ModifyWaterMarkTemplateResponse>;
    /**
     * @summary 修改水印模板
     *
     * @param request ModifyWaterMarkTemplateRequest
     * @return ModifyWaterMarkTemplateResponse
     */
    modifyWaterMarkTemplate(request: ModifyWaterMarkTemplateRequest): Promise<ModifyWaterMarkTemplateResponse>;
    /**
     * @summary 创建考勤打卡审批单
     *
     * @param request ProcessApproveCreateRequest
     * @param headers ProcessApproveCreateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ProcessApproveCreateResponse
     */
    processApproveCreateWithOptions(request: ProcessApproveCreateRequest, headers: ProcessApproveCreateHeaders, runtime: $Util.RuntimeOptions): Promise<ProcessApproveCreateResponse>;
    /**
     * @summary 创建考勤打卡审批单
     *
     * @param request ProcessApproveCreateRequest
     * @return ProcessApproveCreateResponse
     */
    processApproveCreate(request: ProcessApproveCreateRequest): Promise<ProcessApproveCreateResponse>;
    /**
     * @summary 通知审批通过
     *
     * @param request ProcessApproveFinishRequest
     * @param headers ProcessApproveFinishHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ProcessApproveFinishResponse
     */
    processApproveFinishWithOptions(request: ProcessApproveFinishRequest, headers: ProcessApproveFinishHeaders, runtime: $Util.RuntimeOptions): Promise<ProcessApproveFinishResponse>;
    /**
     * @summary 通知审批通过
     *
     * @param request ProcessApproveFinishRequest
     * @return ProcessApproveFinishResponse
     */
    processApproveFinish(request: ProcessApproveFinishRequest): Promise<ProcessApproveFinishResponse>;
    /**
     * @summary 扣减员工假期余额
     *
     * @param request ReduceQuotaWithLeaveRecordRequest
     * @param headers ReduceQuotaWithLeaveRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ReduceQuotaWithLeaveRecordResponse
     */
    reduceQuotaWithLeaveRecordWithOptions(unionId: string, request: ReduceQuotaWithLeaveRecordRequest, headers: ReduceQuotaWithLeaveRecordHeaders, runtime: $Util.RuntimeOptions): Promise<ReduceQuotaWithLeaveRecordResponse>;
    /**
     * @summary 扣减员工假期余额
     *
     * @param request ReduceQuotaWithLeaveRecordRequest
     * @return ReduceQuotaWithLeaveRecordResponse
     */
    reduceQuotaWithLeaveRecord(unionId: string, request: ReduceQuotaWithLeaveRecordRequest): Promise<ReduceQuotaWithLeaveRecordResponse>;
    /**
     * @summary 修改假期规则来源
     *
     * @param request RetainLeaveTypesRequest
     * @param headers RetainLeaveTypesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RetainLeaveTypesResponse
     */
    retainLeaveTypesWithOptions(request: RetainLeaveTypesRequest, headers: RetainLeaveTypesHeaders, runtime: $Util.RuntimeOptions): Promise<RetainLeaveTypesResponse>;
    /**
     * @summary 修改假期规则来源
     *
     * @param request RetainLeaveTypesRequest
     * @return RetainLeaveTypesResponse
     */
    retainLeaveTypes(request: RetainLeaveTypesRequest): Promise<RetainLeaveTypesResponse>;
    /**
     * @summary 提供给高级假期的试用订单回退
     *
     * @param request ReverseTrialAdvancedLeaveRequest
     * @param headers ReverseTrialAdvancedLeaveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ReverseTrialAdvancedLeaveResponse
     */
    reverseTrialAdvancedLeaveWithOptions(request: ReverseTrialAdvancedLeaveRequest, headers: ReverseTrialAdvancedLeaveHeaders, runtime: $Util.RuntimeOptions): Promise<ReverseTrialAdvancedLeaveResponse>;
    /**
     * @summary 提供给高级假期的试用订单回退
     *
     * @param request ReverseTrialAdvancedLeaveRequest
     * @return ReverseTrialAdvancedLeaveResponse
     */
    reverseTrialAdvancedLeave(request: ReverseTrialAdvancedLeaveRequest): Promise<ReverseTrialAdvancedLeaveResponse>;
    /**
     * @summary 新增水印签到模板
     *
     * @param request SaveCustomWaterMarkTemplateRequest
     * @param headers SaveCustomWaterMarkTemplateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveCustomWaterMarkTemplateResponse
     */
    saveCustomWaterMarkTemplateWithOptions(request: SaveCustomWaterMarkTemplateRequest, headers: SaveCustomWaterMarkTemplateHeaders, runtime: $Util.RuntimeOptions): Promise<SaveCustomWaterMarkTemplateResponse>;
    /**
     * @summary 新增水印签到模板
     *
     * @param request SaveCustomWaterMarkTemplateRequest
     * @return SaveCustomWaterMarkTemplateResponse
     */
    saveCustomWaterMarkTemplate(request: SaveCustomWaterMarkTemplateRequest): Promise<SaveCustomWaterMarkTemplateResponse>;
    /**
     * @summary 创建班次
     *
     * @param request ShiftAddRequest
     * @param headers ShiftAddHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ShiftAddResponse
     */
    shiftAddWithOptions(request: ShiftAddRequest, headers: ShiftAddHeaders, runtime: $Util.RuntimeOptions): Promise<ShiftAddResponse>;
    /**
     * @summary 创建班次
     *
     * @param request ShiftAddRequest
     * @return ShiftAddResponse
     */
    shiftAdd(request: ShiftAddRequest): Promise<ShiftAddResponse>;
    /**
     * @summary 用于考勤排班附加信息，例如打卡位置，打卡wifi等
     *
     * @param request SyncScheduleInfoRequest
     * @param headers SyncScheduleInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncScheduleInfoResponse
     */
    syncScheduleInfoWithOptions(request: SyncScheduleInfoRequest, headers: SyncScheduleInfoHeaders, runtime: $Util.RuntimeOptions): Promise<SyncScheduleInfoResponse>;
    /**
     * @summary 用于考勤排班附加信息，例如打卡位置，打卡wifi等
     *
     * @param request SyncScheduleInfoRequest
     * @return SyncScheduleInfoResponse
     */
    syncScheduleInfo(request: SyncScheduleInfoRequest): Promise<SyncScheduleInfoResponse>;
    /**
     * @summary 更新假期规则
     *
     * @param request UpdateLeaveTypeRequest
     * @param headers UpdateLeaveTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateLeaveTypeResponse
     */
    updateLeaveTypeWithOptions(request: UpdateLeaveTypeRequest, headers: UpdateLeaveTypeHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateLeaveTypeResponse>;
    /**
     * @summary 更新假期规则
     *
     * @param request UpdateLeaveTypeRequest
     * @return UpdateLeaveTypeResponse
     */
    updateLeaveType(request: UpdateLeaveTypeRequest): Promise<UpdateLeaveTypeResponse>;
}
