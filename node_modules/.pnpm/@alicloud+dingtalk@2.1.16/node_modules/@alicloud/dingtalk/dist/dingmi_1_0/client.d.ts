/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddRobotInstanceToGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotInstanceToGroupRequest extends $tea.Model {
    chatbotId?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotInstanceToGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddRobotInstanceToGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddRobotInstanceToGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AskRobotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AskRobotRequest extends $tea.Model {
    dingUserId?: string;
    question?: string;
    robotAppKey?: string;
    sessionUuid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AskRobotResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AskRobotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AskRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingMeBaseDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingMeBaseDataRequest extends $tea.Model {
    appKey?: string;
    byDay?: boolean;
    endDay?: string;
    startDay?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingMeBaseDataResponseBody extends $tea.Model {
    fromCache?: boolean;
    rawset?: {
        [key: string]: string;
    }[];
    runtime?: number;
    tips?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDingMeBaseDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDingMeBaseDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntelligentRobotInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntelligentRobotInfoRequest extends $tea.Model {
    robotAppKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntelligentRobotInfoResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntelligentRobotInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetIntelligentRobotInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountRobotInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountRobotInfoRequest extends $tea.Model {
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountRobotInfoResponseBody extends $tea.Model {
    appId?: number;
    brief?: string;
    description?: string;
    icon?: string;
    name?: string;
    previewMediaUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOfficialAccountRobotInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOfficialAccountRobotInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebChannelUserTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebChannelUserTokenRequest extends $tea.Model {
    foreignId?: string;
    nick?: string;
    source?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebChannelUserTokenResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWebChannelUserTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetWebChannelUserTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushCustomerGroupMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushCustomerGroupMessageRequest extends $tea.Model {
    conversationId?: string;
    msgKey?: string;
    msgParam?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushCustomerGroupMessageResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushCustomerGroupMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushCustomerGroupMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotGroupMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotGroupMessageRequest extends $tea.Model {
    chatbotId?: string;
    msgKey?: string;
    msgParam?: string;
    openConversationId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotGroupMessageResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotGroupMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushIntelligentRobotGroupMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotMessageRequest extends $tea.Model {
    chatbotId?: string;
    msgKey?: string;
    msgParam?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotMessageResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushIntelligentRobotMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushIntelligentRobotMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushOfficialAccountMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushOfficialAccountMessageRequest extends $tea.Model {
    msgKey?: string;
    msgParam?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushOfficialAccountMessageResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushOfficialAccountMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushOfficialAccountMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushRobotMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushRobotMessageRequest extends $tea.Model {
    chatbotId?: string;
    msgKey?: string;
    msgParam?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushRobotMessageResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PushRobotMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PushRobotMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplyRobotHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplyRobotRequest extends $tea.Model {
    proxyMessageStr?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplyRobotResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReplyRobotResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ReplyRobotResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOfficialAccountRobotInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOfficialAccountRobotInfoRequest extends $tea.Model {
    avatar?: string;
    brief?: string;
    description?: string;
    name?: string;
    previewMediaUrl?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOfficialAccountRobotInfoResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateOfficialAccountRobotInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateOfficialAccountRobotInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 添加智能客服机器人到钉钉群
     *
     * @param request AddRobotInstanceToGroupRequest
     * @param headers AddRobotInstanceToGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddRobotInstanceToGroupResponse
     */
    addRobotInstanceToGroupWithOptions(request: AddRobotInstanceToGroupRequest, headers: AddRobotInstanceToGroupHeaders, runtime: $Util.RuntimeOptions): Promise<AddRobotInstanceToGroupResponse>;
    /**
     * @summary 添加智能客服机器人到钉钉群
     *
     * @param request AddRobotInstanceToGroupRequest
     * @return AddRobotInstanceToGroupResponse
     */
    addRobotInstanceToGroup(request: AddRobotInstanceToGroupRequest): Promise<AddRobotInstanceToGroupResponse>;
    /**
     * @summary 调用小蜜机器人的问答能力
     *
     * @param request AskRobotRequest
     * @param headers AskRobotHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AskRobotResponse
     */
    askRobotWithOptions(request: AskRobotRequest, headers: AskRobotHeaders, runtime: $Util.RuntimeOptions): Promise<AskRobotResponse>;
    /**
     * @summary 调用小蜜机器人的问答能力
     *
     * @param request AskRobotRequest
     * @return AskRobotResponse
     */
    askRobot(request: AskRobotRequest): Promise<AskRobotResponse>;
    /**
     * @summary 小蜜机器人数据统计指标
     *
     * @param request GetDingMeBaseDataRequest
     * @param headers GetDingMeBaseDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDingMeBaseDataResponse
     */
    getDingMeBaseDataWithOptions(request: GetDingMeBaseDataRequest, headers: GetDingMeBaseDataHeaders, runtime: $Util.RuntimeOptions): Promise<GetDingMeBaseDataResponse>;
    /**
     * @summary 小蜜机器人数据统计指标
     *
     * @param request GetDingMeBaseDataRequest
     * @return GetDingMeBaseDataResponse
     */
    getDingMeBaseData(request: GetDingMeBaseDataRequest): Promise<GetDingMeBaseDataResponse>;
    /**
     * @summary 获取智能客服机器人信息
     *
     * @param request GetIntelligentRobotInfoRequest
     * @param headers GetIntelligentRobotInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetIntelligentRobotInfoResponse
     */
    getIntelligentRobotInfoWithOptions(request: GetIntelligentRobotInfoRequest, headers: GetIntelligentRobotInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetIntelligentRobotInfoResponse>;
    /**
     * @summary 获取智能客服机器人信息
     *
     * @param request GetIntelligentRobotInfoRequest
     * @return GetIntelligentRobotInfoResponse
     */
    getIntelligentRobotInfo(request: GetIntelligentRobotInfoRequest): Promise<GetIntelligentRobotInfoResponse>;
    /**
     * @summary 获取服务窗机器人信息
     *
     * @param request GetOfficialAccountRobotInfoRequest
     * @param headers GetOfficialAccountRobotInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOfficialAccountRobotInfoResponse
     */
    getOfficialAccountRobotInfoWithOptions(request: GetOfficialAccountRobotInfoRequest, headers: GetOfficialAccountRobotInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetOfficialAccountRobotInfoResponse>;
    /**
     * @summary 获取服务窗机器人信息
     *
     * @param request GetOfficialAccountRobotInfoRequest
     * @return GetOfficialAccountRobotInfoResponse
     */
    getOfficialAccountRobotInfo(request: GetOfficialAccountRobotInfoRequest): Promise<GetOfficialAccountRobotInfoResponse>;
    /**
     * @summary 小蜜客服网页渠道获取三方用户token
     *
     * @param request GetWebChannelUserTokenRequest
     * @param headers GetWebChannelUserTokenHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetWebChannelUserTokenResponse
     */
    getWebChannelUserTokenWithOptions(request: GetWebChannelUserTokenRequest, headers: GetWebChannelUserTokenHeaders, runtime: $Util.RuntimeOptions): Promise<GetWebChannelUserTokenResponse>;
    /**
     * @summary 小蜜客服网页渠道获取三方用户token
     *
     * @param request GetWebChannelUserTokenRequest
     * @return GetWebChannelUserTokenResponse
     */
    getWebChannelUserToken(request: GetWebChannelUserTokenRequest): Promise<GetWebChannelUserTokenResponse>;
    /**
     * @summary 通过小蜜机器人在客户群内推送消息
     *
     * @param request PushCustomerGroupMessageRequest
     * @param headers PushCustomerGroupMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PushCustomerGroupMessageResponse
     */
    pushCustomerGroupMessageWithOptions(request: PushCustomerGroupMessageRequest, headers: PushCustomerGroupMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushCustomerGroupMessageResponse>;
    /**
     * @summary 通过小蜜机器人在客户群内推送消息
     *
     * @param request PushCustomerGroupMessageRequest
     * @return PushCustomerGroupMessageResponse
     */
    pushCustomerGroupMessage(request: PushCustomerGroupMessageRequest): Promise<PushCustomerGroupMessageResponse>;
    /**
     * @summary 推送智能客服机器人钉钉群聊消息
     *
     * @param request PushIntelligentRobotGroupMessageRequest
     * @param headers PushIntelligentRobotGroupMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PushIntelligentRobotGroupMessageResponse
     */
    pushIntelligentRobotGroupMessageWithOptions(request: PushIntelligentRobotGroupMessageRequest, headers: PushIntelligentRobotGroupMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushIntelligentRobotGroupMessageResponse>;
    /**
     * @summary 推送智能客服机器人钉钉群聊消息
     *
     * @param request PushIntelligentRobotGroupMessageRequest
     * @return PushIntelligentRobotGroupMessageResponse
     */
    pushIntelligentRobotGroupMessage(request: PushIntelligentRobotGroupMessageRequest): Promise<PushIntelligentRobotGroupMessageResponse>;
    /**
     * @summary 智能客服机器人推送消息
     *
     * @param request PushIntelligentRobotMessageRequest
     * @param headers PushIntelligentRobotMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PushIntelligentRobotMessageResponse
     */
    pushIntelligentRobotMessageWithOptions(request: PushIntelligentRobotMessageRequest, headers: PushIntelligentRobotMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushIntelligentRobotMessageResponse>;
    /**
     * @summary 智能客服机器人推送消息
     *
     * @param request PushIntelligentRobotMessageRequest
     * @return PushIntelligentRobotMessageResponse
     */
    pushIntelligentRobotMessage(request: PushIntelligentRobotMessageRequest): Promise<PushIntelligentRobotMessageResponse>;
    /**
     * @summary 通过服务窗机器人推送单聊消息
     *
     * @param request PushOfficialAccountMessageRequest
     * @param headers PushOfficialAccountMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PushOfficialAccountMessageResponse
     */
    pushOfficialAccountMessageWithOptions(request: PushOfficialAccountMessageRequest, headers: PushOfficialAccountMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushOfficialAccountMessageResponse>;
    /**
     * @summary 通过服务窗机器人推送单聊消息
     *
     * @param request PushOfficialAccountMessageRequest
     * @return PushOfficialAccountMessageResponse
     */
    pushOfficialAccountMessage(request: PushOfficialAccountMessageRequest): Promise<PushOfficialAccountMessageResponse>;
    /**
     * @summary 通过小蜜客服机器人推送单聊消息
     *
     * @param request PushRobotMessageRequest
     * @param headers PushRobotMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PushRobotMessageResponse
     */
    pushRobotMessageWithOptions(request: PushRobotMessageRequest, headers: PushRobotMessageHeaders, runtime: $Util.RuntimeOptions): Promise<PushRobotMessageResponse>;
    /**
     * @summary 通过小蜜客服机器人推送单聊消息
     *
     * @param request PushRobotMessageRequest
     * @return PushRobotMessageResponse
     */
    pushRobotMessage(request: PushRobotMessageRequest): Promise<PushRobotMessageResponse>;
    /**
     * @summary 异步回复机器人消息
     *
     * @param request ReplyRobotRequest
     * @param headers ReplyRobotHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ReplyRobotResponse
     */
    replyRobotWithOptions(request: ReplyRobotRequest, headers: ReplyRobotHeaders, runtime: $Util.RuntimeOptions): Promise<ReplyRobotResponse>;
    /**
     * @summary 异步回复机器人消息
     *
     * @param request ReplyRobotRequest
     * @return ReplyRobotResponse
     */
    replyRobot(request: ReplyRobotRequest): Promise<ReplyRobotResponse>;
    /**
     * @summary 更新服务窗机器人信息
     *
     * @param request UpdateOfficialAccountRobotInfoRequest
     * @param headers UpdateOfficialAccountRobotInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateOfficialAccountRobotInfoResponse
     */
    updateOfficialAccountRobotInfoWithOptions(request: UpdateOfficialAccountRobotInfoRequest, headers: UpdateOfficialAccountRobotInfoHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateOfficialAccountRobotInfoResponse>;
    /**
     * @summary 更新服务窗机器人信息
     *
     * @param request UpdateOfficialAccountRobotInfoRequest
     * @return UpdateOfficialAccountRobotInfoResponse
     */
    updateOfficialAccountRobotInfo(request: UpdateOfficialAccountRobotInfoRequest): Promise<UpdateOfficialAccountRobotInfoResponse>;
}
