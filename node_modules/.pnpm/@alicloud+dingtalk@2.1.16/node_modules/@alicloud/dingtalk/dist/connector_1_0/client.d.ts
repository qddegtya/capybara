/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class CreateActionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateActionRequest extends $tea.Model {
    actionInfo?: CreateActionRequestActionInfo[];
    integratorFlag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateActionResponseBody extends $tea.Model {
    item?: CreateActionResponseBodyItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateActionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConnectorHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConnectorRequest extends $tea.Model {
    connectorInfo?: CreateConnectorRequestConnectorInfo[];
    integratorFlag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConnectorResponseBody extends $tea.Model {
    item?: CreateConnectorResponseBodyItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConnectorResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateConnectorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInvocableInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInvocableInstanceRequest extends $tea.Model {
    connectAssetUri?: string;
    instanceKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInvocableInstanceResponseBody extends $tea.Model {
    connectAssetUri?: string;
    versionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInvocableInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateInvocableInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTriggerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTriggerRequest extends $tea.Model {
    integratorFlag?: string;
    triggerInfo?: CreateTriggerRequestTriggerInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTriggerResponseBody extends $tea.Model {
    item?: CreateTriggerResponseBodyItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTriggerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateTriggerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActionDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActionDetailRequest extends $tea.Model {
    connectAssetUri?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActionDetailResponseBody extends $tea.Model {
    connectAssetUri?: string;
    inputSchema?: string;
    integrationConfig?: GetActionDetailResponseBodyIntegrationConfig;
    name?: string;
    outputSchema?: string;
    refId?: string;
    refProviderCorpId?: string;
    refType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActionDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetActionDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeInstanceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeInstanceRequest extends $tea.Model {
    connectAssetUri?: string;
    inputJsonString?: string;
    instanceKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeInstanceResponseBody extends $tea.Model {
    cost?: number;
    errorCode?: string;
    errorMessage?: string;
    instanceId?: string;
    outputJson?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InvokeInstanceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InvokeInstanceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDataByPageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDataByPageRequest extends $tea.Model {
    appId?: string;
    dataModelId?: string;
    datetimeFilterField?: string;
    maxDatetime?: number;
    maxResults?: number;
    minDatetime?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDataByPageResponseBody extends $tea.Model {
    list?: PullDataByPageResponseBodyList[];
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDataByPageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PullDataByPageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDataByPkHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDataByPkRequest extends $tea.Model {
    appId?: string;
    primaryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDataByPkResponseBody extends $tea.Model {
    dataCreateAppId?: string;
    dataCreateAppType?: string;
    dataGmtCreate?: number;
    dataGmtModified?: number;
    dataModifiedAppId?: string;
    dataModifiedAppType?: string;
    jsonData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDataByPkResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PullDataByPkResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchActionsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchActionsRequest extends $tea.Model {
    connectorId?: string;
    connectorProviderCorpId?: string;
    integrationTypes?: string[];
    maxResults?: number;
    nextToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchActionsResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: SearchActionsResponseBodyList[];
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchActionsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchActionsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchConnectorsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchConnectorsRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchConnectorsResponseBody extends $tea.Model {
    hasMore?: boolean;
    list?: SearchConnectorsResponseBodyList[];
    nextToken?: string;
    totalCount?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchConnectorsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchConnectorsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncDataRequest extends $tea.Model {
    appId?: string;
    triggerDataList?: SyncDataRequestTriggerDataList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncDataResponseBody extends $tea.Model {
    list?: SyncDataResponseBodyList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SyncDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateActionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateActionRequest extends $tea.Model {
    actionInfo?: UpdateActionRequestActionInfo[];
    integratorFlag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateActionResponseBody extends $tea.Model {
    item?: UpdateActionResponseBodyItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateActionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateActionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConnectorHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConnectorRequest extends $tea.Model {
    connectorInfo?: UpdateConnectorRequestConnectorInfo[];
    integratorFlag?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConnectorResponseBody extends $tea.Model {
    item?: UpdateConnectorResponseBodyItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConnectorResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateConnectorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTriggerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTriggerRequest extends $tea.Model {
    integratorFlag?: string;
    triggerInfo?: UpdateTriggerRequestTriggerInfo[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTriggerResponseBody extends $tea.Model {
    item?: UpdateTriggerResponseBodyItem[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTriggerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateTriggerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateActionRequestActionInfoInputMappingConfig extends $tea.Model {
    customSchemaMapping?: string;
    rules?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateActionRequestActionInfoOutputDataRules extends $tea.Model {
    expectValue?: string;
    operate?: string;
    propertyPath?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateActionRequestActionInfoOutputMappingConfig extends $tea.Model {
    customSchemaMapping?: string;
    rules?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateActionRequestActionInfo extends $tea.Model {
    apiPath?: string;
    description?: string;
    dingConnectorId?: string;
    inputMappingConfig?: CreateActionRequestActionInfoInputMappingConfig;
    inputSchema?: string;
    integratorActionId?: string;
    integratorConnectorId?: string;
    name?: string;
    outputDataRules?: CreateActionRequestActionInfoOutputDataRules[];
    outputMappingConfig?: CreateActionRequestActionInfoOutputMappingConfig;
    outputSchema?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateActionResponseBodyItem extends $tea.Model {
    dingActionId?: string;
    dingConnectorId?: string;
    integratorActionId?: string;
    integratorConnectorId?: string;
    subErrCode?: string;
    subErrMsg?: string;
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConnectorRequestConnectorInfo extends $tea.Model {
    apiDomain?: string;
    apiSecret?: string;
    appId?: number;
    authValueEnv?: boolean;
    description?: string;
    domainEnv?: boolean;
    iconMediaId?: string;
    integratorConnectorId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateConnectorResponseBodyItem extends $tea.Model {
    dingConnectorId?: string;
    integratorConnectorId?: string;
    subErrCode?: string;
    subErrMsg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTriggerRequestTriggerInfo extends $tea.Model {
    description?: string;
    dingConnectorId?: string;
    inputSchema?: string;
    integratorConnectorId?: string;
    integratorTriggerId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTriggerResponseBodyItem extends $tea.Model {
    dingConnectorId?: string;
    dingTriggerId?: string;
    integratorConnectorId?: string;
    integratorTriggerId?: string;
    subErrCode?: string;
    subErrMsg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActionDetailResponseBodyIntegrationConfigCategoryNames extends $tea.Model {
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActionDetailResponseBodyIntegrationConfigProps extends $tea.Model {
    key?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetActionDetailResponseBodyIntegrationConfig extends $tea.Model {
    categoryNames?: GetActionDetailResponseBodyIntegrationConfigCategoryNames[];
    entityName?: string;
    props?: GetActionDetailResponseBodyIntegrationConfigProps[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PullDataByPageResponseBodyList extends $tea.Model {
    dataCreateAppId?: string;
    dataCreateAppType?: string;
    dataGmtCreate?: number;
    dataGmtModified?: number;
    dataModifiedAppId?: string;
    dataModifiedAppType?: string;
    jsonData?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchActionsResponseBodyList extends $tea.Model {
    authorityUrl?: string;
    authorized?: boolean;
    connectAssetUri?: string;
    connectorId?: string;
    description?: string;
    icon?: string;
    id?: string;
    integrationType?: string;
    name?: string;
    providerCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchConnectorsResponseBodyList extends $tea.Model {
    description?: string;
    icon?: string;
    id?: string;
    name?: string;
    providerCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncDataRequestTriggerDataList extends $tea.Model {
    action?: string;
    customTriggerId?: string;
    dataGmtCreate?: number;
    dataGmtModified?: number;
    integrationObject?: string;
    jsonData?: string;
    triggerCondition?: string;
    triggerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SyncDataResponseBodyList extends $tea.Model {
    bizPrimaryKey?: string;
    subErrCode?: string;
    subErrMsg?: string;
    success?: boolean;
    triggerId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateActionRequestActionInfoInputMappingConfig extends $tea.Model {
    customSchemaMapping?: string;
    rules?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateActionRequestActionInfoOutputDataRules extends $tea.Model {
    expectValue?: string;
    operate?: string;
    propertyPath?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateActionRequestActionInfoOutputMappingConfig extends $tea.Model {
    customSchemaMapping?: string;
    rules?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateActionRequestActionInfo extends $tea.Model {
    apiPath?: string;
    description?: string;
    dingActionId?: string;
    dingConnectorId?: string;
    inputMappingConfig?: UpdateActionRequestActionInfoInputMappingConfig;
    inputSchema?: string;
    integratorActionId?: string;
    integratorConnectorId?: string;
    name?: string;
    outputDataRules?: UpdateActionRequestActionInfoOutputDataRules[];
    outputMappingConfig?: UpdateActionRequestActionInfoOutputMappingConfig;
    outputSchema?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateActionResponseBodyItem extends $tea.Model {
    dingActionId?: string;
    dingConnectorId?: string;
    integratorActionId?: string;
    integratorConnectorId?: string;
    subErrCode?: string;
    subErrMsg?: string;
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConnectorRequestConnectorInfo extends $tea.Model {
    apiDomain?: string;
    apiSecret?: string;
    appId?: number;
    authValueEnv?: boolean;
    description?: string;
    dingConnectorId?: string;
    domainEnv?: boolean;
    iconMediaId?: string;
    integratorConnectorId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateConnectorResponseBodyItem extends $tea.Model {
    dingConnectorId?: string;
    integratorConnectorId?: string;
    subErrCode?: string;
    subErrMsg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTriggerRequestTriggerInfo extends $tea.Model {
    description?: string;
    dingConnectorId?: string;
    dingTriggerId?: string;
    inputSchema?: string;
    integratorConnectorId?: string;
    integratorTriggerId?: string;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateTriggerResponseBodyItem extends $tea.Model {
    dingConnectorId?: string;
    dingTriggerId?: string;
    integratorConnectorId?: string;
    integratorTriggerId?: string;
    subErrCode?: string;
    subErrMsg?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 创建执行动作
     *
     * @param request CreateActionRequest
     * @param headers CreateActionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateActionResponse
     */
    createActionWithOptions(request: CreateActionRequest, headers: CreateActionHeaders, runtime: $Util.RuntimeOptions): Promise<CreateActionResponse>;
    /**
     * @summary 创建执行动作
     *
     * @param request CreateActionRequest
     * @return CreateActionResponse
     */
    createAction(request: CreateActionRequest): Promise<CreateActionResponse>;
    /**
     * @summary 创建连接器
     *
     * @param request CreateConnectorRequest
     * @param headers CreateConnectorHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateConnectorResponse
     */
    createConnectorWithOptions(request: CreateConnectorRequest, headers: CreateConnectorHeaders, runtime: $Util.RuntimeOptions): Promise<CreateConnectorResponse>;
    /**
     * @summary 创建连接器
     *
     * @param request CreateConnectorRequest
     * @return CreateConnectorResponse
     */
    createConnector(request: CreateConnectorRequest): Promise<CreateConnectorResponse>;
    /**
     * @summary 创建一个用于运行执行动作/集成流的可调用实例
     *
     * @param request CreateInvocableInstanceRequest
     * @param headers CreateInvocableInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateInvocableInstanceResponse
     */
    createInvocableInstanceWithOptions(request: CreateInvocableInstanceRequest, headers: CreateInvocableInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateInvocableInstanceResponse>;
    /**
     * @summary 创建一个用于运行执行动作/集成流的可调用实例
     *
     * @param request CreateInvocableInstanceRequest
     * @return CreateInvocableInstanceResponse
     */
    createInvocableInstance(request: CreateInvocableInstanceRequest): Promise<CreateInvocableInstanceResponse>;
    /**
     * @summary 创建触发器
     *
     * @param request CreateTriggerRequest
     * @param headers CreateTriggerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateTriggerResponse
     */
    createTriggerWithOptions(request: CreateTriggerRequest, headers: CreateTriggerHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTriggerResponse>;
    /**
     * @summary 创建触发器
     *
     * @param request CreateTriggerRequest
     * @return CreateTriggerResponse
     */
    createTrigger(request: CreateTriggerRequest): Promise<CreateTriggerResponse>;
    /**
     * @summary 获取执行动作详情
     *
     * @param request GetActionDetailRequest
     * @param headers GetActionDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetActionDetailResponse
     */
    getActionDetailWithOptions(request: GetActionDetailRequest, headers: GetActionDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetActionDetailResponse>;
    /**
     * @summary 获取执行动作详情
     *
     * @param request GetActionDetailRequest
     * @return GetActionDetailResponse
     */
    getActionDetail(request: GetActionDetailRequest): Promise<GetActionDetailResponse>;
    /**
     * @summary 调用执行实例
     *
     * @param request InvokeInstanceRequest
     * @param headers InvokeInstanceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InvokeInstanceResponse
     */
    invokeInstanceWithOptions(request: InvokeInstanceRequest, headers: InvokeInstanceHeaders, runtime: $Util.RuntimeOptions): Promise<InvokeInstanceResponse>;
    /**
     * @summary 调用执行实例
     *
     * @param request InvokeInstanceRequest
     * @return InvokeInstanceResponse
     */
    invokeInstance(request: InvokeInstanceRequest): Promise<InvokeInstanceResponse>;
    /**
     * @summary 分页拉取连接器主数据
     *
     * @param request PullDataByPageRequest
     * @param headers PullDataByPageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PullDataByPageResponse
     */
    pullDataByPageWithOptions(request: PullDataByPageRequest, headers: PullDataByPageHeaders, runtime: $Util.RuntimeOptions): Promise<PullDataByPageResponse>;
    /**
     * @summary 分页拉取连接器主数据
     *
     * @param request PullDataByPageRequest
     * @return PullDataByPageResponse
     */
    pullDataByPage(request: PullDataByPageRequest): Promise<PullDataByPageResponse>;
    /**
     * @summary 通过业务主键拉取单条连接器主数据
     *
     * @param request PullDataByPkRequest
     * @param headers PullDataByPkHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PullDataByPkResponse
     */
    pullDataByPkWithOptions(dataModelId: string, request: PullDataByPkRequest, headers: PullDataByPkHeaders, runtime: $Util.RuntimeOptions): Promise<PullDataByPkResponse>;
    /**
     * @summary 通过业务主键拉取单条连接器主数据
     *
     * @param request PullDataByPkRequest
     * @return PullDataByPkResponse
     */
    pullDataByPk(dataModelId: string, request: PullDataByPkRequest): Promise<PullDataByPkResponse>;
    /**
     * @summary 搜索执行动作
     *
     * @param request SearchActionsRequest
     * @param headers SearchActionsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchActionsResponse
     */
    searchActionsWithOptions(request: SearchActionsRequest, headers: SearchActionsHeaders, runtime: $Util.RuntimeOptions): Promise<SearchActionsResponse>;
    /**
     * @summary 搜索执行动作
     *
     * @param request SearchActionsRequest
     * @return SearchActionsResponse
     */
    searchActions(request: SearchActionsRequest): Promise<SearchActionsResponse>;
    /**
     * @summary 搜索连接器
     *
     * @param request SearchConnectorsRequest
     * @param headers SearchConnectorsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchConnectorsResponse
     */
    searchConnectorsWithOptions(request: SearchConnectorsRequest, headers: SearchConnectorsHeaders, runtime: $Util.RuntimeOptions): Promise<SearchConnectorsResponse>;
    /**
     * @summary 搜索连接器
     *
     * @param request SearchConnectorsRequest
     * @return SearchConnectorsResponse
     */
    searchConnectors(request: SearchConnectorsRequest): Promise<SearchConnectorsResponse>;
    /**
     * @summary 同步连接器数据
     *
     * @param request SyncDataRequest
     * @param headers SyncDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SyncDataResponse
     */
    syncDataWithOptions(request: SyncDataRequest, headers: SyncDataHeaders, runtime: $Util.RuntimeOptions): Promise<SyncDataResponse>;
    /**
     * @summary 同步连接器数据
     *
     * @param request SyncDataRequest
     * @return SyncDataResponse
     */
    syncData(request: SyncDataRequest): Promise<SyncDataResponse>;
    /**
     * @summary 更新执行动作信息
     *
     * @param request UpdateActionRequest
     * @param headers UpdateActionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateActionResponse
     */
    updateActionWithOptions(request: UpdateActionRequest, headers: UpdateActionHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateActionResponse>;
    /**
     * @summary 更新执行动作信息
     *
     * @param request UpdateActionRequest
     * @return UpdateActionResponse
     */
    updateAction(request: UpdateActionRequest): Promise<UpdateActionResponse>;
    /**
     * @summary 更新连接器信息
     *
     * @param request UpdateConnectorRequest
     * @param headers UpdateConnectorHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateConnectorResponse
     */
    updateConnectorWithOptions(request: UpdateConnectorRequest, headers: UpdateConnectorHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateConnectorResponse>;
    /**
     * @summary 更新连接器信息
     *
     * @param request UpdateConnectorRequest
     * @return UpdateConnectorResponse
     */
    updateConnector(request: UpdateConnectorRequest): Promise<UpdateConnectorResponse>;
    /**
     * @summary 更新触发事件信息
     *
     * @param request UpdateTriggerRequest
     * @param headers UpdateTriggerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateTriggerResponse
     */
    updateTriggerWithOptions(request: UpdateTriggerRequest, headers: UpdateTriggerHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateTriggerResponse>;
    /**
     * @summary 更新触发事件信息
     *
     * @param request UpdateTriggerRequest
     * @return UpdateTriggerResponse
     */
    updateTrigger(request: UpdateTriggerRequest): Promise<UpdateTriggerResponse>;
}
