/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ActivateDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ActivateDeviceRequest extends $tea.Model {
    licenseKey?: string;
    model?: string;
    name?: string;
    sn?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ActivateDeviceResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ActivateDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ActivateDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCompetitionRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCompetitionRecordRequest extends $tea.Model {
    competitionCode?: string;
    groupTemplateCode?: string;
    joinGroup?: boolean;
    participantName?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCompetitionRecordResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddCompetitionRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddCompetitionRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceRequest extends $tea.Model {
    merchantId?: string;
    model?: string;
    name?: string;
    scene?: number;
    sn?: string;
    status?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceResponseBody extends $tea.Model {
    corpId?: string;
    id?: number;
    merchantId?: string;
    sn?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSchoolConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSchoolConfigRequest extends $tea.Model {
    operatorId?: string;
    operatorName?: string;
    temperatureUpLimit?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSchoolConfigResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddSchoolConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddSchoolConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignClassHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignClassRequest extends $tea.Model {
    classId?: number;
    isFinish?: boolean;
    operator?: string;
    studentId?: number;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignClassResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AssignClassResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AssignClassResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequest extends $tea.Model {
    cardBizCode?: string;
    data?: BatchCreateRequestData;
    identifier?: string;
    jsVersion?: number;
    sourceType?: string;
    userid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateResponseBody extends $tea.Model {
    result?: BatchCreateResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchCreateResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWRequest extends $tea.Model {
    attributes?: string;
    bizCode?: string;
    courseName?: string;
    hwContent?: string;
    hwDeadline?: number;
    hwDeadlineOpen?: string;
    hwMedia?: string;
    hwPhoto?: string;
    hwTitle?: string;
    hwType?: string;
    hwVideo?: string;
    identifier?: string;
    openSelectItemList?: BatchOrgCreateHWRequestOpenSelectItemList[];
    scheduledRelease?: string;
    scheduledTime?: string;
    status?: string;
    targetRole?: string;
    teacherName?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWResponseBody extends $tea.Model {
    result?: BatchOrgCreateHWResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: BatchOrgCreateHWResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderRequest extends $tea.Model {
    faceId?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderResponseBody extends $tea.Model {
    needRetry?: boolean;
    tradeAction?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CancelOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelSnsOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelSnsOrderRequest extends $tea.Model {
    alipayAppId?: string;
    merchantId?: string;
    orderNo?: string;
    signature?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelSnsOrderResponseBody extends $tea.Model {
    alipayAppId?: string;
    merchantId?: string;
    merchantOrderNo?: string;
    orderNo?: string;
    payStatus?: number;
    refundStatus?: number;
    totalAmount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelSnsOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CancelSnsOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelUserOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelUserOrderRequest extends $tea.Model {
    alipayAppId?: string;
    merchantId?: string;
    orderNo?: string;
    signature?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelUserOrderResponseBody extends $tea.Model {
    alipayAppId?: string;
    merchantId?: string;
    merchantOrderNo?: string;
    orderNo?: string;
    payStatus?: number;
    refundStatus?: number;
    totalAmount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CancelUserOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CancelUserOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardBatchQueryCardsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardBatchQueryCardsRequest extends $tea.Model {
    cardBizCode?: string;
    cardIds?: number[];
    sourceType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardBatchQueryCardsResponseBody extends $tea.Model {
    result?: CardBatchQueryCardsResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardBatchQueryCardsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CardBatchQueryCardsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardDeleteCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardDeleteCardRequest extends $tea.Model {
    cardBizCode?: string;
    cardBizId?: string;
    cardId?: number;
    sourceType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardDeleteCardResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardDeleteCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CardDeleteCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardEndCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardEndCardRequest extends $tea.Model {
    cardBizCode?: string;
    cardBizId?: string;
    cardId?: number;
    sourceType?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardEndCardResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardEndCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CardEndCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardRequest extends $tea.Model {
    cardId?: number;
    sourceType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardResponseBody extends $tea.Model {
    result?: CardGetCardResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CardGetCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardFinishProgressHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardFinishProgressRequest extends $tea.Model {
    cardBizCode?: string;
    cardBizId?: string;
    cardId?: number;
    sourceType?: string;
    studentId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardFinishProgressResponseBody extends $tea.Model {
    result?: CardGetCardFinishProgressResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardFinishProgressResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CardGetCardFinishProgressResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardQueryCardFeedsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardQueryCardFeedsRequest extends $tea.Model {
    bizType?: number;
    cardBizCode?: string;
    cardBizId?: string;
    cardId?: number;
    count?: number;
    cursor?: number;
    feedType?: number;
    needFinishProcess?: boolean;
    sourceType?: string;
    studentId?: string;
    subBizId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardQueryCardFeedsResponseBody extends $tea.Model {
    result?: CardQueryCardFeedsResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardQueryCardFeedsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CardQueryCardFeedsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckRestrictionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckRestrictionRequest extends $tea.Model {
    actualAmount?: number;
    faceId?: string;
    scene?: number;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckRestrictionResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CheckRestrictionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CheckRestrictionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointRequest extends $tea.Model {
    amount?: number;
    bizId?: string;
    description?: string;
    productCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ConsumePointResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ConsumePointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CourseSchedulingComplimentNoticeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CourseSchedulingComplimentNoticeRequest extends $tea.Model {
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CourseSchedulingComplimentNoticeResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CourseSchedulingComplimentNoticeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CourseSchedulingComplimentNoticeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppOrderRequest extends $tea.Model {
    actualAmount?: number;
    alipayAppId?: string;
    bizCode?: number;
    detailList?: CreateAppOrderRequestDetailList[];
    labelAmount?: number;
    merchantId?: string;
    merchantOrderNo?: string;
    outerUserId?: string;
    signature?: string;
    subject?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppOrderResponseBody extends $tea.Model {
    actualAmount?: number;
    alipayAppId?: string;
    body?: string;
    merchantId?: string;
    merchantOrderNo?: string;
    orderNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateAppOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassRequest extends $tea.Model {
    customClass?: CreateCustomClassRequestCustomClass;
    operator?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassResponseBody extends $tea.Model {
    result?: CreateCustomClassResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCustomClassResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptRequest extends $tea.Model {
    customDept?: CreateCustomDeptRequestCustomDept;
    operator?: string;
    superId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptResponseBody extends $tea.Model {
    result?: CreateCustomDeptResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCustomDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEduAssetSpaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEduAssetSpaceRequest extends $tea.Model {
    bizCode?: string;
    spaceDesc?: string;
    spaceIcon?: string;
    spaceName?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEduAssetSpaceResponseBody extends $tea.Model {
    createTimeMillis?: number;
    modifyTimeMillis?: number;
    permissionMode?: string;
    quota?: number;
    spaceId?: string;
    spaceName?: string;
    spaceType?: string;
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateEduAssetSpaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateEduAssetSpaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFulfilRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFulfilRecordRequest extends $tea.Model {
    bizTime?: number;
    extInfo?: string;
    faceId?: string;
    scene?: number;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFulfilRecordResponseBody extends $tea.Model {
    successInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateFulfilRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateFulfilRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlRequest extends $tea.Model {
    authCode?: string;
    targetCorpId?: string;
    targetOperator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlResponseBody extends $tea.Model {
    result?: CreateInviteUrlResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateInviteUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateItemHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateItemRequest extends $tea.Model {
    description?: string;
    effectType?: number;
    endTime?: number;
    merchantId?: string;
    name?: string;
    optUser?: string;
    periodType?: number;
    price?: number;
    scene?: number;
    startTime?: number;
    status?: number;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateItemResponseBody extends $tea.Model {
    corpId?: string;
    id?: number;
    merchantId?: string;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateItemResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateItemResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderRequest extends $tea.Model {
    actualAmount?: number;
    createTime?: number;
    detailList?: CreateOrderRequestDetailList[];
    faceId?: string;
    ftoken?: string;
    signature?: string;
    sn?: string;
    terminalParams?: string;
    timestamp?: number;
    totalAmount?: number;
    userId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderResponseBody extends $tea.Model {
    orderNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowRequest extends $tea.Model {
    actualAmount?: number;
    alipayUid?: string;
    createTime?: number;
    detailList?: CreateOrderFlowRequestDetailList[];
    faceId?: string;
    guardianUserId?: string;
    merchantId?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    totalAmount?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateOrderFlowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePhysicalClassroomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePhysicalClassroomRequest extends $tea.Model {
    classroomBuilding?: string;
    classroomCampus?: string;
    classroomFloor?: string;
    classroomName?: string;
    classroomNumber?: string;
    directBroadcast?: string;
    ext?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePhysicalClassroomResponseBody extends $tea.Model {
    classroomId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreatePhysicalClassroomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreatePhysicalClassroomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRefundFlowHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRefundFlowRequest extends $tea.Model {
    faceId?: string;
    operatorId?: string;
    operatorName?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRefundFlowResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRefundFlowResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateRefundFlowResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseRequest extends $tea.Model {
    attendParticipants?: CreateRemoteClassCourseRequestAttendParticipants[];
    authCode?: string;
    courseName?: string;
    endTime?: number;
    startTime?: number;
    teachingParticipant?: CreateRemoteClassCourseRequestTeachingParticipant;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseResponseBody extends $tea.Model {
    result?: CreateRemoteClassCourseResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequest extends $tea.Model {
    ext?: string;
    sectionConfigs?: CreateSectionConfigRequestSectionConfigs[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSectionConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSnsAppOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSnsAppOrderRequest extends $tea.Model {
    actualAmount?: number;
    alipayAppId?: string;
    bizCode?: number;
    detailList?: CreateSnsAppOrderRequestDetailList[];
    labelAmount?: number;
    merchantId?: string;
    merchantOrderNo?: string;
    signature?: string;
    subject?: string;
    timestamp?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSnsAppOrderResponseBody extends $tea.Model {
    actualAmount?: number;
    alipayAppId?: string;
    body?: string;
    merchantId?: string;
    merchantOrderNo?: string;
    orderNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSnsAppOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateSnsAppOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStsTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStsTokenRequest extends $tea.Model {
    deviceSn?: string;
    stsType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStsTokenResponseBody extends $tea.Model {
    accessKeyId?: string;
    accessKeySecret?: string;
    expiration?: string;
    extInfo?: string;
    securityToken?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateStsTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateStsTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTokenHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTokenRequest extends $tea.Model {
    sn?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTokenResponseBody extends $tea.Model {
    accessKeyId?: string;
    accessKeySecret?: string;
    expiration?: string;
    extInfo?: string;
    securityToken?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateTokenResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateTokenResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequest extends $tea.Model {
    courseGroupIntroduce?: string;
    courseGroupName?: string;
    courserGroupItemModels?: CreateUniversityCourseGroupRequestCourserGroupItemModels[];
    ext?: string;
    isvCourseGroupCode?: string;
    periodCode?: string;
    schoolYear?: string;
    semester?: number;
    subjectName?: string;
    teacherInfos?: CreateUniversityCourseGroupRequestTeacherInfos[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupResponseBody extends $tea.Model {
    courseGroupInfo?: CreateUniversityCourseGroupResponseBodyCourseGroupInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityStudentRequest extends $tea.Model {
    classId?: number;
    gender?: string;
    identityNumber?: string;
    mobile?: string;
    name?: string;
    studentNumber?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityStudentResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityStudentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateUniversityStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityTeacherHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityTeacherRequest extends $tea.Model {
    classId?: number;
    opUserId?: string;
    role?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityTeacherResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityTeacherResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateUniversityTeacherResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeactivateDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeactivateDeviceRequest extends $tea.Model {
    model?: string;
    sn?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeactivateDeviceResponseBody extends $tea.Model {
    activateTimes?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeactivateDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeactivateDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeductPointHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeductPointRequest extends $tea.Model {
    bizId?: string;
    deductDesc?: string;
    deductDetailUrl?: string;
    deductNum?: number;
    pointType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeductPointResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeductPointResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeductPointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeptHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeptRequest extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeptResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeptResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDeptResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceRequest extends $tea.Model {
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceOrgHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceOrgRequest extends $tea.Model {
    authCode?: string;
    deviceCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceOrgResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteDeviceOrgResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteDeviceOrgResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGuardianHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGuardianRequest extends $tea.Model {
    operator?: string;
    stuId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGuardianResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteGuardianResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteGuardianResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgRelationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgRelationRequest extends $tea.Model {
    authCode?: string;
    targetCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgRelationResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteOrgRelationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteOrgRelationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePhysicalClassroomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePhysicalClassroomRequest extends $tea.Model {
    classroomId?: number;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePhysicalClassroomResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeletePhysicalClassroomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeletePhysicalClassroomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRemoteClassCourseRequest extends $tea.Model {
    authCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRemoteClassCourseResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteRemoteClassCourseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudentRequest extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudentResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteStudentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeacherHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeacherRequest extends $tea.Model {
    adviser?: number;
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeacherResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteTeacherResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteTeacherResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityCourseGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityCourseGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityStudentRequest extends $tea.Model {
    classId?: number;
    opUserId?: string;
    studentUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityStudentResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityStudentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteUniversityStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityTeacherHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityTeacherRequest extends $tea.Model {
    classId?: number;
    opUserId?: string;
    role?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityTeacherResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteUniversityTeacherResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteUniversityTeacherResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceHeartbeatHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceHeartbeatRequest extends $tea.Model {
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceHeartbeatResponseBody extends $tea.Model {
    command?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeviceHeartbeatResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeviceHeartbeatResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduFindUserRolesByUserIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduFindUserRolesByUserIdRequest extends $tea.Model {
    classId?: number;
    corpId?: string;
    hasOrgRole?: boolean;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduFindUserRolesByUserIdResponseBody extends $tea.Model {
    result?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduFindUserRolesByUserIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EduFindUserRolesByUserIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduListUserByFromUserIdsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduListUserByFromUserIdsRequest extends $tea.Model {
    classId?: number;
    corpId?: string;
    guardianUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduListUserByFromUserIdsResponseBody extends $tea.Model {
    result?: EduListUserByFromUserIdsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduListUserByFromUserIdsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EduListUserByFromUserIdsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListResponseBody extends $tea.Model {
    result?: EduTeacherListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EduTeacherListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseRequest extends $tea.Model {
    courseCode?: string;
    ext?: string;
    isvCode?: string;
    livePlayInfoList?: EndCourseRequestLivePlayInfoList[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseResponseBody extends $tea.Model {
    universityCourseCommonResponse?: EndCourseResponseBodyUniversityCourseCommonResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EndCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBindChildInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBindChildInfoRequest extends $tea.Model {
    schoolCorpId?: string;
    studentUserId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBindChildInfoResponseBody extends $tea.Model {
    childUserId?: string;
    currentUserId?: string;
    familyCorpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBindChildInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetBindChildInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultChildHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultChildResponseBody extends $tea.Model {
    avatar?: string;
    bindStudents?: GetDefaultChildResponseBodyBindStudents[];
    grade?: number;
    name?: string;
    nick?: string;
    period?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultChildResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDefaultChildResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEduUserIdentityHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEduUserIdentityRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEduUserIdentityResponseBody extends $tea.Model {
    data?: GetEduUserIdentityResponseBodyData;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEduUserIdentityResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetEduUserIdentityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCourseDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCourseDetailResponseBody extends $tea.Model {
    courseId?: string;
    courseType?: number;
    coverUrl?: string;
    introduction?: string;
    pushModel?: GetOpenCourseDetailResponseBodyPushModel;
    startTime?: number;
    teacherId?: string;
    teacherName?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCourseDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOpenCourseDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesResponseBody extends $tea.Model {
    courseList?: GetOpenCoursesResponseBodyCourseList[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetOpenCoursesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointActionRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointActionRecordRequest extends $tea.Model {
    body?: GetPointActionRecordRequestBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointActionRecordShrinkRequest extends $tea.Model {
    bodyShrink?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointActionRecordResponseBody extends $tea.Model {
    result?: GetPointActionRecordResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointActionRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPointActionRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoRequest extends $tea.Model {
    pointType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoResponseBody extends $tea.Model {
    result?: GetPointInfoResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPointInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseRequest extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBody extends $tea.Model {
    result?: GetRemoteClassCourseResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRoleMembersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRoleMembersResponseBody extends $tea.Model {
    result?: GetShareRoleMembersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRoleMembersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetShareRoleMembersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRolesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRolesResponseBody extends $tea.Model {
    result?: GetShareRolesResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRolesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetShareRolesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskListRequest extends $tea.Model {
    operator?: string;
    pageNumber?: number;
    pageSize?: number;
    taskYear?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskListResponseBody extends $tea.Model {
    count?: number;
    taskList?: GetTaskListResponseBodyTaskList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTaskListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskStudentListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskStudentListRequest extends $tea.Model {
    operator?: string;
    pageNumber?: number;
    pageSize?: number;
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskStudentListResponseBody extends $tea.Model {
    count?: number;
    studentList?: GetTaskStudentListResponseBodyStudentList[];
    taskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskStudentListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTaskStudentListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequest extends $tea.Model {
    courses?: InitCoursesOfClassRequestCourses[];
    sectionConfig?: InitCoursesOfClassRequestSectionConfig;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InitCoursesOfClassResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDeviceRequest extends $tea.Model {
    encryptPubKey?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDeviceResponseBody extends $tea.Model {
    successInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InitDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitVPaasDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitVPaasDeviceRequest extends $tea.Model {
    sn?: string;
    timestamp?: number;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitVPaasDeviceResponseBody extends $tea.Model {
    pspk?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitVPaasDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InitVPaasDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequest extends $tea.Model {
    end?: InsertSectionConfigRequestEnd;
    scheduleName?: string;
    sectionModels?: InsertSectionConfigRequestSectionModels[];
    start?: InsertSectionConfigRequestStart;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: InsertSectionConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvDataWriteHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvDataWriteRequest extends $tea.Model {
    objectCode?: string;
    rowValueList?: IsvDataWriteRequestRowValueList[][];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvDataWriteResponseBody extends $tea.Model {
    result?: IsvDataWriteResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvDataWriteResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IsvDataWriteResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvMetadataQueryHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvMetadataQueryRequest extends $tea.Model {
    objectCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvMetadataQueryResponseBody extends $tea.Model {
    result?: IsvMetadataQueryResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvMetadataQueryResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: IsvMetadataQueryResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderRequest extends $tea.Model {
    createTimeEnd?: number;
    createTimeStart?: number;
    merchantId?: string;
    orderNo?: string;
    pageNumber?: number;
    pageSize?: number;
    scene?: number;
    status?: number;
    tradeNo?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderResponseBody extends $tea.Model {
    list?: ListOrderResponseBodyList[];
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ListOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveStudentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveStudentRequest extends $tea.Model {
    operator?: string;
    originClassId?: number;
    targetClassId?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveStudentResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class MoveStudentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: MoveStudentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQueryDevicesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQueryDevicesRequest extends $tea.Model {
    maxResults?: number;
    nextToken?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQueryDevicesResponseBody extends $tea.Model {
    list?: PageQueryDevicesResponseBodyList[];
    nextToken?: string;
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQueryDevicesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PageQueryDevicesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PayOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PayOrderRequest extends $tea.Model {
    faceId?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    userId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PayOrderResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PayOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PayOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusRequest extends $tea.Model {
    courseCode?: string;
    ext?: string;
    isvCode?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusResponseBody extends $tea.Model {
    universityPollingCourseStatusResponse?: PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PollingConfirmStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreDialHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreDialRequest extends $tea.Model {
    callerUserId?: string;
    receiverUserId?: string;
    sn?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreDialResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PreDialResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PreDialResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProvidePointHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProvidePointRequest extends $tea.Model {
    actionCode?: string;
    bizId?: string;
    pointType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProvidePointResponseBody extends $tea.Model {
    result?: ProvidePointResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProvidePointResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ProvidePointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleRequest extends $tea.Model {
    classIds?: number[];
    opUserId?: string;
    periodCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleShrinkRequest extends $tea.Model {
    classIdsShrink?: string;
    opUserId?: string;
    periodCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponseBody extends $tea.Model {
    result?: QueryAllSubjectsFromClassScheduleResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAllSubjectsFromClassScheduleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleRequest extends $tea.Model {
    sectionIndexList?: number[];
    subscriberIds?: string[];
    endTime?: number;
    opUserId?: string;
    startTime?: number;
    subscriberType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBody extends $tea.Model {
    config?: QueryClassScheduleResponseBodyConfig;
    courseDTOS?: QueryClassScheduleResponseBodyCourseDTOS[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryClassScheduleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolRequest extends $tea.Model {
    endTime?: number;
    opUserId?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponseBody extends $tea.Model {
    result?: QueryClassScheduleByTimeSchoolResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryClassScheduleByTimeSchoolResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigRequest extends $tea.Model {
    classIds?: number[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigShrinkRequest extends $tea.Model {
    classIdsShrink?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBody extends $tea.Model {
    result?: QueryClassScheduleConfigResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryClassScheduleConfigResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceRequest extends $tea.Model {
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponseBody extends $tea.Model {
    gmtExpiry?: number;
    model?: string;
    name?: string;
    sn?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdRequest extends $tea.Model {
    operator?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdResponseBody extends $tea.Model {
    result?: QueryDeviceListByCorpIdResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDeviceListByCorpIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesRequest extends $tea.Model {
    bizCode?: string;
    maxResults?: number;
    nextToken?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesResponseBody extends $tea.Model {
    hasMore?: boolean;
    nextToken?: string;
    spaces?: QueryEduAssetSpacesResponseBodySpaces[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryEduAssetSpacesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupIdHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupIdRequest extends $tea.Model {
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupIdResponseBody extends $tea.Model {
    corpId?: string;
    groupId?: string;
    merchantId?: string;
    merchantName?: string;
    name?: string;
    pid?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupIdResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupIdResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrderRequest extends $tea.Model {
    alipayAppId?: string;
    merchantId?: string;
    orderNo?: string;
    signature?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrderResponseBody extends $tea.Model {
    actualAmount?: number;
    alipayAppId?: string;
    closeTime?: string;
    closeTimestamp?: number;
    createTime?: string;
    createTimestamp?: number;
    labelAmount?: number;
    merchantId?: string;
    merchantMergeOrderNo?: string;
    merchantOrderNo?: string;
    orderNo?: string;
    orderType?: string;
    outerUserId?: string;
    payLogonId?: string;
    payStatus?: number;
    payTime?: string;
    payTimestamp?: number;
    payType?: string;
    refundAmount?: number;
    refundStatus?: number;
    refundTime?: string;
    refundTimestamp?: number;
    subject?: string;
    tradeNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListRequest extends $tea.Model {
    operator?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListResponseBody extends $tea.Model {
    result?: QueryOrgRelationListResponseBodyResult[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOrgRelationListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyRequest extends $tea.Model {
    isvCode?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyResponseBody extends $tea.Model {
    universitySecretKeyInfo?: QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOrgSecretKeyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTypeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTypeResponseBody extends $tea.Model {
    orgType?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgTypeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOrgTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayResultHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayResultRequest extends $tea.Model {
    faceId?: string;
    orderNo?: string;
    signature?: string;
    sn?: string;
    timestamp?: number;
    userId?: string;
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayResultResponseBody extends $tea.Model {
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPayResultResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryPayResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomRequest extends $tea.Model {
    classroomId?: number;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomResponseBody extends $tea.Model {
    result?: QueryPhysicalClassroomResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryPhysicalClassroomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPurchaseInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPurchaseInfoRequest extends $tea.Model {
    merchantId?: string;
    scene?: number;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPurchaseInfoResponseBody extends $tea.Model {
    corpId?: string;
    merchantId?: string;
    name?: string;
    scene?: number;
    status?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPurchaseInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryPurchaseInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseRequest extends $tea.Model {
    endTime?: number;
    operator?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponseBody extends $tea.Model {
    result?: QueryRemoteClassCourseResponseBodyResult[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    sn?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceResponseBody extends $tea.Model {
    corpId?: string;
    hasMore?: boolean;
    userFaceList?: QuerySchoolUserFaceResponseBodyUserFaceList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySchoolUserFaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySnsOrderHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySnsOrderRequest extends $tea.Model {
    alipayAppId?: string;
    merchantId?: string;
    orderNo?: string;
    signature?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySnsOrderResponseBody extends $tea.Model {
    actualAmount?: number;
    alipayAppId?: string;
    closeTime?: string;
    closeTimestamp?: number;
    createTime?: string;
    createTimestamp?: number;
    labelAmount?: number;
    merchantId?: string;
    merchantMergeOrderNo?: string;
    merchantOrderNo?: string;
    orderNo?: string;
    orderType?: string;
    outerUserId?: string;
    payLogonId?: string;
    payStatus?: number;
    payTime?: string;
    payTimestamp?: number;
    payType?: string;
    refundAmount?: number;
    refundStatus?: number;
    refundTime?: string;
    refundTimestamp?: number;
    subject?: string;
    tradeNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySnsOrderResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySnsOrderResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataRequest extends $tea.Model {
    sectionIndexList?: number[];
    teacherUserIds?: string[];
    endTime?: number;
    opUserId?: string;
    startTime?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataResponseBody extends $tea.Model {
    result?: QueryStatisticsDataResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryStatisticsDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersRequest extends $tea.Model {
    classIds?: number[];
    opUserId?: string;
    subjectCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersResponseBody extends $tea.Model {
    result?: QuerySubjectTeachersResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySubjectTeachersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsRequest extends $tea.Model {
    classIds?: number[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsResponseBody extends $tea.Model {
    result?: QueryTeachSubjectsResponseBodyResult[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryTeachSubjectsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBody extends $tea.Model {
    universityCourseGroupInfo?: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFaceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFaceRequest extends $tea.Model {
    faceId?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFaceResponseBody extends $tea.Model {
    corpId?: string;
    faceId?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserFaceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserFaceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserPayInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserPayInfoRequest extends $tea.Model {
    faceId?: string;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserPayInfoResponseBody extends $tea.Model {
    signNo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUserPayInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryUserPayInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceRequest extends $tea.Model {
    merchantId?: string;
    sn?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceResponseBody extends $tea.Model {
    success?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RemoveDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RemoveDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceLogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceLogRequest extends $tea.Model {
    mediaId?: string;
    sn?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceLogResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceLogResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ReportDeviceLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceUseLogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceUseLogRequest extends $tea.Model {
    action?: string;
    orderNo?: string;
    sn?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceUseLogResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ReportDeviceUseLogResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ReportDeviceUseLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackDeductPointHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackDeductPointRequest extends $tea.Model {
    bizId?: string;
    pointType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackDeductPointResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RollbackDeductPointResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: RollbackDeductPointResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveClassLearningDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveClassLearningDataRequest extends $tea.Model {
    assignNum?: number;
    assignStudentUserIds?: string[];
    bizId?: string;
    bizType?: string;
    corpId?: string;
    deptId?: number;
    fileSuffix?: string;
    generatedTime?: number;
    questionNum?: number;
    questionPictureNum?: number;
    standardAnswerPictureNum?: number;
    subjectCode?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveClassLearningDataResponseBody extends $tea.Model {
    result?: SaveClassLearningDataResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveClassLearningDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveClassLearningDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStudentLearningDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStudentLearningDataRequest extends $tea.Model {
    assignNum?: number;
    bizId?: string;
    bizType?: string;
    corpId?: string;
    correctNum?: number;
    deptId?: number;
    fileSuffix?: string;
    generatedTime?: number;
    questionNum?: number;
    studentUserId?: string;
    subjectCode?: string;
    submitNum?: number;
    wrongQuestions?: SaveStudentLearningDataRequestWrongQuestions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStudentLearningDataResponseBody extends $tea.Model {
    result?: SaveStudentLearningDataResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStudentLearningDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SaveStudentLearningDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersRequest extends $tea.Model {
    nameKeyword?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersResponseBody extends $tea.Model {
    users?: SearchTeachersResponseBodyUsers[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchTeachersResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageRequest extends $tea.Model {
    bizId?: string;
    fromUserId?: string;
    sn?: string;
    toUserIdList?: string[];
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponseBody extends $tea.Model {
    successInfo?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendMessageResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendMessageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseRequest extends $tea.Model {
    courseCode?: string;
    ext?: string;
    isvCode?: string;
    livePlayInfoList?: StartCourseRequestLivePlayInfoList[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseResponseBody extends $tea.Model {
    universityCourseCommonResponse?: StartCourseResponseBodyUniversityCourseCommonResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StartCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareRequest extends $tea.Model {
    courseDate?: string;
    courseGroupCode?: string;
    deviceId?: string;
    ext?: string;
    isvCode?: string;
    liveCoverImage?: string;
    sectionIndex?: number[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareResponseBody extends $tea.Model {
    universityCourseCommonResponse?: StartCoursePrepareResponseBodyUniversityCourseCommonResponse;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StartCoursePrepareResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    studentUserIds?: string[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeUniversityCourseGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeUniversityCourseGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SubscribeUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    studentUserIds?: string[];
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeUniversityCourseGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UnsubscribeUniversityCourseGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UnsubscribeUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequest extends $tea.Model {
    courses?: UpdateCoursesOfClassRequestCourses[];
    sectionConfig?: UpdateCoursesOfClassRequestSectionConfig;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateCoursesOfClassResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePhysicalClassroomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePhysicalClassroomRequest extends $tea.Model {
    classroomBuilding?: string;
    classroomCampus?: string;
    classroomFloor?: string;
    classroomId?: number;
    classroomName?: string;
    classroomNumber?: string;
    directBroadcast?: string;
    ext?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePhysicalClassroomResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdatePhysicalClassroomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdatePhysicalClassroomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseRequest extends $tea.Model {
    attendParticipants?: UpdateRemoteClassCourseRequestAttendParticipants[];
    authCode?: string;
    courseCode?: string;
    courseName?: string;
    endTime?: number;
    startTime?: number;
    teachingParticipant?: UpdateRemoteClassCourseRequestTeachingParticipant;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRemoteClassCourseResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassDeviceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassDeviceRequest extends $tea.Model {
    authCode?: string;
    deviceCode?: string;
    deviceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassDeviceResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassDeviceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateRemoteClassDeviceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupRequest extends $tea.Model {
    courseGroupCode?: string;
    courseGroupIntroduce?: string;
    courseGroupName?: string;
    courserGroupItemModels?: UpdateUniversityCourseGroupRequestCourserGroupItemModels[];
    ext?: string;
    opUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateUniversityCourseGroupResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadLearningDataCallbackHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadLearningDataCallbackRequest extends $tea.Model {
    bizId?: string;
    bizType?: string;
    corpId?: string;
    deptId?: number;
    generatedTime?: number;
    studentUserId?: string;
    subjectCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadLearningDataCallbackResponseBody extends $tea.Model {
    result?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UploadLearningDataCallbackResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UploadLearningDataCallbackResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VPaasProxyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VPaasProxyRequest extends $tea.Model {
    actionCode?: string;
    params?: string;
    publicKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VPaasProxyResponseBody extends $tea.Model {
    result?: string;
    ticket?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class VPaasProxyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: VPaasProxyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateNewGradeManagerHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateNewGradeManagerRequest extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateNewGradeManagerResponseBody extends $tea.Model {
    matchRule?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateNewGradeManagerResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ValidateNewGradeManagerResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateUserRoleHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateUserRoleRequest extends $tea.Model {
    timeThreshold?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateUserRoleResponseBody extends $tea.Model {
    matchParentIdentity?: boolean;
    matchTeacherIdentity?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ValidateUserRoleResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ValidateUserRoleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestDataCardRuleItemParamList extends $tea.Model {
    cardRuleAttr?: string;
    cardTaskCode?: string;
    dailyDubbing?: number;
    relationId?: string;
    relationTitle?: string;
    relationUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestDataOrgClassStudentGroupListClassListStudents extends $tea.Model {
    name?: string;
    staffId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestDataOrgClassStudentGroupListClassList extends $tea.Model {
    classId?: number;
    className?: string;
    students?: BatchCreateRequestDataOrgClassStudentGroupListClassListStudents[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestDataOrgClassStudentGroupList extends $tea.Model {
    classList?: BatchCreateRequestDataOrgClassStudentGroupListClassList[];
    corpId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateRequestData extends $tea.Model {
    canReissueCard?: boolean;
    cardCycle?: number;
    cardFrequency?: number[];
    cardRuleItemParamList?: BatchCreateRequestDataCardRuleItemParamList[];
    classIds?: string[];
    classNames?: string[];
    content?: string;
    effectDate?: number;
    medias?: string;
    needMetering?: string;
    orgClassStudentGroupList?: BatchCreateRequestDataOrgClassStudentGroupList[];
    remindHour?: number;
    remindMinute?: number;
    targetRole?: string;
    templateId?: number;
    title?: string;
    unitOfMeasurement?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchCreateResponseBodyResult extends $tea.Model {
    corpIdCardIdMap?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWRequestOpenSelectItemListClassListStudents extends $tea.Model {
    avatar?: string;
    name?: string;
    staffId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWRequestOpenSelectItemListClassList extends $tea.Model {
    all?: boolean;
    classId?: string;
    className?: string;
    students?: BatchOrgCreateHWRequestOpenSelectItemListClassListStudents[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWRequestOpenSelectItemList extends $tea.Model {
    classList?: BatchOrgCreateHWRequestOpenSelectItemListClassList[];
    corpId?: string;
    selectedClassesDesc?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWResponseBodyResultPublishList extends $tea.Model {
    corpid?: string;
    hwid?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class BatchOrgCreateHWResponseBodyResult extends $tea.Model {
    publishList?: BatchOrgCreateHWResponseBodyResultPublishList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardBatchQueryCardsResponseBodyResultCards extends $tea.Model {
    cardBizCode?: string;
    cardId?: number;
    cardStatus?: number;
    content?: string;
    corpId?: string;
    effectTime?: string;
    finished?: boolean;
    gmtCreate?: string;
    optEndTime?: string;
    optEndUserId?: string;
    optEndUserName?: string;
    sendTime?: string;
    startTime?: string;
    status?: number;
    teacherId?: string;
    teacherName?: string;
    title?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardBatchQueryCardsResponseBodyResult extends $tea.Model {
    cards?: CardBatchQueryCardsResponseBodyResultCards[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardResponseBodyResult extends $tea.Model {
    attr?: string;
    cardBizCode?: string;
    cardBizId?: string;
    cardContentCount?: number;
    cardCycle?: number;
    cardFrequency?: number[];
    cardId?: number;
    cardStatus?: number;
    cardUrl?: string;
    categoryContentTag?: string;
    categoryCoverImageUrl?: string;
    categoryCreateCardSmallImageUrl?: string;
    categoryListSmallImageUrl?: string;
    categoryName?: string;
    classIds?: string[];
    classNames?: string[];
    content?: string;
    corpId?: string;
    effectTime?: string;
    finished?: boolean;
    media?: string;
    optEndTime?: string;
    optEndUserId?: string;
    optEndUserName?: string;
    remindNotPunchCardHour?: number;
    remindNotPunchCardMinute?: number;
    sendTime?: string;
    sourceType?: string;
    startTime?: string;
    status?: number;
    systemTime?: number;
    teacherId?: string;
    teacherName?: string;
    templateCoverImageUrl?: string;
    title?: string;
    type?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardFinishProgressResponseBodyResultClassStatisticsProcess extends $tea.Model {
    date?: string;
    finishedStudentsNum?: number;
    needFinishStudentsNum?: number;
    taskCode?: string;
    today?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardFinishProgressResponseBodyResultClassStatistics extends $tea.Model {
    cardBizId?: string;
    cardBizName?: string;
    classId?: string;
    className?: string;
    process?: CardGetCardFinishProgressResponseBodyResultClassStatisticsProcess[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardFinishProgressResponseBodyResultPatriarchStatistics extends $tea.Model {
    cardTaskCode?: string;
    date?: string;
    isFinished?: boolean;
    isFinishedByReissueCard?: boolean;
    isLastDay?: boolean;
    reissueCard?: boolean;
    studentId?: string;
    studentName?: string;
    today?: string;
    userSubTaskId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardGetCardFinishProgressResponseBodyResult extends $tea.Model {
    classStatistics?: CardGetCardFinishProgressResponseBodyResultClassStatistics[];
    patriarchStatistics?: CardGetCardFinishProgressResponseBodyResultPatriarchStatistics[];
    studentNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardQueryCardFeedsResponseBodyResultPostsAuthor extends $tea.Model {
    showName?: string;
    userId?: string;
    userRole?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardQueryCardFeedsResponseBodyResultPostsContent extends $tea.Model {
    contentType?: number;
    text?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardQueryCardFeedsResponseBodyResultPosts extends $tea.Model {
    author?: CardQueryCardFeedsResponseBodyResultPostsAuthor;
    bizType?: number;
    content?: CardQueryCardFeedsResponseBodyResultPostsContent;
    createAt?: number;
    feedType?: number;
    postId?: number;
    status?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CardQueryCardFeedsResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    posts?: CardQueryCardFeedsResponseBodyResultPosts[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateAppOrderRequestDetailList extends $tea.Model {
    goodsId?: string;
    goodsName?: string;
    goodsPrice?: number;
    goodsQuantity?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassRequestCustomClass extends $tea.Model {
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomClassResponseBodyResult extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptRequestCustomDept extends $tea.Model {
    name?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCustomDeptResponseBodyResult extends $tea.Model {
    deptId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateInviteUrlResponseBodyResult extends $tea.Model {
    inviteUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderRequestDetailList extends $tea.Model {
    actualAmount?: number;
    itemAmount?: number;
    itemName?: string;
    scene?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateOrderFlowRequestDetailList extends $tea.Model {
    actualAmount?: number;
    itemAmount?: number;
    itemId?: number;
    itemName?: string;
    scene?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseRequestAttendParticipants extends $tea.Model {
    corpId?: string;
    participantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseRequestTeachingParticipant extends $tea.Model {
    corpId?: string;
    participantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateRemoteClassCourseResponseBodyResult extends $tea.Model {
    courseCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionModels extends $tea.Model {
    sectionEndTime?: CreateSectionConfigRequestSectionConfigsSectionModelsSectionEndTime;
    sectionIndex?: number;
    sectionName?: string;
    sectionStartTime?: CreateSectionConfigRequestSectionConfigsSectionModelsSectionStartTime;
    sectionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSectionStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSemesterEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigsSemesterStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSectionConfigRequestSectionConfigs extends $tea.Model {
    scheduleName?: string;
    schoolYear?: string;
    sectionEndDate?: CreateSectionConfigRequestSectionConfigsSectionEndDate;
    sectionModels?: CreateSectionConfigRequestSectionConfigsSectionModels[];
    sectionStartDate?: CreateSectionConfigRequestSectionConfigsSectionStartDate;
    semester?: number;
    semesterEndDate?: CreateSectionConfigRequestSectionConfigsSemesterEndDate;
    semesterStartDate?: CreateSectionConfigRequestSectionConfigsSemesterStartDate;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateSnsAppOrderRequestDetailList extends $tea.Model {
    goodsId?: string;
    goodsName?: string;
    goodsPrice?: number;
    goodsQuantity?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequestCourserGroupItemModels extends $tea.Model {
    classPeriodType?: number;
    classroomId?: number;
    courseType?: number;
    courserGroupItemEndDate?: CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate;
    courserGroupItemStartDate?: CreateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate;
    dayOfWeek?: number;
    sectionIndex?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupRequestTeacherInfos extends $tea.Model {
    participantRole?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateUniversityCourseGroupResponseBodyCourseGroupInfo extends $tea.Model {
    courseGroupCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduListUserByFromUserIdsResponseBodyResult extends $tea.Model {
    campusId?: number;
    classId?: number;
    gradeId?: number;
    name?: string;
    periodId?: number;
    role?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListResponseBodyResultTeacherDetails extends $tea.Model {
    name?: string;
    role?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EduTeacherListResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    teacherDetails?: EduTeacherListResponseBodyResultTeacherDetails[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseRequestLivePlayInfoList extends $tea.Model {
    liveInputUrl?: string;
    liveOutputFlvUrl?: string;
    liveOutputHlsUrl?: string;
    liveType?: number;
    replayUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EndCourseResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    courseCode?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDefaultChildResponseBodyBindStudents extends $tea.Model {
    classId?: number;
    corpId?: string;
    period?: string;
    staffId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEduUserIdentityResponseBodyData extends $tea.Model {
    matchGuardianRule?: boolean;
    matchTeacherRule?: boolean;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCourseDetailResponseBodyPushModel extends $tea.Model {
    pushOrgNameList?: string[];
    pushRoleNameList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetOpenCoursesResponseBodyCourseList extends $tea.Model {
    courseId?: string;
    coverUrl?: string;
    feedType?: number;
    jumpUrl?: string;
    startTime?: number;
    teacherId?: string;
    teacherName?: string;
    title?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointActionRecordRequestBody extends $tea.Model {
    bizId?: string;
    ownerId?: string;
    pointType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointActionRecordResponseBodyResult extends $tea.Model {
    actionTime?: string;
    quantity?: number;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPointInfoResponseBodyResult extends $tea.Model {
    availableQuota?: number;
    endTime?: string;
    startTime?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBodyResultAttendParticipants extends $tea.Model {
    corpId?: string;
    orgName?: string;
    participantId?: string;
    participantName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBodyResultRecordInfos extends $tea.Model {
    startTime?: string;
    stopTime?: string;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBodyResultTeachingParticipant extends $tea.Model {
    corpId?: string;
    orgName?: string;
    participantId?: string;
    participantName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetRemoteClassCourseResponseBodyResult extends $tea.Model {
    attendParticipants?: GetRemoteClassCourseResponseBodyResultAttendParticipants[];
    canEdit?: boolean;
    courseCode?: string;
    courseName?: string;
    endTime?: number;
    liveUrl?: string;
    recordInfos?: GetRemoteClassCourseResponseBodyResultRecordInfos[];
    roomStatus?: number;
    startTime?: number;
    status?: number;
    teachingParticipant?: GetRemoteClassCourseResponseBodyResultTeachingParticipant;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRoleMembersResponseBodyResult extends $tea.Model {
    corpId?: string;
    memberUserIdListInTrunkOrg?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetShareRolesResponseBodyResult extends $tea.Model {
    shareRoleCode?: string;
    shareRoleName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskListResponseBodyTaskList extends $tea.Model {
    name?: string;
    taskId?: number;
    taskYear?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTaskStudentListResponseBodyStudentList extends $tea.Model {
    name?: string;
    sexuality?: string;
    studentId?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestCoursesDateModel extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestCoursesSectionModel extends $tea.Model {
    sectionIndex?: number;
    sectionName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestCourses extends $tea.Model {
    courseName?: string;
    creatorName?: string;
    dateModel?: InitCoursesOfClassRequestCoursesDateModel;
    location?: string;
    sectionModel?: InitCoursesOfClassRequestCoursesSectionModel;
    teacherStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigEnd extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigSectionModels extends $tea.Model {
    end?: InitCoursesOfClassRequestSectionConfigSectionModelsEnd;
    sectionIndex?: number;
    sectionType?: string;
    start?: InitCoursesOfClassRequestSectionConfigSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfigStart extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InitCoursesOfClassRequestSectionConfig extends $tea.Model {
    end?: InitCoursesOfClassRequestSectionConfigEnd;
    sectionModels?: InitCoursesOfClassRequestSectionConfigSectionModels[];
    start?: InitCoursesOfClassRequestSectionConfigStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestEnd extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestSectionModels extends $tea.Model {
    end?: InsertSectionConfigRequestSectionModelsEnd;
    sectionIndex?: number;
    sectionName?: string;
    sectionType?: string;
    start?: InsertSectionConfigRequestSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class InsertSectionConfigRequestStart extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvDataWriteRequestRowValueList extends $tea.Model {
    name?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvDataWriteResponseBodyResult extends $tea.Model {
    needRetry?: boolean;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvMetadataQueryResponseBodyResultFields extends $tea.Model {
    description?: string;
    fieldKey?: string;
    fieldName?: string;
    fieldType?: string;
    primaryKey?: boolean;
    required?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class IsvMetadataQueryResponseBodyResult extends $tea.Model {
    fields?: IsvMetadataQueryResponseBodyResultFields[];
    tableCode?: string;
    tableExist?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ListOrderResponseBodyList extends $tea.Model {
    actualAmount?: number;
    buyerId?: string;
    corpId?: string;
    createTime?: number;
    endTime?: number;
    orderNo?: string;
    payTime?: number;
    refundNo?: string;
    scene?: number;
    startTime?: number;
    status?: number;
    tradeNo?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PageQueryDevicesResponseBodyList extends $tea.Model {
    gmtExpiry?: number;
    model?: string;
    name?: string;
    sn?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList extends $tea.Model {
    liveInputUrl?: string;
    liveOutputUrl?: string;
    liveType?: number;
    replayUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponse extends $tea.Model {
    confirmStatus?: boolean;
    courseCode?: string;
    livePlayInfoList?: PollingConfirmStatusResponseBodyUniversityPollingCourseStatusResponseLivePlayInfoList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ProvidePointResponseBodyResult extends $tea.Model {
    availableQuota?: number;
    provideNum?: number;
    provideSuccess?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList extends $tea.Model {
    avator?: string;
    name?: string;
    uid?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponseBodyResultExt extends $tea.Model {
    backgroundColor?: string;
    classId?: number;
    fontColor?: string;
    teacherList?: QueryAllSubjectsFromClassScheduleResponseBodyResultExtTeacherList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAllSubjectsFromClassScheduleResponseBodyResult extends $tea.Model {
    creatorOrgId?: number;
    ext?: QueryAllSubjectsFromClassScheduleResponseBodyResultExt;
    periodCode?: string;
    subjectCode?: string;
    subjectName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigEnd extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigSectionModels extends $tea.Model {
    end?: QueryClassScheduleResponseBodyConfigSectionModelsEnd;
    sectionIndex?: number;
    sectionName?: string;
    sectionType?: string;
    start?: QueryClassScheduleResponseBodyConfigSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfigStart extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyConfig extends $tea.Model {
    end?: QueryClassScheduleResponseBodyConfigEnd;
    sectionModels?: QueryClassScheduleResponseBodyConfigSectionModels[];
    start?: QueryClassScheduleResponseBodyConfigStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyCourseDTOSClassrooms extends $tea.Model {
    interactInfo?: string;
    targetId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyCourseDTOSEduUserModels extends $tea.Model {
    name?: string;
    uid?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleResponseBodyCourseDTOS extends $tea.Model {
    classId?: number;
    classrooms?: QueryClassScheduleResponseBodyCourseDTOSClassrooms[];
    code?: string;
    courseGroupCode?: string;
    coverUrl?: string;
    creatorCorpId?: string;
    creatorUserId?: string;
    creatorUserName?: string;
    eduUserModels?: QueryClassScheduleResponseBodyCourseDTOSEduUserModels[];
    endTime?: number;
    extInfo?: string;
    introduce?: string;
    name?: string;
    sectionIndex?: number;
    sectionName?: string;
    startTime?: number;
    status?: number;
    subjectCode?: string;
    teacherCorpId?: string;
    teacherUserId?: string;
    teacherUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms extends $tea.Model {
    interactInfo?: string;
    targetId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels extends $tea.Model {
    name?: string;
    uid?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleByTimeSchoolResponseBodyResult extends $tea.Model {
    bizKey?: string;
    classId?: number;
    classrooms?: QueryClassScheduleByTimeSchoolResponseBodyResultClassrooms[];
    code?: string;
    courseGroupCode?: string;
    coverUrl?: string;
    creatorCorpId?: string;
    creatorUserId?: string;
    creatorUserName?: string;
    eduUserModels?: QueryClassScheduleByTimeSchoolResponseBodyResultEduUserModels[];
    endTime?: number;
    extInfo?: string;
    introduce?: string;
    name?: string;
    sectionIndex?: number;
    sectionName?: string;
    startTime?: number;
    status?: number;
    subjectCode?: string;
    teacherCorpId?: string;
    teacherUserId?: string;
    teacherUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultEnd extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultSectionModels extends $tea.Model {
    end?: QueryClassScheduleConfigResponseBodyResultSectionModelsEnd;
    sectionIndex?: number;
    sectionName?: string;
    sectionType?: string;
    start?: QueryClassScheduleConfigResponseBodyResultSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResultStart extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryClassScheduleConfigResponseBodyResult extends $tea.Model {
    classId?: number;
    end?: QueryClassScheduleConfigResponseBodyResultEnd;
    sectionModels?: QueryClassScheduleConfigResponseBodyResultSectionModels[];
    start?: QueryClassScheduleConfigResponseBodyResultStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdResponseBodyResultList extends $tea.Model {
    appStatus?: number;
    deviceCode?: string;
    deviceName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDeviceListByCorpIdResponseBodyResult extends $tea.Model {
    hasMore?: boolean;
    list?: QueryDeviceListByCorpIdResponseBodyResultList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEduAssetSpacesResponseBodySpaces extends $tea.Model {
    createTimeMillis?: number;
    modifyTimeMillis?: number;
    permissionMode?: string;
    quota?: number;
    spaceId?: string;
    spaceName?: string;
    spaceType?: string;
    usedQuota?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgRelationListResponseBodyResult extends $tea.Model {
    corpId?: string;
    deviceCount?: number;
    name?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOrgSecretKeyResponseBodyUniversitySecretKeyInfo extends $tea.Model {
    secretKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryPhysicalClassroomResponseBodyResult extends $tea.Model {
    classroomBuilding?: string;
    classroomCampus?: string;
    classroomFloor?: string;
    classroomId?: number;
    classroomName?: string;
    classroomNumber?: string;
    directBroadcast?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponseBodyResultAttendParticipants extends $tea.Model {
    corpId?: string;
    orgName?: string;
    participantId?: string;
    participantName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponseBodyResultTeachingParticipant extends $tea.Model {
    corpId?: string;
    orgName?: string;
    participantId?: string;
    participantName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRemoteClassCourseResponseBodyResult extends $tea.Model {
    attendParticipants?: QueryRemoteClassCourseResponseBodyResultAttendParticipants[];
    canEdit?: boolean;
    courseCode?: string;
    courseName?: string;
    courseWays?: string[];
    endTime?: number;
    startTime?: number;
    status?: number;
    teachingParticipant?: QueryRemoteClassCourseResponseBodyResultTeachingParticipant;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySchoolUserFaceResponseBodyUserFaceList extends $tea.Model {
    faceId?: string;
    name?: string;
    status?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryStatisticsDataResponseBodyResult extends $tea.Model {
    classId?: number;
    courseCount?: number;
    courseHours?: number;
    subjectCode?: string;
    subjectName?: number;
    userId?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubjectTeachersResponseBodyResult extends $tea.Model {
    classId?: number;
    corpId?: string;
    periodCode?: string;
    subjectCode?: string;
    subjectName?: string;
    teacherName?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTeachSubjectsResponseBodyResult extends $tea.Model {
    classId?: number;
    corpId?: string;
    periodCode?: string;
    subjectCode?: string;
    subjectName?: string;
    teacherName?: string;
    teacherUserId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels extends $tea.Model {
    classPeriodType?: number;
    classroomId?: number;
    courseType?: number;
    courserGroupItemEndDate?: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemEndDate;
    courserGroupItemStartDate?: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModelsCourserGroupItemStartDate;
    dayOfWeek?: number;
    sectionIndex?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfo extends $tea.Model {
    courseGroupCode?: string;
    courseGroupIntroduce?: string;
    courseGroupName?: string;
    courserGroupItemModels?: QueryUniversityCourseGroupResponseBodyUniversityCourseGroupInfoCourserGroupItemModels[];
    isvCourseGroupCode?: string;
    periodCode?: string;
    schoolYear?: string;
    semester?: number;
    subjectName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveClassLearningDataResponseBodyResult extends $tea.Model {
    questionUploadUrlList?: string[];
    standardAnswerUploadUrlList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStudentLearningDataRequestWrongQuestions extends $tea.Model {
    knowledgePoints?: string[];
    questionNo?: string;
    questionPictureNum?: number;
    standardAnswerPictureNum?: number;
    userAnswerPictureNum?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStudentLearningDataResponseBodyResultWrongQuestions extends $tea.Model {
    questionNo?: string;
    questionUploadUrlList?: string[];
    standardAnswerUploadUrlList?: string[];
    userAnswerUploadUrlList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SaveStudentLearningDataResponseBodyResult extends $tea.Model {
    saveSuccess?: boolean;
    wrongQuestions?: SaveStudentLearningDataResponseBodyResultWrongQuestions[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchTeachersResponseBodyUsers extends $tea.Model {
    classId?: number;
    deptName?: string;
    name?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseRequestLivePlayInfoList extends $tea.Model {
    liveInputUrl?: string;
    liveOutputFlvUrl?: string;
    liveOutputHlsUrl?: string;
    liveType?: number;
    replayUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCourseResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    courseCode?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCoursePrepareResponseBodyUniversityCourseCommonResponse extends $tea.Model {
    courseCode?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestCoursesDateModel extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestCoursesSectionModel extends $tea.Model {
    sectionIndex?: number;
    sectionName?: string;
    sectionType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestCourses extends $tea.Model {
    courseCode?: string;
    courseGroupCode?: string;
    courseName?: string;
    creatorName?: string;
    dateModel?: UpdateCoursesOfClassRequestCoursesDateModel;
    deleteTag?: boolean;
    location?: string;
    sectionModel?: UpdateCoursesOfClassRequestCoursesSectionModel;
    teacherStaffIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestSectionConfigSectionModelsStart extends $tea.Model {
    hour?: number;
    min?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestSectionConfigSectionModels extends $tea.Model {
    end?: UpdateCoursesOfClassRequestSectionConfigSectionModelsEnd;
    sectionIndex?: number;
    sectionType?: string;
    start?: UpdateCoursesOfClassRequestSectionConfigSectionModelsStart;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateCoursesOfClassRequestSectionConfig extends $tea.Model {
    sectionModels?: UpdateCoursesOfClassRequestSectionConfigSectionModels[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseRequestAttendParticipants extends $tea.Model {
    corpId?: string;
    participantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateRemoteClassCourseRequestTeachingParticipant extends $tea.Model {
    corpId?: string;
    participantId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate extends $tea.Model {
    dayOfMonth?: number;
    month?: number;
    year?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateUniversityCourseGroupRequestCourserGroupItemModels extends $tea.Model {
    classPeriodType?: number;
    classroomId?: number;
    courseType?: number;
    courserGroupItemEndDate?: UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemEndDate;
    courserGroupItemStartDate?: UpdateUniversityCourseGroupRequestCourserGroupItemModelsCourserGroupItemStartDate;
    dayOfWeek?: number;
    sectionIndex?: number[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 视讯paas机具激活
     *
     * @param request ActivateDeviceRequest
     * @param headers ActivateDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ActivateDeviceResponse
     */
    activateDeviceWithOptions(request: ActivateDeviceRequest, headers: ActivateDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<ActivateDeviceResponse>;
    /**
     * @summary 视讯paas机具激活
     *
     * @param request ActivateDeviceRequest
     * @return ActivateDeviceResponse
     */
    activateDevice(request: ActivateDeviceRequest): Promise<ActivateDeviceResponse>;
    /**
     * @summary 增加赛事记录
     *
     * @param request AddCompetitionRecordRequest
     * @param headers AddCompetitionRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddCompetitionRecordResponse
     */
    addCompetitionRecordWithOptions(request: AddCompetitionRecordRequest, headers: AddCompetitionRecordHeaders, runtime: $Util.RuntimeOptions): Promise<AddCompetitionRecordResponse>;
    /**
     * @summary 增加赛事记录
     *
     * @param request AddCompetitionRecordRequest
     * @return AddCompetitionRecordResponse
     */
    addCompetitionRecord(request: AddCompetitionRecordRequest): Promise<AddCompetitionRecordResponse>;
    /**
     * @summary 添加设备
     *
     * @param request AddDeviceRequest
     * @param headers AddDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddDeviceResponse
     */
    addDeviceWithOptions(request: AddDeviceRequest, headers: AddDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<AddDeviceResponse>;
    /**
     * @summary 添加设备
     *
     * @param request AddDeviceRequest
     * @return AddDeviceResponse
     */
    addDevice(request: AddDeviceRequest): Promise<AddDeviceResponse>;
    /**
     * @summary 添加学校配置
     *
     * @param request AddSchoolConfigRequest
     * @param headers AddSchoolConfigHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddSchoolConfigResponse
     */
    addSchoolConfigWithOptions(request: AddSchoolConfigRequest, headers: AddSchoolConfigHeaders, runtime: $Util.RuntimeOptions): Promise<AddSchoolConfigResponse>;
    /**
     * @summary 添加学校配置
     *
     * @param request AddSchoolConfigRequest
     * @return AddSchoolConfigResponse
     */
    addSchoolConfig(request: AddSchoolConfigRequest): Promise<AddSchoolConfigResponse>;
    /**
     * @summary 进行分班
     *
     * @param request AssignClassRequest
     * @param headers AssignClassHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AssignClassResponse
     */
    assignClassWithOptions(request: AssignClassRequest, headers: AssignClassHeaders, runtime: $Util.RuntimeOptions): Promise<AssignClassResponse>;
    /**
     * @summary 进行分班
     *
     * @param request AssignClassRequest
     * @return AssignClassResponse
     */
    assignClass(request: AssignClassRequest): Promise<AssignClassResponse>;
    /**
     * @summary 批量创建打卡
     *
     * @param request BatchCreateRequest
     * @param headers BatchCreateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchCreateResponse
     */
    batchCreateWithOptions(request: BatchCreateRequest, headers: BatchCreateHeaders, runtime: $Util.RuntimeOptions): Promise<BatchCreateResponse>;
    /**
     * @summary 批量创建打卡
     *
     * @param request BatchCreateRequest
     * @return BatchCreateResponse
     */
    batchCreate(request: BatchCreateRequest): Promise<BatchCreateResponse>;
    /**
     * @summary 跨组织-批量创建作业
     *
     * @param request BatchOrgCreateHWRequest
     * @param headers BatchOrgCreateHWHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchOrgCreateHWResponse
     */
    batchOrgCreateHWWithOptions(request: BatchOrgCreateHWRequest, headers: BatchOrgCreateHWHeaders, runtime: $Util.RuntimeOptions): Promise<BatchOrgCreateHWResponse>;
    /**
     * @summary 跨组织-批量创建作业
     *
     * @param request BatchOrgCreateHWRequest
     * @return BatchOrgCreateHWResponse
     */
    batchOrgCreateHW(request: BatchOrgCreateHWRequest): Promise<BatchOrgCreateHWResponse>;
    /**
     * @summary 撤销订单
     *
     * @param request CancelOrderRequest
     * @param headers CancelOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CancelOrderResponse
     */
    cancelOrderWithOptions(request: CancelOrderRequest, headers: CancelOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CancelOrderResponse>;
    /**
     * @summary 撤销订单
     *
     * @param request CancelOrderRequest
     * @return CancelOrderResponse
     */
    cancelOrder(request: CancelOrderRequest): Promise<CancelOrderResponse>;
    /**
     * @summary 个人应用撤销订单
     *
     * @param request CancelSnsOrderRequest
     * @param headers CancelSnsOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CancelSnsOrderResponse
     */
    cancelSnsOrderWithOptions(request: CancelSnsOrderRequest, headers: CancelSnsOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CancelSnsOrderResponse>;
    /**
     * @summary 个人应用撤销订单
     *
     * @param request CancelSnsOrderRequest
     * @return CancelSnsOrderResponse
     */
    cancelSnsOrder(request: CancelSnsOrderRequest): Promise<CancelSnsOrderResponse>;
    /**
     * @summary 取消订单
     *
     * @param request CancelUserOrderRequest
     * @param headers CancelUserOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CancelUserOrderResponse
     */
    cancelUserOrderWithOptions(request: CancelUserOrderRequest, headers: CancelUserOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CancelUserOrderResponse>;
    /**
     * @summary 取消订单
     *
     * @param request CancelUserOrderRequest
     * @return CancelUserOrderResponse
     */
    cancelUserOrder(request: CancelUserOrderRequest): Promise<CancelUserOrderResponse>;
    /**
     * @summary 批量查询打卡任务
     *
     * @param request CardBatchQueryCardsRequest
     * @param headers CardBatchQueryCardsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CardBatchQueryCardsResponse
     */
    cardBatchQueryCardsWithOptions(request: CardBatchQueryCardsRequest, headers: CardBatchQueryCardsHeaders, runtime: $Util.RuntimeOptions): Promise<CardBatchQueryCardsResponse>;
    /**
     * @summary 批量查询打卡任务
     *
     * @param request CardBatchQueryCardsRequest
     * @return CardBatchQueryCardsResponse
     */
    cardBatchQueryCards(request: CardBatchQueryCardsRequest): Promise<CardBatchQueryCardsResponse>;
    /**
     * @summary 删除打卡
     *
     * @param request CardDeleteCardRequest
     * @param headers CardDeleteCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CardDeleteCardResponse
     */
    cardDeleteCardWithOptions(request: CardDeleteCardRequest, headers: CardDeleteCardHeaders, runtime: $Util.RuntimeOptions): Promise<CardDeleteCardResponse>;
    /**
     * @summary 删除打卡
     *
     * @param request CardDeleteCardRequest
     * @return CardDeleteCardResponse
     */
    cardDeleteCard(request: CardDeleteCardRequest): Promise<CardDeleteCardResponse>;
    /**
     * @summary 打卡-结束打卡
     *
     * @param request CardEndCardRequest
     * @param headers CardEndCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CardEndCardResponse
     */
    cardEndCardWithOptions(request: CardEndCardRequest, headers: CardEndCardHeaders, runtime: $Util.RuntimeOptions): Promise<CardEndCardResponse>;
    /**
     * @summary 打卡-结束打卡
     *
     * @param request CardEndCardRequest
     * @return CardEndCardResponse
     */
    cardEndCard(request: CardEndCardRequest): Promise<CardEndCardResponse>;
    /**
     * @summary 查询打卡任务
     *
     * @param request CardGetCardRequest
     * @param headers CardGetCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CardGetCardResponse
     */
    cardGetCardWithOptions(request: CardGetCardRequest, headers: CardGetCardHeaders, runtime: $Util.RuntimeOptions): Promise<CardGetCardResponse>;
    /**
     * @summary 查询打卡任务
     *
     * @param request CardGetCardRequest
     * @return CardGetCardResponse
     */
    cardGetCard(request: CardGetCardRequest): Promise<CardGetCardResponse>;
    /**
     * @summary 获取打卡任务完成进度
     *
     * @param request CardGetCardFinishProgressRequest
     * @param headers CardGetCardFinishProgressHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CardGetCardFinishProgressResponse
     */
    cardGetCardFinishProgressWithOptions(request: CardGetCardFinishProgressRequest, headers: CardGetCardFinishProgressHeaders, runtime: $Util.RuntimeOptions): Promise<CardGetCardFinishProgressResponse>;
    /**
     * @summary 获取打卡任务完成进度
     *
     * @param request CardGetCardFinishProgressRequest
     * @return CardGetCardFinishProgressResponse
     */
    cardGetCardFinishProgress(request: CardGetCardFinishProgressRequest): Promise<CardGetCardFinishProgressResponse>;
    /**
     * @summary 查询打卡Feed流
     *
     * @param request CardQueryCardFeedsRequest
     * @param headers CardQueryCardFeedsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CardQueryCardFeedsResponse
     */
    cardQueryCardFeedsWithOptions(request: CardQueryCardFeedsRequest, headers: CardQueryCardFeedsHeaders, runtime: $Util.RuntimeOptions): Promise<CardQueryCardFeedsResponse>;
    /**
     * @summary 查询打卡Feed流
     *
     * @param request CardQueryCardFeedsRequest
     * @return CardQueryCardFeedsResponse
     */
    cardQueryCardFeeds(request: CardQueryCardFeedsRequest): Promise<CardQueryCardFeedsResponse>;
    /**
     * @summary 支付校验
     *
     * @param request CheckRestrictionRequest
     * @param headers CheckRestrictionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckRestrictionResponse
     */
    checkRestrictionWithOptions(request: CheckRestrictionRequest, headers: CheckRestrictionHeaders, runtime: $Util.RuntimeOptions): Promise<CheckRestrictionResponse>;
    /**
     * @summary 支付校验
     *
     * @param request CheckRestrictionRequest
     * @return CheckRestrictionResponse
     */
    checkRestriction(request: CheckRestrictionRequest): Promise<CheckRestrictionResponse>;
    /**
     * @summary 积分兑换
     *
     * @param request ConsumePointRequest
     * @param headers ConsumePointHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ConsumePointResponse
     */
    consumePointWithOptions(request: ConsumePointRequest, headers: ConsumePointHeaders, runtime: $Util.RuntimeOptions): Promise<ConsumePointResponse>;
    /**
     * @summary 积分兑换
     *
     * @param request ConsumePointRequest
     * @return ConsumePointResponse
     */
    consumePoint(request: ConsumePointRequest): Promise<ConsumePointResponse>;
    /**
     * @summary 全校排课结束通知
     *
     * @param request CourseSchedulingComplimentNoticeRequest
     * @param headers CourseSchedulingComplimentNoticeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CourseSchedulingComplimentNoticeResponse
     */
    courseSchedulingComplimentNoticeWithOptions(request: CourseSchedulingComplimentNoticeRequest, headers: CourseSchedulingComplimentNoticeHeaders, runtime: $Util.RuntimeOptions): Promise<CourseSchedulingComplimentNoticeResponse>;
    /**
     * @summary 全校排课结束通知
     *
     * @param request CourseSchedulingComplimentNoticeRequest
     * @return CourseSchedulingComplimentNoticeResponse
     */
    courseSchedulingComplimentNotice(request: CourseSchedulingComplimentNoticeRequest): Promise<CourseSchedulingComplimentNoticeResponse>;
    /**
     * @summary 创建App支付订单
     *
     * @param request CreateAppOrderRequest
     * @param headers CreateAppOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAppOrderResponse
     */
    createAppOrderWithOptions(request: CreateAppOrderRequest, headers: CreateAppOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CreateAppOrderResponse>;
    /**
     * @summary 创建App支付订单
     *
     * @param request CreateAppOrderRequest
     * @return CreateAppOrderResponse
     */
    createAppOrder(request: CreateAppOrderRequest): Promise<CreateAppOrderResponse>;
    /**
     * @summary 创建自定义部门下班级
     *
     * @param request CreateCustomClassRequest
     * @param headers CreateCustomClassHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCustomClassResponse
     */
    createCustomClassWithOptions(request: CreateCustomClassRequest, headers: CreateCustomClassHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCustomClassResponse>;
    /**
     * @summary 创建自定义部门下班级
     *
     * @param request CreateCustomClassRequest
     * @return CreateCustomClassResponse
     */
    createCustomClass(request: CreateCustomClassRequest): Promise<CreateCustomClassResponse>;
    /**
     * @summary 创建自定义校区或部门
     *
     * @param request CreateCustomDeptRequest
     * @param headers CreateCustomDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCustomDeptResponse
     */
    createCustomDeptWithOptions(request: CreateCustomDeptRequest, headers: CreateCustomDeptHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCustomDeptResponse>;
    /**
     * @summary 创建自定义校区或部门
     *
     * @param request CreateCustomDeptRequest
     * @return CreateCustomDeptResponse
     */
    createCustomDept(request: CreateCustomDeptRequest): Promise<CreateCustomDeptResponse>;
    /**
     * @summary 教学资源库创建space
     *
     * @param request CreateEduAssetSpaceRequest
     * @param headers CreateEduAssetSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateEduAssetSpaceResponse
     */
    createEduAssetSpaceWithOptions(request: CreateEduAssetSpaceRequest, headers: CreateEduAssetSpaceHeaders, runtime: $Util.RuntimeOptions): Promise<CreateEduAssetSpaceResponse>;
    /**
     * @summary 教学资源库创建space
     *
     * @param request CreateEduAssetSpaceRequest
     * @return CreateEduAssetSpaceResponse
     */
    createEduAssetSpace(request: CreateEduAssetSpaceRequest): Promise<CreateEduAssetSpaceResponse>;
    /**
     * @summary 创建设备履约记录，亲情通话、考勤数据同步
     *
     * @param request CreateFulfilRecordRequest
     * @param headers CreateFulfilRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateFulfilRecordResponse
     */
    createFulfilRecordWithOptions(request: CreateFulfilRecordRequest, headers: CreateFulfilRecordHeaders, runtime: $Util.RuntimeOptions): Promise<CreateFulfilRecordResponse>;
    /**
     * @summary 创建设备履约记录，亲情通话、考勤数据同步
     *
     * @param request CreateFulfilRecordRequest
     * @return CreateFulfilRecordResponse
     */
    createFulfilRecord(request: CreateFulfilRecordRequest): Promise<CreateFulfilRecordResponse>;
    /**
     * @summary 查询某个组织下面的设备列表
     *
     * @param request CreateInviteUrlRequest
     * @param headers CreateInviteUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateInviteUrlResponse
     */
    createInviteUrlWithOptions(request: CreateInviteUrlRequest, headers: CreateInviteUrlHeaders, runtime: $Util.RuntimeOptions): Promise<CreateInviteUrlResponse>;
    /**
     * @summary 查询某个组织下面的设备列表
     *
     * @param request CreateInviteUrlRequest
     * @return CreateInviteUrlResponse
     */
    createInviteUrl(request: CreateInviteUrlRequest): Promise<CreateInviteUrlResponse>;
    /**
     * @summary 创建商品
     *
     * @param request CreateItemRequest
     * @param headers CreateItemHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateItemResponse
     */
    createItemWithOptions(request: CreateItemRequest, headers: CreateItemHeaders, runtime: $Util.RuntimeOptions): Promise<CreateItemResponse>;
    /**
     * @summary 创建商品
     *
     * @param request CreateItemRequest
     * @return CreateItemResponse
     */
    createItem(request: CreateItemRequest): Promise<CreateItemResponse>;
    /**
     * @summary 创建订单信息
     *
     * @param request CreateOrderRequest
     * @param headers CreateOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOrderResponse
     */
    createOrderWithOptions(request: CreateOrderRequest, headers: CreateOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CreateOrderResponse>;
    /**
     * @summary 创建订单信息
     *
     * @param request CreateOrderRequest
     * @return CreateOrderResponse
     */
    createOrder(request: CreateOrderRequest): Promise<CreateOrderResponse>;
    /**
     * @summary 创建开单流水
     *
     * @param request CreateOrderFlowRequest
     * @param headers CreateOrderFlowHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOrderFlowResponse
     */
    createOrderFlowWithOptions(request: CreateOrderFlowRequest, headers: CreateOrderFlowHeaders, runtime: $Util.RuntimeOptions): Promise<CreateOrderFlowResponse>;
    /**
     * @summary 创建开单流水
     *
     * @param request CreateOrderFlowRequest
     * @return CreateOrderFlowResponse
     */
    createOrderFlow(request: CreateOrderFlowRequest): Promise<CreateOrderFlowResponse>;
    /**
     * @summary 添加物理教室信息
     *
     * @param request CreatePhysicalClassroomRequest
     * @param headers CreatePhysicalClassroomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreatePhysicalClassroomResponse
     */
    createPhysicalClassroomWithOptions(request: CreatePhysicalClassroomRequest, headers: CreatePhysicalClassroomHeaders, runtime: $Util.RuntimeOptions): Promise<CreatePhysicalClassroomResponse>;
    /**
     * @summary 添加物理教室信息
     *
     * @param request CreatePhysicalClassroomRequest
     * @return CreatePhysicalClassroomResponse
     */
    createPhysicalClassroom(request: CreatePhysicalClassroomRequest): Promise<CreatePhysicalClassroomResponse>;
    /**
     * @summary 创建退款流水
     *
     * @param request CreateRefundFlowRequest
     * @param headers CreateRefundFlowHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateRefundFlowResponse
     */
    createRefundFlowWithOptions(request: CreateRefundFlowRequest, headers: CreateRefundFlowHeaders, runtime: $Util.RuntimeOptions): Promise<CreateRefundFlowResponse>;
    /**
     * @summary 创建退款流水
     *
     * @param request CreateRefundFlowRequest
     * @return CreateRefundFlowResponse
     */
    createRefundFlow(request: CreateRefundFlowRequest): Promise<CreateRefundFlowResponse>;
    /**
     * @summary 创建预约类型的专递课堂
     *
     * @param request CreateRemoteClassCourseRequest
     * @param headers CreateRemoteClassCourseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateRemoteClassCourseResponse
     */
    createRemoteClassCourseWithOptions(request: CreateRemoteClassCourseRequest, headers: CreateRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<CreateRemoteClassCourseResponse>;
    /**
     * @summary 创建预约类型的专递课堂
     *
     * @param request CreateRemoteClassCourseRequest
     * @return CreateRemoteClassCourseResponse
     */
    createRemoteClassCourse(request: CreateRemoteClassCourseRequest): Promise<CreateRemoteClassCourseResponse>;
    /**
     * @summary 按学期创建课表模板
     *
     * @param request CreateSectionConfigRequest
     * @param headers CreateSectionConfigHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSectionConfigResponse
     */
    createSectionConfigWithOptions(request: CreateSectionConfigRequest, headers: CreateSectionConfigHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSectionConfigResponse>;
    /**
     * @summary 按学期创建课表模板
     *
     * @param request CreateSectionConfigRequest
     * @return CreateSectionConfigResponse
     */
    createSectionConfig(request: CreateSectionConfigRequest): Promise<CreateSectionConfigResponse>;
    /**
     * @summary 个人应用创建APP订单
     *
     * @param request CreateSnsAppOrderRequest
     * @param headers CreateSnsAppOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSnsAppOrderResponse
     */
    createSnsAppOrderWithOptions(request: CreateSnsAppOrderRequest, headers: CreateSnsAppOrderHeaders, runtime: $Util.RuntimeOptions): Promise<CreateSnsAppOrderResponse>;
    /**
     * @summary 个人应用创建APP订单
     *
     * @param request CreateSnsAppOrderRequest
     * @return CreateSnsAppOrderResponse
     */
    createSnsAppOrder(request: CreateSnsAppOrderRequest): Promise<CreateSnsAppOrderResponse>;
    /**
     * @summary 创建ststoken
     *
     * @param request CreateStsTokenRequest
     * @param headers CreateStsTokenHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateStsTokenResponse
     */
    createStsTokenWithOptions(request: CreateStsTokenRequest, headers: CreateStsTokenHeaders, runtime: $Util.RuntimeOptions): Promise<CreateStsTokenResponse>;
    /**
     * @summary 创建ststoken
     *
     * @param request CreateStsTokenRequest
     * @return CreateStsTokenResponse
     */
    createStsToken(request: CreateStsTokenRequest): Promise<CreateStsTokenResponse>;
    /**
     * @summary 创建授权token
     *
     * @param request CreateTokenRequest
     * @param headers CreateTokenHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateTokenResponse
     */
    createTokenWithOptions(request: CreateTokenRequest, headers: CreateTokenHeaders, runtime: $Util.RuntimeOptions): Promise<CreateTokenResponse>;
    /**
     * @summary 创建授权token
     *
     * @param request CreateTokenRequest
     * @return CreateTokenResponse
     */
    createToken(request: CreateTokenRequest): Promise<CreateTokenResponse>;
    /**
     * @summary 大学创建课程组
     *
     * @param request CreateUniversityCourseGroupRequest
     * @param headers CreateUniversityCourseGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateUniversityCourseGroupResponse
     */
    createUniversityCourseGroupWithOptions(request: CreateUniversityCourseGroupRequest, headers: CreateUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<CreateUniversityCourseGroupResponse>;
    /**
     * @summary 大学创建课程组
     *
     * @param request CreateUniversityCourseGroupRequest
     * @return CreateUniversityCourseGroupResponse
     */
    createUniversityCourseGroup(request: CreateUniversityCourseGroupRequest): Promise<CreateUniversityCourseGroupResponse>;
    /**
     * @summary 大学增加学生
     *
     * @param request CreateUniversityStudentRequest
     * @param headers CreateUniversityStudentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateUniversityStudentResponse
     */
    createUniversityStudentWithOptions(request: CreateUniversityStudentRequest, headers: CreateUniversityStudentHeaders, runtime: $Util.RuntimeOptions): Promise<CreateUniversityStudentResponse>;
    /**
     * @summary 大学增加学生
     *
     * @param request CreateUniversityStudentRequest
     * @return CreateUniversityStudentResponse
     */
    createUniversityStudent(request: CreateUniversityStudentRequest): Promise<CreateUniversityStudentResponse>;
    /**
     * @summary 大学添加老师
     *
     * @param request CreateUniversityTeacherRequest
     * @param headers CreateUniversityTeacherHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateUniversityTeacherResponse
     */
    createUniversityTeacherWithOptions(request: CreateUniversityTeacherRequest, headers: CreateUniversityTeacherHeaders, runtime: $Util.RuntimeOptions): Promise<CreateUniversityTeacherResponse>;
    /**
     * @summary 大学添加老师
     *
     * @param request CreateUniversityTeacherRequest
     * @return CreateUniversityTeacherResponse
     */
    createUniversityTeacher(request: CreateUniversityTeacherRequest): Promise<CreateUniversityTeacherResponse>;
    /**
     * @summary 视讯paas机具取消激活
     *
     * @param request DeactivateDeviceRequest
     * @param headers DeactivateDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeactivateDeviceResponse
     */
    deactivateDeviceWithOptions(request: DeactivateDeviceRequest, headers: DeactivateDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<DeactivateDeviceResponse>;
    /**
     * @summary 视讯paas机具取消激活
     *
     * @param request DeactivateDeviceRequest
     * @return DeactivateDeviceResponse
     */
    deactivateDevice(request: DeactivateDeviceRequest): Promise<DeactivateDeviceResponse>;
    /**
     * @summary 扣减教育积分
     *
     * @param request DeductPointRequest
     * @param headers DeductPointHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeductPointResponse
     */
    deductPointWithOptions(request: DeductPointRequest, headers: DeductPointHeaders, runtime: $Util.RuntimeOptions): Promise<DeductPointResponse>;
    /**
     * @summary 扣减教育积分
     *
     * @param request DeductPointRequest
     * @return DeductPointResponse
     */
    deductPoint(request: DeductPointRequest): Promise<DeductPointResponse>;
    /**
     * @summary 删除家校部门
     *
     * @param request DeleteDeptRequest
     * @param headers DeleteDeptHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteDeptResponse
     */
    deleteDeptWithOptions(deptId: string, request: DeleteDeptRequest, headers: DeleteDeptHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDeptResponse>;
    /**
     * @summary 删除家校部门
     *
     * @param request DeleteDeptRequest
     * @return DeleteDeptResponse
     */
    deleteDept(deptId: string, request: DeleteDeptRequest): Promise<DeleteDeptResponse>;
    /**
     * @summary 视讯paas机具删除
     *
     * @param request DeleteDeviceRequest
     * @param headers DeleteDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteDeviceResponse
     */
    deleteDeviceWithOptions(request: DeleteDeviceRequest, headers: DeleteDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceResponse>;
    /**
     * @summary 视讯paas机具删除
     *
     * @param request DeleteDeviceRequest
     * @return DeleteDeviceResponse
     */
    deleteDevice(request: DeleteDeviceRequest): Promise<DeleteDeviceResponse>;
    /**
     * @summary 删除设备上面的组织
     *
     * @param request DeleteDeviceOrgRequest
     * @param headers DeleteDeviceOrgHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteDeviceOrgResponse
     */
    deleteDeviceOrgWithOptions(request: DeleteDeviceOrgRequest, headers: DeleteDeviceOrgHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteDeviceOrgResponse>;
    /**
     * @summary 删除设备上面的组织
     *
     * @param request DeleteDeviceOrgRequest
     * @return DeleteDeviceOrgResponse
     */
    deleteDeviceOrg(request: DeleteDeviceOrgRequest): Promise<DeleteDeviceOrgResponse>;
    /**
     * @summary 删除家长
     *
     * @param request DeleteGuardianRequest
     * @param headers DeleteGuardianHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteGuardianResponse
     */
    deleteGuardianWithOptions(classId: string, userId: string, request: DeleteGuardianRequest, headers: DeleteGuardianHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteGuardianResponse>;
    /**
     * @summary 删除家长
     *
     * @param request DeleteGuardianRequest
     * @return DeleteGuardianResponse
     */
    deleteGuardian(classId: string, userId: string, request: DeleteGuardianRequest): Promise<DeleteGuardianResponse>;
    /**
     * @summary 删除组织的关联关系
     *
     * @param request DeleteOrgRelationRequest
     * @param headers DeleteOrgRelationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteOrgRelationResponse
     */
    deleteOrgRelationWithOptions(request: DeleteOrgRelationRequest, headers: DeleteOrgRelationHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteOrgRelationResponse>;
    /**
     * @summary 删除组织的关联关系
     *
     * @param request DeleteOrgRelationRequest
     * @return DeleteOrgRelationResponse
     */
    deleteOrgRelation(request: DeleteOrgRelationRequest): Promise<DeleteOrgRelationResponse>;
    /**
     * @summary 删除物理教室信息
     *
     * @param request DeletePhysicalClassroomRequest
     * @param headers DeletePhysicalClassroomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeletePhysicalClassroomResponse
     */
    deletePhysicalClassroomWithOptions(request: DeletePhysicalClassroomRequest, headers: DeletePhysicalClassroomHeaders, runtime: $Util.RuntimeOptions): Promise<DeletePhysicalClassroomResponse>;
    /**
     * @summary 删除物理教室信息
     *
     * @param request DeletePhysicalClassroomRequest
     * @return DeletePhysicalClassroomResponse
     */
    deletePhysicalClassroom(request: DeletePhysicalClassroomRequest): Promise<DeletePhysicalClassroomResponse>;
    /**
     * @summary 删除专递课堂课程
     *
     * @param request DeleteRemoteClassCourseRequest
     * @param headers DeleteRemoteClassCourseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteRemoteClassCourseResponse
     */
    deleteRemoteClassCourseWithOptions(courseCode: string, request: DeleteRemoteClassCourseRequest, headers: DeleteRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteRemoteClassCourseResponse>;
    /**
     * @summary 删除专递课堂课程
     *
     * @param request DeleteRemoteClassCourseRequest
     * @return DeleteRemoteClassCourseResponse
     */
    deleteRemoteClassCourse(courseCode: string, request: DeleteRemoteClassCourseRequest): Promise<DeleteRemoteClassCourseResponse>;
    /**
     * @summary 删除学生
     *
     * @param request DeleteStudentRequest
     * @param headers DeleteStudentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteStudentResponse
     */
    deleteStudentWithOptions(classId: string, userId: string, request: DeleteStudentRequest, headers: DeleteStudentHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteStudentResponse>;
    /**
     * @summary 删除学生
     *
     * @param request DeleteStudentRequest
     * @return DeleteStudentResponse
     */
    deleteStudent(classId: string, userId: string, request: DeleteStudentRequest): Promise<DeleteStudentResponse>;
    /**
     * @summary 删除老师
     *
     * @param request DeleteTeacherRequest
     * @param headers DeleteTeacherHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteTeacherResponse
     */
    deleteTeacherWithOptions(classId: string, userId: string, request: DeleteTeacherRequest, headers: DeleteTeacherHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteTeacherResponse>;
    /**
     * @summary 删除老师
     *
     * @param request DeleteTeacherRequest
     * @return DeleteTeacherResponse
     */
    deleteTeacher(classId: string, userId: string, request: DeleteTeacherRequest): Promise<DeleteTeacherResponse>;
    /**
     * @summary 删除大学课程组
     *
     * @param request DeleteUniversityCourseGroupRequest
     * @param headers DeleteUniversityCourseGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteUniversityCourseGroupResponse
     */
    deleteUniversityCourseGroupWithOptions(request: DeleteUniversityCourseGroupRequest, headers: DeleteUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteUniversityCourseGroupResponse>;
    /**
     * @summary 删除大学课程组
     *
     * @param request DeleteUniversityCourseGroupRequest
     * @return DeleteUniversityCourseGroupResponse
     */
    deleteUniversityCourseGroup(request: DeleteUniversityCourseGroupRequest): Promise<DeleteUniversityCourseGroupResponse>;
    /**
     * @summary 删除大学学生
     *
     * @param request DeleteUniversityStudentRequest
     * @param headers DeleteUniversityStudentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteUniversityStudentResponse
     */
    deleteUniversityStudentWithOptions(request: DeleteUniversityStudentRequest, headers: DeleteUniversityStudentHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteUniversityStudentResponse>;
    /**
     * @summary 删除大学学生
     *
     * @param request DeleteUniversityStudentRequest
     * @return DeleteUniversityStudentResponse
     */
    deleteUniversityStudent(request: DeleteUniversityStudentRequest): Promise<DeleteUniversityStudentResponse>;
    /**
     * @summary 删除大学教师
     *
     * @param request DeleteUniversityTeacherRequest
     * @param headers DeleteUniversityTeacherHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteUniversityTeacherResponse
     */
    deleteUniversityTeacherWithOptions(request: DeleteUniversityTeacherRequest, headers: DeleteUniversityTeacherHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteUniversityTeacherResponse>;
    /**
     * @summary 删除大学教师
     *
     * @param request DeleteUniversityTeacherRequest
     * @return DeleteUniversityTeacherResponse
     */
    deleteUniversityTeacher(request: DeleteUniversityTeacherRequest): Promise<DeleteUniversityTeacherResponse>;
    /**
     * @summary 设备心跳上报
     *
     * @param request DeviceHeartbeatRequest
     * @param headers DeviceHeartbeatHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeviceHeartbeatResponse
     */
    deviceHeartbeatWithOptions(request: DeviceHeartbeatRequest, headers: DeviceHeartbeatHeaders, runtime: $Util.RuntimeOptions): Promise<DeviceHeartbeatResponse>;
    /**
     * @summary 设备心跳上报
     *
     * @param request DeviceHeartbeatRequest
     * @return DeviceHeartbeatResponse
     */
    deviceHeartbeat(request: DeviceHeartbeatRequest): Promise<DeviceHeartbeatResponse>;
    /**
     * @summary 教育侧用户的所有角色
     *
     * @param request EduFindUserRolesByUserIdRequest
     * @param headers EduFindUserRolesByUserIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EduFindUserRolesByUserIdResponse
     */
    eduFindUserRolesByUserIdWithOptions(request: EduFindUserRolesByUserIdRequest, headers: EduFindUserRolesByUserIdHeaders, runtime: $Util.RuntimeOptions): Promise<EduFindUserRolesByUserIdResponse>;
    /**
     * @summary 教育侧用户的所有角色
     *
     * @param request EduFindUserRolesByUserIdRequest
     * @return EduFindUserRolesByUserIdResponse
     */
    eduFindUserRolesByUserId(request: EduFindUserRolesByUserIdRequest): Promise<EduFindUserRolesByUserIdResponse>;
    /**
     * @summary 教育侧获取用户所有关系详情列表
     *
     * @param request EduListUserByFromUserIdsRequest
     * @param headers EduListUserByFromUserIdsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EduListUserByFromUserIdsResponse
     */
    eduListUserByFromUserIdsWithOptions(request: EduListUserByFromUserIdsRequest, headers: EduListUserByFromUserIdsHeaders, runtime: $Util.RuntimeOptions): Promise<EduListUserByFromUserIdsResponse>;
    /**
     * @summary 教育侧获取用户所有关系详情列表
     *
     * @param request EduListUserByFromUserIdsRequest
     * @return EduListUserByFromUserIdsResponse
     */
    eduListUserByFromUserIds(request: EduListUserByFromUserIdsRequest): Promise<EduListUserByFromUserIdsResponse>;
    /**
     * @summary 查询教师列表
     *
     * @param request EduTeacherListRequest
     * @param headers EduTeacherListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EduTeacherListResponse
     */
    eduTeacherListWithOptions(request: EduTeacherListRequest, headers: EduTeacherListHeaders, runtime: $Util.RuntimeOptions): Promise<EduTeacherListResponse>;
    /**
     * @summary 查询教师列表
     *
     * @param request EduTeacherListRequest
     * @return EduTeacherListResponse
     */
    eduTeacherList(request: EduTeacherListRequest): Promise<EduTeacherListResponse>;
    /**
     * @summary 关闭课程
     *
     * @param request EndCourseRequest
     * @param headers EndCourseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EndCourseResponse
     */
    endCourseWithOptions(request: EndCourseRequest, headers: EndCourseHeaders, runtime: $Util.RuntimeOptions): Promise<EndCourseResponse>;
    /**
     * @summary 关闭课程
     *
     * @param request EndCourseRequest
     * @return EndCourseResponse
     */
    endCourse(request: EndCourseRequest): Promise<EndCourseResponse>;
    /**
     * @summary 获取绑定孩子信息
     *
     * @param request GetBindChildInfoRequest
     * @param headers GetBindChildInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBindChildInfoResponse
     */
    getBindChildInfoWithOptions(request: GetBindChildInfoRequest, headers: GetBindChildInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetBindChildInfoResponse>;
    /**
     * @summary 获取绑定孩子信息
     *
     * @param request GetBindChildInfoRequest
     * @return GetBindChildInfoResponse
     */
    getBindChildInfo(request: GetBindChildInfoRequest): Promise<GetBindChildInfoResponse>;
    /**
     * @summary 获取默认孩子信息
     *
     * @param headers GetDefaultChildHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDefaultChildResponse
     */
    getDefaultChildWithOptions(headers: GetDefaultChildHeaders, runtime: $Util.RuntimeOptions): Promise<GetDefaultChildResponse>;
    /**
     * @summary 获取默认孩子信息
     *
     * @return GetDefaultChildResponse
     */
    getDefaultChild(): Promise<GetDefaultChildResponse>;
    /**
     * @summary 阿里云盘教师节活动获取用户身份
     *
     * @param request GetEduUserIdentityRequest
     * @param headers GetEduUserIdentityHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetEduUserIdentityResponse
     */
    getEduUserIdentityWithOptions(request: GetEduUserIdentityRequest, headers: GetEduUserIdentityHeaders, runtime: $Util.RuntimeOptions): Promise<GetEduUserIdentityResponse>;
    /**
     * @summary 阿里云盘教师节活动获取用户身份
     *
     * @param request GetEduUserIdentityRequest
     * @return GetEduUserIdentityResponse
     */
    getEduUserIdentity(request: GetEduUserIdentityRequest): Promise<GetEduUserIdentityResponse>;
    /**
     * @summary 获取公开课的课程详情
     *
     * @param headers GetOpenCourseDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpenCourseDetailResponse
     */
    getOpenCourseDetailWithOptions(courseId: string, headers: GetOpenCourseDetailHeaders, runtime: $Util.RuntimeOptions): Promise<GetOpenCourseDetailResponse>;
    /**
     * @summary 获取公开课的课程详情
     *
     * @return GetOpenCourseDetailResponse
     */
    getOpenCourseDetail(courseId: string): Promise<GetOpenCourseDetailResponse>;
    /**
     * @summary 获取通过审核的课程列表
     *
     * @param request GetOpenCoursesRequest
     * @param headers GetOpenCoursesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetOpenCoursesResponse
     */
    getOpenCoursesWithOptions(request: GetOpenCoursesRequest, headers: GetOpenCoursesHeaders, runtime: $Util.RuntimeOptions): Promise<GetOpenCoursesResponse>;
    /**
     * @summary 获取通过审核的课程列表
     *
     * @param request GetOpenCoursesRequest
     * @return GetOpenCoursesResponse
     */
    getOpenCourses(request: GetOpenCoursesRequest): Promise<GetOpenCoursesResponse>;
    /**
     * @summary 查询教育积分流水记录
     *
     * @param tmpReq GetPointActionRecordRequest
     * @param headers GetPointActionRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPointActionRecordResponse
     */
    getPointActionRecordWithOptions(tmpReq: GetPointActionRecordRequest, headers: GetPointActionRecordHeaders, runtime: $Util.RuntimeOptions): Promise<GetPointActionRecordResponse>;
    /**
     * @summary 查询教育积分流水记录
     *
     * @param request GetPointActionRecordRequest
     * @return GetPointActionRecordResponse
     */
    getPointActionRecord(request: GetPointActionRecordRequest): Promise<GetPointActionRecordResponse>;
    /**
     * @summary 查询教育积分信息
     *
     * @param request GetPointInfoRequest
     * @param headers GetPointInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPointInfoResponse
     */
    getPointInfoWithOptions(request: GetPointInfoRequest, headers: GetPointInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPointInfoResponse>;
    /**
     * @summary 查询教育积分信息
     *
     * @param request GetPointInfoRequest
     * @return GetPointInfoResponse
     */
    getPointInfo(request: GetPointInfoRequest): Promise<GetPointInfoResponse>;
    /**
     * @summary 查询专递课堂课程详情
     *
     * @param request GetRemoteClassCourseRequest
     * @param headers GetRemoteClassCourseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetRemoteClassCourseResponse
     */
    getRemoteClassCourseWithOptions(courseCode: string, request: GetRemoteClassCourseRequest, headers: GetRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<GetRemoteClassCourseResponse>;
    /**
     * @summary 查询专递课堂课程详情
     *
     * @param request GetRemoteClassCourseRequest
     * @return GetRemoteClassCourseResponse
     */
    getRemoteClassCourse(courseCode: string, request: GetRemoteClassCourseRequest): Promise<GetRemoteClassCourseResponse>;
    /**
     * @summary 获取共享角色成员
     *
     * @param headers GetShareRoleMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetShareRoleMembersResponse
     */
    getShareRoleMembersWithOptions(shareRoleCode: string, headers: GetShareRoleMembersHeaders, runtime: $Util.RuntimeOptions): Promise<GetShareRoleMembersResponse>;
    /**
     * @summary 获取共享角色成员
     *
     * @return GetShareRoleMembersResponse
     */
    getShareRoleMembers(shareRoleCode: string): Promise<GetShareRoleMembersResponse>;
    /**
     * @summary 获取教育局的共享角色列表
     *
     * @param headers GetShareRolesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetShareRolesResponse
     */
    getShareRolesWithOptions(headers: GetShareRolesHeaders, runtime: $Util.RuntimeOptions): Promise<GetShareRolesResponse>;
    /**
     * @summary 获取教育局的共享角色列表
     *
     * @return GetShareRolesResponse
     */
    getShareRoles(): Promise<GetShareRolesResponse>;
    /**
     * @summary 查询入学任务列表
     *
     * @param request GetTaskListRequest
     * @param headers GetTaskListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTaskListResponse
     */
    getTaskListWithOptions(request: GetTaskListRequest, headers: GetTaskListHeaders, runtime: $Util.RuntimeOptions): Promise<GetTaskListResponse>;
    /**
     * @summary 查询入学任务列表
     *
     * @param request GetTaskListRequest
     * @return GetTaskListResponse
     */
    getTaskList(request: GetTaskListRequest): Promise<GetTaskListResponse>;
    /**
     * @summary 获取入学任务下的学生列表
     *
     * @param request GetTaskStudentListRequest
     * @param headers GetTaskStudentListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTaskStudentListResponse
     */
    getTaskStudentListWithOptions(request: GetTaskStudentListRequest, headers: GetTaskStudentListHeaders, runtime: $Util.RuntimeOptions): Promise<GetTaskStudentListResponse>;
    /**
     * @summary 获取入学任务下的学生列表
     *
     * @param request GetTaskStudentListRequest
     * @return GetTaskStudentListResponse
     */
    getTaskStudentList(request: GetTaskStudentListRequest): Promise<GetTaskStudentListResponse>;
    /**
     * @summary 初始化班级课程表
     *
     * @param request InitCoursesOfClassRequest
     * @param headers InitCoursesOfClassHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InitCoursesOfClassResponse
     */
    initCoursesOfClassWithOptions(classId: string, request: InitCoursesOfClassRequest, headers: InitCoursesOfClassHeaders, runtime: $Util.RuntimeOptions): Promise<InitCoursesOfClassResponse>;
    /**
     * @summary 初始化班级课程表
     *
     * @param request InitCoursesOfClassRequest
     * @return InitCoursesOfClassResponse
     */
    initCoursesOfClass(classId: string, request: InitCoursesOfClassRequest): Promise<InitCoursesOfClassResponse>;
    /**
     * @summary 设备启动注册
     *
     * @param request InitDeviceRequest
     * @param headers InitDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InitDeviceResponse
     */
    initDeviceWithOptions(request: InitDeviceRequest, headers: InitDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<InitDeviceResponse>;
    /**
     * @summary 设备启动注册
     *
     * @param request InitDeviceRequest
     * @return InitDeviceResponse
     */
    initDevice(request: InitDeviceRequest): Promise<InitDeviceResponse>;
    /**
     * @summary 视讯paas机具初始化
     *
     * @param request InitVPaasDeviceRequest
     * @param headers InitVPaasDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InitVPaasDeviceResponse
     */
    initVPaasDeviceWithOptions(request: InitVPaasDeviceRequest, headers: InitVPaasDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<InitVPaasDeviceResponse>;
    /**
     * @summary 视讯paas机具初始化
     *
     * @param request InitVPaasDeviceRequest
     * @return InitVPaasDeviceResponse
     */
    initVPaasDevice(request: InitVPaasDeviceRequest): Promise<InitVPaasDeviceResponse>;
    /**
     * @summary 插入学校维度节次设置
     *
     * @param request InsertSectionConfigRequest
     * @param headers InsertSectionConfigHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return InsertSectionConfigResponse
     */
    insertSectionConfigWithOptions(request: InsertSectionConfigRequest, headers: InsertSectionConfigHeaders, runtime: $Util.RuntimeOptions): Promise<InsertSectionConfigResponse>;
    /**
     * @summary 插入学校维度节次设置
     *
     * @param request InsertSectionConfigRequest
     * @return InsertSectionConfigResponse
     */
    insertSectionConfig(request: InsertSectionConfigRequest): Promise<InsertSectionConfigResponse>;
    /**
     * @summary 第三方数据写入
     *
     * @param request IsvDataWriteRequest
     * @param headers IsvDataWriteHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IsvDataWriteResponse
     */
    isvDataWriteWithOptions(request: IsvDataWriteRequest, headers: IsvDataWriteHeaders, runtime: $Util.RuntimeOptions): Promise<IsvDataWriteResponse>;
    /**
     * @summary 第三方数据写入
     *
     * @param request IsvDataWriteRequest
     * @return IsvDataWriteResponse
     */
    isvDataWrite(request: IsvDataWriteRequest): Promise<IsvDataWriteResponse>;
    /**
     * @summary Isv查询元数据信息
     *
     * @param request IsvMetadataQueryRequest
     * @param headers IsvMetadataQueryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return IsvMetadataQueryResponse
     */
    isvMetadataQueryWithOptions(request: IsvMetadataQueryRequest, headers: IsvMetadataQueryHeaders, runtime: $Util.RuntimeOptions): Promise<IsvMetadataQueryResponse>;
    /**
     * @summary Isv查询元数据信息
     *
     * @param request IsvMetadataQueryRequest
     * @return IsvMetadataQueryResponse
     */
    isvMetadataQuery(request: IsvMetadataQueryRequest): Promise<IsvMetadataQueryResponse>;
    /**
     * @summary 查询订单
     *
     * @param request ListOrderRequest
     * @param headers ListOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListOrderResponse
     */
    listOrderWithOptions(request: ListOrderRequest, headers: ListOrderHeaders, runtime: $Util.RuntimeOptions): Promise<ListOrderResponse>;
    /**
     * @summary 查询订单
     *
     * @param request ListOrderRequest
     * @return ListOrderResponse
     */
    listOrder(request: ListOrderRequest): Promise<ListOrderResponse>;
    /**
     * @summary 学生调班，如果学生在本班有对应的家长，则家长也会跟同学生进行调整班级。
     *
     * @param request MoveStudentRequest
     * @param headers MoveStudentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MoveStudentResponse
     */
    moveStudentWithOptions(request: MoveStudentRequest, headers: MoveStudentHeaders, runtime: $Util.RuntimeOptions): Promise<MoveStudentResponse>;
    /**
     * @summary 学生调班，如果学生在本班有对应的家长，则家长也会跟同学生进行调整班级。
     *
     * @param request MoveStudentRequest
     * @return MoveStudentResponse
     */
    moveStudent(request: MoveStudentRequest): Promise<MoveStudentResponse>;
    /**
     * @summary 分页查询设备列表
     *
     * @param request PageQueryDevicesRequest
     * @param headers PageQueryDevicesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PageQueryDevicesResponse
     */
    pageQueryDevicesWithOptions(request: PageQueryDevicesRequest, headers: PageQueryDevicesHeaders, runtime: $Util.RuntimeOptions): Promise<PageQueryDevicesResponse>;
    /**
     * @summary 分页查询设备列表
     *
     * @param request PageQueryDevicesRequest
     * @return PageQueryDevicesResponse
     */
    pageQueryDevices(request: PageQueryDevicesRequest): Promise<PageQueryDevicesResponse>;
    /**
     * @summary 支付订单
     *
     * @param request PayOrderRequest
     * @param headers PayOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PayOrderResponse
     */
    payOrderWithOptions(request: PayOrderRequest, headers: PayOrderHeaders, runtime: $Util.RuntimeOptions): Promise<PayOrderResponse>;
    /**
     * @summary 支付订单
     *
     * @param request PayOrderRequest
     * @return PayOrderResponse
     */
    payOrder(request: PayOrderRequest): Promise<PayOrderResponse>;
    /**
     * @summary 轮询课程状态，确认教师是否已同意开课
     *
     * @param request PollingConfirmStatusRequest
     * @param headers PollingConfirmStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PollingConfirmStatusResponse
     */
    pollingConfirmStatusWithOptions(request: PollingConfirmStatusRequest, headers: PollingConfirmStatusHeaders, runtime: $Util.RuntimeOptions): Promise<PollingConfirmStatusResponse>;
    /**
     * @summary 轮询课程状态，确认教师是否已同意开课
     *
     * @param request PollingConfirmStatusRequest
     * @return PollingConfirmStatusResponse
     */
    pollingConfirmStatus(request: PollingConfirmStatusRequest): Promise<PollingConfirmStatusResponse>;
    /**
     * @summary 视讯paas机具预拨号
     *
     * @param request PreDialRequest
     * @param headers PreDialHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PreDialResponse
     */
    preDialWithOptions(request: PreDialRequest, headers: PreDialHeaders, runtime: $Util.RuntimeOptions): Promise<PreDialResponse>;
    /**
     * @summary 视讯paas机具预拨号
     *
     * @param request PreDialRequest
     * @return PreDialResponse
     */
    preDial(request: PreDialRequest): Promise<PreDialResponse>;
    /**
     * @summary 发放教育积分
     *
     * @param request ProvidePointRequest
     * @param headers ProvidePointHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ProvidePointResponse
     */
    providePointWithOptions(request: ProvidePointRequest, headers: ProvidePointHeaders, runtime: $Util.RuntimeOptions): Promise<ProvidePointResponse>;
    /**
     * @summary 发放教育积分
     *
     * @param request ProvidePointRequest
     * @return ProvidePointResponse
     */
    providePoint(request: ProvidePointRequest): Promise<ProvidePointResponse>;
    /**
     * @summary 查询全量学科实例列表
     *
     * @param tmpReq QueryAllSubjectsFromClassScheduleRequest
     * @param headers QueryAllSubjectsFromClassScheduleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAllSubjectsFromClassScheduleResponse
     */
    queryAllSubjectsFromClassScheduleWithOptions(tmpReq: QueryAllSubjectsFromClassScheduleRequest, headers: QueryAllSubjectsFromClassScheduleHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAllSubjectsFromClassScheduleResponse>;
    /**
     * @summary 查询全量学科实例列表
     *
     * @param request QueryAllSubjectsFromClassScheduleRequest
     * @return QueryAllSubjectsFromClassScheduleResponse
     */
    queryAllSubjectsFromClassSchedule(request: QueryAllSubjectsFromClassScheduleRequest): Promise<QueryAllSubjectsFromClassScheduleResponse>;
    /**
     * @summary 查询课程表
     *
     * @param request QueryClassScheduleRequest
     * @param headers QueryClassScheduleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryClassScheduleResponse
     */
    queryClassScheduleWithOptions(request: QueryClassScheduleRequest, headers: QueryClassScheduleHeaders, runtime: $Util.RuntimeOptions): Promise<QueryClassScheduleResponse>;
    /**
     * @summary 查询课程表
     *
     * @param request QueryClassScheduleRequest
     * @return QueryClassScheduleResponse
     */
    queryClassSchedule(request: QueryClassScheduleRequest): Promise<QueryClassScheduleResponse>;
    /**
     * @summary 按照学校和时间区间筛选课程
     *
     * @param request QueryClassScheduleByTimeSchoolRequest
     * @param headers QueryClassScheduleByTimeSchoolHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryClassScheduleByTimeSchoolResponse
     */
    queryClassScheduleByTimeSchoolWithOptions(request: QueryClassScheduleByTimeSchoolRequest, headers: QueryClassScheduleByTimeSchoolHeaders, runtime: $Util.RuntimeOptions): Promise<QueryClassScheduleByTimeSchoolResponse>;
    /**
     * @summary 按照学校和时间区间筛选课程
     *
     * @param request QueryClassScheduleByTimeSchoolRequest
     * @return QueryClassScheduleByTimeSchoolResponse
     */
    queryClassScheduleByTimeSchool(request: QueryClassScheduleByTimeSchoolRequest): Promise<QueryClassScheduleByTimeSchoolResponse>;
    /**
     * @summary 获取课程表设置
     *
     * @param tmpReq QueryClassScheduleConfigRequest
     * @param headers QueryClassScheduleConfigHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryClassScheduleConfigResponse
     */
    queryClassScheduleConfigWithOptions(tmpReq: QueryClassScheduleConfigRequest, headers: QueryClassScheduleConfigHeaders, runtime: $Util.RuntimeOptions): Promise<QueryClassScheduleConfigResponse>;
    /**
     * @summary 获取课程表设置
     *
     * @param request QueryClassScheduleConfigRequest
     * @return QueryClassScheduleConfigResponse
     */
    queryClassScheduleConfig(request: QueryClassScheduleConfigRequest): Promise<QueryClassScheduleConfigResponse>;
    /**
     * @summary 查询单台视讯PAAS设备
     *
     * @param request QueryDeviceRequest
     * @param headers QueryDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDeviceResponse
     */
    queryDeviceWithOptions(request: QueryDeviceRequest, headers: QueryDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDeviceResponse>;
    /**
     * @summary 查询单台视讯PAAS设备
     *
     * @param request QueryDeviceRequest
     * @return QueryDeviceResponse
     */
    queryDevice(request: QueryDeviceRequest): Promise<QueryDeviceResponse>;
    /**
     * @summary 查询某个组织下面的设备列表
     *
     * @param request QueryDeviceListByCorpIdRequest
     * @param headers QueryDeviceListByCorpIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDeviceListByCorpIdResponse
     */
    queryDeviceListByCorpIdWithOptions(request: QueryDeviceListByCorpIdRequest, headers: QueryDeviceListByCorpIdHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDeviceListByCorpIdResponse>;
    /**
     * @summary 查询某个组织下面的设备列表
     *
     * @param request QueryDeviceListByCorpIdRequest
     * @return QueryDeviceListByCorpIdResponse
     */
    queryDeviceListByCorpId(request: QueryDeviceListByCorpIdRequest): Promise<QueryDeviceListByCorpIdResponse>;
    /**
     * @summary 教学资源库查询space列表
     *
     * @param request QueryEduAssetSpacesRequest
     * @param headers QueryEduAssetSpacesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryEduAssetSpacesResponse
     */
    queryEduAssetSpacesWithOptions(request: QueryEduAssetSpacesRequest, headers: QueryEduAssetSpacesHeaders, runtime: $Util.RuntimeOptions): Promise<QueryEduAssetSpacesResponse>;
    /**
     * @summary 教学资源库查询space列表
     *
     * @param request QueryEduAssetSpacesRequest
     * @return QueryEduAssetSpacesResponse
     */
    queryEduAssetSpaces(request: QueryEduAssetSpacesRequest): Promise<QueryEduAssetSpacesResponse>;
    /**
     * @summary 根据设备SN信息查询学校人脸库
     *
     * @param request QueryGroupIdRequest
     * @param headers QueryGroupIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupIdResponse
     */
    queryGroupIdWithOptions(request: QueryGroupIdRequest, headers: QueryGroupIdHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupIdResponse>;
    /**
     * @summary 根据设备SN信息查询学校人脸库
     *
     * @param request QueryGroupIdRequest
     * @return QueryGroupIdResponse
     */
    queryGroupId(request: QueryGroupIdRequest): Promise<QueryGroupIdResponse>;
    /**
     * @summary 查询订单信息
     *
     * @param request QueryOrderRequest
     * @param headers QueryOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOrderResponse
     */
    queryOrderWithOptions(request: QueryOrderRequest, headers: QueryOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOrderResponse>;
    /**
     * @summary 查询订单信息
     *
     * @param request QueryOrderRequest
     * @return QueryOrderResponse
     */
    queryOrder(request: QueryOrderRequest): Promise<QueryOrderResponse>;
    /**
     * @summary 查询某个组织下面关联的组织列表
     *
     * @param request QueryOrgRelationListRequest
     * @param headers QueryOrgRelationListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOrgRelationListResponse
     */
    queryOrgRelationListWithOptions(request: QueryOrgRelationListRequest, headers: QueryOrgRelationListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOrgRelationListResponse>;
    /**
     * @summary 查询某个组织下面关联的组织列表
     *
     * @param request QueryOrgRelationListRequest
     * @return QueryOrgRelationListResponse
     */
    queryOrgRelationList(request: QueryOrgRelationListRequest): Promise<QueryOrgRelationListResponse>;
    /**
     * @summary 获取组织秘钥
     *
     * @param request QueryOrgSecretKeyRequest
     * @param headers QueryOrgSecretKeyHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOrgSecretKeyResponse
     */
    queryOrgSecretKeyWithOptions(request: QueryOrgSecretKeyRequest, headers: QueryOrgSecretKeyHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOrgSecretKeyResponse>;
    /**
     * @summary 获取组织秘钥
     *
     * @param request QueryOrgSecretKeyRequest
     * @return QueryOrgSecretKeyResponse
     */
    queryOrgSecretKey(request: QueryOrgSecretKeyRequest): Promise<QueryOrgSecretKeyResponse>;
    /**
     * @summary 查询教育组织类型
     *
     * @param headers QueryOrgTypeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOrgTypeResponse
     */
    queryOrgTypeWithOptions(headers: QueryOrgTypeHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOrgTypeResponse>;
    /**
     * @summary 查询教育组织类型
     *
     * @return QueryOrgTypeResponse
     */
    queryOrgType(): Promise<QueryOrgTypeResponse>;
    /**
     * @summary 查询支付结果
     *
     * @param request QueryPayResultRequest
     * @param headers QueryPayResultHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryPayResultResponse
     */
    queryPayResultWithOptions(request: QueryPayResultRequest, headers: QueryPayResultHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPayResultResponse>;
    /**
     * @summary 查询支付结果
     *
     * @param request QueryPayResultRequest
     * @return QueryPayResultResponse
     */
    queryPayResult(request: QueryPayResultRequest): Promise<QueryPayResultResponse>;
    /**
     * @summary 查询物理教室信息
     *
     * @param request QueryPhysicalClassroomRequest
     * @param headers QueryPhysicalClassroomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryPhysicalClassroomResponse
     */
    queryPhysicalClassroomWithOptions(request: QueryPhysicalClassroomRequest, headers: QueryPhysicalClassroomHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPhysicalClassroomResponse>;
    /**
     * @summary 查询物理教室信息
     *
     * @param request QueryPhysicalClassroomRequest
     * @return QueryPhysicalClassroomResponse
     */
    queryPhysicalClassroom(request: QueryPhysicalClassroomRequest): Promise<QueryPhysicalClassroomResponse>;
    /**
     * @summary 查询用户订购服务状态
     *
     * @param request QueryPurchaseInfoRequest
     * @param headers QueryPurchaseInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryPurchaseInfoResponse
     */
    queryPurchaseInfoWithOptions(request: QueryPurchaseInfoRequest, headers: QueryPurchaseInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryPurchaseInfoResponse>;
    /**
     * @summary 查询用户订购服务状态
     *
     * @param request QueryPurchaseInfoRequest
     * @return QueryPurchaseInfoResponse
     */
    queryPurchaseInfo(request: QueryPurchaseInfoRequest): Promise<QueryPurchaseInfoResponse>;
    /**
     * @summary 查询课程列表
     *
     * @param request QueryRemoteClassCourseRequest
     * @param headers QueryRemoteClassCourseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRemoteClassCourseResponse
     */
    queryRemoteClassCourseWithOptions(request: QueryRemoteClassCourseRequest, headers: QueryRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRemoteClassCourseResponse>;
    /**
     * @summary 查询课程列表
     *
     * @param request QueryRemoteClassCourseRequest
     * @return QueryRemoteClassCourseResponse
     */
    queryRemoteClassCourse(request: QueryRemoteClassCourseRequest): Promise<QueryRemoteClassCourseResponse>;
    /**
     * @summary 分批查询学校人脸id
     *
     * @param request QuerySchoolUserFaceRequest
     * @param headers QuerySchoolUserFaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySchoolUserFaceResponse
     */
    querySchoolUserFaceWithOptions(request: QuerySchoolUserFaceRequest, headers: QuerySchoolUserFaceHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySchoolUserFaceResponse>;
    /**
     * @summary 分批查询学校人脸id
     *
     * @param request QuerySchoolUserFaceRequest
     * @return QuerySchoolUserFaceResponse
     */
    querySchoolUserFace(request: QuerySchoolUserFaceRequest): Promise<QuerySchoolUserFaceResponse>;
    /**
     * @summary 个人应用查询订单信息
     *
     * @param request QuerySnsOrderRequest
     * @param headers QuerySnsOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySnsOrderResponse
     */
    querySnsOrderWithOptions(request: QuerySnsOrderRequest, headers: QuerySnsOrderHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySnsOrderResponse>;
    /**
     * @summary 个人应用查询订单信息
     *
     * @param request QuerySnsOrderRequest
     * @return QuerySnsOrderResponse
     */
    querySnsOrder(request: QuerySnsOrderRequest): Promise<QuerySnsOrderResponse>;
    /**
     * @summary 获得课程表详细信息
     *
     * @param request QueryStatisticsDataRequest
     * @param headers QueryStatisticsDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryStatisticsDataResponse
     */
    queryStatisticsDataWithOptions(request: QueryStatisticsDataRequest, headers: QueryStatisticsDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryStatisticsDataResponse>;
    /**
     * @summary 获得课程表详细信息
     *
     * @param request QueryStatisticsDataRequest
     * @return QueryStatisticsDataResponse
     */
    queryStatisticsData(request: QueryStatisticsDataRequest): Promise<QueryStatisticsDataResponse>;
    /**
     * @summary 查询教授某学科老师列表
     *
     * @param request QuerySubjectTeachersRequest
     * @param headers QuerySubjectTeachersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySubjectTeachersResponse
     */
    querySubjectTeachersWithOptions(request: QuerySubjectTeachersRequest, headers: QuerySubjectTeachersHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySubjectTeachersResponse>;
    /**
     * @summary 查询教授某学科老师列表
     *
     * @param request QuerySubjectTeachersRequest
     * @return QuerySubjectTeachersResponse
     */
    querySubjectTeachers(request: QuerySubjectTeachersRequest): Promise<QuerySubjectTeachersResponse>;
    /**
     * @summary 查询老师教授学科列表
     *
     * @param request QueryTeachSubjectsRequest
     * @param headers QueryTeachSubjectsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryTeachSubjectsResponse
     */
    queryTeachSubjectsWithOptions(request: QueryTeachSubjectsRequest, headers: QueryTeachSubjectsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTeachSubjectsResponse>;
    /**
     * @summary 查询老师教授学科列表
     *
     * @param request QueryTeachSubjectsRequest
     * @return QueryTeachSubjectsResponse
     */
    queryTeachSubjects(request: QueryTeachSubjectsRequest): Promise<QueryTeachSubjectsResponse>;
    /**
     * @summary 查询大学课程组
     *
     * @param request QueryUniversityCourseGroupRequest
     * @param headers QueryUniversityCourseGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUniversityCourseGroupResponse
     */
    queryUniversityCourseGroupWithOptions(request: QueryUniversityCourseGroupRequest, headers: QueryUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUniversityCourseGroupResponse>;
    /**
     * @summary 查询大学课程组
     *
     * @param request QueryUniversityCourseGroupRequest
     * @return QueryUniversityCourseGroupResponse
     */
    queryUniversityCourseGroup(request: QueryUniversityCourseGroupRequest): Promise<QueryUniversityCourseGroupResponse>;
    /**
     * @summary 根据人脸id查询用户信息
     *
     * @param request QueryUserFaceRequest
     * @param headers QueryUserFaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserFaceResponse
     */
    queryUserFaceWithOptions(request: QueryUserFaceRequest, headers: QueryUserFaceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserFaceResponse>;
    /**
     * @summary 根据人脸id查询用户信息
     *
     * @param request QueryUserFaceRequest
     * @return QueryUserFaceResponse
     */
    queryUserFace(request: QueryUserFaceRequest): Promise<QueryUserFaceResponse>;
    /**
     * @summary 查询用户支付信息
     *
     * @param request QueryUserPayInfoRequest
     * @param headers QueryUserPayInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryUserPayInfoResponse
     */
    queryUserPayInfoWithOptions(request: QueryUserPayInfoRequest, headers: QueryUserPayInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryUserPayInfoResponse>;
    /**
     * @summary 查询用户支付信息
     *
     * @param request QueryUserPayInfoRequest
     * @return QueryUserPayInfoResponse
     */
    queryUserPayInfo(request: QueryUserPayInfoRequest): Promise<QueryUserPayInfoResponse>;
    /**
     * @summary 移除设备
     *
     * @param request RemoveDeviceRequest
     * @param headers RemoveDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveDeviceResponse
     */
    removeDeviceWithOptions(request: RemoveDeviceRequest, headers: RemoveDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<RemoveDeviceResponse>;
    /**
     * @summary 移除设备
     *
     * @param request RemoveDeviceRequest
     * @return RemoveDeviceResponse
     */
    removeDevice(request: RemoveDeviceRequest): Promise<RemoveDeviceResponse>;
    /**
     * @summary 设备日志上报接口
     *
     * @param request ReportDeviceLogRequest
     * @param headers ReportDeviceLogHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ReportDeviceLogResponse
     */
    reportDeviceLogWithOptions(request: ReportDeviceLogRequest, headers: ReportDeviceLogHeaders, runtime: $Util.RuntimeOptions): Promise<ReportDeviceLogResponse>;
    /**
     * @summary 设备日志上报接口
     *
     * @param request ReportDeviceLogRequest
     * @return ReportDeviceLogResponse
     */
    reportDeviceLog(request: ReportDeviceLogRequest): Promise<ReportDeviceLogResponse>;
    /**
     * @summary 上传设备使用日志
     *
     * @param request ReportDeviceUseLogRequest
     * @param headers ReportDeviceUseLogHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ReportDeviceUseLogResponse
     */
    reportDeviceUseLogWithOptions(request: ReportDeviceUseLogRequest, headers: ReportDeviceUseLogHeaders, runtime: $Util.RuntimeOptions): Promise<ReportDeviceUseLogResponse>;
    /**
     * @summary 上传设备使用日志
     *
     * @param request ReportDeviceUseLogRequest
     * @return ReportDeviceUseLogResponse
     */
    reportDeviceUseLog(request: ReportDeviceUseLogRequest): Promise<ReportDeviceUseLogResponse>;
    /**
     * @summary 回滚教育积分扣减
     *
     * @param request RollbackDeductPointRequest
     * @param headers RollbackDeductPointHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RollbackDeductPointResponse
     */
    rollbackDeductPointWithOptions(request: RollbackDeductPointRequest, headers: RollbackDeductPointHeaders, runtime: $Util.RuntimeOptions): Promise<RollbackDeductPointResponse>;
    /**
     * @summary 回滚教育积分扣减
     *
     * @param request RollbackDeductPointRequest
     * @return RollbackDeductPointResponse
     */
    rollbackDeductPoint(request: RollbackDeductPointRequest): Promise<RollbackDeductPointResponse>;
    /**
     * @summary 保存班级学情数据
     *
     * @param request SaveClassLearningDataRequest
     * @param headers SaveClassLearningDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveClassLearningDataResponse
     */
    saveClassLearningDataWithOptions(request: SaveClassLearningDataRequest, headers: SaveClassLearningDataHeaders, runtime: $Util.RuntimeOptions): Promise<SaveClassLearningDataResponse>;
    /**
     * @summary 保存班级学情数据
     *
     * @param request SaveClassLearningDataRequest
     * @return SaveClassLearningDataResponse
     */
    saveClassLearningData(request: SaveClassLearningDataRequest): Promise<SaveClassLearningDataResponse>;
    /**
     * @summary 保存学生学情数据
     *
     * @param request SaveStudentLearningDataRequest
     * @param headers SaveStudentLearningDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveStudentLearningDataResponse
     */
    saveStudentLearningDataWithOptions(request: SaveStudentLearningDataRequest, headers: SaveStudentLearningDataHeaders, runtime: $Util.RuntimeOptions): Promise<SaveStudentLearningDataResponse>;
    /**
     * @summary 保存学生学情数据
     *
     * @param request SaveStudentLearningDataRequest
     * @return SaveStudentLearningDataResponse
     */
    saveStudentLearningData(request: SaveStudentLearningDataRequest): Promise<SaveStudentLearningDataResponse>;
    /**
     * @summary 按关键字搜索老师
     *
     * @param request SearchTeachersRequest
     * @param headers SearchTeachersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchTeachersResponse
     */
    searchTeachersWithOptions(request: SearchTeachersRequest, headers: SearchTeachersHeaders, runtime: $Util.RuntimeOptions): Promise<SearchTeachersResponse>;
    /**
     * @summary 按关键字搜索老师
     *
     * @param request SearchTeachersRequest
     * @return SearchTeachersResponse
     */
    searchTeachers(request: SearchTeachersRequest): Promise<SearchTeachersResponse>;
    /**
     * @summary 亲情通话发消息
     *
     * @param request SendMessageRequest
     * @param headers SendMessageHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendMessageResponse
     */
    sendMessageWithOptions(request: SendMessageRequest, headers: SendMessageHeaders, runtime: $Util.RuntimeOptions): Promise<SendMessageResponse>;
    /**
     * @summary 亲情通话发消息
     *
     * @param request SendMessageRequest
     * @return SendMessageResponse
     */
    sendMessage(request: SendMessageRequest): Promise<SendMessageResponse>;
    /**
     * @summary 开始课程
     *
     * @param request StartCourseRequest
     * @param headers StartCourseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartCourseResponse
     */
    startCourseWithOptions(request: StartCourseRequest, headers: StartCourseHeaders, runtime: $Util.RuntimeOptions): Promise<StartCourseResponse>;
    /**
     * @summary 开始课程
     *
     * @param request StartCourseRequest
     * @return StartCourseResponse
     */
    startCourse(request: StartCourseRequest): Promise<StartCourseResponse>;
    /**
     * @summary 预开课，发送开课提醒
     *
     * @param request StartCoursePrepareRequest
     * @param headers StartCoursePrepareHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartCoursePrepareResponse
     */
    startCoursePrepareWithOptions(request: StartCoursePrepareRequest, headers: StartCoursePrepareHeaders, runtime: $Util.RuntimeOptions): Promise<StartCoursePrepareResponse>;
    /**
     * @summary 预开课，发送开课提醒
     *
     * @param request StartCoursePrepareRequest
     * @return StartCoursePrepareResponse
     */
    startCoursePrepare(request: StartCoursePrepareRequest): Promise<StartCoursePrepareResponse>;
    /**
     * @summary 订阅大学课程组
     *
     * @param request SubscribeUniversityCourseGroupRequest
     * @param headers SubscribeUniversityCourseGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SubscribeUniversityCourseGroupResponse
     */
    subscribeUniversityCourseGroupWithOptions(request: SubscribeUniversityCourseGroupRequest, headers: SubscribeUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<SubscribeUniversityCourseGroupResponse>;
    /**
     * @summary 订阅大学课程组
     *
     * @param request SubscribeUniversityCourseGroupRequest
     * @return SubscribeUniversityCourseGroupResponse
     */
    subscribeUniversityCourseGroup(request: SubscribeUniversityCourseGroupRequest): Promise<SubscribeUniversityCourseGroupResponse>;
    /**
     * @summary 取消订阅大学课程组
     *
     * @param request UnsubscribeUniversityCourseGroupRequest
     * @param headers UnsubscribeUniversityCourseGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnsubscribeUniversityCourseGroupResponse
     */
    unsubscribeUniversityCourseGroupWithOptions(request: UnsubscribeUniversityCourseGroupRequest, headers: UnsubscribeUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UnsubscribeUniversityCourseGroupResponse>;
    /**
     * @summary 取消订阅大学课程组
     *
     * @param request UnsubscribeUniversityCourseGroupRequest
     * @return UnsubscribeUniversityCourseGroupResponse
     */
    unsubscribeUniversityCourseGroup(request: UnsubscribeUniversityCourseGroupRequest): Promise<UnsubscribeUniversityCourseGroupResponse>;
    /**
     * @summary 更新班级课程表（调代课等微调场景）
     *
     * @param request UpdateCoursesOfClassRequest
     * @param headers UpdateCoursesOfClassHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateCoursesOfClassResponse
     */
    updateCoursesOfClassWithOptions(classId: string, request: UpdateCoursesOfClassRequest, headers: UpdateCoursesOfClassHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateCoursesOfClassResponse>;
    /**
     * @summary 更新班级课程表（调代课等微调场景）
     *
     * @param request UpdateCoursesOfClassRequest
     * @return UpdateCoursesOfClassResponse
     */
    updateCoursesOfClass(classId: string, request: UpdateCoursesOfClassRequest): Promise<UpdateCoursesOfClassResponse>;
    /**
     * @summary 添加物理教室信息
     *
     * @param request UpdatePhysicalClassroomRequest
     * @param headers UpdatePhysicalClassroomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdatePhysicalClassroomResponse
     */
    updatePhysicalClassroomWithOptions(request: UpdatePhysicalClassroomRequest, headers: UpdatePhysicalClassroomHeaders, runtime: $Util.RuntimeOptions): Promise<UpdatePhysicalClassroomResponse>;
    /**
     * @summary 添加物理教室信息
     *
     * @param request UpdatePhysicalClassroomRequest
     * @return UpdatePhysicalClassroomResponse
     */
    updatePhysicalClassroom(request: UpdatePhysicalClassroomRequest): Promise<UpdatePhysicalClassroomResponse>;
    /**
     * @summary 更新专递课堂课程
     *
     * @param request UpdateRemoteClassCourseRequest
     * @param headers UpdateRemoteClassCourseHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateRemoteClassCourseResponse
     */
    updateRemoteClassCourseWithOptions(request: UpdateRemoteClassCourseRequest, headers: UpdateRemoteClassCourseHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRemoteClassCourseResponse>;
    /**
     * @summary 更新专递课堂课程
     *
     * @param request UpdateRemoteClassCourseRequest
     * @return UpdateRemoteClassCourseResponse
     */
    updateRemoteClassCourse(request: UpdateRemoteClassCourseRequest): Promise<UpdateRemoteClassCourseResponse>;
    /**
     * @summary 更新设备名称
     *
     * @param request UpdateRemoteClassDeviceRequest
     * @param headers UpdateRemoteClassDeviceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateRemoteClassDeviceResponse
     */
    updateRemoteClassDeviceWithOptions(request: UpdateRemoteClassDeviceRequest, headers: UpdateRemoteClassDeviceHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateRemoteClassDeviceResponse>;
    /**
     * @summary 更新设备名称
     *
     * @param request UpdateRemoteClassDeviceRequest
     * @return UpdateRemoteClassDeviceResponse
     */
    updateRemoteClassDevice(request: UpdateRemoteClassDeviceRequest): Promise<UpdateRemoteClassDeviceResponse>;
    /**
     * @summary 更新大学课程组
     *
     * @param request UpdateUniversityCourseGroupRequest
     * @param headers UpdateUniversityCourseGroupHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateUniversityCourseGroupResponse
     */
    updateUniversityCourseGroupWithOptions(request: UpdateUniversityCourseGroupRequest, headers: UpdateUniversityCourseGroupHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateUniversityCourseGroupResponse>;
    /**
     * @summary 更新大学课程组
     *
     * @param request UpdateUniversityCourseGroupRequest
     * @return UpdateUniversityCourseGroupResponse
     */
    updateUniversityCourseGroup(request: UpdateUniversityCourseGroupRequest): Promise<UpdateUniversityCourseGroupResponse>;
    /**
     * @summary 上传学情图片回调
     *
     * @param request UploadLearningDataCallbackRequest
     * @param headers UploadLearningDataCallbackHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UploadLearningDataCallbackResponse
     */
    uploadLearningDataCallbackWithOptions(request: UploadLearningDataCallbackRequest, headers: UploadLearningDataCallbackHeaders, runtime: $Util.RuntimeOptions): Promise<UploadLearningDataCallbackResponse>;
    /**
     * @summary 上传学情图片回调
     *
     * @param request UploadLearningDataCallbackRequest
     * @return UploadLearningDataCallbackResponse
     */
    uploadLearningDataCallback(request: UploadLearningDataCallbackRequest): Promise<UploadLearningDataCallbackResponse>;
    /**
     * @summary 视讯PAAS接口代理
     *
     * @param request VPaasProxyRequest
     * @param headers VPaasProxyHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return VPaasProxyResponse
     */
    vPaasProxyWithOptions(request: VPaasProxyRequest, headers: VPaasProxyHeaders, runtime: $Util.RuntimeOptions): Promise<VPaasProxyResponse>;
    /**
     * @summary 视讯PAAS接口代理
     *
     * @param request VPaasProxyRequest
     * @return VPaasProxyResponse
     */
    vPaasProxy(request: VPaasProxyRequest): Promise<VPaasProxyResponse>;
    /**
     * @summary 校验开学季任务是否完成
     *
     * @param request ValidateNewGradeManagerRequest
     * @param headers ValidateNewGradeManagerHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ValidateNewGradeManagerResponse
     */
    validateNewGradeManagerWithOptions(request: ValidateNewGradeManagerRequest, headers: ValidateNewGradeManagerHeaders, runtime: $Util.RuntimeOptions): Promise<ValidateNewGradeManagerResponse>;
    /**
     * @summary 校验开学季任务是否完成
     *
     * @param request ValidateNewGradeManagerRequest
     * @return ValidateNewGradeManagerResponse
     */
    validateNewGradeManager(request: ValidateNewGradeManagerRequest): Promise<ValidateNewGradeManagerResponse>;
    /**
     * @summary 校验用户的教育角色
     *
     * @param request ValidateUserRoleRequest
     * @param headers ValidateUserRoleHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ValidateUserRoleResponse
     */
    validateUserRoleWithOptions(request: ValidateUserRoleRequest, headers: ValidateUserRoleHeaders, runtime: $Util.RuntimeOptions): Promise<ValidateUserRoleResponse>;
    /**
     * @summary 校验用户的教育角色
     *
     * @param request ValidateUserRoleRequest
     * @return ValidateUserRoleResponse
     */
    validateUserRole(request: ValidateUserRoleRequest): Promise<ValidateUserRoleResponse>;
}
