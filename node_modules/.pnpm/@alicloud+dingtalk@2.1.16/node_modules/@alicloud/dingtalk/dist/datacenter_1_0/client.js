"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetInvestmentAbroadRequest = exports.GetInvestmentAbroadHeaders = exports.GetIntellectualPropertyResponse = exports.GetIntellectualPropertyResponseBody = exports.GetIntellectualPropertyRequest = exports.GetIntellectualPropertyHeaders = exports.GetHolderInfoResponse = exports.GetHolderInfoResponseBody = exports.GetHolderInfoRequest = exports.GetHolderInfoHeaders = exports.GetEnvironmentalPenaltiesResponse = exports.GetEnvironmentalPenaltiesResponseBody = exports.GetEnvironmentalPenaltiesRequest = exports.GetEnvironmentalPenaltiesHeaders = exports.GetDoubleRandomResponse = exports.GetDoubleRandomResponseBody = exports.GetDoubleRandomRequest = exports.GetDoubleRandomHeaders = exports.GetDomainInfoResponse = exports.GetDomainInfoResponseBody = exports.GetDomainInfoRequest = exports.GetDomainInfoHeaders = exports.GetChangeRecordResponse = exports.GetChangeRecordResponseBody = exports.GetChangeRecordRequest = exports.GetChangeRecordHeaders = exports.GetBranchInfoResponse = exports.GetBranchInfoResponseBody = exports.GetBranchInfoRequest = exports.GetBranchInfoHeaders = exports.GetBiddingInfoResponse = exports.GetBiddingInfoResponseBody = exports.GetBiddingInfoRequest = exports.GetBiddingInfoHeaders = exports.GetBasicInfoResponse = exports.GetBasicInfoResponseBody = exports.GetBasicInfoRequest = exports.GetBasicInfoHeaders = exports.GetAdministrativePenaltiesResponse = exports.GetAdministrativePenaltiesResponseBody = exports.GetAdministrativePenaltiesRequest = exports.GetAdministrativePenaltiesHeaders = exports.GetAdministrativeLicensingResponse = exports.GetAdministrativeLicensingResponseBody = exports.GetAdministrativeLicensingRequest = exports.GetAdministrativeLicensingHeaders = exports.GetAbnormalOperationResponse = exports.GetAbnormalOperationResponseBody = exports.GetAbnormalOperationRequest = exports.GetAbnormalOperationHeaders = void 0;
exports.QueryApprovalStatisticalDataHeaders = exports.QueryAnhmdStatisticalDataResponse = exports.QueryAnhmdStatisticalDataResponseBody = exports.QueryAnhmdStatisticalDataRequest = exports.QueryAnhmdStatisticalDataHeaders = exports.QueryActiveUserStatisticalDataResponse = exports.QueryActiveUserStatisticalDataResponseBody = exports.QueryActiveUserStatisticalDataRequest = exports.QueryActiveUserStatisticalDataHeaders = exports.PostCorpAuthInfoResponse = exports.PostCorpAuthInfoResponseBody = exports.PostCorpAuthInfoHeaders = exports.GetWorkCopyrightResponse = exports.GetWorkCopyrightResponseBody = exports.GetWorkCopyrightRequest = exports.GetWorkCopyrightHeaders = exports.GetTrademarkInfoResponse = exports.GetTrademarkInfoResponseBody = exports.GetTrademarkInfoRequest = exports.GetTrademarkInfoHeaders = exports.GetSoftwareCopyrightResponse = exports.GetSoftwareCopyrightResponseBody = exports.GetSoftwareCopyrightRequest = exports.GetSoftwareCopyrightHeaders = exports.GetSeriousViolationResponse = exports.GetSeriousViolationResponseBody = exports.GetSeriousViolationRequest = exports.GetSeriousViolationHeaders = exports.GetQualificationCertResponse = exports.GetQualificationCertResponseBody = exports.GetQualificationCertRequest = exports.GetQualificationCertHeaders = exports.GetQeneralTaxpayerInfoResponse = exports.GetQeneralTaxpayerInfoResponseBody = exports.GetQeneralTaxpayerInfoRequest = exports.GetQeneralTaxpayerInfoHeaders = exports.GetPrincipalEmployeeResponse = exports.GetPrincipalEmployeeResponseBody = exports.GetPrincipalEmployeeRequest = exports.GetPrincipalEmployeeHeaders = exports.GetPatentInfoResponse = exports.GetPatentInfoResponseBody = exports.GetPatentInfoRequest = exports.GetPatentInfoHeaders = exports.GetJobInfoResponse = exports.GetJobInfoResponseBody = exports.GetJobInfoRequest = exports.GetJobInfoHeaders = exports.GetInvestmentAbroadResponse = exports.GetInvestmentAbroadResponseBody = void 0;
exports.QueryEmployeeTypeStatisticalDataResponseBody = exports.QueryEmployeeTypeStatisticalDataRequest = exports.QueryEmployeeTypeStatisticalDataHeaders = exports.QueryDriveStatisticalDataResponse = exports.QueryDriveStatisticalDataResponseBody = exports.QueryDriveStatisticalDataRequest = exports.QueryDriveStatisticalDataHeaders = exports.QueryDocumentStatisticalDataResponse = exports.QueryDocumentStatisticalDataResponseBody = exports.QueryDocumentStatisticalDataRequest = exports.QueryDocumentStatisticalDataHeaders = exports.QueryDingSendStatisticalDataResponse = exports.QueryDingSendStatisticalDataResponseBody = exports.QueryDingSendStatisticalDataRequest = exports.QueryDingSendStatisticalDataHeaders = exports.QueryDingReciveStatisticalDataResponse = exports.QueryDingReciveStatisticalDataResponseBody = exports.QueryDingReciveStatisticalDataRequest = exports.QueryDingReciveStatisticalDataHeaders = exports.QueryDigitalDistrictOrgInfoResponse = exports.QueryDigitalDistrictOrgInfoResponseBody = exports.QueryDigitalDistrictOrgInfoRequest = exports.QueryDigitalDistrictOrgInfoHeaders = exports.QueryCompanyBasicInfoResponse = exports.QueryCompanyBasicInfoResponseBody = exports.QueryCompanyBasicInfoRequest = exports.QueryCompanyBasicInfoHeaders = exports.QueryCircleStatisticalDataResponse = exports.QueryCircleStatisticalDataResponseBody = exports.QueryCircleStatisticalDataRequest = exports.QueryCircleStatisticalDataHeaders = exports.QueryCheckinStatisticalDataResponse = exports.QueryCheckinStatisticalDataResponseBody = exports.QueryCheckinStatisticalDataRequest = exports.QueryCheckinStatisticalDataHeaders = exports.QueryCalendarStatisticalDataResponse = exports.QueryCalendarStatisticalDataResponseBody = exports.QueryCalendarStatisticalDataRequest = exports.QueryCalendarStatisticalDataHeaders = exports.QueryBlackboardStatisticalDataResponse = exports.QueryBlackboardStatisticalDataResponseBody = exports.QueryBlackboardStatisticalDataRequest = exports.QueryBlackboardStatisticalDataHeaders = exports.QueryAttendanceStatisticalDataResponse = exports.QueryAttendanceStatisticalDataResponseBody = exports.QueryAttendanceStatisticalDataRequest = exports.QueryAttendanceStatisticalDataHeaders = exports.QueryApprovalStatisticalDataResponse = exports.QueryApprovalStatisticalDataResponseBody = exports.QueryApprovalStatisticalDataRequest = void 0;
exports.QueryReportStatisticalDataHeaders = exports.QueryRedEnvelopeSendStatisticalDataResponse = exports.QueryRedEnvelopeSendStatisticalDataResponseBody = exports.QueryRedEnvelopeSendStatisticalDataRequest = exports.QueryRedEnvelopeSendStatisticalDataHeaders = exports.QueryRedEnvelopeReciveStatisticalDataResponse = exports.QueryRedEnvelopeReciveStatisticalDataResponseBody = exports.QueryRedEnvelopeReciveStatisticalDataRequest = exports.QueryRedEnvelopeReciveStatisticalDataHeaders = exports.QueryOnlineUserStatisticalDataResponse = exports.QueryOnlineUserStatisticalDataResponseBody = exports.QueryOnlineUserStatisticalDataRequest = exports.QueryOnlineUserStatisticalDataHeaders = exports.QueryOfficialFormDataResponse = exports.QueryOfficialFormDataResponseBody = exports.QueryOfficialFormDataRequest = exports.QueryOfficialFormDataHeaders = exports.QueryOfficialDatasetListResponse = exports.QueryOfficialDatasetListResponseBody = exports.QueryOfficialDatasetListRequest = exports.QueryOfficialDatasetListHeaders = exports.QueryOfficialDatasetFieldsResponse = exports.QueryOfficialDatasetFieldsResponseBody = exports.QueryOfficialDatasetFieldsRequest = exports.QueryOfficialDatasetFieldsHeaders = exports.QueryOfficialDataResponse = exports.QueryOfficialDataResponseBody = exports.QueryOfficialDataRequest = exports.QueryOfficialDataHeaders = exports.QueryMailStatisticalDataResponse = exports.QueryMailStatisticalDataResponseBody = exports.QueryMailStatisticalDataRequest = exports.QueryMailStatisticalDataHeaders = exports.QueryHealthStatisticalDataResponse = exports.QueryHealthStatisticalDataResponseBody = exports.QueryHealthStatisticalDataRequest = exports.QueryHealthStatisticalDataHeaders = exports.QueryGroupMessageStatisticalDataResponse = exports.QueryGroupMessageStatisticalDataResponseBody = exports.QueryGroupMessageStatisticalDataRequest = exports.QueryGroupMessageStatisticalDataHeaders = exports.QueryGroupLiveStatisticalDataResponse = exports.QueryGroupLiveStatisticalDataResponseBody = exports.QueryGroupLiveStatisticalDataRequest = exports.QueryGroupLiveStatisticalDataHeaders = exports.QueryGeneralDataServiceResponse = exports.QueryGeneralDataServiceResponseBody = exports.QueryGeneralDataServiceRequest = exports.QueryGeneralDataServiceHeaders = exports.QueryEmployeeTypeStatisticalDataResponse = void 0;
exports.QueryYydCalendarDayStatisticalDataResponseBody = exports.QueryYydCalendarDayStatisticalDataRequest = exports.QueryYydCalendarDayStatisticalDataHeaders = exports.QueryYydAppWeekStatisticalDataResponse = exports.QueryYydAppWeekStatisticalDataResponseBody = exports.QueryYydAppWeekStatisticalDataRequest = exports.QueryYydAppWeekStatisticalDataHeaders = exports.QueryYydAppStdStatisticalDataResponse = exports.QueryYydAppStdStatisticalDataResponseBody = exports.QueryYydAppStdStatisticalDataRequest = exports.QueryYydAppStdStatisticalDataHeaders = exports.QueryYydAppMonthStatisticalDataResponse = exports.QueryYydAppMonthStatisticalDataResponseBody = exports.QueryYydAppMonthStatisticalDataRequest = exports.QueryYydAppMonthStatisticalDataHeaders = exports.QueryYydAppDayStatisticalDataResponse = exports.QueryYydAppDayStatisticalDataResponseBody = exports.QueryYydAppDayStatisticalDataRequest = exports.QueryYydAppDayStatisticalDataHeaders = exports.QueryYydActiveWeekStatisticalDataResponse = exports.QueryYydActiveWeekStatisticalDataResponseBody = exports.QueryYydActiveWeekStatisticalDataRequest = exports.QueryYydActiveWeekStatisticalDataHeaders = exports.QueryYydActiveMonthStatisticalDataResponse = exports.QueryYydActiveMonthStatisticalDataResponseBody = exports.QueryYydActiveMonthStatisticalDataRequest = exports.QueryYydActiveMonthStatisticalDataHeaders = exports.QueryYydActiveDayStatisticalDataResponse = exports.QueryYydActiveDayStatisticalDataResponseBody = exports.QueryYydActiveDayStatisticalDataRequest = exports.QueryYydActiveDayStatisticalDataHeaders = exports.QueryVedioMeetingStatisticalDataResponse = exports.QueryVedioMeetingStatisticalDataResponseBody = exports.QueryVedioMeetingStatisticalDataRequest = exports.QueryVedioMeetingStatisticalDataHeaders = exports.QueryTodoStatisticalDataResponse = exports.QueryTodoStatisticalDataResponseBody = exports.QueryTodoStatisticalDataRequest = exports.QueryTodoStatisticalDataHeaders = exports.QueryTelMeetingStatisticalDataResponse = exports.QueryTelMeetingStatisticalDataResponseBody = exports.QueryTelMeetingStatisticalDataRequest = exports.QueryTelMeetingStatisticalDataHeaders = exports.QuerySingleMessageStatisticalDataResponse = exports.QuerySingleMessageStatisticalDataResponseBody = exports.QuerySingleMessageStatisticalDataRequest = exports.QuerySingleMessageStatisticalDataHeaders = exports.QueryReportStatisticalDataResponse = exports.QueryReportStatisticalDataResponseBody = exports.QueryReportStatisticalDataRequest = void 0;
exports.QueryYydMeetingMonthStatisticalDataHeaders = exports.QueryYydMeetingDayStatisticalDataResponse = exports.QueryYydMeetingDayStatisticalDataResponseBody = exports.QueryYydMeetingDayStatisticalDataRequest = exports.QueryYydMeetingDayStatisticalDataHeaders = exports.QueryYydLogWeekStatisticalDataResponse = exports.QueryYydLogWeekStatisticalDataResponseBody = exports.QueryYydLogWeekStatisticalDataRequest = exports.QueryYydLogWeekStatisticalDataHeaders = exports.QueryYydLogMonthStatisticalDataResponse = exports.QueryYydLogMonthStatisticalDataResponseBody = exports.QueryYydLogMonthStatisticalDataRequest = exports.QueryYydLogMonthStatisticalDataHeaders = exports.QueryYydLogDayStatisticalDataResponse = exports.QueryYydLogDayStatisticalDataResponseBody = exports.QueryYydLogDayStatisticalDataRequest = exports.QueryYydLogDayStatisticalDataHeaders = exports.QueryYydGroupMsgWeekStatisticalDataResponse = exports.QueryYydGroupMsgWeekStatisticalDataResponseBody = exports.QueryYydGroupMsgWeekStatisticalDataRequest = exports.QueryYydGroupMsgWeekStatisticalDataHeaders = exports.QueryYydGroupMsgMonthStatisticalDataResponse = exports.QueryYydGroupMsgMonthStatisticalDataResponseBody = exports.QueryYydGroupMsgMonthStatisticalDataRequest = exports.QueryYydGroupMsgMonthStatisticalDataHeaders = exports.QueryYydGroupMsgDayStatisticalDataResponse = exports.QueryYydGroupMsgDayStatisticalDataResponseBody = exports.QueryYydGroupMsgDayStatisticalDataRequest = exports.QueryYydGroupMsgDayStatisticalDataHeaders = exports.QueryYydDingMsgWeekStatisticalDataResponse = exports.QueryYydDingMsgWeekStatisticalDataResponseBody = exports.QueryYydDingMsgWeekStatisticalDataRequest = exports.QueryYydDingMsgWeekStatisticalDataHeaders = exports.QueryYydDingMsgMonthStatisticalDataResponse = exports.QueryYydDingMsgMonthStatisticalDataResponseBody = exports.QueryYydDingMsgMonthStatisticalDataRequest = exports.QueryYydDingMsgMonthStatisticalDataHeaders = exports.QueryYydDingMsgDayStatisticalDataResponse = exports.QueryYydDingMsgDayStatisticalDataResponseBody = exports.QueryYydDingMsgDayStatisticalDataRequest = exports.QueryYydDingMsgDayStatisticalDataHeaders = exports.QueryYydCalendarWeekStatisticalDataResponse = exports.QueryYydCalendarWeekStatisticalDataResponseBody = exports.QueryYydCalendarWeekStatisticalDataRequest = exports.QueryYydCalendarWeekStatisticalDataHeaders = exports.QueryYydCalendarMonthStatisticalDataResponse = exports.QueryYydCalendarMonthStatisticalDataResponseBody = exports.QueryYydCalendarMonthStatisticalDataRequest = exports.QueryYydCalendarMonthStatisticalDataHeaders = exports.QueryYydCalendarDayStatisticalDataResponse = void 0;
exports.QueryYydTodoMonthStatisticalDataResponseBody = exports.QueryYydTodoMonthStatisticalDataRequest = exports.QueryYydTodoMonthStatisticalDataHeaders = exports.QueryYydTodoDayStatisticalDataResponse = exports.QueryYydTodoDayStatisticalDataResponseBody = exports.QueryYydTodoDayStatisticalDataRequest = exports.QueryYydTodoDayStatisticalDataHeaders = exports.QueryYydToatlMsgWeekStatisticalDataResponse = exports.QueryYydToatlMsgWeekStatisticalDataResponseBody = exports.QueryYydToatlMsgWeekStatisticalDataRequest = exports.QueryYydToatlMsgWeekStatisticalDataHeaders = exports.QueryYydToatlMsgMonthStatisticalDataResponse = exports.QueryYydToatlMsgMonthStatisticalDataResponseBody = exports.QueryYydToatlMsgMonthStatisticalDataRequest = exports.QueryYydToatlMsgMonthStatisticalDataHeaders = exports.QueryYydToatlMsgDayStatisticalDataResponse = exports.QueryYydToatlMsgDayStatisticalDataResponseBody = exports.QueryYydToatlMsgDayStatisticalDataRequest = exports.QueryYydToatlMsgDayStatisticalDataHeaders = exports.QueryYydSingleMsgWeekStatisticalDataResponse = exports.QueryYydSingleMsgWeekStatisticalDataResponseBody = exports.QueryYydSingleMsgWeekStatisticalDataRequest = exports.QueryYydSingleMsgWeekStatisticalDataHeaders = exports.QueryYydSingleMsgMonthStatisticalDataResponse = exports.QueryYydSingleMsgMonthStatisticalDataResponseBody = exports.QueryYydSingleMsgMonthStatisticalDataRequest = exports.QueryYydSingleMsgMonthStatisticalDataHeaders = exports.QueryYydSingleMsgDayStatisticalDataResponse = exports.QueryYydSingleMsgDayStatisticalDataResponseBody = exports.QueryYydSingleMsgDayStatisticalDataRequest = exports.QueryYydSingleMsgDayStatisticalDataHeaders = exports.QueryYydNoticeWeekStatisticalDataResponse = exports.QueryYydNoticeWeekStatisticalDataResponseBody = exports.QueryYydNoticeWeekStatisticalDataRequest = exports.QueryYydNoticeWeekStatisticalDataHeaders = exports.QueryYydNoticeMonthStatisticalDataResponse = exports.QueryYydNoticeMonthStatisticalDataResponseBody = exports.QueryYydNoticeMonthStatisticalDataRequest = exports.QueryYydNoticeMonthStatisticalDataHeaders = exports.QueryYydNoticeDayStatisticalDataResponse = exports.QueryYydNoticeDayStatisticalDataResponseBody = exports.QueryYydNoticeDayStatisticalDataRequest = exports.QueryYydNoticeDayStatisticalDataHeaders = exports.QueryYydMeetingWeekStatisticalDataResponse = exports.QueryYydMeetingWeekStatisticalDataResponseBody = exports.QueryYydMeetingWeekStatisticalDataRequest = exports.QueryYydMeetingWeekStatisticalDataHeaders = exports.QueryYydMeetingMonthStatisticalDataResponse = exports.QueryYydMeetingMonthStatisticalDataResponseBody = exports.QueryYydMeetingMonthStatisticalDataRequest = void 0;
exports.QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList = exports.QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList = exports.QueryOnlineUserStatisticalDataResponseBodyMetaList = exports.QueryOfficialDatasetListResponseBodyResult = exports.QueryOfficialDatasetListResponseBodyResultRows = exports.QueryOfficialDatasetFieldsResponseBodyResult = exports.QueryOfficialDatasetFieldsResponseBodyResultFields = exports.QueryMailStatisticalDataResponseBodyMetaList = exports.QueryHealthStatisticalDataResponseBodyMetaList = exports.QueryGroupMessageStatisticalDataResponseBodyMetaList = exports.QueryGroupLiveStatisticalDataResponseBodyMetaList = exports.QueryGeneralDataServiceResponseBodyMetaList = exports.QueryEmployeeTypeStatisticalDataResponseBodyMetaList = exports.QueryDriveStatisticalDataResponseBodyMetaList = exports.QueryDocumentStatisticalDataResponseBodyMetaList = exports.QueryDingSendStatisticalDataResponseBodyMetaList = exports.QueryDingReciveStatisticalDataResponseBodyMetaList = exports.QueryCircleStatisticalDataResponseBodyMetaList = exports.QueryCheckinStatisticalDataResponseBodyMetaList = exports.QueryCalendarStatisticalDataResponseBodyMetaList = exports.QueryBlackboardStatisticalDataResponseBodyMetaList = exports.QueryAttendanceStatisticalDataResponseBodyMetaList = exports.QueryApprovalStatisticalDataResponseBodyMetaList = exports.QueryAnhmdStatisticalDataResponseBodyMetaList = exports.QueryActiveUserStatisticalDataResponseBodyMetaList = exports.SearchCompanyResponse = exports.SearchCompanyResponseBody = exports.SearchCompanyRequest = exports.SearchCompanyHeaders = exports.QueryYydTotalWeekStatisticalDataResponse = exports.QueryYydTotalWeekStatisticalDataResponseBody = exports.QueryYydTotalWeekStatisticalDataRequest = exports.QueryYydTotalWeekStatisticalDataHeaders = exports.QueryYydTotalStdStatisticalDataResponse = exports.QueryYydTotalStdStatisticalDataResponseBody = exports.QueryYydTotalStdStatisticalDataRequest = exports.QueryYydTotalStdStatisticalDataHeaders = exports.QueryYydTotalMonthStatisticalDataResponse = exports.QueryYydTotalMonthStatisticalDataResponseBody = exports.QueryYydTotalMonthStatisticalDataRequest = exports.QueryYydTotalMonthStatisticalDataHeaders = exports.QueryYydTotalDayStatisticalDataResponse = exports.QueryYydTotalDayStatisticalDataResponseBody = exports.QueryYydTotalDayStatisticalDataRequest = exports.QueryYydTotalDayStatisticalDataHeaders = exports.QueryYydTodoWeekStatisticalDataResponse = exports.QueryYydTodoWeekStatisticalDataResponseBody = exports.QueryYydTodoWeekStatisticalDataRequest = exports.QueryYydTodoWeekStatisticalDataHeaders = exports.QueryYydTodoMonthStatisticalDataResponse = void 0;
exports.QueryYydTotalWeekStatisticalDataResponseBodyMetaList = exports.QueryYydTotalStdStatisticalDataResponseBodyMetaList = exports.QueryYydTotalMonthStatisticalDataResponseBodyMetaList = exports.QueryYydTotalDayStatisticalDataResponseBodyMetaList = exports.QueryYydTodoWeekStatisticalDataResponseBodyMetaList = exports.QueryYydTodoMonthStatisticalDataResponseBodyMetaList = exports.QueryYydTodoDayStatisticalDataResponseBodyMetaList = exports.QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList = exports.QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList = exports.QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList = exports.QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList = exports.QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList = exports.QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList = exports.QueryYydNoticeWeekStatisticalDataResponseBodyMetaList = exports.QueryYydNoticeMonthStatisticalDataResponseBodyMetaList = exports.QueryYydNoticeDayStatisticalDataResponseBodyMetaList = exports.QueryYydMeetingWeekStatisticalDataResponseBodyMetaList = exports.QueryYydMeetingMonthStatisticalDataResponseBodyMetaList = exports.QueryYydMeetingDayStatisticalDataResponseBodyMetaList = exports.QueryYydLogWeekStatisticalDataResponseBodyMetaList = exports.QueryYydLogMonthStatisticalDataResponseBodyMetaList = exports.QueryYydLogDayStatisticalDataResponseBodyMetaList = exports.QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList = exports.QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList = exports.QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList = exports.QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList = exports.QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList = exports.QueryYydDingMsgDayStatisticalDataResponseBodyMetaList = exports.QueryYydCalendarWeekStatisticalDataResponseBodyMetaList = exports.QueryYydCalendarMonthStatisticalDataResponseBodyMetaList = exports.QueryYydCalendarDayStatisticalDataResponseBodyMetaList = exports.QueryYydAppWeekStatisticalDataResponseBodyMetaList = exports.QueryYydAppStdStatisticalDataResponseBodyMetaList = exports.QueryYydAppMonthStatisticalDataResponseBodyMetaList = exports.QueryYydAppDayStatisticalDataResponseBodyMetaList = exports.QueryYydActiveWeekStatisticalDataResponseBodyMetaList = exports.QueryYydActiveMonthStatisticalDataResponseBodyMetaList = exports.QueryYydActiveDayStatisticalDataResponseBodyMetaList = exports.QueryVedioMeetingStatisticalDataResponseBodyMetaList = exports.QueryTodoStatisticalDataResponseBodyMetaList = exports.QueryTelMeetingStatisticalDataResponseBodyMetaList = exports.QuerySingleMessageStatisticalDataResponseBodyMetaList = exports.QueryReportStatisticalDataResponseBodyMetaList = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class GetAbnormalOperationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAbnormalOperationHeaders = GetAbnormalOperationHeaders;
class GetAbnormalOperationRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAbnormalOperationRequest = GetAbnormalOperationRequest;
class GetAbnormalOperationResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAbnormalOperationResponseBody = GetAbnormalOperationResponseBody;
class GetAbnormalOperationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAbnormalOperationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAbnormalOperationResponse = GetAbnormalOperationResponse;
class GetAdministrativeLicensingHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAdministrativeLicensingHeaders = GetAdministrativeLicensingHeaders;
class GetAdministrativeLicensingRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAdministrativeLicensingRequest = GetAdministrativeLicensingRequest;
class GetAdministrativeLicensingResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAdministrativeLicensingResponseBody = GetAdministrativeLicensingResponseBody;
class GetAdministrativeLicensingResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAdministrativeLicensingResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAdministrativeLicensingResponse = GetAdministrativeLicensingResponse;
class GetAdministrativePenaltiesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAdministrativePenaltiesHeaders = GetAdministrativePenaltiesHeaders;
class GetAdministrativePenaltiesRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAdministrativePenaltiesRequest = GetAdministrativePenaltiesRequest;
class GetAdministrativePenaltiesResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAdministrativePenaltiesResponseBody = GetAdministrativePenaltiesResponseBody;
class GetAdministrativePenaltiesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetAdministrativePenaltiesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetAdministrativePenaltiesResponse = GetAdministrativePenaltiesResponse;
class GetBasicInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBasicInfoHeaders = GetBasicInfoHeaders;
class GetBasicInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBasicInfoRequest = GetBasicInfoRequest;
class GetBasicInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBasicInfoResponseBody = GetBasicInfoResponseBody;
class GetBasicInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetBasicInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBasicInfoResponse = GetBasicInfoResponse;
class GetBiddingInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBiddingInfoHeaders = GetBiddingInfoHeaders;
class GetBiddingInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBiddingInfoRequest = GetBiddingInfoRequest;
class GetBiddingInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBiddingInfoResponseBody = GetBiddingInfoResponseBody;
class GetBiddingInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetBiddingInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBiddingInfoResponse = GetBiddingInfoResponse;
class GetBranchInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBranchInfoHeaders = GetBranchInfoHeaders;
class GetBranchInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBranchInfoRequest = GetBranchInfoRequest;
class GetBranchInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBranchInfoResponseBody = GetBranchInfoResponseBody;
class GetBranchInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetBranchInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetBranchInfoResponse = GetBranchInfoResponse;
class GetChangeRecordHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetChangeRecordHeaders = GetChangeRecordHeaders;
class GetChangeRecordRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetChangeRecordRequest = GetChangeRecordRequest;
class GetChangeRecordResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetChangeRecordResponseBody = GetChangeRecordResponseBody;
class GetChangeRecordResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetChangeRecordResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetChangeRecordResponse = GetChangeRecordResponse;
class GetDomainInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDomainInfoHeaders = GetDomainInfoHeaders;
class GetDomainInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDomainInfoRequest = GetDomainInfoRequest;
class GetDomainInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDomainInfoResponseBody = GetDomainInfoResponseBody;
class GetDomainInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDomainInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDomainInfoResponse = GetDomainInfoResponse;
class GetDoubleRandomHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDoubleRandomHeaders = GetDoubleRandomHeaders;
class GetDoubleRandomRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDoubleRandomRequest = GetDoubleRandomRequest;
class GetDoubleRandomResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDoubleRandomResponseBody = GetDoubleRandomResponseBody;
class GetDoubleRandomResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDoubleRandomResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDoubleRandomResponse = GetDoubleRandomResponse;
class GetEnvironmentalPenaltiesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetEnvironmentalPenaltiesHeaders = GetEnvironmentalPenaltiesHeaders;
class GetEnvironmentalPenaltiesRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetEnvironmentalPenaltiesRequest = GetEnvironmentalPenaltiesRequest;
class GetEnvironmentalPenaltiesResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetEnvironmentalPenaltiesResponseBody = GetEnvironmentalPenaltiesResponseBody;
class GetEnvironmentalPenaltiesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetEnvironmentalPenaltiesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetEnvironmentalPenaltiesResponse = GetEnvironmentalPenaltiesResponse;
class GetHolderInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetHolderInfoHeaders = GetHolderInfoHeaders;
class GetHolderInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetHolderInfoRequest = GetHolderInfoRequest;
class GetHolderInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetHolderInfoResponseBody = GetHolderInfoResponseBody;
class GetHolderInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetHolderInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetHolderInfoResponse = GetHolderInfoResponse;
class GetIntellectualPropertyHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetIntellectualPropertyHeaders = GetIntellectualPropertyHeaders;
class GetIntellectualPropertyRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetIntellectualPropertyRequest = GetIntellectualPropertyRequest;
class GetIntellectualPropertyResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetIntellectualPropertyResponseBody = GetIntellectualPropertyResponseBody;
class GetIntellectualPropertyResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetIntellectualPropertyResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetIntellectualPropertyResponse = GetIntellectualPropertyResponse;
class GetInvestmentAbroadHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInvestmentAbroadHeaders = GetInvestmentAbroadHeaders;
class GetInvestmentAbroadRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInvestmentAbroadRequest = GetInvestmentAbroadRequest;
class GetInvestmentAbroadResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInvestmentAbroadResponseBody = GetInvestmentAbroadResponseBody;
class GetInvestmentAbroadResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetInvestmentAbroadResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetInvestmentAbroadResponse = GetInvestmentAbroadResponse;
class GetJobInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetJobInfoHeaders = GetJobInfoHeaders;
class GetJobInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetJobInfoRequest = GetJobInfoRequest;
class GetJobInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetJobInfoResponseBody = GetJobInfoResponseBody;
class GetJobInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetJobInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetJobInfoResponse = GetJobInfoResponse;
class GetPatentInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPatentInfoHeaders = GetPatentInfoHeaders;
class GetPatentInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPatentInfoRequest = GetPatentInfoRequest;
class GetPatentInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPatentInfoResponseBody = GetPatentInfoResponseBody;
class GetPatentInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPatentInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPatentInfoResponse = GetPatentInfoResponse;
class GetPrincipalEmployeeHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPrincipalEmployeeHeaders = GetPrincipalEmployeeHeaders;
class GetPrincipalEmployeeRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPrincipalEmployeeRequest = GetPrincipalEmployeeRequest;
class GetPrincipalEmployeeResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPrincipalEmployeeResponseBody = GetPrincipalEmployeeResponseBody;
class GetPrincipalEmployeeResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetPrincipalEmployeeResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetPrincipalEmployeeResponse = GetPrincipalEmployeeResponse;
class GetQeneralTaxpayerInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetQeneralTaxpayerInfoHeaders = GetQeneralTaxpayerInfoHeaders;
class GetQeneralTaxpayerInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetQeneralTaxpayerInfoRequest = GetQeneralTaxpayerInfoRequest;
class GetQeneralTaxpayerInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetQeneralTaxpayerInfoResponseBody = GetQeneralTaxpayerInfoResponseBody;
class GetQeneralTaxpayerInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetQeneralTaxpayerInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetQeneralTaxpayerInfoResponse = GetQeneralTaxpayerInfoResponse;
class GetQualificationCertHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetQualificationCertHeaders = GetQualificationCertHeaders;
class GetQualificationCertRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetQualificationCertRequest = GetQualificationCertRequest;
class GetQualificationCertResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetQualificationCertResponseBody = GetQualificationCertResponseBody;
class GetQualificationCertResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetQualificationCertResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetQualificationCertResponse = GetQualificationCertResponse;
class GetSeriousViolationHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSeriousViolationHeaders = GetSeriousViolationHeaders;
class GetSeriousViolationRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSeriousViolationRequest = GetSeriousViolationRequest;
class GetSeriousViolationResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSeriousViolationResponseBody = GetSeriousViolationResponseBody;
class GetSeriousViolationResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSeriousViolationResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSeriousViolationResponse = GetSeriousViolationResponse;
class GetSoftwareCopyrightHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSoftwareCopyrightHeaders = GetSoftwareCopyrightHeaders;
class GetSoftwareCopyrightRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSoftwareCopyrightRequest = GetSoftwareCopyrightRequest;
class GetSoftwareCopyrightResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSoftwareCopyrightResponseBody = GetSoftwareCopyrightResponseBody;
class GetSoftwareCopyrightResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSoftwareCopyrightResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSoftwareCopyrightResponse = GetSoftwareCopyrightResponse;
class GetTrademarkInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTrademarkInfoHeaders = GetTrademarkInfoHeaders;
class GetTrademarkInfoRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTrademarkInfoRequest = GetTrademarkInfoRequest;
class GetTrademarkInfoResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTrademarkInfoResponseBody = GetTrademarkInfoResponseBody;
class GetTrademarkInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTrademarkInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTrademarkInfoResponse = GetTrademarkInfoResponse;
class GetWorkCopyrightHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetWorkCopyrightHeaders = GetWorkCopyrightHeaders;
class GetWorkCopyrightRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetWorkCopyrightRequest = GetWorkCopyrightRequest;
class GetWorkCopyrightResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetWorkCopyrightResponseBody = GetWorkCopyrightResponseBody;
class GetWorkCopyrightResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetWorkCopyrightResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetWorkCopyrightResponse = GetWorkCopyrightResponse;
class PostCorpAuthInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PostCorpAuthInfoHeaders = PostCorpAuthInfoHeaders;
class PostCorpAuthInfoResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PostCorpAuthInfoResponseBody = PostCorpAuthInfoResponseBody;
class PostCorpAuthInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PostCorpAuthInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PostCorpAuthInfoResponse = PostCorpAuthInfoResponse;
class QueryActiveUserStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryActiveUserStatisticalDataHeaders = QueryActiveUserStatisticalDataHeaders;
class QueryActiveUserStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryActiveUserStatisticalDataRequest = QueryActiveUserStatisticalDataRequest;
class QueryActiveUserStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryActiveUserStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryActiveUserStatisticalDataResponseBody = QueryActiveUserStatisticalDataResponseBody;
class QueryActiveUserStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryActiveUserStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryActiveUserStatisticalDataResponse = QueryActiveUserStatisticalDataResponse;
class QueryAnhmdStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAnhmdStatisticalDataHeaders = QueryAnhmdStatisticalDataHeaders;
class QueryAnhmdStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAnhmdStatisticalDataRequest = QueryAnhmdStatisticalDataRequest;
class QueryAnhmdStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryAnhmdStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAnhmdStatisticalDataResponseBody = QueryAnhmdStatisticalDataResponseBody;
class QueryAnhmdStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAnhmdStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAnhmdStatisticalDataResponse = QueryAnhmdStatisticalDataResponse;
class QueryApprovalStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryApprovalStatisticalDataHeaders = QueryApprovalStatisticalDataHeaders;
class QueryApprovalStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryApprovalStatisticalDataRequest = QueryApprovalStatisticalDataRequest;
class QueryApprovalStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryApprovalStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryApprovalStatisticalDataResponseBody = QueryApprovalStatisticalDataResponseBody;
class QueryApprovalStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryApprovalStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryApprovalStatisticalDataResponse = QueryApprovalStatisticalDataResponse;
class QueryAttendanceStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAttendanceStatisticalDataHeaders = QueryAttendanceStatisticalDataHeaders;
class QueryAttendanceStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAttendanceStatisticalDataRequest = QueryAttendanceStatisticalDataRequest;
class QueryAttendanceStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryAttendanceStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAttendanceStatisticalDataResponseBody = QueryAttendanceStatisticalDataResponseBody;
class QueryAttendanceStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryAttendanceStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAttendanceStatisticalDataResponse = QueryAttendanceStatisticalDataResponse;
class QueryBlackboardStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBlackboardStatisticalDataHeaders = QueryBlackboardStatisticalDataHeaders;
class QueryBlackboardStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBlackboardStatisticalDataRequest = QueryBlackboardStatisticalDataRequest;
class QueryBlackboardStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryBlackboardStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBlackboardStatisticalDataResponseBody = QueryBlackboardStatisticalDataResponseBody;
class QueryBlackboardStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryBlackboardStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBlackboardStatisticalDataResponse = QueryBlackboardStatisticalDataResponse;
class QueryCalendarStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCalendarStatisticalDataHeaders = QueryCalendarStatisticalDataHeaders;
class QueryCalendarStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCalendarStatisticalDataRequest = QueryCalendarStatisticalDataRequest;
class QueryCalendarStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryCalendarStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCalendarStatisticalDataResponseBody = QueryCalendarStatisticalDataResponseBody;
class QueryCalendarStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCalendarStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCalendarStatisticalDataResponse = QueryCalendarStatisticalDataResponse;
class QueryCheckinStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCheckinStatisticalDataHeaders = QueryCheckinStatisticalDataHeaders;
class QueryCheckinStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCheckinStatisticalDataRequest = QueryCheckinStatisticalDataRequest;
class QueryCheckinStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryCheckinStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCheckinStatisticalDataResponseBody = QueryCheckinStatisticalDataResponseBody;
class QueryCheckinStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCheckinStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCheckinStatisticalDataResponse = QueryCheckinStatisticalDataResponse;
class QueryCircleStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCircleStatisticalDataHeaders = QueryCircleStatisticalDataHeaders;
class QueryCircleStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCircleStatisticalDataRequest = QueryCircleStatisticalDataRequest;
class QueryCircleStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryCircleStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCircleStatisticalDataResponseBody = QueryCircleStatisticalDataResponseBody;
class QueryCircleStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCircleStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCircleStatisticalDataResponse = QueryCircleStatisticalDataResponse;
class QueryCompanyBasicInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCompanyBasicInfoHeaders = QueryCompanyBasicInfoHeaders;
class QueryCompanyBasicInfoRequest extends $tea.Model {
    static names() {
        return {
            keyword: 'keyword',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            keyword: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCompanyBasicInfoRequest = QueryCompanyBasicInfoRequest;
class QueryCompanyBasicInfoResponseBody extends $tea.Model {
    static names() {
        return {
            code: 'code',
            data: 'data',
            message: 'message',
            requestId: 'requestId',
            total: 'total',
        };
    }
    static types() {
        return {
            code: 'string',
            data: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'string' } },
            message: 'string',
            requestId: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCompanyBasicInfoResponseBody = QueryCompanyBasicInfoResponseBody;
class QueryCompanyBasicInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryCompanyBasicInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCompanyBasicInfoResponse = QueryCompanyBasicInfoResponse;
class QueryDigitalDistrictOrgInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDigitalDistrictOrgInfoHeaders = QueryDigitalDistrictOrgInfoHeaders;
class QueryDigitalDistrictOrgInfoRequest extends $tea.Model {
    static names() {
        return {
            corpIds: 'corpIds',
            statDates: 'statDates',
        };
    }
    static types() {
        return {
            corpIds: { 'type': 'array', 'itemType': 'string' },
            statDates: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDigitalDistrictOrgInfoRequest = QueryDigitalDistrictOrgInfoRequest;
class QueryDigitalDistrictOrgInfoResponseBody extends $tea.Model {
    static names() {
        return {
            arguments: 'arguments',
            result: 'result',
        };
    }
    static types() {
        return {
            arguments: { 'type': 'array', 'itemType': 'string' },
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDigitalDistrictOrgInfoResponseBody = QueryDigitalDistrictOrgInfoResponseBody;
class QueryDigitalDistrictOrgInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDigitalDistrictOrgInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDigitalDistrictOrgInfoResponse = QueryDigitalDistrictOrgInfoResponse;
class QueryDingReciveStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingReciveStatisticalDataHeaders = QueryDingReciveStatisticalDataHeaders;
class QueryDingReciveStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingReciveStatisticalDataRequest = QueryDingReciveStatisticalDataRequest;
class QueryDingReciveStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryDingReciveStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingReciveStatisticalDataResponseBody = QueryDingReciveStatisticalDataResponseBody;
class QueryDingReciveStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDingReciveStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingReciveStatisticalDataResponse = QueryDingReciveStatisticalDataResponse;
class QueryDingSendStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingSendStatisticalDataHeaders = QueryDingSendStatisticalDataHeaders;
class QueryDingSendStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingSendStatisticalDataRequest = QueryDingSendStatisticalDataRequest;
class QueryDingSendStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryDingSendStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingSendStatisticalDataResponseBody = QueryDingSendStatisticalDataResponseBody;
class QueryDingSendStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDingSendStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingSendStatisticalDataResponse = QueryDingSendStatisticalDataResponse;
class QueryDocumentStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDocumentStatisticalDataHeaders = QueryDocumentStatisticalDataHeaders;
class QueryDocumentStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDocumentStatisticalDataRequest = QueryDocumentStatisticalDataRequest;
class QueryDocumentStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryDocumentStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDocumentStatisticalDataResponseBody = QueryDocumentStatisticalDataResponseBody;
class QueryDocumentStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDocumentStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDocumentStatisticalDataResponse = QueryDocumentStatisticalDataResponse;
class QueryDriveStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDriveStatisticalDataHeaders = QueryDriveStatisticalDataHeaders;
class QueryDriveStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDriveStatisticalDataRequest = QueryDriveStatisticalDataRequest;
class QueryDriveStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryDriveStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDriveStatisticalDataResponseBody = QueryDriveStatisticalDataResponseBody;
class QueryDriveStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDriveStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDriveStatisticalDataResponse = QueryDriveStatisticalDataResponse;
class QueryEmployeeTypeStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEmployeeTypeStatisticalDataHeaders = QueryEmployeeTypeStatisticalDataHeaders;
class QueryEmployeeTypeStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEmployeeTypeStatisticalDataRequest = QueryEmployeeTypeStatisticalDataRequest;
class QueryEmployeeTypeStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryEmployeeTypeStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEmployeeTypeStatisticalDataResponseBody = QueryEmployeeTypeStatisticalDataResponseBody;
class QueryEmployeeTypeStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryEmployeeTypeStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEmployeeTypeStatisticalDataResponse = QueryEmployeeTypeStatisticalDataResponse;
class QueryGeneralDataServiceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGeneralDataServiceHeaders = QueryGeneralDataServiceHeaders;
class QueryGeneralDataServiceRequest extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            endDate: 'endDate',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            serviceId: 'serviceId',
            startDate: 'startDate',
            userId: 'userId',
        };
    }
    static types() {
        return {
            deptId: 'string',
            endDate: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            serviceId: 'string',
            startDate: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGeneralDataServiceRequest = QueryGeneralDataServiceRequest;
class QueryGeneralDataServiceResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryGeneralDataServiceResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGeneralDataServiceResponseBody = QueryGeneralDataServiceResponseBody;
class QueryGeneralDataServiceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGeneralDataServiceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGeneralDataServiceResponse = QueryGeneralDataServiceResponse;
class QueryGroupLiveStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupLiveStatisticalDataHeaders = QueryGroupLiveStatisticalDataHeaders;
class QueryGroupLiveStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupLiveStatisticalDataRequest = QueryGroupLiveStatisticalDataRequest;
class QueryGroupLiveStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryGroupLiveStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupLiveStatisticalDataResponseBody = QueryGroupLiveStatisticalDataResponseBody;
class QueryGroupLiveStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGroupLiveStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupLiveStatisticalDataResponse = QueryGroupLiveStatisticalDataResponse;
class QueryGroupMessageStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupMessageStatisticalDataHeaders = QueryGroupMessageStatisticalDataHeaders;
class QueryGroupMessageStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupMessageStatisticalDataRequest = QueryGroupMessageStatisticalDataRequest;
class QueryGroupMessageStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryGroupMessageStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupMessageStatisticalDataResponseBody = QueryGroupMessageStatisticalDataResponseBody;
class QueryGroupMessageStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryGroupMessageStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupMessageStatisticalDataResponse = QueryGroupMessageStatisticalDataResponse;
class QueryHealthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHealthStatisticalDataHeaders = QueryHealthStatisticalDataHeaders;
class QueryHealthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHealthStatisticalDataRequest = QueryHealthStatisticalDataRequest;
class QueryHealthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryHealthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHealthStatisticalDataResponseBody = QueryHealthStatisticalDataResponseBody;
class QueryHealthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryHealthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHealthStatisticalDataResponse = QueryHealthStatisticalDataResponse;
class QueryMailStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMailStatisticalDataHeaders = QueryMailStatisticalDataHeaders;
class QueryMailStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMailStatisticalDataRequest = QueryMailStatisticalDataRequest;
class QueryMailStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryMailStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMailStatisticalDataResponseBody = QueryMailStatisticalDataResponseBody;
class QueryMailStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMailStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMailStatisticalDataResponse = QueryMailStatisticalDataResponse;
class QueryOfficialDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDataHeaders = QueryOfficialDataHeaders;
class QueryOfficialDataRequest extends $tea.Model {
    static names() {
        return {
            param: 'param',
            userId: 'userId',
        };
    }
    static types() {
        return {
            param: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDataRequest = QueryOfficialDataRequest;
class QueryOfficialDataResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDataResponseBody = QueryOfficialDataResponseBody;
class QueryOfficialDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOfficialDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDataResponse = QueryOfficialDataResponse;
class QueryOfficialDatasetFieldsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetFieldsHeaders = QueryOfficialDatasetFieldsHeaders;
class QueryOfficialDatasetFieldsRequest extends $tea.Model {
    static names() {
        return {
            dsId: 'dsId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            dsId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetFieldsRequest = QueryOfficialDatasetFieldsRequest;
class QueryOfficialDatasetFieldsResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryOfficialDatasetFieldsResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetFieldsResponseBody = QueryOfficialDatasetFieldsResponseBody;
class QueryOfficialDatasetFieldsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOfficialDatasetFieldsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetFieldsResponse = QueryOfficialDatasetFieldsResponse;
class QueryOfficialDatasetListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetListHeaders = QueryOfficialDatasetListHeaders;
class QueryOfficialDatasetListRequest extends $tea.Model {
    static names() {
        return {
            keyword: 'keyword',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
        };
    }
    static types() {
        return {
            keyword: 'string',
            pageNumber: 'number',
            pageSize: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetListRequest = QueryOfficialDatasetListRequest;
class QueryOfficialDatasetListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: QueryOfficialDatasetListResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetListResponseBody = QueryOfficialDatasetListResponseBody;
class QueryOfficialDatasetListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOfficialDatasetListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetListResponse = QueryOfficialDatasetListResponse;
class QueryOfficialFormDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialFormDataHeaders = QueryOfficialFormDataHeaders;
class QueryOfficialFormDataRequest extends $tea.Model {
    static names() {
        return {
            param: 'param',
            userId: 'userId',
        };
    }
    static types() {
        return {
            param: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialFormDataRequest = QueryOfficialFormDataRequest;
class QueryOfficialFormDataResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialFormDataResponseBody = QueryOfficialFormDataResponseBody;
class QueryOfficialFormDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOfficialFormDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialFormDataResponse = QueryOfficialFormDataResponse;
class QueryOnlineUserStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOnlineUserStatisticalDataHeaders = QueryOnlineUserStatisticalDataHeaders;
class QueryOnlineUserStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOnlineUserStatisticalDataRequest = QueryOnlineUserStatisticalDataRequest;
class QueryOnlineUserStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryOnlineUserStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOnlineUserStatisticalDataResponseBody = QueryOnlineUserStatisticalDataResponseBody;
class QueryOnlineUserStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryOnlineUserStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOnlineUserStatisticalDataResponse = QueryOnlineUserStatisticalDataResponse;
class QueryRedEnvelopeReciveStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataHeaders = QueryRedEnvelopeReciveStatisticalDataHeaders;
class QueryRedEnvelopeReciveStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataRequest = QueryRedEnvelopeReciveStatisticalDataRequest;
class QueryRedEnvelopeReciveStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataResponseBody = QueryRedEnvelopeReciveStatisticalDataResponseBody;
class QueryRedEnvelopeReciveStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryRedEnvelopeReciveStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataResponse = QueryRedEnvelopeReciveStatisticalDataResponse;
class QueryRedEnvelopeSendStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeSendStatisticalDataHeaders = QueryRedEnvelopeSendStatisticalDataHeaders;
class QueryRedEnvelopeSendStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeSendStatisticalDataRequest = QueryRedEnvelopeSendStatisticalDataRequest;
class QueryRedEnvelopeSendStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeSendStatisticalDataResponseBody = QueryRedEnvelopeSendStatisticalDataResponseBody;
class QueryRedEnvelopeSendStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryRedEnvelopeSendStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeSendStatisticalDataResponse = QueryRedEnvelopeSendStatisticalDataResponse;
class QueryReportStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportStatisticalDataHeaders = QueryReportStatisticalDataHeaders;
class QueryReportStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportStatisticalDataRequest = QueryReportStatisticalDataRequest;
class QueryReportStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryReportStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportStatisticalDataResponseBody = QueryReportStatisticalDataResponseBody;
class QueryReportStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryReportStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportStatisticalDataResponse = QueryReportStatisticalDataResponse;
class QuerySingleMessageStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySingleMessageStatisticalDataHeaders = QuerySingleMessageStatisticalDataHeaders;
class QuerySingleMessageStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySingleMessageStatisticalDataRequest = QuerySingleMessageStatisticalDataRequest;
class QuerySingleMessageStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QuerySingleMessageStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySingleMessageStatisticalDataResponseBody = QuerySingleMessageStatisticalDataResponseBody;
class QuerySingleMessageStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySingleMessageStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySingleMessageStatisticalDataResponse = QuerySingleMessageStatisticalDataResponse;
class QueryTelMeetingStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTelMeetingStatisticalDataHeaders = QueryTelMeetingStatisticalDataHeaders;
class QueryTelMeetingStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTelMeetingStatisticalDataRequest = QueryTelMeetingStatisticalDataRequest;
class QueryTelMeetingStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryTelMeetingStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTelMeetingStatisticalDataResponseBody = QueryTelMeetingStatisticalDataResponseBody;
class QueryTelMeetingStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTelMeetingStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTelMeetingStatisticalDataResponse = QueryTelMeetingStatisticalDataResponse;
class QueryTodoStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTodoStatisticalDataHeaders = QueryTodoStatisticalDataHeaders;
class QueryTodoStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTodoStatisticalDataRequest = QueryTodoStatisticalDataRequest;
class QueryTodoStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryTodoStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTodoStatisticalDataResponseBody = QueryTodoStatisticalDataResponseBody;
class QueryTodoStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTodoStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTodoStatisticalDataResponse = QueryTodoStatisticalDataResponse;
class QueryVedioMeetingStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryVedioMeetingStatisticalDataHeaders = QueryVedioMeetingStatisticalDataHeaders;
class QueryVedioMeetingStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryVedioMeetingStatisticalDataRequest = QueryVedioMeetingStatisticalDataRequest;
class QueryVedioMeetingStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryVedioMeetingStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryVedioMeetingStatisticalDataResponseBody = QueryVedioMeetingStatisticalDataResponseBody;
class QueryVedioMeetingStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryVedioMeetingStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryVedioMeetingStatisticalDataResponse = QueryVedioMeetingStatisticalDataResponse;
class QueryYydActiveDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveDayStatisticalDataHeaders = QueryYydActiveDayStatisticalDataHeaders;
class QueryYydActiveDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveDayStatisticalDataRequest = QueryYydActiveDayStatisticalDataRequest;
class QueryYydActiveDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydActiveDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveDayStatisticalDataResponseBody = QueryYydActiveDayStatisticalDataResponseBody;
class QueryYydActiveDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydActiveDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveDayStatisticalDataResponse = QueryYydActiveDayStatisticalDataResponse;
class QueryYydActiveMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveMonthStatisticalDataHeaders = QueryYydActiveMonthStatisticalDataHeaders;
class QueryYydActiveMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveMonthStatisticalDataRequest = QueryYydActiveMonthStatisticalDataRequest;
class QueryYydActiveMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydActiveMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveMonthStatisticalDataResponseBody = QueryYydActiveMonthStatisticalDataResponseBody;
class QueryYydActiveMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydActiveMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveMonthStatisticalDataResponse = QueryYydActiveMonthStatisticalDataResponse;
class QueryYydActiveWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveWeekStatisticalDataHeaders = QueryYydActiveWeekStatisticalDataHeaders;
class QueryYydActiveWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveWeekStatisticalDataRequest = QueryYydActiveWeekStatisticalDataRequest;
class QueryYydActiveWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydActiveWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveWeekStatisticalDataResponseBody = QueryYydActiveWeekStatisticalDataResponseBody;
class QueryYydActiveWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydActiveWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveWeekStatisticalDataResponse = QueryYydActiveWeekStatisticalDataResponse;
class QueryYydAppDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppDayStatisticalDataHeaders = QueryYydAppDayStatisticalDataHeaders;
class QueryYydAppDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppDayStatisticalDataRequest = QueryYydAppDayStatisticalDataRequest;
class QueryYydAppDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydAppDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppDayStatisticalDataResponseBody = QueryYydAppDayStatisticalDataResponseBody;
class QueryYydAppDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydAppDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppDayStatisticalDataResponse = QueryYydAppDayStatisticalDataResponse;
class QueryYydAppMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppMonthStatisticalDataHeaders = QueryYydAppMonthStatisticalDataHeaders;
class QueryYydAppMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppMonthStatisticalDataRequest = QueryYydAppMonthStatisticalDataRequest;
class QueryYydAppMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydAppMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppMonthStatisticalDataResponseBody = QueryYydAppMonthStatisticalDataResponseBody;
class QueryYydAppMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydAppMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppMonthStatisticalDataResponse = QueryYydAppMonthStatisticalDataResponse;
class QueryYydAppStdStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppStdStatisticalDataHeaders = QueryYydAppStdStatisticalDataHeaders;
class QueryYydAppStdStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppStdStatisticalDataRequest = QueryYydAppStdStatisticalDataRequest;
class QueryYydAppStdStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydAppStdStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppStdStatisticalDataResponseBody = QueryYydAppStdStatisticalDataResponseBody;
class QueryYydAppStdStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydAppStdStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppStdStatisticalDataResponse = QueryYydAppStdStatisticalDataResponse;
class QueryYydAppWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppWeekStatisticalDataHeaders = QueryYydAppWeekStatisticalDataHeaders;
class QueryYydAppWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppWeekStatisticalDataRequest = QueryYydAppWeekStatisticalDataRequest;
class QueryYydAppWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydAppWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppWeekStatisticalDataResponseBody = QueryYydAppWeekStatisticalDataResponseBody;
class QueryYydAppWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydAppWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppWeekStatisticalDataResponse = QueryYydAppWeekStatisticalDataResponse;
class QueryYydCalendarDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarDayStatisticalDataHeaders = QueryYydCalendarDayStatisticalDataHeaders;
class QueryYydCalendarDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarDayStatisticalDataRequest = QueryYydCalendarDayStatisticalDataRequest;
class QueryYydCalendarDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydCalendarDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarDayStatisticalDataResponseBody = QueryYydCalendarDayStatisticalDataResponseBody;
class QueryYydCalendarDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydCalendarDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarDayStatisticalDataResponse = QueryYydCalendarDayStatisticalDataResponse;
class QueryYydCalendarMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarMonthStatisticalDataHeaders = QueryYydCalendarMonthStatisticalDataHeaders;
class QueryYydCalendarMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarMonthStatisticalDataRequest = QueryYydCalendarMonthStatisticalDataRequest;
class QueryYydCalendarMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydCalendarMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarMonthStatisticalDataResponseBody = QueryYydCalendarMonthStatisticalDataResponseBody;
class QueryYydCalendarMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydCalendarMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarMonthStatisticalDataResponse = QueryYydCalendarMonthStatisticalDataResponse;
class QueryYydCalendarWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarWeekStatisticalDataHeaders = QueryYydCalendarWeekStatisticalDataHeaders;
class QueryYydCalendarWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarWeekStatisticalDataRequest = QueryYydCalendarWeekStatisticalDataRequest;
class QueryYydCalendarWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydCalendarWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarWeekStatisticalDataResponseBody = QueryYydCalendarWeekStatisticalDataResponseBody;
class QueryYydCalendarWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydCalendarWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarWeekStatisticalDataResponse = QueryYydCalendarWeekStatisticalDataResponse;
class QueryYydDingMsgDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgDayStatisticalDataHeaders = QueryYydDingMsgDayStatisticalDataHeaders;
class QueryYydDingMsgDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgDayStatisticalDataRequest = QueryYydDingMsgDayStatisticalDataRequest;
class QueryYydDingMsgDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydDingMsgDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgDayStatisticalDataResponseBody = QueryYydDingMsgDayStatisticalDataResponseBody;
class QueryYydDingMsgDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydDingMsgDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgDayStatisticalDataResponse = QueryYydDingMsgDayStatisticalDataResponse;
class QueryYydDingMsgMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgMonthStatisticalDataHeaders = QueryYydDingMsgMonthStatisticalDataHeaders;
class QueryYydDingMsgMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgMonthStatisticalDataRequest = QueryYydDingMsgMonthStatisticalDataRequest;
class QueryYydDingMsgMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgMonthStatisticalDataResponseBody = QueryYydDingMsgMonthStatisticalDataResponseBody;
class QueryYydDingMsgMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydDingMsgMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgMonthStatisticalDataResponse = QueryYydDingMsgMonthStatisticalDataResponse;
class QueryYydDingMsgWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgWeekStatisticalDataHeaders = QueryYydDingMsgWeekStatisticalDataHeaders;
class QueryYydDingMsgWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgWeekStatisticalDataRequest = QueryYydDingMsgWeekStatisticalDataRequest;
class QueryYydDingMsgWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgWeekStatisticalDataResponseBody = QueryYydDingMsgWeekStatisticalDataResponseBody;
class QueryYydDingMsgWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydDingMsgWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgWeekStatisticalDataResponse = QueryYydDingMsgWeekStatisticalDataResponse;
class QueryYydGroupMsgDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgDayStatisticalDataHeaders = QueryYydGroupMsgDayStatisticalDataHeaders;
class QueryYydGroupMsgDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgDayStatisticalDataRequest = QueryYydGroupMsgDayStatisticalDataRequest;
class QueryYydGroupMsgDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgDayStatisticalDataResponseBody = QueryYydGroupMsgDayStatisticalDataResponseBody;
class QueryYydGroupMsgDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydGroupMsgDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgDayStatisticalDataResponse = QueryYydGroupMsgDayStatisticalDataResponse;
class QueryYydGroupMsgMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataHeaders = QueryYydGroupMsgMonthStatisticalDataHeaders;
class QueryYydGroupMsgMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataRequest = QueryYydGroupMsgMonthStatisticalDataRequest;
class QueryYydGroupMsgMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataResponseBody = QueryYydGroupMsgMonthStatisticalDataResponseBody;
class QueryYydGroupMsgMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydGroupMsgMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataResponse = QueryYydGroupMsgMonthStatisticalDataResponse;
class QueryYydGroupMsgWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataHeaders = QueryYydGroupMsgWeekStatisticalDataHeaders;
class QueryYydGroupMsgWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataRequest = QueryYydGroupMsgWeekStatisticalDataRequest;
class QueryYydGroupMsgWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataResponseBody = QueryYydGroupMsgWeekStatisticalDataResponseBody;
class QueryYydGroupMsgWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydGroupMsgWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataResponse = QueryYydGroupMsgWeekStatisticalDataResponse;
class QueryYydLogDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogDayStatisticalDataHeaders = QueryYydLogDayStatisticalDataHeaders;
class QueryYydLogDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogDayStatisticalDataRequest = QueryYydLogDayStatisticalDataRequest;
class QueryYydLogDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydLogDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogDayStatisticalDataResponseBody = QueryYydLogDayStatisticalDataResponseBody;
class QueryYydLogDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydLogDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogDayStatisticalDataResponse = QueryYydLogDayStatisticalDataResponse;
class QueryYydLogMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogMonthStatisticalDataHeaders = QueryYydLogMonthStatisticalDataHeaders;
class QueryYydLogMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogMonthStatisticalDataRequest = QueryYydLogMonthStatisticalDataRequest;
class QueryYydLogMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydLogMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogMonthStatisticalDataResponseBody = QueryYydLogMonthStatisticalDataResponseBody;
class QueryYydLogMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydLogMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogMonthStatisticalDataResponse = QueryYydLogMonthStatisticalDataResponse;
class QueryYydLogWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogWeekStatisticalDataHeaders = QueryYydLogWeekStatisticalDataHeaders;
class QueryYydLogWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogWeekStatisticalDataRequest = QueryYydLogWeekStatisticalDataRequest;
class QueryYydLogWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydLogWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogWeekStatisticalDataResponseBody = QueryYydLogWeekStatisticalDataResponseBody;
class QueryYydLogWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydLogWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogWeekStatisticalDataResponse = QueryYydLogWeekStatisticalDataResponse;
class QueryYydMeetingDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingDayStatisticalDataHeaders = QueryYydMeetingDayStatisticalDataHeaders;
class QueryYydMeetingDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingDayStatisticalDataRequest = QueryYydMeetingDayStatisticalDataRequest;
class QueryYydMeetingDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydMeetingDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingDayStatisticalDataResponseBody = QueryYydMeetingDayStatisticalDataResponseBody;
class QueryYydMeetingDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydMeetingDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingDayStatisticalDataResponse = QueryYydMeetingDayStatisticalDataResponse;
class QueryYydMeetingMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingMonthStatisticalDataHeaders = QueryYydMeetingMonthStatisticalDataHeaders;
class QueryYydMeetingMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingMonthStatisticalDataRequest = QueryYydMeetingMonthStatisticalDataRequest;
class QueryYydMeetingMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydMeetingMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingMonthStatisticalDataResponseBody = QueryYydMeetingMonthStatisticalDataResponseBody;
class QueryYydMeetingMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydMeetingMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingMonthStatisticalDataResponse = QueryYydMeetingMonthStatisticalDataResponse;
class QueryYydMeetingWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingWeekStatisticalDataHeaders = QueryYydMeetingWeekStatisticalDataHeaders;
class QueryYydMeetingWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingWeekStatisticalDataRequest = QueryYydMeetingWeekStatisticalDataRequest;
class QueryYydMeetingWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydMeetingWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingWeekStatisticalDataResponseBody = QueryYydMeetingWeekStatisticalDataResponseBody;
class QueryYydMeetingWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydMeetingWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingWeekStatisticalDataResponse = QueryYydMeetingWeekStatisticalDataResponse;
class QueryYydNoticeDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeDayStatisticalDataHeaders = QueryYydNoticeDayStatisticalDataHeaders;
class QueryYydNoticeDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeDayStatisticalDataRequest = QueryYydNoticeDayStatisticalDataRequest;
class QueryYydNoticeDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydNoticeDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeDayStatisticalDataResponseBody = QueryYydNoticeDayStatisticalDataResponseBody;
class QueryYydNoticeDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydNoticeDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeDayStatisticalDataResponse = QueryYydNoticeDayStatisticalDataResponse;
class QueryYydNoticeMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeMonthStatisticalDataHeaders = QueryYydNoticeMonthStatisticalDataHeaders;
class QueryYydNoticeMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeMonthStatisticalDataRequest = QueryYydNoticeMonthStatisticalDataRequest;
class QueryYydNoticeMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydNoticeMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeMonthStatisticalDataResponseBody = QueryYydNoticeMonthStatisticalDataResponseBody;
class QueryYydNoticeMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydNoticeMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeMonthStatisticalDataResponse = QueryYydNoticeMonthStatisticalDataResponse;
class QueryYydNoticeWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeWeekStatisticalDataHeaders = QueryYydNoticeWeekStatisticalDataHeaders;
class QueryYydNoticeWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeWeekStatisticalDataRequest = QueryYydNoticeWeekStatisticalDataRequest;
class QueryYydNoticeWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydNoticeWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeWeekStatisticalDataResponseBody = QueryYydNoticeWeekStatisticalDataResponseBody;
class QueryYydNoticeWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydNoticeWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeWeekStatisticalDataResponse = QueryYydNoticeWeekStatisticalDataResponse;
class QueryYydSingleMsgDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgDayStatisticalDataHeaders = QueryYydSingleMsgDayStatisticalDataHeaders;
class QueryYydSingleMsgDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgDayStatisticalDataRequest = QueryYydSingleMsgDayStatisticalDataRequest;
class QueryYydSingleMsgDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgDayStatisticalDataResponseBody = QueryYydSingleMsgDayStatisticalDataResponseBody;
class QueryYydSingleMsgDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydSingleMsgDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgDayStatisticalDataResponse = QueryYydSingleMsgDayStatisticalDataResponse;
class QueryYydSingleMsgMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataHeaders = QueryYydSingleMsgMonthStatisticalDataHeaders;
class QueryYydSingleMsgMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataRequest = QueryYydSingleMsgMonthStatisticalDataRequest;
class QueryYydSingleMsgMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataResponseBody = QueryYydSingleMsgMonthStatisticalDataResponseBody;
class QueryYydSingleMsgMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydSingleMsgMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataResponse = QueryYydSingleMsgMonthStatisticalDataResponse;
class QueryYydSingleMsgWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataHeaders = QueryYydSingleMsgWeekStatisticalDataHeaders;
class QueryYydSingleMsgWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataRequest = QueryYydSingleMsgWeekStatisticalDataRequest;
class QueryYydSingleMsgWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataResponseBody = QueryYydSingleMsgWeekStatisticalDataResponseBody;
class QueryYydSingleMsgWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydSingleMsgWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataResponse = QueryYydSingleMsgWeekStatisticalDataResponse;
class QueryYydToatlMsgDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgDayStatisticalDataHeaders = QueryYydToatlMsgDayStatisticalDataHeaders;
class QueryYydToatlMsgDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgDayStatisticalDataRequest = QueryYydToatlMsgDayStatisticalDataRequest;
class QueryYydToatlMsgDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgDayStatisticalDataResponseBody = QueryYydToatlMsgDayStatisticalDataResponseBody;
class QueryYydToatlMsgDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydToatlMsgDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgDayStatisticalDataResponse = QueryYydToatlMsgDayStatisticalDataResponse;
class QueryYydToatlMsgMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataHeaders = QueryYydToatlMsgMonthStatisticalDataHeaders;
class QueryYydToatlMsgMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataRequest = QueryYydToatlMsgMonthStatisticalDataRequest;
class QueryYydToatlMsgMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataResponseBody = QueryYydToatlMsgMonthStatisticalDataResponseBody;
class QueryYydToatlMsgMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydToatlMsgMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataResponse = QueryYydToatlMsgMonthStatisticalDataResponse;
class QueryYydToatlMsgWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataHeaders = QueryYydToatlMsgWeekStatisticalDataHeaders;
class QueryYydToatlMsgWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataRequest = QueryYydToatlMsgWeekStatisticalDataRequest;
class QueryYydToatlMsgWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataResponseBody = QueryYydToatlMsgWeekStatisticalDataResponseBody;
class QueryYydToatlMsgWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydToatlMsgWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataResponse = QueryYydToatlMsgWeekStatisticalDataResponse;
class QueryYydTodoDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoDayStatisticalDataHeaders = QueryYydTodoDayStatisticalDataHeaders;
class QueryYydTodoDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoDayStatisticalDataRequest = QueryYydTodoDayStatisticalDataRequest;
class QueryYydTodoDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTodoDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoDayStatisticalDataResponseBody = QueryYydTodoDayStatisticalDataResponseBody;
class QueryYydTodoDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydTodoDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoDayStatisticalDataResponse = QueryYydTodoDayStatisticalDataResponse;
class QueryYydTodoMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoMonthStatisticalDataHeaders = QueryYydTodoMonthStatisticalDataHeaders;
class QueryYydTodoMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoMonthStatisticalDataRequest = QueryYydTodoMonthStatisticalDataRequest;
class QueryYydTodoMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTodoMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoMonthStatisticalDataResponseBody = QueryYydTodoMonthStatisticalDataResponseBody;
class QueryYydTodoMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydTodoMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoMonthStatisticalDataResponse = QueryYydTodoMonthStatisticalDataResponse;
class QueryYydTodoWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoWeekStatisticalDataHeaders = QueryYydTodoWeekStatisticalDataHeaders;
class QueryYydTodoWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoWeekStatisticalDataRequest = QueryYydTodoWeekStatisticalDataRequest;
class QueryYydTodoWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTodoWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoWeekStatisticalDataResponseBody = QueryYydTodoWeekStatisticalDataResponseBody;
class QueryYydTodoWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydTodoWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoWeekStatisticalDataResponse = QueryYydTodoWeekStatisticalDataResponse;
class QueryYydTotalDayStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalDayStatisticalDataHeaders = QueryYydTotalDayStatisticalDataHeaders;
class QueryYydTotalDayStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalDayStatisticalDataRequest = QueryYydTotalDayStatisticalDataRequest;
class QueryYydTotalDayStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTotalDayStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalDayStatisticalDataResponseBody = QueryYydTotalDayStatisticalDataResponseBody;
class QueryYydTotalDayStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydTotalDayStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalDayStatisticalDataResponse = QueryYydTotalDayStatisticalDataResponse;
class QueryYydTotalMonthStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalMonthStatisticalDataHeaders = QueryYydTotalMonthStatisticalDataHeaders;
class QueryYydTotalMonthStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalMonthStatisticalDataRequest = QueryYydTotalMonthStatisticalDataRequest;
class QueryYydTotalMonthStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTotalMonthStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalMonthStatisticalDataResponseBody = QueryYydTotalMonthStatisticalDataResponseBody;
class QueryYydTotalMonthStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydTotalMonthStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalMonthStatisticalDataResponse = QueryYydTotalMonthStatisticalDataResponse;
class QueryYydTotalStdStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalStdStatisticalDataHeaders = QueryYydTotalStdStatisticalDataHeaders;
class QueryYydTotalStdStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalStdStatisticalDataRequest = QueryYydTotalStdStatisticalDataRequest;
class QueryYydTotalStdStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTotalStdStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalStdStatisticalDataResponseBody = QueryYydTotalStdStatisticalDataResponseBody;
class QueryYydTotalStdStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydTotalStdStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalStdStatisticalDataResponse = QueryYydTotalStdStatisticalDataResponse;
class QueryYydTotalWeekStatisticalDataHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalWeekStatisticalDataHeaders = QueryYydTotalWeekStatisticalDataHeaders;
class QueryYydTotalWeekStatisticalDataRequest extends $tea.Model {
    static names() {
        return {
            statDate: 'statDate',
        };
    }
    static types() {
        return {
            statDate: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalWeekStatisticalDataRequest = QueryYydTotalWeekStatisticalDataRequest;
class QueryYydTotalWeekStatisticalDataResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            metaList: 'metaList',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            metaList: { 'type': 'array', 'itemType': QueryYydTotalWeekStatisticalDataResponseBodyMetaList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalWeekStatisticalDataResponseBody = QueryYydTotalWeekStatisticalDataResponseBody;
class QueryYydTotalWeekStatisticalDataResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryYydTotalWeekStatisticalDataResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalWeekStatisticalDataResponse = QueryYydTotalWeekStatisticalDataResponse;
class SearchCompanyHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchCompanyHeaders = SearchCompanyHeaders;
class SearchCompanyRequest extends $tea.Model {
    static names() {
        return {
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            searchKey: 'searchKey',
        };
    }
    static types() {
        return {
            pageNumber: 'number',
            pageSize: 'number',
            searchKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchCompanyRequest = SearchCompanyRequest;
class SearchCompanyResponseBody extends $tea.Model {
    static names() {
        return {
            data: 'data',
            total: 'total',
        };
    }
    static types() {
        return {
            data: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchCompanyResponseBody = SearchCompanyResponseBody;
class SearchCompanyResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchCompanyResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchCompanyResponse = SearchCompanyResponse;
class QueryActiveUserStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryActiveUserStatisticalDataResponseBodyMetaList = QueryActiveUserStatisticalDataResponseBodyMetaList;
class QueryAnhmdStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAnhmdStatisticalDataResponseBodyMetaList = QueryAnhmdStatisticalDataResponseBodyMetaList;
class QueryApprovalStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryApprovalStatisticalDataResponseBodyMetaList = QueryApprovalStatisticalDataResponseBodyMetaList;
class QueryAttendanceStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryAttendanceStatisticalDataResponseBodyMetaList = QueryAttendanceStatisticalDataResponseBodyMetaList;
class QueryBlackboardStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBlackboardStatisticalDataResponseBodyMetaList = QueryBlackboardStatisticalDataResponseBodyMetaList;
class QueryCalendarStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCalendarStatisticalDataResponseBodyMetaList = QueryCalendarStatisticalDataResponseBodyMetaList;
class QueryCheckinStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCheckinStatisticalDataResponseBodyMetaList = QueryCheckinStatisticalDataResponseBodyMetaList;
class QueryCircleStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryCircleStatisticalDataResponseBodyMetaList = QueryCircleStatisticalDataResponseBodyMetaList;
class QueryDingReciveStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingReciveStatisticalDataResponseBodyMetaList = QueryDingReciveStatisticalDataResponseBodyMetaList;
class QueryDingSendStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDingSendStatisticalDataResponseBodyMetaList = QueryDingSendStatisticalDataResponseBodyMetaList;
class QueryDocumentStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDocumentStatisticalDataResponseBodyMetaList = QueryDocumentStatisticalDataResponseBodyMetaList;
class QueryDriveStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDriveStatisticalDataResponseBodyMetaList = QueryDriveStatisticalDataResponseBodyMetaList;
class QueryEmployeeTypeStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryEmployeeTypeStatisticalDataResponseBodyMetaList = QueryEmployeeTypeStatisticalDataResponseBodyMetaList;
class QueryGeneralDataServiceResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            fieldDesc: 'fieldDesc',
            fieldId: 'fieldId',
            fieldName: 'fieldName',
            fieldType: 'fieldType',
        };
    }
    static types() {
        return {
            fieldDesc: 'string',
            fieldId: 'string',
            fieldName: 'string',
            fieldType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGeneralDataServiceResponseBodyMetaList = QueryGeneralDataServiceResponseBodyMetaList;
class QueryGroupLiveStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupLiveStatisticalDataResponseBodyMetaList = QueryGroupLiveStatisticalDataResponseBodyMetaList;
class QueryGroupMessageStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryGroupMessageStatisticalDataResponseBodyMetaList = QueryGroupMessageStatisticalDataResponseBodyMetaList;
class QueryHealthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryHealthStatisticalDataResponseBodyMetaList = QueryHealthStatisticalDataResponseBodyMetaList;
class QueryMailStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMailStatisticalDataResponseBodyMetaList = QueryMailStatisticalDataResponseBodyMetaList;
class QueryOfficialDatasetFieldsResponseBodyResultFields extends $tea.Model {
    static names() {
        return {
            displayName: 'displayName',
            fieldId: 'fieldId',
            fieldType: 'fieldType',
        };
    }
    static types() {
        return {
            displayName: 'string',
            fieldId: 'string',
            fieldType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetFieldsResponseBodyResultFields = QueryOfficialDatasetFieldsResponseBodyResultFields;
class QueryOfficialDatasetFieldsResponseBodyResult extends $tea.Model {
    static names() {
        return {
            displayName: 'displayName',
            dsId: 'dsId',
            fields: 'fields',
        };
    }
    static types() {
        return {
            displayName: 'string',
            dsId: 'string',
            fields: { 'type': 'array', 'itemType': QueryOfficialDatasetFieldsResponseBodyResultFields },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetFieldsResponseBodyResult = QueryOfficialDatasetFieldsResponseBodyResult;
class QueryOfficialDatasetListResponseBodyResultRows extends $tea.Model {
    static names() {
        return {
            displayName: 'displayName',
            dsId: 'dsId',
        };
    }
    static types() {
        return {
            displayName: 'string',
            dsId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetListResponseBodyResultRows = QueryOfficialDatasetListResponseBodyResultRows;
class QueryOfficialDatasetListResponseBodyResult extends $tea.Model {
    static names() {
        return {
            rows: 'rows',
            totalCount: 'totalCount',
        };
    }
    static types() {
        return {
            rows: { 'type': 'array', 'itemType': QueryOfficialDatasetListResponseBodyResultRows },
            totalCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOfficialDatasetListResponseBodyResult = QueryOfficialDatasetListResponseBodyResult;
class QueryOnlineUserStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryOnlineUserStatisticalDataResponseBodyMetaList = QueryOnlineUserStatisticalDataResponseBodyMetaList;
class QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList = QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList;
class QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList = QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList;
class QueryReportStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportStatisticalDataResponseBodyMetaList = QueryReportStatisticalDataResponseBodyMetaList;
class QuerySingleMessageStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySingleMessageStatisticalDataResponseBodyMetaList = QuerySingleMessageStatisticalDataResponseBodyMetaList;
class QueryTelMeetingStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTelMeetingStatisticalDataResponseBodyMetaList = QueryTelMeetingStatisticalDataResponseBodyMetaList;
class QueryTodoStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTodoStatisticalDataResponseBodyMetaList = QueryTodoStatisticalDataResponseBodyMetaList;
class QueryVedioMeetingStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryVedioMeetingStatisticalDataResponseBodyMetaList = QueryVedioMeetingStatisticalDataResponseBodyMetaList;
class QueryYydActiveDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveDayStatisticalDataResponseBodyMetaList = QueryYydActiveDayStatisticalDataResponseBodyMetaList;
class QueryYydActiveMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveMonthStatisticalDataResponseBodyMetaList = QueryYydActiveMonthStatisticalDataResponseBodyMetaList;
class QueryYydActiveWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydActiveWeekStatisticalDataResponseBodyMetaList = QueryYydActiveWeekStatisticalDataResponseBodyMetaList;
class QueryYydAppDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppDayStatisticalDataResponseBodyMetaList = QueryYydAppDayStatisticalDataResponseBodyMetaList;
class QueryYydAppMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppMonthStatisticalDataResponseBodyMetaList = QueryYydAppMonthStatisticalDataResponseBodyMetaList;
class QueryYydAppStdStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppStdStatisticalDataResponseBodyMetaList = QueryYydAppStdStatisticalDataResponseBodyMetaList;
class QueryYydAppWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydAppWeekStatisticalDataResponseBodyMetaList = QueryYydAppWeekStatisticalDataResponseBodyMetaList;
class QueryYydCalendarDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarDayStatisticalDataResponseBodyMetaList = QueryYydCalendarDayStatisticalDataResponseBodyMetaList;
class QueryYydCalendarMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarMonthStatisticalDataResponseBodyMetaList = QueryYydCalendarMonthStatisticalDataResponseBodyMetaList;
class QueryYydCalendarWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydCalendarWeekStatisticalDataResponseBodyMetaList = QueryYydCalendarWeekStatisticalDataResponseBodyMetaList;
class QueryYydDingMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgDayStatisticalDataResponseBodyMetaList = QueryYydDingMsgDayStatisticalDataResponseBodyMetaList;
class QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList = QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList;
class QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList = QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList;
class QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList = QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList;
class QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList = QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList;
class QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList = QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList;
class QueryYydLogDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogDayStatisticalDataResponseBodyMetaList = QueryYydLogDayStatisticalDataResponseBodyMetaList;
class QueryYydLogMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogMonthStatisticalDataResponseBodyMetaList = QueryYydLogMonthStatisticalDataResponseBodyMetaList;
class QueryYydLogWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydLogWeekStatisticalDataResponseBodyMetaList = QueryYydLogWeekStatisticalDataResponseBodyMetaList;
class QueryYydMeetingDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingDayStatisticalDataResponseBodyMetaList = QueryYydMeetingDayStatisticalDataResponseBodyMetaList;
class QueryYydMeetingMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingMonthStatisticalDataResponseBodyMetaList = QueryYydMeetingMonthStatisticalDataResponseBodyMetaList;
class QueryYydMeetingWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydMeetingWeekStatisticalDataResponseBodyMetaList = QueryYydMeetingWeekStatisticalDataResponseBodyMetaList;
class QueryYydNoticeDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeDayStatisticalDataResponseBodyMetaList = QueryYydNoticeDayStatisticalDataResponseBodyMetaList;
class QueryYydNoticeMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeMonthStatisticalDataResponseBodyMetaList = QueryYydNoticeMonthStatisticalDataResponseBodyMetaList;
class QueryYydNoticeWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydNoticeWeekStatisticalDataResponseBodyMetaList = QueryYydNoticeWeekStatisticalDataResponseBodyMetaList;
class QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList = QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList;
class QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList = QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList;
class QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList = QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList;
class QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList = QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList;
class QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList = QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList;
class QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList = QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList;
class QueryYydTodoDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoDayStatisticalDataResponseBodyMetaList = QueryYydTodoDayStatisticalDataResponseBodyMetaList;
class QueryYydTodoMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoMonthStatisticalDataResponseBodyMetaList = QueryYydTodoMonthStatisticalDataResponseBodyMetaList;
class QueryYydTodoWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTodoWeekStatisticalDataResponseBodyMetaList = QueryYydTodoWeekStatisticalDataResponseBodyMetaList;
class QueryYydTotalDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalDayStatisticalDataResponseBodyMetaList = QueryYydTotalDayStatisticalDataResponseBodyMetaList;
class QueryYydTotalMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalMonthStatisticalDataResponseBodyMetaList = QueryYydTotalMonthStatisticalDataResponseBodyMetaList;
class QueryYydTotalStdStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalStdStatisticalDataResponseBodyMetaList = QueryYydTotalStdStatisticalDataResponseBodyMetaList;
class QueryYydTotalWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    static names() {
        return {
            kpiCaliber: 'kpiCaliber',
            kpiId: 'kpiId',
            kpiName: 'kpiName',
            period: 'period',
            unit: 'unit',
        };
    }
    static types() {
        return {
            kpiCaliber: 'string',
            kpiId: 'string',
            kpiName: 'string',
            period: 'string',
            unit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryYydTotalWeekStatisticalDataResponseBodyMetaList = QueryYydTotalWeekStatisticalDataResponseBodyMetaList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 工商-经营异常
     *
     * @param request GetAbnormalOperationRequest
     * @param headers GetAbnormalOperationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAbnormalOperationResponse
     */
    async getAbnormalOperationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAbnormalOperation",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/abnormalOperations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAbnormalOperationResponse({}));
    }
    /**
     * @summary 工商-经营异常
     *
     * @param request GetAbnormalOperationRequest
     * @return GetAbnormalOperationResponse
     */
    async getAbnormalOperation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAbnormalOperationHeaders({});
        return await this.getAbnormalOperationWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取工商-行政许可
     *
     * @param request GetAdministrativeLicensingRequest
     * @param headers GetAdministrativeLicensingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAdministrativeLicensingResponse
     */
    async getAdministrativeLicensingWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAdministrativeLicensing",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/administrativeLicenses`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAdministrativeLicensingResponse({}));
    }
    /**
     * @summary 获取工商-行政许可
     *
     * @param request GetAdministrativeLicensingRequest
     * @return GetAdministrativeLicensingResponse
     */
    async getAdministrativeLicensing(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAdministrativeLicensingHeaders({});
        return await this.getAdministrativeLicensingWithOptions(request, headers, runtime);
    }
    /**
     * @summary 负面-行政处罚
     *
     * @param request GetAdministrativePenaltiesRequest
     * @param headers GetAdministrativePenaltiesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAdministrativePenaltiesResponse
     */
    async getAdministrativePenaltiesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetAdministrativePenalties",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/administrativePenalties`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetAdministrativePenaltiesResponse({}));
    }
    /**
     * @summary 负面-行政处罚
     *
     * @param request GetAdministrativePenaltiesRequest
     * @return GetAdministrativePenaltiesResponse
     */
    async getAdministrativePenalties(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetAdministrativePenaltiesHeaders({});
        return await this.getAdministrativePenaltiesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 工商-基础信息
     *
     * @param request GetBasicInfoRequest
     * @param headers GetBasicInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBasicInfoResponse
     */
    async getBasicInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetBasicInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/businessBasicInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetBasicInfoResponse({}));
    }
    /**
     * @summary 工商-基础信息
     *
     * @param request GetBasicInfoRequest
     * @return GetBasicInfoResponse
     */
    async getBasicInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetBasicInfoHeaders({});
        return await this.getBasicInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取经营-招投标信息
     *
     * @param request GetBiddingInfoRequest
     * @param headers GetBiddingInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBiddingInfoResponse
     */
    async getBiddingInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetBiddingInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/biddingInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetBiddingInfoResponse({}));
    }
    /**
     * @summary 获取经营-招投标信息
     *
     * @param request GetBiddingInfoRequest
     * @return GetBiddingInfoResponse
     */
    async getBiddingInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetBiddingInfoHeaders({});
        return await this.getBiddingInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取工商-分支机构
     *
     * @param request GetBranchInfoRequest
     * @param headers GetBranchInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBranchInfoResponse
     */
    async getBranchInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetBranchInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/branchInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetBranchInfoResponse({}));
    }
    /**
     * @summary 获取工商-分支机构
     *
     * @param request GetBranchInfoRequest
     * @return GetBranchInfoResponse
     */
    async getBranchInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetBranchInfoHeaders({});
        return await this.getBranchInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取工商-变更记录
     *
     * @param request GetChangeRecordRequest
     * @param headers GetChangeRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetChangeRecordResponse
     */
    async getChangeRecordWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetChangeRecord",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/changeRecords`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetChangeRecordResponse({}));
    }
    /**
     * @summary 获取工商-变更记录
     *
     * @param request GetChangeRecordRequest
     * @return GetChangeRecordResponse
     */
    async getChangeRecord(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetChangeRecordHeaders({});
        return await this.getChangeRecordWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取知识产权-域名信息
     *
     * @param request GetDomainInfoRequest
     * @param headers GetDomainInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDomainInfoResponse
     */
    async getDomainInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDomainInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/domainInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDomainInfoResponse({}));
    }
    /**
     * @summary 获取知识产权-域名信息
     *
     * @param request GetDomainInfoRequest
     * @return GetDomainInfoResponse
     */
    async getDomainInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDomainInfoHeaders({});
        return await this.getDomainInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取工商-双随机抽查结果
     *
     * @param request GetDoubleRandomRequest
     * @param headers GetDoubleRandomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDoubleRandomResponse
     */
    async getDoubleRandomWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDoubleRandom",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/doubleRandomness`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDoubleRandomResponse({}));
    }
    /**
     * @summary 获取工商-双随机抽查结果
     *
     * @param request GetDoubleRandomRequest
     * @return GetDoubleRandomResponse
     */
    async getDoubleRandom(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDoubleRandomHeaders({});
        return await this.getDoubleRandomWithOptions(request, headers, runtime);
    }
    /**
     * @summary 负面-环保处罚
     *
     * @param request GetEnvironmentalPenaltiesRequest
     * @param headers GetEnvironmentalPenaltiesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetEnvironmentalPenaltiesResponse
     */
    async getEnvironmentalPenaltiesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetEnvironmentalPenalties",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/environmentalPenalties`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetEnvironmentalPenaltiesResponse({}));
    }
    /**
     * @summary 负面-环保处罚
     *
     * @param request GetEnvironmentalPenaltiesRequest
     * @return GetEnvironmentalPenaltiesResponse
     */
    async getEnvironmentalPenalties(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetEnvironmentalPenaltiesHeaders({});
        return await this.getEnvironmentalPenaltiesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 工商-股东信息
     *
     * @param request GetHolderInfoRequest
     * @param headers GetHolderInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHolderInfoResponse
     */
    async getHolderInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetHolderInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/shareholderInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetHolderInfoResponse({}));
    }
    /**
     * @summary 工商-股东信息
     *
     * @param request GetHolderInfoRequest
     * @return GetHolderInfoResponse
     */
    async getHolderInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetHolderInfoHeaders({});
        return await this.getHolderInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取工商-知识产权出质
     *
     * @param request GetIntellectualPropertyRequest
     * @param headers GetIntellectualPropertyHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetIntellectualPropertyResponse
     */
    async getIntellectualPropertyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetIntellectualProperty",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/intellectualProperties`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetIntellectualPropertyResponse({}));
    }
    /**
     * @summary 获取工商-知识产权出质
     *
     * @param request GetIntellectualPropertyRequest
     * @return GetIntellectualPropertyResponse
     */
    async getIntellectualProperty(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetIntellectualPropertyHeaders({});
        return await this.getIntellectualPropertyWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取工商-对外投资
     *
     * @param request GetInvestmentAbroadRequest
     * @param headers GetInvestmentAbroadHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInvestmentAbroadResponse
     */
    async getInvestmentAbroadWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetInvestmentAbroad",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/abroadInvestments`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetInvestmentAbroadResponse({}));
    }
    /**
     * @summary 获取工商-对外投资
     *
     * @param request GetInvestmentAbroadRequest
     * @return GetInvestmentAbroadResponse
     */
    async getInvestmentAbroad(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetInvestmentAbroadHeaders({});
        return await this.getInvestmentAbroadWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取经营-招聘信息
     *
     * @param request GetJobInfoRequest
     * @param headers GetJobInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetJobInfoResponse
     */
    async getJobInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetJobInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/jobInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetJobInfoResponse({}));
    }
    /**
     * @summary 获取经营-招聘信息
     *
     * @param request GetJobInfoRequest
     * @return GetJobInfoResponse
     */
    async getJobInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetJobInfoHeaders({});
        return await this.getJobInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取知识产权-专利信息
     *
     * @param request GetPatentInfoRequest
     * @param headers GetPatentInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPatentInfoResponse
     */
    async getPatentInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPatentInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/patentInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPatentInfoResponse({}));
    }
    /**
     * @summary 获取知识产权-专利信息
     *
     * @param request GetPatentInfoRequest
     * @return GetPatentInfoResponse
     */
    async getPatentInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPatentInfoHeaders({});
        return await this.getPatentInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取工商-主要人员
     *
     * @param request GetPrincipalEmployeeRequest
     * @param headers GetPrincipalEmployeeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPrincipalEmployeeResponse
     */
    async getPrincipalEmployeeWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetPrincipalEmployee",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/principalEmployees`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetPrincipalEmployeeResponse({}));
    }
    /**
     * @summary 获取工商-主要人员
     *
     * @param request GetPrincipalEmployeeRequest
     * @return GetPrincipalEmployeeResponse
     */
    async getPrincipalEmployee(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetPrincipalEmployeeHeaders({});
        return await this.getPrincipalEmployeeWithOptions(request, headers, runtime);
    }
    /**
     * @summary 经营-一般纳税人
     *
     * @param request GetQeneralTaxpayerInfoRequest
     * @param headers GetQeneralTaxpayerInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetQeneralTaxpayerInfoResponse
     */
    async getQeneralTaxpayerInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetQeneralTaxpayerInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/generalTaxpayerInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetQeneralTaxpayerInfoResponse({}));
    }
    /**
     * @summary 经营-一般纳税人
     *
     * @param request GetQeneralTaxpayerInfoRequest
     * @return GetQeneralTaxpayerInfoResponse
     */
    async getQeneralTaxpayerInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetQeneralTaxpayerInfoHeaders({});
        return await this.getQeneralTaxpayerInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取知识产权-资质证书
     *
     * @param request GetQualificationCertRequest
     * @param headers GetQualificationCertHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetQualificationCertResponse
     */
    async getQualificationCertWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetQualificationCert",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/qualificationCerts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetQualificationCertResponse({}));
    }
    /**
     * @summary 获取知识产权-资质证书
     *
     * @param request GetQualificationCertRequest
     * @return GetQualificationCertResponse
     */
    async getQualificationCert(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetQualificationCertHeaders({});
        return await this.getQualificationCertWithOptions(request, headers, runtime);
    }
    /**
     * @summary 负面-严重违法
     *
     * @param request GetSeriousViolationRequest
     * @param headers GetSeriousViolationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSeriousViolationResponse
     */
    async getSeriousViolationWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSeriousViolation",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/seriousViolations`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSeriousViolationResponse({}));
    }
    /**
     * @summary 负面-严重违法
     *
     * @param request GetSeriousViolationRequest
     * @return GetSeriousViolationResponse
     */
    async getSeriousViolation(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSeriousViolationHeaders({});
        return await this.getSeriousViolationWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取知识产权-软件著作权
     *
     * @param request GetSoftwareCopyrightRequest
     * @param headers GetSoftwareCopyrightHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSoftwareCopyrightResponse
     */
    async getSoftwareCopyrightWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSoftwareCopyright",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/softwareCopyrights`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSoftwareCopyrightResponse({}));
    }
    /**
     * @summary 获取知识产权-软件著作权
     *
     * @param request GetSoftwareCopyrightRequest
     * @return GetSoftwareCopyrightResponse
     */
    async getSoftwareCopyright(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSoftwareCopyrightHeaders({});
        return await this.getSoftwareCopyrightWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取知识产权-商标信息
     *
     * @param request GetTrademarkInfoRequest
     * @param headers GetTrademarkInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTrademarkInfoResponse
     */
    async getTrademarkInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTrademarkInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/trademarkInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTrademarkInfoResponse({}));
    }
    /**
     * @summary 获取知识产权-商标信息
     *
     * @param request GetTrademarkInfoRequest
     * @return GetTrademarkInfoResponse
     */
    async getTrademarkInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTrademarkInfoHeaders({});
        return await this.getTrademarkInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取知识产权-作品著作权
     *
     * @param request GetWorkCopyrightRequest
     * @param headers GetWorkCopyrightHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetWorkCopyrightResponse
     */
    async getWorkCopyrightWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetWorkCopyright",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/workCopyrights`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetWorkCopyrightResponse({}));
    }
    /**
     * @summary 获取知识产权-作品著作权
     *
     * @param request GetWorkCopyrightRequest
     * @return GetWorkCopyrightResponse
     */
    async getWorkCopyright(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetWorkCopyrightHeaders({});
        return await this.getWorkCopyrightWithOptions(request, headers, runtime);
    }
    /**
     * @summary 企业授权信息
     *
     * @param headers PostCorpAuthInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PostCorpAuthInfoResponse
     */
    async postCorpAuthInfoWithOptions(headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "PostCorpAuthInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/corporations/authorize`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PostCorpAuthInfoResponse({}));
    }
    /**
     * @summary 企业授权信息
     *
     * @return PostCorpAuthInfoResponse
     */
    async postCorpAuthInfo() {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PostCorpAuthInfoHeaders({});
        return await this.postCorpAuthInfoWithOptions(headers, runtime);
    }
    /**
     * @summary 获取企业用户激活状态统计数据
     *
     * @param request QueryActiveUserStatisticalDataRequest
     * @param headers QueryActiveUserStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryActiveUserStatisticalDataResponse
     */
    async queryActiveUserStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryActiveUserStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/activeUserData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryActiveUserStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业用户激活状态统计数据
     *
     * @param request QueryActiveUserStatisticalDataRequest
     * @return QueryActiveUserStatisticalDataResponse
     */
    async queryActiveUserStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryActiveUserStatisticalDataHeaders({});
        return await this.queryActiveUserStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取安恒密盾统计数据
     *
     * @param request QueryAnhmdStatisticalDataRequest
     * @param headers QueryAnhmdStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAnhmdStatisticalDataResponse
     */
    async queryAnhmdStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAnhmdStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/statisticDatas/anHmd`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAnhmdStatisticalDataResponse({}));
    }
    /**
     * @summary 获取安恒密盾统计数据
     *
     * @param request QueryAnhmdStatisticalDataRequest
     * @return QueryAnhmdStatisticalDataResponse
     */
    async queryAnhmdStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAnhmdStatisticalDataHeaders({});
        return await this.queryAnhmdStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业审批统计数据
     *
     * @param request QueryApprovalStatisticalDataRequest
     * @param headers QueryApprovalStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryApprovalStatisticalDataResponse
     */
    async queryApprovalStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryApprovalStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/approvalData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryApprovalStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业审批统计数据
     *
     * @param request QueryApprovalStatisticalDataRequest
     * @return QueryApprovalStatisticalDataResponse
     */
    async queryApprovalStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryApprovalStatisticalDataHeaders({});
        return await this.queryApprovalStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业考勤统计数据
     *
     * @param request QueryAttendanceStatisticalDataRequest
     * @param headers QueryAttendanceStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAttendanceStatisticalDataResponse
     */
    async queryAttendanceStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryAttendanceStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/attendanceData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryAttendanceStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业考勤统计数据
     *
     * @param request QueryAttendanceStatisticalDataRequest
     * @return QueryAttendanceStatisticalDataResponse
     */
    async queryAttendanceStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryAttendanceStatisticalDataHeaders({});
        return await this.queryAttendanceStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业公告统计数据
     *
     * @param request QueryBlackboardStatisticalDataRequest
     * @param headers QueryBlackboardStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryBlackboardStatisticalDataResponse
     */
    async queryBlackboardStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryBlackboardStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/blackboardData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryBlackboardStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业公告统计数据
     *
     * @param request QueryBlackboardStatisticalDataRequest
     * @return QueryBlackboardStatisticalDataResponse
     */
    async queryBlackboardStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryBlackboardStatisticalDataHeaders({});
        return await this.queryBlackboardStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业日程统计数据
     *
     * @param request QueryCalendarStatisticalDataRequest
     * @param headers QueryCalendarStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCalendarStatisticalDataResponse
     */
    async queryCalendarStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCalendarStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/calendarData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCalendarStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业日程统计数据
     *
     * @param request QueryCalendarStatisticalDataRequest
     * @return QueryCalendarStatisticalDataResponse
     */
    async queryCalendarStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCalendarStatisticalDataHeaders({});
        return await this.queryCalendarStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业签到统计数据
     *
     * @param request QueryCheckinStatisticalDataRequest
     * @param headers QueryCheckinStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCheckinStatisticalDataResponse
     */
    async queryCheckinStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCheckinStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/checkinData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCheckinStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业签到统计数据
     *
     * @param request QueryCheckinStatisticalDataRequest
     * @return QueryCheckinStatisticalDataResponse
     */
    async queryCheckinStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCheckinStatisticalDataHeaders({});
        return await this.queryCheckinStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业全员圈统计数据
     *
     * @param request QueryCircleStatisticalDataRequest
     * @param headers QueryCircleStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCircleStatisticalDataResponse
     */
    async queryCircleStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCircleStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/circleData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCircleStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业全员圈统计数据
     *
     * @param request QueryCircleStatisticalDataRequest
     * @return QueryCircleStatisticalDataResponse
     */
    async queryCircleStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCircleStatisticalDataHeaders({});
        return await this.queryCircleStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 通过企业名称/社会统一信用代码/工商注册号，查询企业的基本画像信息。
     *
     * @param request QueryCompanyBasicInfoRequest
     * @param headers QueryCompanyBasicInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCompanyBasicInfoResponse
     */
    async queryCompanyBasicInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryCompanyBasicInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/companies/basicInfo`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryCompanyBasicInfoResponse({}));
    }
    /**
     * @summary 通过企业名称/社会统一信用代码/工商注册号，查询企业的基本画像信息。
     *
     * @param request QueryCompanyBasicInfoRequest
     * @return QueryCompanyBasicInfoResponse
     */
    async queryCompanyBasicInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryCompanyBasicInfoHeaders({});
        return await this.queryCompanyBasicInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取数字区县组织信息
     *
     * @param request QueryDigitalDistrictOrgInfoRequest
     * @param headers QueryDigitalDistrictOrgInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDigitalDistrictOrgInfoResponse
     */
    async queryDigitalDistrictOrgInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.corpIds)) {
            body["corpIds"] = request.corpIds;
        }
        if (!tea_util_1.default.isUnset(request.statDates)) {
            body["statDates"] = request.statDates;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryDigitalDistrictOrgInfo",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/digitalCounty/orgInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDigitalDistrictOrgInfoResponse({}));
    }
    /**
     * @summary 获取数字区县组织信息
     *
     * @param request QueryDigitalDistrictOrgInfoRequest
     * @return QueryDigitalDistrictOrgInfoResponse
     */
    async queryDigitalDistrictOrgInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDigitalDistrictOrgInfoHeaders({});
        return await this.queryDigitalDistrictOrgInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业DING接收及评论统计数据
     *
     * @param request QueryDingReciveStatisticalDataRequest
     * @param headers QueryDingReciveStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDingReciveStatisticalDataResponse
     */
    async queryDingReciveStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDingReciveStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/dingReciveData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDingReciveStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业DING接收及评论统计数据
     *
     * @param request QueryDingReciveStatisticalDataRequest
     * @return QueryDingReciveStatisticalDataResponse
     */
    async queryDingReciveStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDingReciveStatisticalDataHeaders({});
        return await this.queryDingReciveStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业DING发送统计数据
     *
     * @param request QueryDingSendStatisticalDataRequest
     * @param headers QueryDingSendStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDingSendStatisticalDataResponse
     */
    async queryDingSendStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDingSendStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/dingSendData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDingSendStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业DING发送统计数据
     *
     * @param request QueryDingSendStatisticalDataRequest
     * @return QueryDingSendStatisticalDataResponse
     */
    async queryDingSendStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDingSendStatisticalDataHeaders({});
        return await this.queryDingSendStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业文档统计数据
     *
     * @param request QueryDocumentStatisticalDataRequest
     * @param headers QueryDocumentStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDocumentStatisticalDataResponse
     */
    async queryDocumentStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDocumentStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/documentData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDocumentStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业文档统计数据
     *
     * @param request QueryDocumentStatisticalDataRequest
     * @return QueryDocumentStatisticalDataResponse
     */
    async queryDocumentStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDocumentStatisticalDataHeaders({});
        return await this.queryDocumentStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业钉盘统计数据
     *
     * @param request QueryDriveStatisticalDataRequest
     * @param headers QueryDriveStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDriveStatisticalDataResponse
     */
    async queryDriveStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDriveStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/driveData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDriveStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业钉盘统计数据
     *
     * @param request QueryDriveStatisticalDataRequest
     * @return QueryDriveStatisticalDataResponse
     */
    async queryDriveStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDriveStatisticalDataHeaders({});
        return await this.queryDriveStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业员工类型统计数据
     *
     * @param request QueryEmployeeTypeStatisticalDataRequest
     * @param headers QueryEmployeeTypeStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryEmployeeTypeStatisticalDataResponse
     */
    async queryEmployeeTypeStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryEmployeeTypeStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/employeeTypeData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryEmployeeTypeStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业员工类型统计数据
     *
     * @param request QueryEmployeeTypeStatisticalDataRequest
     * @return QueryEmployeeTypeStatisticalDataResponse
     */
    async queryEmployeeTypeStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryEmployeeTypeStatisticalDataHeaders({});
        return await this.queryEmployeeTypeStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 数据资产平台数据服务接口
     *
     * @param request QueryGeneralDataServiceRequest
     * @param headers QueryGeneralDataServiceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGeneralDataServiceResponse
     */
    async queryGeneralDataServiceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.endDate)) {
            query["endDate"] = request.endDate;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.serviceId)) {
            query["serviceId"] = request.serviceId;
        }
        if (!tea_util_1.default.isUnset(request.startDate)) {
            query["startDate"] = request.startDate;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryGeneralDataService",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/generalDataServices`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGeneralDataServiceResponse({}));
    }
    /**
     * @summary 数据资产平台数据服务接口
     *
     * @param request QueryGeneralDataServiceRequest
     * @return QueryGeneralDataServiceResponse
     */
    async queryGeneralDataService(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGeneralDataServiceHeaders({});
        return await this.queryGeneralDataServiceWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业群直播统计数据
     *
     * @param request QueryGroupLiveStatisticalDataRequest
     * @param headers QueryGroupLiveStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupLiveStatisticalDataResponse
     */
    async queryGroupLiveStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryGroupLiveStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/groupLiveData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGroupLiveStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业群直播统计数据
     *
     * @param request QueryGroupLiveStatisticalDataRequest
     * @return QueryGroupLiveStatisticalDataResponse
     */
    async queryGroupLiveStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupLiveStatisticalDataHeaders({});
        return await this.queryGroupLiveStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业群聊统计数据
     *
     * @param request QueryGroupMessageStatisticalDataRequest
     * @param headers QueryGroupMessageStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupMessageStatisticalDataResponse
     */
    async queryGroupMessageStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryGroupMessageStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/groupMessageData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryGroupMessageStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业群聊统计数据
     *
     * @param request QueryGroupMessageStatisticalDataRequest
     * @return QueryGroupMessageStatisticalDataResponse
     */
    async queryGroupMessageStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryGroupMessageStatisticalDataHeaders({});
        return await this.queryGroupMessageStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业钉钉运动统计数据
     *
     * @param request QueryHealthStatisticalDataRequest
     * @param headers QueryHealthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryHealthStatisticalDataResponse
     */
    async queryHealthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryHealthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/healtheUserData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryHealthStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业钉钉运动统计数据
     *
     * @param request QueryHealthStatisticalDataRequest
     * @return QueryHealthStatisticalDataResponse
     */
    async queryHealthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryHealthStatisticalDataHeaders({});
        return await this.queryHealthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业邮箱统计数据
     *
     * @param request QueryMailStatisticalDataRequest
     * @param headers QueryMailStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMailStatisticalDataResponse
     */
    async queryMailStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMailStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/mailData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMailStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业邮箱统计数据
     *
     * @param request QueryMailStatisticalDataRequest
     * @return QueryMailStatisticalDataResponse
     */
    async queryMailStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMailStatisticalDataHeaders({});
        return await this.queryMailStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取官方数据集数据
     *
     * @param request QueryOfficialDataRequest
     * @param headers QueryOfficialDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOfficialDataResponse
     */
    async queryOfficialDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.param)) {
            query["param"] = request.param;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryOfficialData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/datas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOfficialDataResponse({}));
    }
    /**
     * @summary 获取官方数据集数据
     *
     * @param request QueryOfficialDataRequest
     * @return QueryOfficialDataResponse
     */
    async queryOfficialData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOfficialDataHeaders({});
        return await this.queryOfficialDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary ISV获取官方数据集字段信息
     *
     * @param request QueryOfficialDatasetFieldsRequest
     * @param headers QueryOfficialDatasetFieldsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOfficialDatasetFieldsResponse
     */
    async queryOfficialDatasetFieldsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dsId)) {
            query["dsId"] = request.dsId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryOfficialDatasetFields",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/datasetFields`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOfficialDatasetFieldsResponse({}));
    }
    /**
     * @summary ISV获取官方数据集字段信息
     *
     * @param request QueryOfficialDatasetFieldsRequest
     * @return QueryOfficialDatasetFieldsResponse
     */
    async queryOfficialDatasetFields(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOfficialDatasetFieldsHeaders({});
        return await this.queryOfficialDatasetFieldsWithOptions(request, headers, runtime);
    }
    /**
     * @summary ISV获取官方数据集列表
     *
     * @param request QueryOfficialDatasetListRequest
     * @param headers QueryOfficialDatasetListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOfficialDatasetListResponse
     */
    async queryOfficialDatasetListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.keyword)) {
            query["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryOfficialDatasetList",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/datasetLists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOfficialDatasetListResponse({}));
    }
    /**
     * @summary ISV获取官方数据集列表
     *
     * @param request QueryOfficialDatasetListRequest
     * @return QueryOfficialDatasetListResponse
     */
    async queryOfficialDatasetList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOfficialDatasetListHeaders({});
        return await this.queryOfficialDatasetListWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取官方数据集数据
     *
     * @param request QueryOfficialFormDataRequest
     * @param headers QueryOfficialFormDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOfficialFormDataResponse
     */
    async queryOfficialFormDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryOfficialFormData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/datas/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOfficialFormDataResponse({}));
    }
    /**
     * @summary 获取官方数据集数据
     *
     * @param request QueryOfficialFormDataRequest
     * @return QueryOfficialFormDataResponse
     */
    async queryOfficialFormData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOfficialFormDataHeaders({});
        return await this.queryOfficialFormDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业用户在线统计数据
     *
     * @param request QueryOnlineUserStatisticalDataRequest
     * @param headers QueryOnlineUserStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOnlineUserStatisticalDataResponse
     */
    async queryOnlineUserStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryOnlineUserStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/onlineUserData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryOnlineUserStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业用户在线统计数据
     *
     * @param request QueryOnlineUserStatisticalDataRequest
     * @return QueryOnlineUserStatisticalDataResponse
     */
    async queryOnlineUserStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryOnlineUserStatisticalDataHeaders({});
        return await this.queryOnlineUserStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业接收红包统计数据
     *
     * @param request QueryRedEnvelopeReciveStatisticalDataRequest
     * @param headers QueryRedEnvelopeReciveStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRedEnvelopeReciveStatisticalDataResponse
     */
    async queryRedEnvelopeReciveStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryRedEnvelopeReciveStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/redEnvelopeReciveData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryRedEnvelopeReciveStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业接收红包统计数据
     *
     * @param request QueryRedEnvelopeReciveStatisticalDataRequest
     * @return QueryRedEnvelopeReciveStatisticalDataResponse
     */
    async queryRedEnvelopeReciveStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRedEnvelopeReciveStatisticalDataHeaders({});
        return await this.queryRedEnvelopeReciveStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业发送红包统计数据
     *
     * @param request QueryRedEnvelopeSendStatisticalDataRequest
     * @param headers QueryRedEnvelopeSendStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRedEnvelopeSendStatisticalDataResponse
     */
    async queryRedEnvelopeSendStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryRedEnvelopeSendStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/redEnvelopeSendData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryRedEnvelopeSendStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业发送红包统计数据
     *
     * @param request QueryRedEnvelopeSendStatisticalDataRequest
     * @return QueryRedEnvelopeSendStatisticalDataResponse
     */
    async queryRedEnvelopeSendStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRedEnvelopeSendStatisticalDataHeaders({});
        return await this.queryRedEnvelopeSendStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业日志统计数据
     *
     * @param request QueryReportStatisticalDataRequest
     * @param headers QueryReportStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryReportStatisticalDataResponse
     */
    async queryReportStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryReportStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/reportData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryReportStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业日志统计数据
     *
     * @param request QueryReportStatisticalDataRequest
     * @return QueryReportStatisticalDataResponse
     */
    async queryReportStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryReportStatisticalDataHeaders({});
        return await this.queryReportStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业单聊统计数据
     *
     * @param request QuerySingleMessageStatisticalDataRequest
     * @param headers QuerySingleMessageStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySingleMessageStatisticalDataResponse
     */
    async querySingleMessageStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySingleMessageStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/singleMessagerData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySingleMessageStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业单聊统计数据
     *
     * @param request QuerySingleMessageStatisticalDataRequest
     * @return QuerySingleMessageStatisticalDataResponse
     */
    async querySingleMessageStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySingleMessageStatisticalDataHeaders({});
        return await this.querySingleMessageStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业电话会议统计数据
     *
     * @param request QueryTelMeetingStatisticalDataRequest
     * @param headers QueryTelMeetingStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryTelMeetingStatisticalDataResponse
     */
    async queryTelMeetingStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryTelMeetingStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/telMeetingData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryTelMeetingStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业电话会议统计数据
     *
     * @param request QueryTelMeetingStatisticalDataRequest
     * @return QueryTelMeetingStatisticalDataResponse
     */
    async queryTelMeetingStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTelMeetingStatisticalDataHeaders({});
        return await this.queryTelMeetingStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业待办统计数据
     *
     * @param request QueryTodoStatisticalDataRequest
     * @param headers QueryTodoStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryTodoStatisticalDataResponse
     */
    async queryTodoStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryTodoStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/todoUserData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryTodoStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业待办统计数据
     *
     * @param request QueryTodoStatisticalDataRequest
     * @return QueryTodoStatisticalDataResponse
     */
    async queryTodoStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTodoStatisticalDataHeaders({});
        return await this.queryTodoStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取企业视频会议统计数据
     *
     * @param request QueryVedioMeetingStatisticalDataRequest
     * @param headers QueryVedioMeetingStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryVedioMeetingStatisticalDataResponse
     */
    async queryVedioMeetingStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryVedioMeetingStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/vedioMeetingData`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryVedioMeetingStatisticalDataResponse({}));
    }
    /**
     * @summary 获取企业视频会议统计数据
     *
     * @param request QueryVedioMeetingStatisticalDataRequest
     * @return QueryVedioMeetingStatisticalDataResponse
     */
    async queryVedioMeetingStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryVedioMeetingStatisticalDataHeaders({});
        return await this.queryVedioMeetingStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉参谋活跃分析（按日统计）指标接口
     *
     * @param request QueryYydActiveDayStatisticalDataRequest
     * @param headers QueryYydActiveDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydActiveDayStatisticalDataResponse
     */
    async queryYydActiveDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydActiveDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydActiveDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydActiveDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉参谋活跃分析（按日统计）指标接口
     *
     * @param request QueryYydActiveDayStatisticalDataRequest
     * @return QueryYydActiveDayStatisticalDataResponse
     */
    async queryYydActiveDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydActiveDayStatisticalDataHeaders({});
        return await this.queryYydActiveDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉参谋活跃分析（按月统计）指标接口
     *
     * @param request QueryYydActiveMonthStatisticalDataRequest
     * @param headers QueryYydActiveMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydActiveMonthStatisticalDataResponse
     */
    async queryYydActiveMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydActiveMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydActiveMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydActiveMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉参谋活跃分析（按月统计）指标接口
     *
     * @param request QueryYydActiveMonthStatisticalDataRequest
     * @return QueryYydActiveMonthStatisticalDataResponse
     */
    async queryYydActiveMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydActiveMonthStatisticalDataHeaders({});
        return await this.queryYydActiveMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉参谋活跃分析（按周统计）指标接口
     *
     * @param request QueryYydActiveWeekStatisticalDataRequest
     * @param headers QueryYydActiveWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydActiveWeekStatisticalDataResponse
     */
    async queryYydActiveWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydActiveWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydActiveWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydActiveWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉参谋活跃分析（按周统计）指标接口
     *
     * @param request QueryYydActiveWeekStatisticalDataRequest
     * @return QueryYydActiveWeekStatisticalDataResponse
     */
    async queryYydActiveWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydActiveWeekStatisticalDataHeaders({});
        return await this.queryYydActiveWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋应用概况（按日统计）指标接口
     *
     * @param request QueryYydAppDayStatisticalDataRequest
     * @param headers QueryYydAppDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydAppDayStatisticalDataResponse
     */
    async queryYydAppDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydAppDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydAppDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydAppDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋应用概况（按日统计）指标接口
     *
     * @param request QueryYydAppDayStatisticalDataRequest
     * @return QueryYydAppDayStatisticalDataResponse
     */
    async queryYydAppDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydAppDayStatisticalDataHeaders({});
        return await this.queryYydAppDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋应用概况（按月统计）指标接口
     *
     * @param request QueryYydAppMonthStatisticalDataRequest
     * @param headers QueryYydAppMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydAppMonthStatisticalDataResponse
     */
    async queryYydAppMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydAppMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydAppMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydAppMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋应用概况（按月统计）指标接口
     *
     * @param request QueryYydAppMonthStatisticalDataRequest
     * @return QueryYydAppMonthStatisticalDataResponse
     */
    async queryYydAppMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydAppMonthStatisticalDataHeaders({});
        return await this.queryYydAppMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋应用概况（累计）指标接口
     *
     * @param request QueryYydAppStdStatisticalDataRequest
     * @param headers QueryYydAppStdStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydAppStdStatisticalDataResponse
     */
    async queryYydAppStdStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydAppStdStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydAppStdDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydAppStdStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋应用概况（累计）指标接口
     *
     * @param request QueryYydAppStdStatisticalDataRequest
     * @return QueryYydAppStdStatisticalDataResponse
     */
    async queryYydAppStdStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydAppStdStatisticalDataHeaders({});
        return await this.queryYydAppStdStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋应用概况（按周统计）指标接口
     *
     * @param request QueryYydAppWeekStatisticalDataRequest
     * @param headers QueryYydAppWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydAppWeekStatisticalDataResponse
     */
    async queryYydAppWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydAppWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydAppWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydAppWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋应用概况（按周统计）指标接口
     *
     * @param request QueryYydAppWeekStatisticalDataRequest
     * @return QueryYydAppWeekStatisticalDataResponse
     */
    async queryYydAppWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydAppWeekStatisticalDataHeaders({});
        return await this.queryYydAppWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋会议日程分析（按日统计）指标接口
     *
     * @param request QueryYydCalendarDayStatisticalDataRequest
     * @param headers QueryYydCalendarDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydCalendarDayStatisticalDataResponse
     */
    async queryYydCalendarDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydCalendarDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydCalendarDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydCalendarDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋会议日程分析（按日统计）指标接口
     *
     * @param request QueryYydCalendarDayStatisticalDataRequest
     * @return QueryYydCalendarDayStatisticalDataResponse
     */
    async queryYydCalendarDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydCalendarDayStatisticalDataHeaders({});
        return await this.queryYydCalendarDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋会议日程分析（按月统计）指标接口
     *
     * @param request QueryYydCalendarMonthStatisticalDataRequest
     * @param headers QueryYydCalendarMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydCalendarMonthStatisticalDataResponse
     */
    async queryYydCalendarMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydCalendarMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydCalendarMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydCalendarMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋会议日程分析（按月统计）指标接口
     *
     * @param request QueryYydCalendarMonthStatisticalDataRequest
     * @return QueryYydCalendarMonthStatisticalDataResponse
     */
    async queryYydCalendarMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydCalendarMonthStatisticalDataHeaders({});
        return await this.queryYydCalendarMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋会议日程分析（按周统计）指标接口
     *
     * @param request QueryYydCalendarWeekStatisticalDataRequest
     * @param headers QueryYydCalendarWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydCalendarWeekStatisticalDataResponse
     */
    async queryYydCalendarWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydCalendarWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydCalendarWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydCalendarWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋会议日程分析（按周统计）指标接口
     *
     * @param request QueryYydCalendarWeekStatisticalDataRequest
     * @return QueryYydCalendarWeekStatisticalDataResponse
     */
    async queryYydCalendarWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydCalendarWeekStatisticalDataHeaders({});
        return await this.queryYydCalendarWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋钉消息分析（按日统计）指标接口
     *
     * @param request QueryYydDingMsgDayStatisticalDataRequest
     * @param headers QueryYydDingMsgDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydDingMsgDayStatisticalDataResponse
     */
    async queryYydDingMsgDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydDingMsgDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydDingMsgDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydDingMsgDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋钉消息分析（按日统计）指标接口
     *
     * @param request QueryYydDingMsgDayStatisticalDataRequest
     * @return QueryYydDingMsgDayStatisticalDataResponse
     */
    async queryYydDingMsgDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydDingMsgDayStatisticalDataHeaders({});
        return await this.queryYydDingMsgDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋钉消息分析（按月统计）指标接口
     *
     * @param request QueryYydDingMsgMonthStatisticalDataRequest
     * @param headers QueryYydDingMsgMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydDingMsgMonthStatisticalDataResponse
     */
    async queryYydDingMsgMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydDingMsgMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydDingMsgMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydDingMsgMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋钉消息分析（按月统计）指标接口
     *
     * @param request QueryYydDingMsgMonthStatisticalDataRequest
     * @return QueryYydDingMsgMonthStatisticalDataResponse
     */
    async queryYydDingMsgMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydDingMsgMonthStatisticalDataHeaders({});
        return await this.queryYydDingMsgMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋钉消息分析（按周统计）指标接口
     *
     * @param request QueryYydDingMsgWeekStatisticalDataRequest
     * @param headers QueryYydDingMsgWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydDingMsgWeekStatisticalDataResponse
     */
    async queryYydDingMsgWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydDingMsgWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydDingMsgWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydDingMsgWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋钉消息分析（按周统计）指标接口
     *
     * @param request QueryYydDingMsgWeekStatisticalDataRequest
     * @return QueryYydDingMsgWeekStatisticalDataResponse
     */
    async queryYydDingMsgWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydDingMsgWeekStatisticalDataHeaders({});
        return await this.queryYydDingMsgWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋群聊分析（按日统计）指标接口
     *
     * @param request QueryYydGroupMsgDayStatisticalDataRequest
     * @param headers QueryYydGroupMsgDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydGroupMsgDayStatisticalDataResponse
     */
    async queryYydGroupMsgDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydGroupMsgDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydGroupMsgDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydGroupMsgDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋群聊分析（按日统计）指标接口
     *
     * @param request QueryYydGroupMsgDayStatisticalDataRequest
     * @return QueryYydGroupMsgDayStatisticalDataResponse
     */
    async queryYydGroupMsgDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydGroupMsgDayStatisticalDataHeaders({});
        return await this.queryYydGroupMsgDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋群聊分析（按月统计）指标接口
     *
     * @param request QueryYydGroupMsgMonthStatisticalDataRequest
     * @param headers QueryYydGroupMsgMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydGroupMsgMonthStatisticalDataResponse
     */
    async queryYydGroupMsgMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydGroupMsgMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydGroupMsgMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydGroupMsgMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋群聊分析（按月统计）指标接口
     *
     * @param request QueryYydGroupMsgMonthStatisticalDataRequest
     * @return QueryYydGroupMsgMonthStatisticalDataResponse
     */
    async queryYydGroupMsgMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydGroupMsgMonthStatisticalDataHeaders({});
        return await this.queryYydGroupMsgMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋群聊分析（按周统计）指标接口
     *
     * @param request QueryYydGroupMsgWeekStatisticalDataRequest
     * @param headers QueryYydGroupMsgWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydGroupMsgWeekStatisticalDataResponse
     */
    async queryYydGroupMsgWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydGroupMsgWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydGroupMsgWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydGroupMsgWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋群聊分析（按周统计）指标接口
     *
     * @param request QueryYydGroupMsgWeekStatisticalDataRequest
     * @return QueryYydGroupMsgWeekStatisticalDataResponse
     */
    async queryYydGroupMsgWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydGroupMsgWeekStatisticalDataHeaders({});
        return await this.queryYydGroupMsgWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋日志分析（按日统计）指标接口
     *
     * @param request QueryYydLogDayStatisticalDataRequest
     * @param headers QueryYydLogDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydLogDayStatisticalDataResponse
     */
    async queryYydLogDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydLogDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydLogDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydLogDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋日志分析（按日统计）指标接口
     *
     * @param request QueryYydLogDayStatisticalDataRequest
     * @return QueryYydLogDayStatisticalDataResponse
     */
    async queryYydLogDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydLogDayStatisticalDataHeaders({});
        return await this.queryYydLogDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋日志分析（按月统计）指标接口
     *
     * @param request QueryYydLogMonthStatisticalDataRequest
     * @param headers QueryYydLogMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydLogMonthStatisticalDataResponse
     */
    async queryYydLogMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydLogMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydLogMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydLogMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋日志分析（按月统计）指标接口
     *
     * @param request QueryYydLogMonthStatisticalDataRequest
     * @return QueryYydLogMonthStatisticalDataResponse
     */
    async queryYydLogMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydLogMonthStatisticalDataHeaders({});
        return await this.queryYydLogMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋日志分析（按周统计）指标接口
     *
     * @param request QueryYydLogWeekStatisticalDataRequest
     * @param headers QueryYydLogWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydLogWeekStatisticalDataResponse
     */
    async queryYydLogWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydLogWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydLogWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydLogWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋日志分析（按周统计）指标接口
     *
     * @param request QueryYydLogWeekStatisticalDataRequest
     * @return QueryYydLogWeekStatisticalDataResponse
     */
    async queryYydLogWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydLogWeekStatisticalDataHeaders({});
        return await this.queryYydLogWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋钉会议分析（按日统计）指标接口
     *
     * @param request QueryYydMeetingDayStatisticalDataRequest
     * @param headers QueryYydMeetingDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydMeetingDayStatisticalDataResponse
     */
    async queryYydMeetingDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydMeetingDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydMeetingDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydMeetingDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋钉会议分析（按日统计）指标接口
     *
     * @param request QueryYydMeetingDayStatisticalDataRequest
     * @return QueryYydMeetingDayStatisticalDataResponse
     */
    async queryYydMeetingDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydMeetingDayStatisticalDataHeaders({});
        return await this.queryYydMeetingDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋钉会议分析（按月统计）指标接口
     *
     * @param request QueryYydMeetingMonthStatisticalDataRequest
     * @param headers QueryYydMeetingMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydMeetingMonthStatisticalDataResponse
     */
    async queryYydMeetingMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydMeetingMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydMeetingMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydMeetingMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋钉会议分析（按月统计）指标接口
     *
     * @param request QueryYydMeetingMonthStatisticalDataRequest
     * @return QueryYydMeetingMonthStatisticalDataResponse
     */
    async queryYydMeetingMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydMeetingMonthStatisticalDataHeaders({});
        return await this.queryYydMeetingMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋钉会议分析（按周统计）指标接口
     *
     * @param request QueryYydMeetingWeekStatisticalDataRequest
     * @param headers QueryYydMeetingWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydMeetingWeekStatisticalDataResponse
     */
    async queryYydMeetingWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydMeetingWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydMeetingWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydMeetingWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋钉会议分析（按周统计）指标接口
     *
     * @param request QueryYydMeetingWeekStatisticalDataRequest
     * @return QueryYydMeetingWeekStatisticalDataResponse
     */
    async queryYydMeetingWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydMeetingWeekStatisticalDataHeaders({});
        return await this.queryYydMeetingWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋通知分析（按日统计）指标接口
     *
     * @param request QueryYydNoticeDayStatisticalDataRequest
     * @param headers QueryYydNoticeDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydNoticeDayStatisticalDataResponse
     */
    async queryYydNoticeDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydNoticeDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydNoticeDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydNoticeDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋通知分析（按日统计）指标接口
     *
     * @param request QueryYydNoticeDayStatisticalDataRequest
     * @return QueryYydNoticeDayStatisticalDataResponse
     */
    async queryYydNoticeDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydNoticeDayStatisticalDataHeaders({});
        return await this.queryYydNoticeDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋通知分析（按月统计）指标接口
     *
     * @param request QueryYydNoticeMonthStatisticalDataRequest
     * @param headers QueryYydNoticeMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydNoticeMonthStatisticalDataResponse
     */
    async queryYydNoticeMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydNoticeMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydNoticeMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydNoticeMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋通知分析（按月统计）指标接口
     *
     * @param request QueryYydNoticeMonthStatisticalDataRequest
     * @return QueryYydNoticeMonthStatisticalDataResponse
     */
    async queryYydNoticeMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydNoticeMonthStatisticalDataHeaders({});
        return await this.queryYydNoticeMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋通知分析（按周统计）指标接口
     *
     * @param request QueryYydNoticeWeekStatisticalDataRequest
     * @param headers QueryYydNoticeWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydNoticeWeekStatisticalDataResponse
     */
    async queryYydNoticeWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydNoticeWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydNoticeWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydNoticeWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋通知分析（按周统计）指标接口
     *
     * @param request QueryYydNoticeWeekStatisticalDataRequest
     * @return QueryYydNoticeWeekStatisticalDataResponse
     */
    async queryYydNoticeWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydNoticeWeekStatisticalDataHeaders({});
        return await this.queryYydNoticeWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋单聊分析（按日统计）指标接口
     *
     * @param request QueryYydSingleMsgDayStatisticalDataRequest
     * @param headers QueryYydSingleMsgDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydSingleMsgDayStatisticalDataResponse
     */
    async queryYydSingleMsgDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydSingleMsgDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydSingleMsgDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydSingleMsgDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋单聊分析（按日统计）指标接口
     *
     * @param request QueryYydSingleMsgDayStatisticalDataRequest
     * @return QueryYydSingleMsgDayStatisticalDataResponse
     */
    async queryYydSingleMsgDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydSingleMsgDayStatisticalDataHeaders({});
        return await this.queryYydSingleMsgDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋单聊分析（按月统计）指标接口
     *
     * @param request QueryYydSingleMsgMonthStatisticalDataRequest
     * @param headers QueryYydSingleMsgMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydSingleMsgMonthStatisticalDataResponse
     */
    async queryYydSingleMsgMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydSingleMsgMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydSingleMsgMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydSingleMsgMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋单聊分析（按月统计）指标接口
     *
     * @param request QueryYydSingleMsgMonthStatisticalDataRequest
     * @return QueryYydSingleMsgMonthStatisticalDataResponse
     */
    async queryYydSingleMsgMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydSingleMsgMonthStatisticalDataHeaders({});
        return await this.queryYydSingleMsgMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋单聊分析（按周统计）指标接口
     *
     * @param request QueryYydSingleMsgWeekStatisticalDataRequest
     * @param headers QueryYydSingleMsgWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydSingleMsgWeekStatisticalDataResponse
     */
    async queryYydSingleMsgWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydSingleMsgWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydSingleMsgWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydSingleMsgWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋单聊分析（按周统计）指标接口
     *
     * @param request QueryYydSingleMsgWeekStatisticalDataRequest
     * @return QueryYydSingleMsgWeekStatisticalDataResponse
     */
    async queryYydSingleMsgWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydSingleMsgWeekStatisticalDataHeaders({});
        return await this.queryYydSingleMsgWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋消息概览（按日统计）指标接口
     *
     * @param request QueryYydToatlMsgDayStatisticalDataRequest
     * @param headers QueryYydToatlMsgDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydToatlMsgDayStatisticalDataResponse
     */
    async queryYydToatlMsgDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydToatlMsgDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydToatlMsgDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydToatlMsgDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋消息概览（按日统计）指标接口
     *
     * @param request QueryYydToatlMsgDayStatisticalDataRequest
     * @return QueryYydToatlMsgDayStatisticalDataResponse
     */
    async queryYydToatlMsgDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydToatlMsgDayStatisticalDataHeaders({});
        return await this.queryYydToatlMsgDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋消息概览（按月统计）指标接口
     *
     * @param request QueryYydToatlMsgMonthStatisticalDataRequest
     * @param headers QueryYydToatlMsgMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydToatlMsgMonthStatisticalDataResponse
     */
    async queryYydToatlMsgMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydToatlMsgMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydToatlMsgMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydToatlMsgMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋消息概览（按月统计）指标接口
     *
     * @param request QueryYydToatlMsgMonthStatisticalDataRequest
     * @return QueryYydToatlMsgMonthStatisticalDataResponse
     */
    async queryYydToatlMsgMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydToatlMsgMonthStatisticalDataHeaders({});
        return await this.queryYydToatlMsgMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋消息概览（按周统计）指标接口
     *
     * @param request QueryYydToatlMsgWeekStatisticalDataRequest
     * @param headers QueryYydToatlMsgWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydToatlMsgWeekStatisticalDataResponse
     */
    async queryYydToatlMsgWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydToatlMsgWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydToatlMsgWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydToatlMsgWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋消息概览（按周统计）指标接口
     *
     * @param request QueryYydToatlMsgWeekStatisticalDataRequest
     * @return QueryYydToatlMsgWeekStatisticalDataResponse
     */
    async queryYydToatlMsgWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydToatlMsgWeekStatisticalDataHeaders({});
        return await this.queryYydToatlMsgWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋待办分析（按日统计）指标接口
     *
     * @param request QueryYydTodoDayStatisticalDataRequest
     * @param headers QueryYydTodoDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTodoDayStatisticalDataResponse
     */
    async queryYydTodoDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydTodoDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydTodoDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydTodoDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋待办分析（按日统计）指标接口
     *
     * @param request QueryYydTodoDayStatisticalDataRequest
     * @return QueryYydTodoDayStatisticalDataResponse
     */
    async queryYydTodoDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTodoDayStatisticalDataHeaders({});
        return await this.queryYydTodoDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋待办分析（按月统计）指标接口
     *
     * @param request QueryYydTodoMonthStatisticalDataRequest
     * @param headers QueryYydTodoMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTodoMonthStatisticalDataResponse
     */
    async queryYydTodoMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydTodoMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydTodoMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydTodoMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋待办分析（按月统计）指标接口
     *
     * @param request QueryYydTodoMonthStatisticalDataRequest
     * @return QueryYydTodoMonthStatisticalDataResponse
     */
    async queryYydTodoMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTodoMonthStatisticalDataHeaders({});
        return await this.queryYydTodoMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉数字参谋待办分析（按周统计）指标接口
     *
     * @param request QueryYydTodoWeekStatisticalDataRequest
     * @param headers QueryYydTodoWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTodoWeekStatisticalDataResponse
     */
    async queryYydTodoWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydTodoWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydTodoWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydTodoWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉数字参谋待办分析（按周统计）指标接口
     *
     * @param request QueryYydTodoWeekStatisticalDataRequest
     * @return QueryYydTodoWeekStatisticalDataResponse
     */
    async queryYydTodoWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTodoWeekStatisticalDataHeaders({});
        return await this.queryYydTodoWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉参谋全局概览（按日统计）指标接口
     *
     * @param request QueryYydTotalDayStatisticalDataRequest
     * @param headers QueryYydTotalDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTotalDayStatisticalDataResponse
     */
    async queryYydTotalDayStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydTotalDayStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydTotalDayDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydTotalDayStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉参谋全局概览（按日统计）指标接口
     *
     * @param request QueryYydTotalDayStatisticalDataRequest
     * @return QueryYydTotalDayStatisticalDataResponse
     */
    async queryYydTotalDayStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTotalDayStatisticalDataHeaders({});
        return await this.queryYydTotalDayStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉参谋全局概览（按月统计）指标接口
     *
     * @param request QueryYydTotalMonthStatisticalDataRequest
     * @param headers QueryYydTotalMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTotalMonthStatisticalDataResponse
     */
    async queryYydTotalMonthStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydTotalMonthStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydTotalMonthDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydTotalMonthStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉参谋全局概览（按月统计）指标接口
     *
     * @param request QueryYydTotalMonthStatisticalDataRequest
     * @return QueryYydTotalMonthStatisticalDataResponse
     */
    async queryYydTotalMonthStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTotalMonthStatisticalDataHeaders({});
        return await this.queryYydTotalMonthStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉参谋全局概览（累计）指标接口
     *
     * @param request QueryYydTotalStdStatisticalDataRequest
     * @param headers QueryYydTotalStdStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTotalStdStatisticalDataResponse
     */
    async queryYydTotalStdStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydTotalStdStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydTotalStdDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydTotalStdStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉参谋全局概览（累计）指标接口
     *
     * @param request QueryYydTotalStdStatisticalDataRequest
     * @return QueryYydTotalStdStatisticalDataResponse
     */
    async queryYydTotalStdStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTotalStdStatisticalDataHeaders({});
        return await this.queryYydTotalStdStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 亚运钉参谋全局概览（按周统计）指标接口
     *
     * @param request QueryYydTotalWeekStatisticalDataRequest
     * @param headers QueryYydTotalWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTotalWeekStatisticalDataResponse
     */
    async queryYydTotalWeekStatisticalDataWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.statDate)) {
            query["statDate"] = request.statDate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryYydTotalWeekStatisticalData",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/yydTotalWeekDatas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryYydTotalWeekStatisticalDataResponse({}));
    }
    /**
     * @summary 亚运钉参谋全局概览（按周统计）指标接口
     *
     * @param request QueryYydTotalWeekStatisticalDataRequest
     * @return QueryYydTotalWeekStatisticalDataResponse
     */
    async queryYydTotalWeekStatisticalData(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryYydTotalWeekStatisticalDataHeaders({});
        return await this.queryYydTotalWeekStatisticalDataWithOptions(request, headers, runtime);
    }
    /**
     * @summary 通过关键词搜索企业
     *
     * @param request SearchCompanyRequest
     * @param headers SearchCompanyHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchCompanyResponse
     */
    async searchCompanyWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.searchKey)) {
            query["searchKey"] = request.searchKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SearchCompany",
            version: "datacenter_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/datacenter/keywords/companies`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchCompanyResponse({}));
    }
    /**
     * @summary 通过关键词搜索企业
     *
     * @param request SearchCompanyRequest
     * @return SearchCompanyResponse
     */
    async searchCompany(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchCompanyHeaders({});
        return await this.searchCompanyWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map