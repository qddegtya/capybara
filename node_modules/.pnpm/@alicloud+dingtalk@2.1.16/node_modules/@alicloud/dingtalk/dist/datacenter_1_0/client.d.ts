/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class GetAbnormalOperationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAbnormalOperationRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAbnormalOperationResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAbnormalOperationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAbnormalOperationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdministrativeLicensingHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdministrativeLicensingRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdministrativeLicensingResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdministrativeLicensingResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAdministrativeLicensingResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdministrativePenaltiesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdministrativePenaltiesRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdministrativePenaltiesResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAdministrativePenaltiesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetAdministrativePenaltiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBasicInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBasicInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBasicInfoResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBasicInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetBasicInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBiddingInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBiddingInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBiddingInfoResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBiddingInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetBiddingInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBranchInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBranchInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBranchInfoResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetBranchInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetBranchInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetChangeRecordHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetChangeRecordRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetChangeRecordResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetChangeRecordResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetChangeRecordResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDomainInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDomainInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDomainInfoResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDomainInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDomainInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDoubleRandomHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDoubleRandomRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDoubleRandomResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetDoubleRandomResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetDoubleRandomResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEnvironmentalPenaltiesHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEnvironmentalPenaltiesRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEnvironmentalPenaltiesResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetEnvironmentalPenaltiesResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetEnvironmentalPenaltiesResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetHolderInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetHolderInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetHolderInfoResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetHolderInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetHolderInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntellectualPropertyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntellectualPropertyRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntellectualPropertyResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetIntellectualPropertyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetIntellectualPropertyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInvestmentAbroadHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInvestmentAbroadRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInvestmentAbroadResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetInvestmentAbroadResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetInvestmentAbroadResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetJobInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetJobInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetJobInfoResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetJobInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetJobInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPatentInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPatentInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPatentInfoResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPatentInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPatentInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrincipalEmployeeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrincipalEmployeeRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrincipalEmployeeResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetPrincipalEmployeeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetPrincipalEmployeeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQeneralTaxpayerInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQeneralTaxpayerInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQeneralTaxpayerInfoResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQeneralTaxpayerInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetQeneralTaxpayerInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQualificationCertHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQualificationCertRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQualificationCertResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetQualificationCertResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetQualificationCertResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSeriousViolationHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSeriousViolationRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSeriousViolationResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSeriousViolationResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSeriousViolationResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoftwareCopyrightHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoftwareCopyrightRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoftwareCopyrightResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetSoftwareCopyrightResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetSoftwareCopyrightResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTrademarkInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTrademarkInfoRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTrademarkInfoResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetTrademarkInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetTrademarkInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkCopyrightHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkCopyrightRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkCopyrightResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetWorkCopyrightResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetWorkCopyrightResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostCorpAuthInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostCorpAuthInfoResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class PostCorpAuthInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: PostCorpAuthInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUserStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUserStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUserStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryActiveUserStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUserStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryActiveUserStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAnhmdStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAnhmdStatisticalDataRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAnhmdStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryAnhmdStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAnhmdStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAnhmdStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryApprovalStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryApprovalStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryApprovalStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryApprovalStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryApprovalStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryApprovalStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAttendanceStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAttendanceStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAttendanceStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryAttendanceStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAttendanceStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAttendanceStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBlackboardStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBlackboardStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBlackboardStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryBlackboardStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBlackboardStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryBlackboardStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCalendarStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCalendarStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCalendarStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryCalendarStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCalendarStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCalendarStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCheckinStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCheckinStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCheckinStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryCheckinStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCheckinStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCheckinStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCircleStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCircleStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCircleStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryCircleStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCircleStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCircleStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCompanyBasicInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCompanyBasicInfoRequest extends $tea.Model {
    keyword?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCompanyBasicInfoResponseBody extends $tea.Model {
    code?: string;
    data?: {
        [key: string]: string;
    }[];
    message?: string;
    requestId?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCompanyBasicInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryCompanyBasicInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDigitalDistrictOrgInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDigitalDistrictOrgInfoRequest extends $tea.Model {
    corpIds?: string[];
    statDates?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDigitalDistrictOrgInfoResponseBody extends $tea.Model {
    arguments?: string[];
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDigitalDistrictOrgInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDigitalDistrictOrgInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingReciveStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingReciveStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingReciveStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryDingReciveStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingReciveStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDingReciveStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingSendStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingSendStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingSendStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryDingSendStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingSendStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDingSendStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocumentStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocumentStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocumentStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryDocumentStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocumentStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDocumentStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDriveStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDriveStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDriveStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryDriveStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDriveStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryDriveStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEmployeeTypeStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEmployeeTypeStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEmployeeTypeStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryEmployeeTypeStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEmployeeTypeStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryEmployeeTypeStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGeneralDataServiceHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGeneralDataServiceRequest extends $tea.Model {
    deptId?: string;
    endDate?: string;
    pageNumber?: number;
    pageSize?: number;
    serviceId?: string;
    startDate?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGeneralDataServiceResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryGeneralDataServiceResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGeneralDataServiceResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGeneralDataServiceResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupLiveStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupLiveStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupLiveStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryGroupLiveStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupLiveStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupLiveStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMessageStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMessageStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMessageStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryGroupMessageStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMessageStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryGroupMessageStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHealthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHealthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHealthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryHealthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHealthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryHealthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMailStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMailStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMailStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryMailStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMailStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMailStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDataRequest extends $tea.Model {
    param?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDataResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOfficialDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetFieldsHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetFieldsRequest extends $tea.Model {
    dsId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetFieldsResponseBody extends $tea.Model {
    result?: QueryOfficialDatasetFieldsResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetFieldsResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOfficialDatasetFieldsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetListRequest extends $tea.Model {
    keyword?: string;
    pageNumber?: number;
    pageSize?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetListResponseBody extends $tea.Model {
    result?: QueryOfficialDatasetListResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOfficialDatasetListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialFormDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialFormDataRequest extends $tea.Model {
    param?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialFormDataResponseBody extends $tea.Model {
    result?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialFormDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOfficialFormDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOnlineUserStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOnlineUserStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOnlineUserStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryOnlineUserStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOnlineUserStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryOnlineUserStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeReciveStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeReciveStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeReciveStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeReciveStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryRedEnvelopeReciveStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeSendStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeSendStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeSendStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeSendStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryRedEnvelopeSendStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryReportStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryReportStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryReportStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryReportStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryReportStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryReportStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleMessageStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleMessageStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleMessageStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QuerySingleMessageStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleMessageStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySingleMessageStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTelMeetingStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTelMeetingStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTelMeetingStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryTelMeetingStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTelMeetingStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryTelMeetingStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryTodoStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryTodoStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVedioMeetingStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVedioMeetingStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVedioMeetingStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryVedioMeetingStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVedioMeetingStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryVedioMeetingStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydActiveDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydActiveDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydActiveMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydActiveMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydActiveWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydActiveWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydAppDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydAppDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydAppMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydAppMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppStdStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppStdStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppStdStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydAppStdStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppStdStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydAppStdStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydAppWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydAppWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydCalendarDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydCalendarDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydCalendarMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydCalendarMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydCalendarWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydCalendarWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydDingMsgDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydDingMsgDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydDingMsgMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydDingMsgWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydGroupMsgDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydGroupMsgMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydGroupMsgWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydLogDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydLogDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydLogMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydLogMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydLogWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydLogWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydMeetingDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydMeetingDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydMeetingMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydMeetingMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydMeetingWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydMeetingWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydNoticeDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydNoticeDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydNoticeMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydNoticeMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydNoticeWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydNoticeWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydSingleMsgDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydSingleMsgMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydSingleMsgWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydToatlMsgDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydToatlMsgMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydToatlMsgWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydTodoDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydTodoDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydTodoMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydTodoMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydTodoWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydTodoWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalDayStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalDayStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalDayStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydTotalDayStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalDayStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydTotalDayStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalMonthStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalMonthStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalMonthStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydTotalMonthStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalMonthStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydTotalMonthStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalStdStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalStdStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalStdStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydTotalStdStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalStdStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydTotalStdStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalWeekStatisticalDataHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalWeekStatisticalDataRequest extends $tea.Model {
    statDate?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalWeekStatisticalDataResponseBody extends $tea.Model {
    dataList?: {
        [key: string]: any;
    }[];
    metaList?: QueryYydTotalWeekStatisticalDataResponseBodyMetaList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalWeekStatisticalDataResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryYydTotalWeekStatisticalDataResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchCompanyHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchCompanyRequest extends $tea.Model {
    pageNumber?: number;
    pageSize?: number;
    searchKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchCompanyResponseBody extends $tea.Model {
    data?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SearchCompanyResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SearchCompanyResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryActiveUserStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAnhmdStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryApprovalStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAttendanceStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBlackboardStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCalendarStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCheckinStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryCircleStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingReciveStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDingSendStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDocumentStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryDriveStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryEmployeeTypeStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGeneralDataServiceResponseBodyMetaList extends $tea.Model {
    fieldDesc?: string;
    fieldId?: string;
    fieldName?: string;
    fieldType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupLiveStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryGroupMessageStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryHealthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMailStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetFieldsResponseBodyResultFields extends $tea.Model {
    displayName?: string;
    fieldId?: string;
    fieldType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetFieldsResponseBodyResult extends $tea.Model {
    displayName?: string;
    dsId?: string;
    fields?: QueryOfficialDatasetFieldsResponseBodyResultFields[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetListResponseBodyResultRows extends $tea.Model {
    displayName?: string;
    dsId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOfficialDatasetListResponseBodyResult extends $tea.Model {
    rows?: QueryOfficialDatasetListResponseBodyResultRows[];
    totalCount?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryOnlineUserStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeReciveStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryRedEnvelopeSendStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryReportStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySingleMessageStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTelMeetingStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryTodoStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryVedioMeetingStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydActiveWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppStdStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydAppWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydCalendarWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydDingMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydGroupMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydLogWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydMeetingWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydNoticeWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydSingleMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydToatlMsgWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTodoWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalDayStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalMonthStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalStdStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryYydTotalWeekStatisticalDataResponseBodyMetaList extends $tea.Model {
    kpiCaliber?: string;
    kpiId?: string;
    kpiName?: string;
    period?: string;
    unit?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 工商-经营异常
     *
     * @param request GetAbnormalOperationRequest
     * @param headers GetAbnormalOperationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAbnormalOperationResponse
     */
    getAbnormalOperationWithOptions(request: GetAbnormalOperationRequest, headers: GetAbnormalOperationHeaders, runtime: $Util.RuntimeOptions): Promise<GetAbnormalOperationResponse>;
    /**
     * @summary 工商-经营异常
     *
     * @param request GetAbnormalOperationRequest
     * @return GetAbnormalOperationResponse
     */
    getAbnormalOperation(request: GetAbnormalOperationRequest): Promise<GetAbnormalOperationResponse>;
    /**
     * @summary 获取工商-行政许可
     *
     * @param request GetAdministrativeLicensingRequest
     * @param headers GetAdministrativeLicensingHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAdministrativeLicensingResponse
     */
    getAdministrativeLicensingWithOptions(request: GetAdministrativeLicensingRequest, headers: GetAdministrativeLicensingHeaders, runtime: $Util.RuntimeOptions): Promise<GetAdministrativeLicensingResponse>;
    /**
     * @summary 获取工商-行政许可
     *
     * @param request GetAdministrativeLicensingRequest
     * @return GetAdministrativeLicensingResponse
     */
    getAdministrativeLicensing(request: GetAdministrativeLicensingRequest): Promise<GetAdministrativeLicensingResponse>;
    /**
     * @summary 负面-行政处罚
     *
     * @param request GetAdministrativePenaltiesRequest
     * @param headers GetAdministrativePenaltiesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetAdministrativePenaltiesResponse
     */
    getAdministrativePenaltiesWithOptions(request: GetAdministrativePenaltiesRequest, headers: GetAdministrativePenaltiesHeaders, runtime: $Util.RuntimeOptions): Promise<GetAdministrativePenaltiesResponse>;
    /**
     * @summary 负面-行政处罚
     *
     * @param request GetAdministrativePenaltiesRequest
     * @return GetAdministrativePenaltiesResponse
     */
    getAdministrativePenalties(request: GetAdministrativePenaltiesRequest): Promise<GetAdministrativePenaltiesResponse>;
    /**
     * @summary 工商-基础信息
     *
     * @param request GetBasicInfoRequest
     * @param headers GetBasicInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBasicInfoResponse
     */
    getBasicInfoWithOptions(request: GetBasicInfoRequest, headers: GetBasicInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetBasicInfoResponse>;
    /**
     * @summary 工商-基础信息
     *
     * @param request GetBasicInfoRequest
     * @return GetBasicInfoResponse
     */
    getBasicInfo(request: GetBasicInfoRequest): Promise<GetBasicInfoResponse>;
    /**
     * @summary 获取经营-招投标信息
     *
     * @param request GetBiddingInfoRequest
     * @param headers GetBiddingInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBiddingInfoResponse
     */
    getBiddingInfoWithOptions(request: GetBiddingInfoRequest, headers: GetBiddingInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetBiddingInfoResponse>;
    /**
     * @summary 获取经营-招投标信息
     *
     * @param request GetBiddingInfoRequest
     * @return GetBiddingInfoResponse
     */
    getBiddingInfo(request: GetBiddingInfoRequest): Promise<GetBiddingInfoResponse>;
    /**
     * @summary 获取工商-分支机构
     *
     * @param request GetBranchInfoRequest
     * @param headers GetBranchInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetBranchInfoResponse
     */
    getBranchInfoWithOptions(request: GetBranchInfoRequest, headers: GetBranchInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetBranchInfoResponse>;
    /**
     * @summary 获取工商-分支机构
     *
     * @param request GetBranchInfoRequest
     * @return GetBranchInfoResponse
     */
    getBranchInfo(request: GetBranchInfoRequest): Promise<GetBranchInfoResponse>;
    /**
     * @summary 获取工商-变更记录
     *
     * @param request GetChangeRecordRequest
     * @param headers GetChangeRecordHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetChangeRecordResponse
     */
    getChangeRecordWithOptions(request: GetChangeRecordRequest, headers: GetChangeRecordHeaders, runtime: $Util.RuntimeOptions): Promise<GetChangeRecordResponse>;
    /**
     * @summary 获取工商-变更记录
     *
     * @param request GetChangeRecordRequest
     * @return GetChangeRecordResponse
     */
    getChangeRecord(request: GetChangeRecordRequest): Promise<GetChangeRecordResponse>;
    /**
     * @summary 获取知识产权-域名信息
     *
     * @param request GetDomainInfoRequest
     * @param headers GetDomainInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDomainInfoResponse
     */
    getDomainInfoWithOptions(request: GetDomainInfoRequest, headers: GetDomainInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetDomainInfoResponse>;
    /**
     * @summary 获取知识产权-域名信息
     *
     * @param request GetDomainInfoRequest
     * @return GetDomainInfoResponse
     */
    getDomainInfo(request: GetDomainInfoRequest): Promise<GetDomainInfoResponse>;
    /**
     * @summary 获取工商-双随机抽查结果
     *
     * @param request GetDoubleRandomRequest
     * @param headers GetDoubleRandomHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDoubleRandomResponse
     */
    getDoubleRandomWithOptions(request: GetDoubleRandomRequest, headers: GetDoubleRandomHeaders, runtime: $Util.RuntimeOptions): Promise<GetDoubleRandomResponse>;
    /**
     * @summary 获取工商-双随机抽查结果
     *
     * @param request GetDoubleRandomRequest
     * @return GetDoubleRandomResponse
     */
    getDoubleRandom(request: GetDoubleRandomRequest): Promise<GetDoubleRandomResponse>;
    /**
     * @summary 负面-环保处罚
     *
     * @param request GetEnvironmentalPenaltiesRequest
     * @param headers GetEnvironmentalPenaltiesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetEnvironmentalPenaltiesResponse
     */
    getEnvironmentalPenaltiesWithOptions(request: GetEnvironmentalPenaltiesRequest, headers: GetEnvironmentalPenaltiesHeaders, runtime: $Util.RuntimeOptions): Promise<GetEnvironmentalPenaltiesResponse>;
    /**
     * @summary 负面-环保处罚
     *
     * @param request GetEnvironmentalPenaltiesRequest
     * @return GetEnvironmentalPenaltiesResponse
     */
    getEnvironmentalPenalties(request: GetEnvironmentalPenaltiesRequest): Promise<GetEnvironmentalPenaltiesResponse>;
    /**
     * @summary 工商-股东信息
     *
     * @param request GetHolderInfoRequest
     * @param headers GetHolderInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetHolderInfoResponse
     */
    getHolderInfoWithOptions(request: GetHolderInfoRequest, headers: GetHolderInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetHolderInfoResponse>;
    /**
     * @summary 工商-股东信息
     *
     * @param request GetHolderInfoRequest
     * @return GetHolderInfoResponse
     */
    getHolderInfo(request: GetHolderInfoRequest): Promise<GetHolderInfoResponse>;
    /**
     * @summary 获取工商-知识产权出质
     *
     * @param request GetIntellectualPropertyRequest
     * @param headers GetIntellectualPropertyHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetIntellectualPropertyResponse
     */
    getIntellectualPropertyWithOptions(request: GetIntellectualPropertyRequest, headers: GetIntellectualPropertyHeaders, runtime: $Util.RuntimeOptions): Promise<GetIntellectualPropertyResponse>;
    /**
     * @summary 获取工商-知识产权出质
     *
     * @param request GetIntellectualPropertyRequest
     * @return GetIntellectualPropertyResponse
     */
    getIntellectualProperty(request: GetIntellectualPropertyRequest): Promise<GetIntellectualPropertyResponse>;
    /**
     * @summary 获取工商-对外投资
     *
     * @param request GetInvestmentAbroadRequest
     * @param headers GetInvestmentAbroadHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetInvestmentAbroadResponse
     */
    getInvestmentAbroadWithOptions(request: GetInvestmentAbroadRequest, headers: GetInvestmentAbroadHeaders, runtime: $Util.RuntimeOptions): Promise<GetInvestmentAbroadResponse>;
    /**
     * @summary 获取工商-对外投资
     *
     * @param request GetInvestmentAbroadRequest
     * @return GetInvestmentAbroadResponse
     */
    getInvestmentAbroad(request: GetInvestmentAbroadRequest): Promise<GetInvestmentAbroadResponse>;
    /**
     * @summary 获取经营-招聘信息
     *
     * @param request GetJobInfoRequest
     * @param headers GetJobInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetJobInfoResponse
     */
    getJobInfoWithOptions(request: GetJobInfoRequest, headers: GetJobInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetJobInfoResponse>;
    /**
     * @summary 获取经营-招聘信息
     *
     * @param request GetJobInfoRequest
     * @return GetJobInfoResponse
     */
    getJobInfo(request: GetJobInfoRequest): Promise<GetJobInfoResponse>;
    /**
     * @summary 获取知识产权-专利信息
     *
     * @param request GetPatentInfoRequest
     * @param headers GetPatentInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPatentInfoResponse
     */
    getPatentInfoWithOptions(request: GetPatentInfoRequest, headers: GetPatentInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetPatentInfoResponse>;
    /**
     * @summary 获取知识产权-专利信息
     *
     * @param request GetPatentInfoRequest
     * @return GetPatentInfoResponse
     */
    getPatentInfo(request: GetPatentInfoRequest): Promise<GetPatentInfoResponse>;
    /**
     * @summary 获取工商-主要人员
     *
     * @param request GetPrincipalEmployeeRequest
     * @param headers GetPrincipalEmployeeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetPrincipalEmployeeResponse
     */
    getPrincipalEmployeeWithOptions(request: GetPrincipalEmployeeRequest, headers: GetPrincipalEmployeeHeaders, runtime: $Util.RuntimeOptions): Promise<GetPrincipalEmployeeResponse>;
    /**
     * @summary 获取工商-主要人员
     *
     * @param request GetPrincipalEmployeeRequest
     * @return GetPrincipalEmployeeResponse
     */
    getPrincipalEmployee(request: GetPrincipalEmployeeRequest): Promise<GetPrincipalEmployeeResponse>;
    /**
     * @summary 经营-一般纳税人
     *
     * @param request GetQeneralTaxpayerInfoRequest
     * @param headers GetQeneralTaxpayerInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetQeneralTaxpayerInfoResponse
     */
    getQeneralTaxpayerInfoWithOptions(request: GetQeneralTaxpayerInfoRequest, headers: GetQeneralTaxpayerInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetQeneralTaxpayerInfoResponse>;
    /**
     * @summary 经营-一般纳税人
     *
     * @param request GetQeneralTaxpayerInfoRequest
     * @return GetQeneralTaxpayerInfoResponse
     */
    getQeneralTaxpayerInfo(request: GetQeneralTaxpayerInfoRequest): Promise<GetQeneralTaxpayerInfoResponse>;
    /**
     * @summary 获取知识产权-资质证书
     *
     * @param request GetQualificationCertRequest
     * @param headers GetQualificationCertHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetQualificationCertResponse
     */
    getQualificationCertWithOptions(request: GetQualificationCertRequest, headers: GetQualificationCertHeaders, runtime: $Util.RuntimeOptions): Promise<GetQualificationCertResponse>;
    /**
     * @summary 获取知识产权-资质证书
     *
     * @param request GetQualificationCertRequest
     * @return GetQualificationCertResponse
     */
    getQualificationCert(request: GetQualificationCertRequest): Promise<GetQualificationCertResponse>;
    /**
     * @summary 负面-严重违法
     *
     * @param request GetSeriousViolationRequest
     * @param headers GetSeriousViolationHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSeriousViolationResponse
     */
    getSeriousViolationWithOptions(request: GetSeriousViolationRequest, headers: GetSeriousViolationHeaders, runtime: $Util.RuntimeOptions): Promise<GetSeriousViolationResponse>;
    /**
     * @summary 负面-严重违法
     *
     * @param request GetSeriousViolationRequest
     * @return GetSeriousViolationResponse
     */
    getSeriousViolation(request: GetSeriousViolationRequest): Promise<GetSeriousViolationResponse>;
    /**
     * @summary 获取知识产权-软件著作权
     *
     * @param request GetSoftwareCopyrightRequest
     * @param headers GetSoftwareCopyrightHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSoftwareCopyrightResponse
     */
    getSoftwareCopyrightWithOptions(request: GetSoftwareCopyrightRequest, headers: GetSoftwareCopyrightHeaders, runtime: $Util.RuntimeOptions): Promise<GetSoftwareCopyrightResponse>;
    /**
     * @summary 获取知识产权-软件著作权
     *
     * @param request GetSoftwareCopyrightRequest
     * @return GetSoftwareCopyrightResponse
     */
    getSoftwareCopyright(request: GetSoftwareCopyrightRequest): Promise<GetSoftwareCopyrightResponse>;
    /**
     * @summary 获取知识产权-商标信息
     *
     * @param request GetTrademarkInfoRequest
     * @param headers GetTrademarkInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTrademarkInfoResponse
     */
    getTrademarkInfoWithOptions(request: GetTrademarkInfoRequest, headers: GetTrademarkInfoHeaders, runtime: $Util.RuntimeOptions): Promise<GetTrademarkInfoResponse>;
    /**
     * @summary 获取知识产权-商标信息
     *
     * @param request GetTrademarkInfoRequest
     * @return GetTrademarkInfoResponse
     */
    getTrademarkInfo(request: GetTrademarkInfoRequest): Promise<GetTrademarkInfoResponse>;
    /**
     * @summary 获取知识产权-作品著作权
     *
     * @param request GetWorkCopyrightRequest
     * @param headers GetWorkCopyrightHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetWorkCopyrightResponse
     */
    getWorkCopyrightWithOptions(request: GetWorkCopyrightRequest, headers: GetWorkCopyrightHeaders, runtime: $Util.RuntimeOptions): Promise<GetWorkCopyrightResponse>;
    /**
     * @summary 获取知识产权-作品著作权
     *
     * @param request GetWorkCopyrightRequest
     * @return GetWorkCopyrightResponse
     */
    getWorkCopyright(request: GetWorkCopyrightRequest): Promise<GetWorkCopyrightResponse>;
    /**
     * @summary 企业授权信息
     *
     * @param headers PostCorpAuthInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PostCorpAuthInfoResponse
     */
    postCorpAuthInfoWithOptions(headers: PostCorpAuthInfoHeaders, runtime: $Util.RuntimeOptions): Promise<PostCorpAuthInfoResponse>;
    /**
     * @summary 企业授权信息
     *
     * @return PostCorpAuthInfoResponse
     */
    postCorpAuthInfo(): Promise<PostCorpAuthInfoResponse>;
    /**
     * @summary 获取企业用户激活状态统计数据
     *
     * @param request QueryActiveUserStatisticalDataRequest
     * @param headers QueryActiveUserStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryActiveUserStatisticalDataResponse
     */
    queryActiveUserStatisticalDataWithOptions(request: QueryActiveUserStatisticalDataRequest, headers: QueryActiveUserStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryActiveUserStatisticalDataResponse>;
    /**
     * @summary 获取企业用户激活状态统计数据
     *
     * @param request QueryActiveUserStatisticalDataRequest
     * @return QueryActiveUserStatisticalDataResponse
     */
    queryActiveUserStatisticalData(request: QueryActiveUserStatisticalDataRequest): Promise<QueryActiveUserStatisticalDataResponse>;
    /**
     * @summary 获取安恒密盾统计数据
     *
     * @param request QueryAnhmdStatisticalDataRequest
     * @param headers QueryAnhmdStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAnhmdStatisticalDataResponse
     */
    queryAnhmdStatisticalDataWithOptions(request: QueryAnhmdStatisticalDataRequest, headers: QueryAnhmdStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAnhmdStatisticalDataResponse>;
    /**
     * @summary 获取安恒密盾统计数据
     *
     * @param request QueryAnhmdStatisticalDataRequest
     * @return QueryAnhmdStatisticalDataResponse
     */
    queryAnhmdStatisticalData(request: QueryAnhmdStatisticalDataRequest): Promise<QueryAnhmdStatisticalDataResponse>;
    /**
     * @summary 获取企业审批统计数据
     *
     * @param request QueryApprovalStatisticalDataRequest
     * @param headers QueryApprovalStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryApprovalStatisticalDataResponse
     */
    queryApprovalStatisticalDataWithOptions(request: QueryApprovalStatisticalDataRequest, headers: QueryApprovalStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryApprovalStatisticalDataResponse>;
    /**
     * @summary 获取企业审批统计数据
     *
     * @param request QueryApprovalStatisticalDataRequest
     * @return QueryApprovalStatisticalDataResponse
     */
    queryApprovalStatisticalData(request: QueryApprovalStatisticalDataRequest): Promise<QueryApprovalStatisticalDataResponse>;
    /**
     * @summary 获取企业考勤统计数据
     *
     * @param request QueryAttendanceStatisticalDataRequest
     * @param headers QueryAttendanceStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAttendanceStatisticalDataResponse
     */
    queryAttendanceStatisticalDataWithOptions(request: QueryAttendanceStatisticalDataRequest, headers: QueryAttendanceStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAttendanceStatisticalDataResponse>;
    /**
     * @summary 获取企业考勤统计数据
     *
     * @param request QueryAttendanceStatisticalDataRequest
     * @return QueryAttendanceStatisticalDataResponse
     */
    queryAttendanceStatisticalData(request: QueryAttendanceStatisticalDataRequest): Promise<QueryAttendanceStatisticalDataResponse>;
    /**
     * @summary 获取企业公告统计数据
     *
     * @param request QueryBlackboardStatisticalDataRequest
     * @param headers QueryBlackboardStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryBlackboardStatisticalDataResponse
     */
    queryBlackboardStatisticalDataWithOptions(request: QueryBlackboardStatisticalDataRequest, headers: QueryBlackboardStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryBlackboardStatisticalDataResponse>;
    /**
     * @summary 获取企业公告统计数据
     *
     * @param request QueryBlackboardStatisticalDataRequest
     * @return QueryBlackboardStatisticalDataResponse
     */
    queryBlackboardStatisticalData(request: QueryBlackboardStatisticalDataRequest): Promise<QueryBlackboardStatisticalDataResponse>;
    /**
     * @summary 获取企业日程统计数据
     *
     * @param request QueryCalendarStatisticalDataRequest
     * @param headers QueryCalendarStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCalendarStatisticalDataResponse
     */
    queryCalendarStatisticalDataWithOptions(request: QueryCalendarStatisticalDataRequest, headers: QueryCalendarStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCalendarStatisticalDataResponse>;
    /**
     * @summary 获取企业日程统计数据
     *
     * @param request QueryCalendarStatisticalDataRequest
     * @return QueryCalendarStatisticalDataResponse
     */
    queryCalendarStatisticalData(request: QueryCalendarStatisticalDataRequest): Promise<QueryCalendarStatisticalDataResponse>;
    /**
     * @summary 获取企业签到统计数据
     *
     * @param request QueryCheckinStatisticalDataRequest
     * @param headers QueryCheckinStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCheckinStatisticalDataResponse
     */
    queryCheckinStatisticalDataWithOptions(request: QueryCheckinStatisticalDataRequest, headers: QueryCheckinStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCheckinStatisticalDataResponse>;
    /**
     * @summary 获取企业签到统计数据
     *
     * @param request QueryCheckinStatisticalDataRequest
     * @return QueryCheckinStatisticalDataResponse
     */
    queryCheckinStatisticalData(request: QueryCheckinStatisticalDataRequest): Promise<QueryCheckinStatisticalDataResponse>;
    /**
     * @summary 获取企业全员圈统计数据
     *
     * @param request QueryCircleStatisticalDataRequest
     * @param headers QueryCircleStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCircleStatisticalDataResponse
     */
    queryCircleStatisticalDataWithOptions(request: QueryCircleStatisticalDataRequest, headers: QueryCircleStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCircleStatisticalDataResponse>;
    /**
     * @summary 获取企业全员圈统计数据
     *
     * @param request QueryCircleStatisticalDataRequest
     * @return QueryCircleStatisticalDataResponse
     */
    queryCircleStatisticalData(request: QueryCircleStatisticalDataRequest): Promise<QueryCircleStatisticalDataResponse>;
    /**
     * @summary 通过企业名称/社会统一信用代码/工商注册号，查询企业的基本画像信息。
     *
     * @param request QueryCompanyBasicInfoRequest
     * @param headers QueryCompanyBasicInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryCompanyBasicInfoResponse
     */
    queryCompanyBasicInfoWithOptions(request: QueryCompanyBasicInfoRequest, headers: QueryCompanyBasicInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryCompanyBasicInfoResponse>;
    /**
     * @summary 通过企业名称/社会统一信用代码/工商注册号，查询企业的基本画像信息。
     *
     * @param request QueryCompanyBasicInfoRequest
     * @return QueryCompanyBasicInfoResponse
     */
    queryCompanyBasicInfo(request: QueryCompanyBasicInfoRequest): Promise<QueryCompanyBasicInfoResponse>;
    /**
     * @summary 获取数字区县组织信息
     *
     * @param request QueryDigitalDistrictOrgInfoRequest
     * @param headers QueryDigitalDistrictOrgInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDigitalDistrictOrgInfoResponse
     */
    queryDigitalDistrictOrgInfoWithOptions(request: QueryDigitalDistrictOrgInfoRequest, headers: QueryDigitalDistrictOrgInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDigitalDistrictOrgInfoResponse>;
    /**
     * @summary 获取数字区县组织信息
     *
     * @param request QueryDigitalDistrictOrgInfoRequest
     * @return QueryDigitalDistrictOrgInfoResponse
     */
    queryDigitalDistrictOrgInfo(request: QueryDigitalDistrictOrgInfoRequest): Promise<QueryDigitalDistrictOrgInfoResponse>;
    /**
     * @summary 获取企业DING接收及评论统计数据
     *
     * @param request QueryDingReciveStatisticalDataRequest
     * @param headers QueryDingReciveStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDingReciveStatisticalDataResponse
     */
    queryDingReciveStatisticalDataWithOptions(request: QueryDingReciveStatisticalDataRequest, headers: QueryDingReciveStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDingReciveStatisticalDataResponse>;
    /**
     * @summary 获取企业DING接收及评论统计数据
     *
     * @param request QueryDingReciveStatisticalDataRequest
     * @return QueryDingReciveStatisticalDataResponse
     */
    queryDingReciveStatisticalData(request: QueryDingReciveStatisticalDataRequest): Promise<QueryDingReciveStatisticalDataResponse>;
    /**
     * @summary 获取企业DING发送统计数据
     *
     * @param request QueryDingSendStatisticalDataRequest
     * @param headers QueryDingSendStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDingSendStatisticalDataResponse
     */
    queryDingSendStatisticalDataWithOptions(request: QueryDingSendStatisticalDataRequest, headers: QueryDingSendStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDingSendStatisticalDataResponse>;
    /**
     * @summary 获取企业DING发送统计数据
     *
     * @param request QueryDingSendStatisticalDataRequest
     * @return QueryDingSendStatisticalDataResponse
     */
    queryDingSendStatisticalData(request: QueryDingSendStatisticalDataRequest): Promise<QueryDingSendStatisticalDataResponse>;
    /**
     * @summary 获取企业文档统计数据
     *
     * @param request QueryDocumentStatisticalDataRequest
     * @param headers QueryDocumentStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDocumentStatisticalDataResponse
     */
    queryDocumentStatisticalDataWithOptions(request: QueryDocumentStatisticalDataRequest, headers: QueryDocumentStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDocumentStatisticalDataResponse>;
    /**
     * @summary 获取企业文档统计数据
     *
     * @param request QueryDocumentStatisticalDataRequest
     * @return QueryDocumentStatisticalDataResponse
     */
    queryDocumentStatisticalData(request: QueryDocumentStatisticalDataRequest): Promise<QueryDocumentStatisticalDataResponse>;
    /**
     * @summary 获取企业钉盘统计数据
     *
     * @param request QueryDriveStatisticalDataRequest
     * @param headers QueryDriveStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDriveStatisticalDataResponse
     */
    queryDriveStatisticalDataWithOptions(request: QueryDriveStatisticalDataRequest, headers: QueryDriveStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryDriveStatisticalDataResponse>;
    /**
     * @summary 获取企业钉盘统计数据
     *
     * @param request QueryDriveStatisticalDataRequest
     * @return QueryDriveStatisticalDataResponse
     */
    queryDriveStatisticalData(request: QueryDriveStatisticalDataRequest): Promise<QueryDriveStatisticalDataResponse>;
    /**
     * @summary 获取企业员工类型统计数据
     *
     * @param request QueryEmployeeTypeStatisticalDataRequest
     * @param headers QueryEmployeeTypeStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryEmployeeTypeStatisticalDataResponse
     */
    queryEmployeeTypeStatisticalDataWithOptions(request: QueryEmployeeTypeStatisticalDataRequest, headers: QueryEmployeeTypeStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryEmployeeTypeStatisticalDataResponse>;
    /**
     * @summary 获取企业员工类型统计数据
     *
     * @param request QueryEmployeeTypeStatisticalDataRequest
     * @return QueryEmployeeTypeStatisticalDataResponse
     */
    queryEmployeeTypeStatisticalData(request: QueryEmployeeTypeStatisticalDataRequest): Promise<QueryEmployeeTypeStatisticalDataResponse>;
    /**
     * @summary 数据资产平台数据服务接口
     *
     * @param request QueryGeneralDataServiceRequest
     * @param headers QueryGeneralDataServiceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGeneralDataServiceResponse
     */
    queryGeneralDataServiceWithOptions(request: QueryGeneralDataServiceRequest, headers: QueryGeneralDataServiceHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGeneralDataServiceResponse>;
    /**
     * @summary 数据资产平台数据服务接口
     *
     * @param request QueryGeneralDataServiceRequest
     * @return QueryGeneralDataServiceResponse
     */
    queryGeneralDataService(request: QueryGeneralDataServiceRequest): Promise<QueryGeneralDataServiceResponse>;
    /**
     * @summary 获取企业群直播统计数据
     *
     * @param request QueryGroupLiveStatisticalDataRequest
     * @param headers QueryGroupLiveStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupLiveStatisticalDataResponse
     */
    queryGroupLiveStatisticalDataWithOptions(request: QueryGroupLiveStatisticalDataRequest, headers: QueryGroupLiveStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupLiveStatisticalDataResponse>;
    /**
     * @summary 获取企业群直播统计数据
     *
     * @param request QueryGroupLiveStatisticalDataRequest
     * @return QueryGroupLiveStatisticalDataResponse
     */
    queryGroupLiveStatisticalData(request: QueryGroupLiveStatisticalDataRequest): Promise<QueryGroupLiveStatisticalDataResponse>;
    /**
     * @summary 获取企业群聊统计数据
     *
     * @param request QueryGroupMessageStatisticalDataRequest
     * @param headers QueryGroupMessageStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryGroupMessageStatisticalDataResponse
     */
    queryGroupMessageStatisticalDataWithOptions(request: QueryGroupMessageStatisticalDataRequest, headers: QueryGroupMessageStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryGroupMessageStatisticalDataResponse>;
    /**
     * @summary 获取企业群聊统计数据
     *
     * @param request QueryGroupMessageStatisticalDataRequest
     * @return QueryGroupMessageStatisticalDataResponse
     */
    queryGroupMessageStatisticalData(request: QueryGroupMessageStatisticalDataRequest): Promise<QueryGroupMessageStatisticalDataResponse>;
    /**
     * @summary 获取企业钉钉运动统计数据
     *
     * @param request QueryHealthStatisticalDataRequest
     * @param headers QueryHealthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryHealthStatisticalDataResponse
     */
    queryHealthStatisticalDataWithOptions(request: QueryHealthStatisticalDataRequest, headers: QueryHealthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryHealthStatisticalDataResponse>;
    /**
     * @summary 获取企业钉钉运动统计数据
     *
     * @param request QueryHealthStatisticalDataRequest
     * @return QueryHealthStatisticalDataResponse
     */
    queryHealthStatisticalData(request: QueryHealthStatisticalDataRequest): Promise<QueryHealthStatisticalDataResponse>;
    /**
     * @summary 获取企业邮箱统计数据
     *
     * @param request QueryMailStatisticalDataRequest
     * @param headers QueryMailStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMailStatisticalDataResponse
     */
    queryMailStatisticalDataWithOptions(request: QueryMailStatisticalDataRequest, headers: QueryMailStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMailStatisticalDataResponse>;
    /**
     * @summary 获取企业邮箱统计数据
     *
     * @param request QueryMailStatisticalDataRequest
     * @return QueryMailStatisticalDataResponse
     */
    queryMailStatisticalData(request: QueryMailStatisticalDataRequest): Promise<QueryMailStatisticalDataResponse>;
    /**
     * @summary 获取官方数据集数据
     *
     * @param request QueryOfficialDataRequest
     * @param headers QueryOfficialDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOfficialDataResponse
     */
    queryOfficialDataWithOptions(request: QueryOfficialDataRequest, headers: QueryOfficialDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOfficialDataResponse>;
    /**
     * @summary 获取官方数据集数据
     *
     * @param request QueryOfficialDataRequest
     * @return QueryOfficialDataResponse
     */
    queryOfficialData(request: QueryOfficialDataRequest): Promise<QueryOfficialDataResponse>;
    /**
     * @summary ISV获取官方数据集字段信息
     *
     * @param request QueryOfficialDatasetFieldsRequest
     * @param headers QueryOfficialDatasetFieldsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOfficialDatasetFieldsResponse
     */
    queryOfficialDatasetFieldsWithOptions(request: QueryOfficialDatasetFieldsRequest, headers: QueryOfficialDatasetFieldsHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOfficialDatasetFieldsResponse>;
    /**
     * @summary ISV获取官方数据集字段信息
     *
     * @param request QueryOfficialDatasetFieldsRequest
     * @return QueryOfficialDatasetFieldsResponse
     */
    queryOfficialDatasetFields(request: QueryOfficialDatasetFieldsRequest): Promise<QueryOfficialDatasetFieldsResponse>;
    /**
     * @summary ISV获取官方数据集列表
     *
     * @param request QueryOfficialDatasetListRequest
     * @param headers QueryOfficialDatasetListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOfficialDatasetListResponse
     */
    queryOfficialDatasetListWithOptions(request: QueryOfficialDatasetListRequest, headers: QueryOfficialDatasetListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOfficialDatasetListResponse>;
    /**
     * @summary ISV获取官方数据集列表
     *
     * @param request QueryOfficialDatasetListRequest
     * @return QueryOfficialDatasetListResponse
     */
    queryOfficialDatasetList(request: QueryOfficialDatasetListRequest): Promise<QueryOfficialDatasetListResponse>;
    /**
     * @summary 获取官方数据集数据
     *
     * @param request QueryOfficialFormDataRequest
     * @param headers QueryOfficialFormDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOfficialFormDataResponse
     */
    queryOfficialFormDataWithOptions(request: QueryOfficialFormDataRequest, headers: QueryOfficialFormDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOfficialFormDataResponse>;
    /**
     * @summary 获取官方数据集数据
     *
     * @param request QueryOfficialFormDataRequest
     * @return QueryOfficialFormDataResponse
     */
    queryOfficialFormData(request: QueryOfficialFormDataRequest): Promise<QueryOfficialFormDataResponse>;
    /**
     * @summary 获取企业用户在线统计数据
     *
     * @param request QueryOnlineUserStatisticalDataRequest
     * @param headers QueryOnlineUserStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryOnlineUserStatisticalDataResponse
     */
    queryOnlineUserStatisticalDataWithOptions(request: QueryOnlineUserStatisticalDataRequest, headers: QueryOnlineUserStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryOnlineUserStatisticalDataResponse>;
    /**
     * @summary 获取企业用户在线统计数据
     *
     * @param request QueryOnlineUserStatisticalDataRequest
     * @return QueryOnlineUserStatisticalDataResponse
     */
    queryOnlineUserStatisticalData(request: QueryOnlineUserStatisticalDataRequest): Promise<QueryOnlineUserStatisticalDataResponse>;
    /**
     * @summary 获取企业接收红包统计数据
     *
     * @param request QueryRedEnvelopeReciveStatisticalDataRequest
     * @param headers QueryRedEnvelopeReciveStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRedEnvelopeReciveStatisticalDataResponse
     */
    queryRedEnvelopeReciveStatisticalDataWithOptions(request: QueryRedEnvelopeReciveStatisticalDataRequest, headers: QueryRedEnvelopeReciveStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRedEnvelopeReciveStatisticalDataResponse>;
    /**
     * @summary 获取企业接收红包统计数据
     *
     * @param request QueryRedEnvelopeReciveStatisticalDataRequest
     * @return QueryRedEnvelopeReciveStatisticalDataResponse
     */
    queryRedEnvelopeReciveStatisticalData(request: QueryRedEnvelopeReciveStatisticalDataRequest): Promise<QueryRedEnvelopeReciveStatisticalDataResponse>;
    /**
     * @summary 获取企业发送红包统计数据
     *
     * @param request QueryRedEnvelopeSendStatisticalDataRequest
     * @param headers QueryRedEnvelopeSendStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRedEnvelopeSendStatisticalDataResponse
     */
    queryRedEnvelopeSendStatisticalDataWithOptions(request: QueryRedEnvelopeSendStatisticalDataRequest, headers: QueryRedEnvelopeSendStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryRedEnvelopeSendStatisticalDataResponse>;
    /**
     * @summary 获取企业发送红包统计数据
     *
     * @param request QueryRedEnvelopeSendStatisticalDataRequest
     * @return QueryRedEnvelopeSendStatisticalDataResponse
     */
    queryRedEnvelopeSendStatisticalData(request: QueryRedEnvelopeSendStatisticalDataRequest): Promise<QueryRedEnvelopeSendStatisticalDataResponse>;
    /**
     * @summary 获取企业日志统计数据
     *
     * @param request QueryReportStatisticalDataRequest
     * @param headers QueryReportStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryReportStatisticalDataResponse
     */
    queryReportStatisticalDataWithOptions(request: QueryReportStatisticalDataRequest, headers: QueryReportStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryReportStatisticalDataResponse>;
    /**
     * @summary 获取企业日志统计数据
     *
     * @param request QueryReportStatisticalDataRequest
     * @return QueryReportStatisticalDataResponse
     */
    queryReportStatisticalData(request: QueryReportStatisticalDataRequest): Promise<QueryReportStatisticalDataResponse>;
    /**
     * @summary 获取企业单聊统计数据
     *
     * @param request QuerySingleMessageStatisticalDataRequest
     * @param headers QuerySingleMessageStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySingleMessageStatisticalDataResponse
     */
    querySingleMessageStatisticalDataWithOptions(request: QuerySingleMessageStatisticalDataRequest, headers: QuerySingleMessageStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySingleMessageStatisticalDataResponse>;
    /**
     * @summary 获取企业单聊统计数据
     *
     * @param request QuerySingleMessageStatisticalDataRequest
     * @return QuerySingleMessageStatisticalDataResponse
     */
    querySingleMessageStatisticalData(request: QuerySingleMessageStatisticalDataRequest): Promise<QuerySingleMessageStatisticalDataResponse>;
    /**
     * @summary 获取企业电话会议统计数据
     *
     * @param request QueryTelMeetingStatisticalDataRequest
     * @param headers QueryTelMeetingStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryTelMeetingStatisticalDataResponse
     */
    queryTelMeetingStatisticalDataWithOptions(request: QueryTelMeetingStatisticalDataRequest, headers: QueryTelMeetingStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTelMeetingStatisticalDataResponse>;
    /**
     * @summary 获取企业电话会议统计数据
     *
     * @param request QueryTelMeetingStatisticalDataRequest
     * @return QueryTelMeetingStatisticalDataResponse
     */
    queryTelMeetingStatisticalData(request: QueryTelMeetingStatisticalDataRequest): Promise<QueryTelMeetingStatisticalDataResponse>;
    /**
     * @summary 获取企业待办统计数据
     *
     * @param request QueryTodoStatisticalDataRequest
     * @param headers QueryTodoStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryTodoStatisticalDataResponse
     */
    queryTodoStatisticalDataWithOptions(request: QueryTodoStatisticalDataRequest, headers: QueryTodoStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryTodoStatisticalDataResponse>;
    /**
     * @summary 获取企业待办统计数据
     *
     * @param request QueryTodoStatisticalDataRequest
     * @return QueryTodoStatisticalDataResponse
     */
    queryTodoStatisticalData(request: QueryTodoStatisticalDataRequest): Promise<QueryTodoStatisticalDataResponse>;
    /**
     * @summary 获取企业视频会议统计数据
     *
     * @param request QueryVedioMeetingStatisticalDataRequest
     * @param headers QueryVedioMeetingStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryVedioMeetingStatisticalDataResponse
     */
    queryVedioMeetingStatisticalDataWithOptions(request: QueryVedioMeetingStatisticalDataRequest, headers: QueryVedioMeetingStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryVedioMeetingStatisticalDataResponse>;
    /**
     * @summary 获取企业视频会议统计数据
     *
     * @param request QueryVedioMeetingStatisticalDataRequest
     * @return QueryVedioMeetingStatisticalDataResponse
     */
    queryVedioMeetingStatisticalData(request: QueryVedioMeetingStatisticalDataRequest): Promise<QueryVedioMeetingStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋活跃分析（按日统计）指标接口
     *
     * @param request QueryYydActiveDayStatisticalDataRequest
     * @param headers QueryYydActiveDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydActiveDayStatisticalDataResponse
     */
    queryYydActiveDayStatisticalDataWithOptions(request: QueryYydActiveDayStatisticalDataRequest, headers: QueryYydActiveDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydActiveDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋活跃分析（按日统计）指标接口
     *
     * @param request QueryYydActiveDayStatisticalDataRequest
     * @return QueryYydActiveDayStatisticalDataResponse
     */
    queryYydActiveDayStatisticalData(request: QueryYydActiveDayStatisticalDataRequest): Promise<QueryYydActiveDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋活跃分析（按月统计）指标接口
     *
     * @param request QueryYydActiveMonthStatisticalDataRequest
     * @param headers QueryYydActiveMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydActiveMonthStatisticalDataResponse
     */
    queryYydActiveMonthStatisticalDataWithOptions(request: QueryYydActiveMonthStatisticalDataRequest, headers: QueryYydActiveMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydActiveMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋活跃分析（按月统计）指标接口
     *
     * @param request QueryYydActiveMonthStatisticalDataRequest
     * @return QueryYydActiveMonthStatisticalDataResponse
     */
    queryYydActiveMonthStatisticalData(request: QueryYydActiveMonthStatisticalDataRequest): Promise<QueryYydActiveMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋活跃分析（按周统计）指标接口
     *
     * @param request QueryYydActiveWeekStatisticalDataRequest
     * @param headers QueryYydActiveWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydActiveWeekStatisticalDataResponse
     */
    queryYydActiveWeekStatisticalDataWithOptions(request: QueryYydActiveWeekStatisticalDataRequest, headers: QueryYydActiveWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydActiveWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋活跃分析（按周统计）指标接口
     *
     * @param request QueryYydActiveWeekStatisticalDataRequest
     * @return QueryYydActiveWeekStatisticalDataResponse
     */
    queryYydActiveWeekStatisticalData(request: QueryYydActiveWeekStatisticalDataRequest): Promise<QueryYydActiveWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋应用概况（按日统计）指标接口
     *
     * @param request QueryYydAppDayStatisticalDataRequest
     * @param headers QueryYydAppDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydAppDayStatisticalDataResponse
     */
    queryYydAppDayStatisticalDataWithOptions(request: QueryYydAppDayStatisticalDataRequest, headers: QueryYydAppDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydAppDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋应用概况（按日统计）指标接口
     *
     * @param request QueryYydAppDayStatisticalDataRequest
     * @return QueryYydAppDayStatisticalDataResponse
     */
    queryYydAppDayStatisticalData(request: QueryYydAppDayStatisticalDataRequest): Promise<QueryYydAppDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋应用概况（按月统计）指标接口
     *
     * @param request QueryYydAppMonthStatisticalDataRequest
     * @param headers QueryYydAppMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydAppMonthStatisticalDataResponse
     */
    queryYydAppMonthStatisticalDataWithOptions(request: QueryYydAppMonthStatisticalDataRequest, headers: QueryYydAppMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydAppMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋应用概况（按月统计）指标接口
     *
     * @param request QueryYydAppMonthStatisticalDataRequest
     * @return QueryYydAppMonthStatisticalDataResponse
     */
    queryYydAppMonthStatisticalData(request: QueryYydAppMonthStatisticalDataRequest): Promise<QueryYydAppMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋应用概况（累计）指标接口
     *
     * @param request QueryYydAppStdStatisticalDataRequest
     * @param headers QueryYydAppStdStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydAppStdStatisticalDataResponse
     */
    queryYydAppStdStatisticalDataWithOptions(request: QueryYydAppStdStatisticalDataRequest, headers: QueryYydAppStdStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydAppStdStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋应用概况（累计）指标接口
     *
     * @param request QueryYydAppStdStatisticalDataRequest
     * @return QueryYydAppStdStatisticalDataResponse
     */
    queryYydAppStdStatisticalData(request: QueryYydAppStdStatisticalDataRequest): Promise<QueryYydAppStdStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋应用概况（按周统计）指标接口
     *
     * @param request QueryYydAppWeekStatisticalDataRequest
     * @param headers QueryYydAppWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydAppWeekStatisticalDataResponse
     */
    queryYydAppWeekStatisticalDataWithOptions(request: QueryYydAppWeekStatisticalDataRequest, headers: QueryYydAppWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydAppWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋应用概况（按周统计）指标接口
     *
     * @param request QueryYydAppWeekStatisticalDataRequest
     * @return QueryYydAppWeekStatisticalDataResponse
     */
    queryYydAppWeekStatisticalData(request: QueryYydAppWeekStatisticalDataRequest): Promise<QueryYydAppWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋会议日程分析（按日统计）指标接口
     *
     * @param request QueryYydCalendarDayStatisticalDataRequest
     * @param headers QueryYydCalendarDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydCalendarDayStatisticalDataResponse
     */
    queryYydCalendarDayStatisticalDataWithOptions(request: QueryYydCalendarDayStatisticalDataRequest, headers: QueryYydCalendarDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydCalendarDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋会议日程分析（按日统计）指标接口
     *
     * @param request QueryYydCalendarDayStatisticalDataRequest
     * @return QueryYydCalendarDayStatisticalDataResponse
     */
    queryYydCalendarDayStatisticalData(request: QueryYydCalendarDayStatisticalDataRequest): Promise<QueryYydCalendarDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋会议日程分析（按月统计）指标接口
     *
     * @param request QueryYydCalendarMonthStatisticalDataRequest
     * @param headers QueryYydCalendarMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydCalendarMonthStatisticalDataResponse
     */
    queryYydCalendarMonthStatisticalDataWithOptions(request: QueryYydCalendarMonthStatisticalDataRequest, headers: QueryYydCalendarMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydCalendarMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋会议日程分析（按月统计）指标接口
     *
     * @param request QueryYydCalendarMonthStatisticalDataRequest
     * @return QueryYydCalendarMonthStatisticalDataResponse
     */
    queryYydCalendarMonthStatisticalData(request: QueryYydCalendarMonthStatisticalDataRequest): Promise<QueryYydCalendarMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋会议日程分析（按周统计）指标接口
     *
     * @param request QueryYydCalendarWeekStatisticalDataRequest
     * @param headers QueryYydCalendarWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydCalendarWeekStatisticalDataResponse
     */
    queryYydCalendarWeekStatisticalDataWithOptions(request: QueryYydCalendarWeekStatisticalDataRequest, headers: QueryYydCalendarWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydCalendarWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋会议日程分析（按周统计）指标接口
     *
     * @param request QueryYydCalendarWeekStatisticalDataRequest
     * @return QueryYydCalendarWeekStatisticalDataResponse
     */
    queryYydCalendarWeekStatisticalData(request: QueryYydCalendarWeekStatisticalDataRequest): Promise<QueryYydCalendarWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉消息分析（按日统计）指标接口
     *
     * @param request QueryYydDingMsgDayStatisticalDataRequest
     * @param headers QueryYydDingMsgDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydDingMsgDayStatisticalDataResponse
     */
    queryYydDingMsgDayStatisticalDataWithOptions(request: QueryYydDingMsgDayStatisticalDataRequest, headers: QueryYydDingMsgDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydDingMsgDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉消息分析（按日统计）指标接口
     *
     * @param request QueryYydDingMsgDayStatisticalDataRequest
     * @return QueryYydDingMsgDayStatisticalDataResponse
     */
    queryYydDingMsgDayStatisticalData(request: QueryYydDingMsgDayStatisticalDataRequest): Promise<QueryYydDingMsgDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉消息分析（按月统计）指标接口
     *
     * @param request QueryYydDingMsgMonthStatisticalDataRequest
     * @param headers QueryYydDingMsgMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydDingMsgMonthStatisticalDataResponse
     */
    queryYydDingMsgMonthStatisticalDataWithOptions(request: QueryYydDingMsgMonthStatisticalDataRequest, headers: QueryYydDingMsgMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydDingMsgMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉消息分析（按月统计）指标接口
     *
     * @param request QueryYydDingMsgMonthStatisticalDataRequest
     * @return QueryYydDingMsgMonthStatisticalDataResponse
     */
    queryYydDingMsgMonthStatisticalData(request: QueryYydDingMsgMonthStatisticalDataRequest): Promise<QueryYydDingMsgMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉消息分析（按周统计）指标接口
     *
     * @param request QueryYydDingMsgWeekStatisticalDataRequest
     * @param headers QueryYydDingMsgWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydDingMsgWeekStatisticalDataResponse
     */
    queryYydDingMsgWeekStatisticalDataWithOptions(request: QueryYydDingMsgWeekStatisticalDataRequest, headers: QueryYydDingMsgWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydDingMsgWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉消息分析（按周统计）指标接口
     *
     * @param request QueryYydDingMsgWeekStatisticalDataRequest
     * @return QueryYydDingMsgWeekStatisticalDataResponse
     */
    queryYydDingMsgWeekStatisticalData(request: QueryYydDingMsgWeekStatisticalDataRequest): Promise<QueryYydDingMsgWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋群聊分析（按日统计）指标接口
     *
     * @param request QueryYydGroupMsgDayStatisticalDataRequest
     * @param headers QueryYydGroupMsgDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydGroupMsgDayStatisticalDataResponse
     */
    queryYydGroupMsgDayStatisticalDataWithOptions(request: QueryYydGroupMsgDayStatisticalDataRequest, headers: QueryYydGroupMsgDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydGroupMsgDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋群聊分析（按日统计）指标接口
     *
     * @param request QueryYydGroupMsgDayStatisticalDataRequest
     * @return QueryYydGroupMsgDayStatisticalDataResponse
     */
    queryYydGroupMsgDayStatisticalData(request: QueryYydGroupMsgDayStatisticalDataRequest): Promise<QueryYydGroupMsgDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋群聊分析（按月统计）指标接口
     *
     * @param request QueryYydGroupMsgMonthStatisticalDataRequest
     * @param headers QueryYydGroupMsgMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydGroupMsgMonthStatisticalDataResponse
     */
    queryYydGroupMsgMonthStatisticalDataWithOptions(request: QueryYydGroupMsgMonthStatisticalDataRequest, headers: QueryYydGroupMsgMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydGroupMsgMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋群聊分析（按月统计）指标接口
     *
     * @param request QueryYydGroupMsgMonthStatisticalDataRequest
     * @return QueryYydGroupMsgMonthStatisticalDataResponse
     */
    queryYydGroupMsgMonthStatisticalData(request: QueryYydGroupMsgMonthStatisticalDataRequest): Promise<QueryYydGroupMsgMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋群聊分析（按周统计）指标接口
     *
     * @param request QueryYydGroupMsgWeekStatisticalDataRequest
     * @param headers QueryYydGroupMsgWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydGroupMsgWeekStatisticalDataResponse
     */
    queryYydGroupMsgWeekStatisticalDataWithOptions(request: QueryYydGroupMsgWeekStatisticalDataRequest, headers: QueryYydGroupMsgWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydGroupMsgWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋群聊分析（按周统计）指标接口
     *
     * @param request QueryYydGroupMsgWeekStatisticalDataRequest
     * @return QueryYydGroupMsgWeekStatisticalDataResponse
     */
    queryYydGroupMsgWeekStatisticalData(request: QueryYydGroupMsgWeekStatisticalDataRequest): Promise<QueryYydGroupMsgWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋日志分析（按日统计）指标接口
     *
     * @param request QueryYydLogDayStatisticalDataRequest
     * @param headers QueryYydLogDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydLogDayStatisticalDataResponse
     */
    queryYydLogDayStatisticalDataWithOptions(request: QueryYydLogDayStatisticalDataRequest, headers: QueryYydLogDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydLogDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋日志分析（按日统计）指标接口
     *
     * @param request QueryYydLogDayStatisticalDataRequest
     * @return QueryYydLogDayStatisticalDataResponse
     */
    queryYydLogDayStatisticalData(request: QueryYydLogDayStatisticalDataRequest): Promise<QueryYydLogDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋日志分析（按月统计）指标接口
     *
     * @param request QueryYydLogMonthStatisticalDataRequest
     * @param headers QueryYydLogMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydLogMonthStatisticalDataResponse
     */
    queryYydLogMonthStatisticalDataWithOptions(request: QueryYydLogMonthStatisticalDataRequest, headers: QueryYydLogMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydLogMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋日志分析（按月统计）指标接口
     *
     * @param request QueryYydLogMonthStatisticalDataRequest
     * @return QueryYydLogMonthStatisticalDataResponse
     */
    queryYydLogMonthStatisticalData(request: QueryYydLogMonthStatisticalDataRequest): Promise<QueryYydLogMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋日志分析（按周统计）指标接口
     *
     * @param request QueryYydLogWeekStatisticalDataRequest
     * @param headers QueryYydLogWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydLogWeekStatisticalDataResponse
     */
    queryYydLogWeekStatisticalDataWithOptions(request: QueryYydLogWeekStatisticalDataRequest, headers: QueryYydLogWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydLogWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋日志分析（按周统计）指标接口
     *
     * @param request QueryYydLogWeekStatisticalDataRequest
     * @return QueryYydLogWeekStatisticalDataResponse
     */
    queryYydLogWeekStatisticalData(request: QueryYydLogWeekStatisticalDataRequest): Promise<QueryYydLogWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉会议分析（按日统计）指标接口
     *
     * @param request QueryYydMeetingDayStatisticalDataRequest
     * @param headers QueryYydMeetingDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydMeetingDayStatisticalDataResponse
     */
    queryYydMeetingDayStatisticalDataWithOptions(request: QueryYydMeetingDayStatisticalDataRequest, headers: QueryYydMeetingDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydMeetingDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉会议分析（按日统计）指标接口
     *
     * @param request QueryYydMeetingDayStatisticalDataRequest
     * @return QueryYydMeetingDayStatisticalDataResponse
     */
    queryYydMeetingDayStatisticalData(request: QueryYydMeetingDayStatisticalDataRequest): Promise<QueryYydMeetingDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉会议分析（按月统计）指标接口
     *
     * @param request QueryYydMeetingMonthStatisticalDataRequest
     * @param headers QueryYydMeetingMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydMeetingMonthStatisticalDataResponse
     */
    queryYydMeetingMonthStatisticalDataWithOptions(request: QueryYydMeetingMonthStatisticalDataRequest, headers: QueryYydMeetingMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydMeetingMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉会议分析（按月统计）指标接口
     *
     * @param request QueryYydMeetingMonthStatisticalDataRequest
     * @return QueryYydMeetingMonthStatisticalDataResponse
     */
    queryYydMeetingMonthStatisticalData(request: QueryYydMeetingMonthStatisticalDataRequest): Promise<QueryYydMeetingMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉会议分析（按周统计）指标接口
     *
     * @param request QueryYydMeetingWeekStatisticalDataRequest
     * @param headers QueryYydMeetingWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydMeetingWeekStatisticalDataResponse
     */
    queryYydMeetingWeekStatisticalDataWithOptions(request: QueryYydMeetingWeekStatisticalDataRequest, headers: QueryYydMeetingWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydMeetingWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋钉会议分析（按周统计）指标接口
     *
     * @param request QueryYydMeetingWeekStatisticalDataRequest
     * @return QueryYydMeetingWeekStatisticalDataResponse
     */
    queryYydMeetingWeekStatisticalData(request: QueryYydMeetingWeekStatisticalDataRequest): Promise<QueryYydMeetingWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋通知分析（按日统计）指标接口
     *
     * @param request QueryYydNoticeDayStatisticalDataRequest
     * @param headers QueryYydNoticeDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydNoticeDayStatisticalDataResponse
     */
    queryYydNoticeDayStatisticalDataWithOptions(request: QueryYydNoticeDayStatisticalDataRequest, headers: QueryYydNoticeDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydNoticeDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋通知分析（按日统计）指标接口
     *
     * @param request QueryYydNoticeDayStatisticalDataRequest
     * @return QueryYydNoticeDayStatisticalDataResponse
     */
    queryYydNoticeDayStatisticalData(request: QueryYydNoticeDayStatisticalDataRequest): Promise<QueryYydNoticeDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋通知分析（按月统计）指标接口
     *
     * @param request QueryYydNoticeMonthStatisticalDataRequest
     * @param headers QueryYydNoticeMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydNoticeMonthStatisticalDataResponse
     */
    queryYydNoticeMonthStatisticalDataWithOptions(request: QueryYydNoticeMonthStatisticalDataRequest, headers: QueryYydNoticeMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydNoticeMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋通知分析（按月统计）指标接口
     *
     * @param request QueryYydNoticeMonthStatisticalDataRequest
     * @return QueryYydNoticeMonthStatisticalDataResponse
     */
    queryYydNoticeMonthStatisticalData(request: QueryYydNoticeMonthStatisticalDataRequest): Promise<QueryYydNoticeMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋通知分析（按周统计）指标接口
     *
     * @param request QueryYydNoticeWeekStatisticalDataRequest
     * @param headers QueryYydNoticeWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydNoticeWeekStatisticalDataResponse
     */
    queryYydNoticeWeekStatisticalDataWithOptions(request: QueryYydNoticeWeekStatisticalDataRequest, headers: QueryYydNoticeWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydNoticeWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋通知分析（按周统计）指标接口
     *
     * @param request QueryYydNoticeWeekStatisticalDataRequest
     * @return QueryYydNoticeWeekStatisticalDataResponse
     */
    queryYydNoticeWeekStatisticalData(request: QueryYydNoticeWeekStatisticalDataRequest): Promise<QueryYydNoticeWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋单聊分析（按日统计）指标接口
     *
     * @param request QueryYydSingleMsgDayStatisticalDataRequest
     * @param headers QueryYydSingleMsgDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydSingleMsgDayStatisticalDataResponse
     */
    queryYydSingleMsgDayStatisticalDataWithOptions(request: QueryYydSingleMsgDayStatisticalDataRequest, headers: QueryYydSingleMsgDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydSingleMsgDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋单聊分析（按日统计）指标接口
     *
     * @param request QueryYydSingleMsgDayStatisticalDataRequest
     * @return QueryYydSingleMsgDayStatisticalDataResponse
     */
    queryYydSingleMsgDayStatisticalData(request: QueryYydSingleMsgDayStatisticalDataRequest): Promise<QueryYydSingleMsgDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋单聊分析（按月统计）指标接口
     *
     * @param request QueryYydSingleMsgMonthStatisticalDataRequest
     * @param headers QueryYydSingleMsgMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydSingleMsgMonthStatisticalDataResponse
     */
    queryYydSingleMsgMonthStatisticalDataWithOptions(request: QueryYydSingleMsgMonthStatisticalDataRequest, headers: QueryYydSingleMsgMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydSingleMsgMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋单聊分析（按月统计）指标接口
     *
     * @param request QueryYydSingleMsgMonthStatisticalDataRequest
     * @return QueryYydSingleMsgMonthStatisticalDataResponse
     */
    queryYydSingleMsgMonthStatisticalData(request: QueryYydSingleMsgMonthStatisticalDataRequest): Promise<QueryYydSingleMsgMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋单聊分析（按周统计）指标接口
     *
     * @param request QueryYydSingleMsgWeekStatisticalDataRequest
     * @param headers QueryYydSingleMsgWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydSingleMsgWeekStatisticalDataResponse
     */
    queryYydSingleMsgWeekStatisticalDataWithOptions(request: QueryYydSingleMsgWeekStatisticalDataRequest, headers: QueryYydSingleMsgWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydSingleMsgWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋单聊分析（按周统计）指标接口
     *
     * @param request QueryYydSingleMsgWeekStatisticalDataRequest
     * @return QueryYydSingleMsgWeekStatisticalDataResponse
     */
    queryYydSingleMsgWeekStatisticalData(request: QueryYydSingleMsgWeekStatisticalDataRequest): Promise<QueryYydSingleMsgWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋消息概览（按日统计）指标接口
     *
     * @param request QueryYydToatlMsgDayStatisticalDataRequest
     * @param headers QueryYydToatlMsgDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydToatlMsgDayStatisticalDataResponse
     */
    queryYydToatlMsgDayStatisticalDataWithOptions(request: QueryYydToatlMsgDayStatisticalDataRequest, headers: QueryYydToatlMsgDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydToatlMsgDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋消息概览（按日统计）指标接口
     *
     * @param request QueryYydToatlMsgDayStatisticalDataRequest
     * @return QueryYydToatlMsgDayStatisticalDataResponse
     */
    queryYydToatlMsgDayStatisticalData(request: QueryYydToatlMsgDayStatisticalDataRequest): Promise<QueryYydToatlMsgDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋消息概览（按月统计）指标接口
     *
     * @param request QueryYydToatlMsgMonthStatisticalDataRequest
     * @param headers QueryYydToatlMsgMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydToatlMsgMonthStatisticalDataResponse
     */
    queryYydToatlMsgMonthStatisticalDataWithOptions(request: QueryYydToatlMsgMonthStatisticalDataRequest, headers: QueryYydToatlMsgMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydToatlMsgMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋消息概览（按月统计）指标接口
     *
     * @param request QueryYydToatlMsgMonthStatisticalDataRequest
     * @return QueryYydToatlMsgMonthStatisticalDataResponse
     */
    queryYydToatlMsgMonthStatisticalData(request: QueryYydToatlMsgMonthStatisticalDataRequest): Promise<QueryYydToatlMsgMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋消息概览（按周统计）指标接口
     *
     * @param request QueryYydToatlMsgWeekStatisticalDataRequest
     * @param headers QueryYydToatlMsgWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydToatlMsgWeekStatisticalDataResponse
     */
    queryYydToatlMsgWeekStatisticalDataWithOptions(request: QueryYydToatlMsgWeekStatisticalDataRequest, headers: QueryYydToatlMsgWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydToatlMsgWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋消息概览（按周统计）指标接口
     *
     * @param request QueryYydToatlMsgWeekStatisticalDataRequest
     * @return QueryYydToatlMsgWeekStatisticalDataResponse
     */
    queryYydToatlMsgWeekStatisticalData(request: QueryYydToatlMsgWeekStatisticalDataRequest): Promise<QueryYydToatlMsgWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋待办分析（按日统计）指标接口
     *
     * @param request QueryYydTodoDayStatisticalDataRequest
     * @param headers QueryYydTodoDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTodoDayStatisticalDataResponse
     */
    queryYydTodoDayStatisticalDataWithOptions(request: QueryYydTodoDayStatisticalDataRequest, headers: QueryYydTodoDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydTodoDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋待办分析（按日统计）指标接口
     *
     * @param request QueryYydTodoDayStatisticalDataRequest
     * @return QueryYydTodoDayStatisticalDataResponse
     */
    queryYydTodoDayStatisticalData(request: QueryYydTodoDayStatisticalDataRequest): Promise<QueryYydTodoDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋待办分析（按月统计）指标接口
     *
     * @param request QueryYydTodoMonthStatisticalDataRequest
     * @param headers QueryYydTodoMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTodoMonthStatisticalDataResponse
     */
    queryYydTodoMonthStatisticalDataWithOptions(request: QueryYydTodoMonthStatisticalDataRequest, headers: QueryYydTodoMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydTodoMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋待办分析（按月统计）指标接口
     *
     * @param request QueryYydTodoMonthStatisticalDataRequest
     * @return QueryYydTodoMonthStatisticalDataResponse
     */
    queryYydTodoMonthStatisticalData(request: QueryYydTodoMonthStatisticalDataRequest): Promise<QueryYydTodoMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋待办分析（按周统计）指标接口
     *
     * @param request QueryYydTodoWeekStatisticalDataRequest
     * @param headers QueryYydTodoWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTodoWeekStatisticalDataResponse
     */
    queryYydTodoWeekStatisticalDataWithOptions(request: QueryYydTodoWeekStatisticalDataRequest, headers: QueryYydTodoWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydTodoWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉数字参谋待办分析（按周统计）指标接口
     *
     * @param request QueryYydTodoWeekStatisticalDataRequest
     * @return QueryYydTodoWeekStatisticalDataResponse
     */
    queryYydTodoWeekStatisticalData(request: QueryYydTodoWeekStatisticalDataRequest): Promise<QueryYydTodoWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋全局概览（按日统计）指标接口
     *
     * @param request QueryYydTotalDayStatisticalDataRequest
     * @param headers QueryYydTotalDayStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTotalDayStatisticalDataResponse
     */
    queryYydTotalDayStatisticalDataWithOptions(request: QueryYydTotalDayStatisticalDataRequest, headers: QueryYydTotalDayStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydTotalDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋全局概览（按日统计）指标接口
     *
     * @param request QueryYydTotalDayStatisticalDataRequest
     * @return QueryYydTotalDayStatisticalDataResponse
     */
    queryYydTotalDayStatisticalData(request: QueryYydTotalDayStatisticalDataRequest): Promise<QueryYydTotalDayStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋全局概览（按月统计）指标接口
     *
     * @param request QueryYydTotalMonthStatisticalDataRequest
     * @param headers QueryYydTotalMonthStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTotalMonthStatisticalDataResponse
     */
    queryYydTotalMonthStatisticalDataWithOptions(request: QueryYydTotalMonthStatisticalDataRequest, headers: QueryYydTotalMonthStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydTotalMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋全局概览（按月统计）指标接口
     *
     * @param request QueryYydTotalMonthStatisticalDataRequest
     * @return QueryYydTotalMonthStatisticalDataResponse
     */
    queryYydTotalMonthStatisticalData(request: QueryYydTotalMonthStatisticalDataRequest): Promise<QueryYydTotalMonthStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋全局概览（累计）指标接口
     *
     * @param request QueryYydTotalStdStatisticalDataRequest
     * @param headers QueryYydTotalStdStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTotalStdStatisticalDataResponse
     */
    queryYydTotalStdStatisticalDataWithOptions(request: QueryYydTotalStdStatisticalDataRequest, headers: QueryYydTotalStdStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydTotalStdStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋全局概览（累计）指标接口
     *
     * @param request QueryYydTotalStdStatisticalDataRequest
     * @return QueryYydTotalStdStatisticalDataResponse
     */
    queryYydTotalStdStatisticalData(request: QueryYydTotalStdStatisticalDataRequest): Promise<QueryYydTotalStdStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋全局概览（按周统计）指标接口
     *
     * @param request QueryYydTotalWeekStatisticalDataRequest
     * @param headers QueryYydTotalWeekStatisticalDataHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryYydTotalWeekStatisticalDataResponse
     */
    queryYydTotalWeekStatisticalDataWithOptions(request: QueryYydTotalWeekStatisticalDataRequest, headers: QueryYydTotalWeekStatisticalDataHeaders, runtime: $Util.RuntimeOptions): Promise<QueryYydTotalWeekStatisticalDataResponse>;
    /**
     * @summary 亚运钉参谋全局概览（按周统计）指标接口
     *
     * @param request QueryYydTotalWeekStatisticalDataRequest
     * @return QueryYydTotalWeekStatisticalDataResponse
     */
    queryYydTotalWeekStatisticalData(request: QueryYydTotalWeekStatisticalDataRequest): Promise<QueryYydTotalWeekStatisticalDataResponse>;
    /**
     * @summary 通过关键词搜索企业
     *
     * @param request SearchCompanyRequest
     * @param headers SearchCompanyHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchCompanyResponse
     */
    searchCompanyWithOptions(request: SearchCompanyRequest, headers: SearchCompanyHeaders, runtime: $Util.RuntimeOptions): Promise<SearchCompanyResponse>;
    /**
     * @summary 通过关键词搜索企业
     *
     * @param request SearchCompanyRequest
     * @return SearchCompanyResponse
     */
    searchCompany(request: SearchCompanyRequest): Promise<SearchCompanyResponse>;
}
