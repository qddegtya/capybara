"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubmitMemoryLearningTaskResponseBodyResult = exports.SubmitMemoryLearningTaskRequestContent = exports.QueryMemoryLearningTaskResponseBodyResult = exports.QueryConversationMessageForAIResponseBodyMessages = exports.QueryConversationMessageForAIResponseBodyMessagesSender = exports.QueryConversationMessageForAIResponseBodyMessagesAtUsers = exports.LiandanluTextToImageModelResponseBodyResult = exports.ExecuteAgentResponseBodyResult = exports.ExecuteAgentRequestInputs = exports.SubmitMemoryLearningTaskResponse = exports.SubmitMemoryLearningTaskResponseBody = exports.SubmitMemoryLearningTaskShrinkRequest = exports.SubmitMemoryLearningTaskRequest = exports.SubmitMemoryLearningTaskHeaders = exports.QueryMemoryLearningTaskResponse = exports.QueryMemoryLearningTaskResponseBody = exports.QueryMemoryLearningTaskRequest = exports.QueryMemoryLearningTaskHeaders = exports.QueryConversationMessageForAIResponse = exports.QueryConversationMessageForAIResponseBody = exports.QueryConversationMessageForAIShrinkRequest = exports.QueryConversationMessageForAIRequest = exports.QueryConversationMessageForAIHeaders = exports.QueryBaymaxSkillLogResponse = exports.QueryBaymaxSkillLogResponseBody = exports.QueryBaymaxSkillLogRequest = exports.QueryBaymaxSkillLogHeaders = exports.LiandanluTextToImageModelResponse = exports.LiandanluTextToImageModelResponseBody = exports.LiandanluTextToImageModelRequest = exports.LiandanluTextToImageModelHeaders = exports.LiandanluExclusiveModelResponse = exports.LiandanluExclusiveModelResponseBody = exports.LiandanluExclusiveModelRequest = exports.LiandanluExclusiveModelHeaders = exports.LiandanTextImageGetResponse = exports.LiandanTextImageGetResponseBody = exports.LiandanTextImageGetRequest = exports.LiandanTextImageGetHeaders = exports.ExecuteAgentResponse = exports.ExecuteAgentResponseBody = exports.ExecuteAgentRequest = exports.ExecuteAgentHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class ExecuteAgentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExecuteAgentHeaders = ExecuteAgentHeaders;
class ExecuteAgentRequest extends $tea.Model {
    static names() {
        return {
            agentCode: 'agentCode',
            inputs: 'inputs',
            scenarioCode: 'scenarioCode',
            scenarioInstanceId: 'scenarioInstanceId',
            skillId: 'skillId',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            inputs: ExecuteAgentRequestInputs,
            scenarioCode: 'string',
            scenarioInstanceId: 'string',
            skillId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExecuteAgentRequest = ExecuteAgentRequest;
class ExecuteAgentResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: ExecuteAgentResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExecuteAgentResponseBody = ExecuteAgentResponseBody;
class ExecuteAgentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ExecuteAgentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExecuteAgentResponse = ExecuteAgentResponse;
class LiandanTextImageGetHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanTextImageGetHeaders = LiandanTextImageGetHeaders;
class LiandanTextImageGetRequest extends $tea.Model {
    static names() {
        return {
            module: 'module',
            taskId: 'taskId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            module: 'string',
            taskId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanTextImageGetRequest = LiandanTextImageGetRequest;
class LiandanTextImageGetResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': { 'type': 'map', 'keyType': 'string', 'valueType': 'any' } },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanTextImageGetResponseBody = LiandanTextImageGetResponseBody;
class LiandanTextImageGetResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LiandanTextImageGetResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanTextImageGetResponse = LiandanTextImageGetResponse;
class LiandanluExclusiveModelHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanluExclusiveModelHeaders = LiandanluExclusiveModelHeaders;
class LiandanluExclusiveModelRequest extends $tea.Model {
    static names() {
        return {
            modelId: 'modelId',
            module: 'module',
            prompt: 'prompt',
            userId: 'userId',
        };
    }
    static types() {
        return {
            modelId: 'string',
            module: 'string',
            prompt: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanluExclusiveModelRequest = LiandanluExclusiveModelRequest;
class LiandanluExclusiveModelResponseBody extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            result: 'result',
        };
    }
    static types() {
        return {
            requestId: 'string',
            result: { 'type': 'map', 'keyType': 'string', 'valueType': 'any' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanluExclusiveModelResponseBody = LiandanluExclusiveModelResponseBody;
class LiandanluExclusiveModelResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LiandanluExclusiveModelResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanluExclusiveModelResponse = LiandanluExclusiveModelResponse;
class LiandanluTextToImageModelHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanluTextToImageModelHeaders = LiandanluTextToImageModelHeaders;
class LiandanluTextToImageModelRequest extends $tea.Model {
    static names() {
        return {
            module: 'module',
            number: 'number',
            parameters: 'parameters',
            prompt: 'prompt',
            userId: 'userId',
        };
    }
    static types() {
        return {
            module: 'string',
            number: 'number',
            parameters: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            prompt: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanluTextToImageModelRequest = LiandanluTextToImageModelRequest;
class LiandanluTextToImageModelResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: LiandanluTextToImageModelResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanluTextToImageModelResponseBody = LiandanluTextToImageModelResponseBody;
class LiandanluTextToImageModelResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: LiandanluTextToImageModelResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanluTextToImageModelResponse = LiandanluTextToImageModelResponse;
class QueryBaymaxSkillLogHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBaymaxSkillLogHeaders = QueryBaymaxSkillLogHeaders;
class QueryBaymaxSkillLogRequest extends $tea.Model {
    static names() {
        return {
            from: 'from',
            logLevel: 'logLevel',
            skillExecuteId: 'skillExecuteId',
            to: 'to',
        };
    }
    static types() {
        return {
            from: 'number',
            logLevel: 'string',
            skillExecuteId: 'string',
            to: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBaymaxSkillLogRequest = QueryBaymaxSkillLogRequest;
class QueryBaymaxSkillLogResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBaymaxSkillLogResponseBody = QueryBaymaxSkillLogResponseBody;
class QueryBaymaxSkillLogResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryBaymaxSkillLogResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryBaymaxSkillLogResponse = QueryBaymaxSkillLogResponse;
class QueryConversationMessageForAIHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationMessageForAIHeaders = QueryConversationMessageForAIHeaders;
class QueryConversationMessageForAIRequest extends $tea.Model {
    static names() {
        return {
            openMsgIds: 'openMsgIds',
            recentDays: 'recentDays',
            recentHours: 'recentHours',
            recentN: 'recentN',
        };
    }
    static types() {
        return {
            openMsgIds: { 'type': 'array', 'itemType': 'string' },
            recentDays: 'number',
            recentHours: 'number',
            recentN: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationMessageForAIRequest = QueryConversationMessageForAIRequest;
class QueryConversationMessageForAIShrinkRequest extends $tea.Model {
    static names() {
        return {
            openMsgIdsShrink: 'openMsgIds',
            recentDays: 'recentDays',
            recentHours: 'recentHours',
            recentN: 'recentN',
        };
    }
    static types() {
        return {
            openMsgIdsShrink: 'string',
            recentDays: 'number',
            recentHours: 'number',
            recentN: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationMessageForAIShrinkRequest = QueryConversationMessageForAIShrinkRequest;
class QueryConversationMessageForAIResponseBody extends $tea.Model {
    static names() {
        return {
            messages: 'messages',
        };
    }
    static types() {
        return {
            messages: { 'type': 'array', 'itemType': QueryConversationMessageForAIResponseBodyMessages },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationMessageForAIResponseBody = QueryConversationMessageForAIResponseBody;
class QueryConversationMessageForAIResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryConversationMessageForAIResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationMessageForAIResponse = QueryConversationMessageForAIResponse;
class QueryMemoryLearningTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMemoryLearningTaskHeaders = QueryMemoryLearningTaskHeaders;
class QueryMemoryLearningTaskRequest extends $tea.Model {
    static names() {
        return {
            agentCode: 'agentCode',
            learningCode: 'learningCode',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            learningCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMemoryLearningTaskRequest = QueryMemoryLearningTaskRequest;
class QueryMemoryLearningTaskResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryMemoryLearningTaskResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMemoryLearningTaskResponseBody = QueryMemoryLearningTaskResponseBody;
class QueryMemoryLearningTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryMemoryLearningTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMemoryLearningTaskResponse = QueryMemoryLearningTaskResponse;
class SubmitMemoryLearningTaskHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitMemoryLearningTaskHeaders = SubmitMemoryLearningTaskHeaders;
class SubmitMemoryLearningTaskRequest extends $tea.Model {
    static names() {
        return {
            agentCode: 'agentCode',
            content: 'content',
            learningMode: 'learningMode',
            memoryKey: 'memoryKey',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            content: SubmitMemoryLearningTaskRequestContent,
            learningMode: 'string',
            memoryKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitMemoryLearningTaskRequest = SubmitMemoryLearningTaskRequest;
class SubmitMemoryLearningTaskShrinkRequest extends $tea.Model {
    static names() {
        return {
            agentCode: 'agentCode',
            contentShrink: 'content',
            learningMode: 'learningMode',
            memoryKey: 'memoryKey',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            contentShrink: 'string',
            learningMode: 'string',
            memoryKey: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitMemoryLearningTaskShrinkRequest = SubmitMemoryLearningTaskShrinkRequest;
class SubmitMemoryLearningTaskResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: SubmitMemoryLearningTaskResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitMemoryLearningTaskResponseBody = SubmitMemoryLearningTaskResponseBody;
class SubmitMemoryLearningTaskResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SubmitMemoryLearningTaskResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitMemoryLearningTaskResponse = SubmitMemoryLearningTaskResponse;
class ExecuteAgentRequestInputs extends $tea.Model {
    static names() {
        return {
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            input: 'input',
        };
    }
    static types() {
        return {
            cardData: 'any',
            cardTemplateId: 'string',
            input: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExecuteAgentRequestInputs = ExecuteAgentRequestInputs;
class ExecuteAgentResponseBodyResult extends $tea.Model {
    static names() {
        return {
            executeResult: 'executeResult',
            skillId: 'skillId',
        };
    }
    static types() {
        return {
            executeResult: 'string',
            skillId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ExecuteAgentResponseBodyResult = ExecuteAgentResponseBodyResult;
class LiandanluTextToImageModelResponseBodyResult extends $tea.Model {
    static names() {
        return {
            requestId: 'requestId',
            taskId: 'taskId',
            taskStatus: 'taskStatus',
        };
    }
    static types() {
        return {
            requestId: 'string',
            taskId: 'string',
            taskStatus: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LiandanluTextToImageModelResponseBodyResult = LiandanluTextToImageModelResponseBodyResult;
class QueryConversationMessageForAIResponseBodyMessagesAtUsers extends $tea.Model {
    static names() {
        return {
            agentCode: 'agentCode',
            nick: 'nick',
            type: 'type',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            nick: 'string',
            type: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationMessageForAIResponseBodyMessagesAtUsers = QueryConversationMessageForAIResponseBodyMessagesAtUsers;
class QueryConversationMessageForAIResponseBodyMessagesSender extends $tea.Model {
    static names() {
        return {
            agentCode: 'agentCode',
            nick: 'nick',
            type: 'type',
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            agentCode: 'string',
            nick: 'string',
            type: 'string',
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationMessageForAIResponseBodyMessagesSender = QueryConversationMessageForAIResponseBodyMessagesSender;
class QueryConversationMessageForAIResponseBodyMessages extends $tea.Model {
    static names() {
        return {
            atAll: 'atAll',
            atUsers: 'atUsers',
            msgContent: 'msgContent',
            msgType: 'msgType',
            sendTime: 'sendTime',
            sender: 'sender',
            summary: 'summary',
        };
    }
    static types() {
        return {
            atAll: 'boolean',
            atUsers: { 'type': 'array', 'itemType': QueryConversationMessageForAIResponseBodyMessagesAtUsers },
            msgContent: 'string',
            msgType: 'string',
            sendTime: 'string',
            sender: QueryConversationMessageForAIResponseBodyMessagesSender,
            summary: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryConversationMessageForAIResponseBodyMessages = QueryConversationMessageForAIResponseBodyMessages;
class QueryMemoryLearningTaskResponseBodyResult extends $tea.Model {
    static names() {
        return {
            status: 'status',
            success: 'success',
        };
    }
    static types() {
        return {
            status: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMemoryLearningTaskResponseBodyResult = QueryMemoryLearningTaskResponseBodyResult;
class SubmitMemoryLearningTaskRequestContent extends $tea.Model {
    static names() {
        return {
            knowledgeBaseUrl: 'knowledgeBaseUrl',
            type: 'type',
        };
    }
    static types() {
        return {
            knowledgeBaseUrl: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitMemoryLearningTaskRequestContent = SubmitMemoryLearningTaskRequestContent;
class SubmitMemoryLearningTaskResponseBodyResult extends $tea.Model {
    static names() {
        return {
            learningCode: 'learningCode',
            status: 'status',
            success: 'success',
        };
    }
    static types() {
        return {
            learningCode: 'string',
            status: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubmitMemoryLearningTaskResponseBodyResult = SubmitMemoryLearningTaskResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 执行AI技能
     *
     * @param request ExecuteAgentRequest
     * @param headers ExecuteAgentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExecuteAgentResponse
     */
    async executeAgentWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.agentCode)) {
            body["agentCode"] = request.agentCode;
        }
        if (!tea_util_1.default.isUnset(request.inputs)) {
            body["inputs"] = request.inputs;
        }
        if (!tea_util_1.default.isUnset(request.scenarioCode)) {
            body["scenarioCode"] = request.scenarioCode;
        }
        if (!tea_util_1.default.isUnset(request.scenarioInstanceId)) {
            body["scenarioInstanceId"] = request.scenarioInstanceId;
        }
        if (!tea_util_1.default.isUnset(request.skillId)) {
            body["skillId"] = request.skillId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ExecuteAgent",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/me/agents/execute`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ExecuteAgentResponse({}));
    }
    /**
     * @summary 执行AI技能
     *
     * @param request ExecuteAgentRequest
     * @return ExecuteAgentResponse
     */
    async executeAgent(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ExecuteAgentHeaders({});
        return await this.executeAgentWithOptions(request, headers, runtime);
    }
    /**
     * @summary 炼丹炉文生图任务结果获取
     *
     * @param request LiandanTextImageGetRequest
     * @param headers LiandanTextImageGetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LiandanTextImageGetResponse
     */
    async liandanTextImageGetWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.module)) {
            body["module"] = request.module;
        }
        if (!tea_util_1.default.isUnset(request.taskId)) {
            body["taskId"] = request.taskId;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "LiandanTextImageGet",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/ai/textToImage/results/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LiandanTextImageGetResponse({}));
    }
    /**
     * @summary 炼丹炉文生图任务结果获取
     *
     * @param request LiandanTextImageGetRequest
     * @return LiandanTextImageGetResponse
     */
    async liandanTextImageGet(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LiandanTextImageGetHeaders({});
        return await this.liandanTextImageGetWithOptions(request, headers, runtime);
    }
    /**
     * @summary 炼丹炉专属模型接口
     *
     * @param request LiandanluExclusiveModelRequest
     * @param headers LiandanluExclusiveModelHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LiandanluExclusiveModelResponse
     */
    async liandanluExclusiveModelWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.modelId)) {
            body["modelId"] = request.modelId;
        }
        if (!tea_util_1.default.isUnset(request.module)) {
            body["module"] = request.module;
        }
        if (!tea_util_1.default.isUnset(request.prompt)) {
            body["prompt"] = request.prompt;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "LiandanluExclusiveModel",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/ai/generate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LiandanluExclusiveModelResponse({}));
    }
    /**
     * @summary 炼丹炉专属模型接口
     *
     * @param request LiandanluExclusiveModelRequest
     * @return LiandanluExclusiveModelResponse
     */
    async liandanluExclusiveModel(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LiandanluExclusiveModelHeaders({});
        return await this.liandanluExclusiveModelWithOptions(request, headers, runtime);
    }
    /**
     * @summary 炼丹炉通过提示词生成图片
     *
     * @param request LiandanluTextToImageModelRequest
     * @param headers LiandanluTextToImageModelHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LiandanluTextToImageModelResponse
     */
    async liandanluTextToImageModelWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.module)) {
            body["module"] = request.module;
        }
        if (!tea_util_1.default.isUnset(request.number)) {
            body["number"] = request.number;
        }
        if (!tea_util_1.default.isUnset(request.parameters)) {
            body["parameters"] = request.parameters;
        }
        if (!tea_util_1.default.isUnset(request.prompt)) {
            body["prompt"] = request.prompt;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "LiandanluTextToImageModel",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/ai/textToImage/generate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new LiandanluTextToImageModelResponse({}));
    }
    /**
     * @summary 炼丹炉通过提示词生成图片
     *
     * @param request LiandanluTextToImageModelRequest
     * @return LiandanluTextToImageModelResponse
     */
    async liandanluTextToImageModel(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new LiandanluTextToImageModelHeaders({});
        return await this.liandanluTextToImageModelWithOptions(request, headers, runtime);
    }
    /**
     * @summary Baymax技能执行日志
     *
     * @param request QueryBaymaxSkillLogRequest
     * @param headers QueryBaymaxSkillLogHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryBaymaxSkillLogResponse
     */
    async queryBaymaxSkillLogWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.from)) {
            query["from"] = request.from;
        }
        if (!tea_util_1.default.isUnset(request.logLevel)) {
            query["logLevel"] = request.logLevel;
        }
        if (!tea_util_1.default.isUnset(request.skillExecuteId)) {
            query["skillExecuteId"] = request.skillExecuteId;
        }
        if (!tea_util_1.default.isUnset(request.to)) {
            query["to"] = request.to;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryBaymaxSkillLog",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/skills/logs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryBaymaxSkillLogResponse({}));
    }
    /**
     * @summary Baymax技能执行日志
     *
     * @param request QueryBaymaxSkillLogRequest
     * @return QueryBaymaxSkillLogResponse
     */
    async queryBaymaxSkillLog(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryBaymaxSkillLogHeaders({});
        return await this.queryBaymaxSkillLogWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询会话消息并以大模型友好的协议返回
     *
     * @param tmpReq QueryConversationMessageForAIRequest
     * @param headers QueryConversationMessageForAIHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryConversationMessageForAIResponse
     */
    async queryConversationMessageForAIWithOptions(cid, tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new QueryConversationMessageForAIShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.openMsgIds)) {
            request.openMsgIdsShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.openMsgIds, "openMsgIds", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.openMsgIdsShrink)) {
            query["openMsgIds"] = request.openMsgIdsShrink;
        }
        if (!tea_util_1.default.isUnset(request.recentDays)) {
            query["recentDays"] = request.recentDays;
        }
        if (!tea_util_1.default.isUnset(request.recentHours)) {
            query["recentHours"] = request.recentHours;
        }
        if (!tea_util_1.default.isUnset(request.recentN)) {
            query["recentN"] = request.recentN;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryConversationMessageForAI",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/me/memory/im/${cid}/messages`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryConversationMessageForAIResponse({}));
    }
    /**
     * @summary 查询会话消息并以大模型友好的协议返回
     *
     * @param request QueryConversationMessageForAIRequest
     * @return QueryConversationMessageForAIResponse
     */
    async queryConversationMessageForAI(cid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryConversationMessageForAIHeaders({});
        return await this.queryConversationMessageForAIWithOptions(cid, request, headers, runtime);
    }
    /**
     * @summary 查询记忆学习进度
     *
     * @param request QueryMemoryLearningTaskRequest
     * @param headers QueryMemoryLearningTaskHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMemoryLearningTaskResponse
     */
    async queryMemoryLearningTaskWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.agentCode)) {
            query["agentCode"] = request.agentCode;
        }
        if (!tea_util_1.default.isUnset(request.learningCode)) {
            query["learningCode"] = request.learningCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryMemoryLearningTask",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/me/memory/learningTask/get`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMemoryLearningTaskResponse({}));
    }
    /**
     * @summary 查询记忆学习进度
     *
     * @param request QueryMemoryLearningTaskRequest
     * @return QueryMemoryLearningTaskResponse
     */
    async queryMemoryLearningTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMemoryLearningTaskHeaders({});
        return await this.queryMemoryLearningTaskWithOptions(request, headers, runtime);
    }
    /**
     * @summary 提交记忆学习任务
     *
     * @param tmpReq SubmitMemoryLearningTaskRequest
     * @param headers SubmitMemoryLearningTaskHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SubmitMemoryLearningTaskResponse
     */
    async submitMemoryLearningTaskWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new SubmitMemoryLearningTaskShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.content)) {
            request.contentShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.content, "content", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.agentCode)) {
            query["agentCode"] = request.agentCode;
        }
        if (!tea_util_1.default.isUnset(request.contentShrink)) {
            query["content"] = request.contentShrink;
        }
        if (!tea_util_1.default.isUnset(request.learningMode)) {
            query["learningMode"] = request.learningMode;
        }
        if (!tea_util_1.default.isUnset(request.memoryKey)) {
            query["memoryKey"] = request.memoryKey;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SubmitMemoryLearningTask",
            version: "aiPaaS_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/aiPaaS/me/memory/learningTask/put`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SubmitMemoryLearningTaskResponse({}));
    }
    /**
     * @summary 提交记忆学习任务
     *
     * @param request SubmitMemoryLearningTaskRequest
     * @return SubmitMemoryLearningTaskResponse
     */
    async submitMemoryLearningTask(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SubmitMemoryLearningTaskHeaders({});
        return await this.submitMemoryLearningTaskWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map