/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ExecuteAgentHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentRequest extends $tea.Model {
    agentCode?: string;
    inputs?: ExecuteAgentRequestInputs;
    scenarioCode?: string;
    scenarioInstanceId?: string;
    skillId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentResponseBody extends $tea.Model {
    result?: ExecuteAgentResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ExecuteAgentResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanTextImageGetHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanTextImageGetRequest extends $tea.Model {
    module?: string;
    taskId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanTextImageGetResponseBody extends $tea.Model {
    result?: {
        [key: string]: any;
    }[];
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanTextImageGetResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LiandanTextImageGetResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluExclusiveModelHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluExclusiveModelRequest extends $tea.Model {
    modelId?: string;
    module?: string;
    prompt?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluExclusiveModelResponseBody extends $tea.Model {
    requestId?: string;
    result?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluExclusiveModelResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LiandanluExclusiveModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelRequest extends $tea.Model {
    module?: string;
    number?: number;
    parameters?: {
        [key: string]: string;
    };
    prompt?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelResponseBody extends $tea.Model {
    result?: LiandanluTextToImageModelResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: LiandanluTextToImageModelResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBaymaxSkillLogHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBaymaxSkillLogRequest extends $tea.Model {
    from?: number;
    logLevel?: string;
    skillExecuteId?: string;
    to?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBaymaxSkillLogResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryBaymaxSkillLogResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryBaymaxSkillLogResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIRequest extends $tea.Model {
    openMsgIds?: string[];
    recentDays?: number;
    recentHours?: number;
    recentN?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIShrinkRequest extends $tea.Model {
    openMsgIdsShrink?: string;
    recentDays?: number;
    recentHours?: number;
    recentN?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponseBody extends $tea.Model {
    messages?: QueryConversationMessageForAIResponseBodyMessages[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryConversationMessageForAIResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskRequest extends $tea.Model {
    agentCode?: string;
    learningCode?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskResponseBody extends $tea.Model {
    result?: QueryMemoryLearningTaskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryMemoryLearningTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskRequest extends $tea.Model {
    agentCode?: string;
    content?: SubmitMemoryLearningTaskRequestContent;
    learningMode?: string;
    memoryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskShrinkRequest extends $tea.Model {
    agentCode?: string;
    contentShrink?: string;
    learningMode?: string;
    memoryKey?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskResponseBody extends $tea.Model {
    result?: SubmitMemoryLearningTaskResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SubmitMemoryLearningTaskResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentRequestInputs extends $tea.Model {
    cardData?: any;
    cardTemplateId?: string;
    input?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ExecuteAgentResponseBodyResult extends $tea.Model {
    executeResult?: string;
    skillId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class LiandanluTextToImageModelResponseBodyResult extends $tea.Model {
    requestId?: string;
    taskId?: string;
    taskStatus?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponseBodyMessagesAtUsers extends $tea.Model {
    agentCode?: string;
    nick?: string;
    type?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponseBodyMessagesSender extends $tea.Model {
    agentCode?: string;
    nick?: string;
    type?: string;
    unionId?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryConversationMessageForAIResponseBodyMessages extends $tea.Model {
    atAll?: boolean;
    atUsers?: QueryConversationMessageForAIResponseBodyMessagesAtUsers[];
    msgContent?: string;
    msgType?: string;
    sendTime?: string;
    sender?: QueryConversationMessageForAIResponseBodyMessagesSender;
    summary?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryMemoryLearningTaskResponseBodyResult extends $tea.Model {
    status?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskRequestContent extends $tea.Model {
    knowledgeBaseUrl?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubmitMemoryLearningTaskResponseBodyResult extends $tea.Model {
    learningCode?: string;
    status?: string;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 执行AI技能
     *
     * @param request ExecuteAgentRequest
     * @param headers ExecuteAgentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ExecuteAgentResponse
     */
    executeAgentWithOptions(request: ExecuteAgentRequest, headers: ExecuteAgentHeaders, runtime: $Util.RuntimeOptions): Promise<ExecuteAgentResponse>;
    /**
     * @summary 执行AI技能
     *
     * @param request ExecuteAgentRequest
     * @return ExecuteAgentResponse
     */
    executeAgent(request: ExecuteAgentRequest): Promise<ExecuteAgentResponse>;
    /**
     * @summary 炼丹炉文生图任务结果获取
     *
     * @param request LiandanTextImageGetRequest
     * @param headers LiandanTextImageGetHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LiandanTextImageGetResponse
     */
    liandanTextImageGetWithOptions(request: LiandanTextImageGetRequest, headers: LiandanTextImageGetHeaders, runtime: $Util.RuntimeOptions): Promise<LiandanTextImageGetResponse>;
    /**
     * @summary 炼丹炉文生图任务结果获取
     *
     * @param request LiandanTextImageGetRequest
     * @return LiandanTextImageGetResponse
     */
    liandanTextImageGet(request: LiandanTextImageGetRequest): Promise<LiandanTextImageGetResponse>;
    /**
     * @summary 炼丹炉专属模型接口
     *
     * @param request LiandanluExclusiveModelRequest
     * @param headers LiandanluExclusiveModelHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LiandanluExclusiveModelResponse
     */
    liandanluExclusiveModelWithOptions(request: LiandanluExclusiveModelRequest, headers: LiandanluExclusiveModelHeaders, runtime: $Util.RuntimeOptions): Promise<LiandanluExclusiveModelResponse>;
    /**
     * @summary 炼丹炉专属模型接口
     *
     * @param request LiandanluExclusiveModelRequest
     * @return LiandanluExclusiveModelResponse
     */
    liandanluExclusiveModel(request: LiandanluExclusiveModelRequest): Promise<LiandanluExclusiveModelResponse>;
    /**
     * @summary 炼丹炉通过提示词生成图片
     *
     * @param request LiandanluTextToImageModelRequest
     * @param headers LiandanluTextToImageModelHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return LiandanluTextToImageModelResponse
     */
    liandanluTextToImageModelWithOptions(request: LiandanluTextToImageModelRequest, headers: LiandanluTextToImageModelHeaders, runtime: $Util.RuntimeOptions): Promise<LiandanluTextToImageModelResponse>;
    /**
     * @summary 炼丹炉通过提示词生成图片
     *
     * @param request LiandanluTextToImageModelRequest
     * @return LiandanluTextToImageModelResponse
     */
    liandanluTextToImageModel(request: LiandanluTextToImageModelRequest): Promise<LiandanluTextToImageModelResponse>;
    /**
     * @summary Baymax技能执行日志
     *
     * @param request QueryBaymaxSkillLogRequest
     * @param headers QueryBaymaxSkillLogHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryBaymaxSkillLogResponse
     */
    queryBaymaxSkillLogWithOptions(request: QueryBaymaxSkillLogRequest, headers: QueryBaymaxSkillLogHeaders, runtime: $Util.RuntimeOptions): Promise<QueryBaymaxSkillLogResponse>;
    /**
     * @summary Baymax技能执行日志
     *
     * @param request QueryBaymaxSkillLogRequest
     * @return QueryBaymaxSkillLogResponse
     */
    queryBaymaxSkillLog(request: QueryBaymaxSkillLogRequest): Promise<QueryBaymaxSkillLogResponse>;
    /**
     * @summary 查询会话消息并以大模型友好的协议返回
     *
     * @param tmpReq QueryConversationMessageForAIRequest
     * @param headers QueryConversationMessageForAIHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryConversationMessageForAIResponse
     */
    queryConversationMessageForAIWithOptions(cid: string, tmpReq: QueryConversationMessageForAIRequest, headers: QueryConversationMessageForAIHeaders, runtime: $Util.RuntimeOptions): Promise<QueryConversationMessageForAIResponse>;
    /**
     * @summary 查询会话消息并以大模型友好的协议返回
     *
     * @param request QueryConversationMessageForAIRequest
     * @return QueryConversationMessageForAIResponse
     */
    queryConversationMessageForAI(cid: string, request: QueryConversationMessageForAIRequest): Promise<QueryConversationMessageForAIResponse>;
    /**
     * @summary 查询记忆学习进度
     *
     * @param request QueryMemoryLearningTaskRequest
     * @param headers QueryMemoryLearningTaskHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMemoryLearningTaskResponse
     */
    queryMemoryLearningTaskWithOptions(request: QueryMemoryLearningTaskRequest, headers: QueryMemoryLearningTaskHeaders, runtime: $Util.RuntimeOptions): Promise<QueryMemoryLearningTaskResponse>;
    /**
     * @summary 查询记忆学习进度
     *
     * @param request QueryMemoryLearningTaskRequest
     * @return QueryMemoryLearningTaskResponse
     */
    queryMemoryLearningTask(request: QueryMemoryLearningTaskRequest): Promise<QueryMemoryLearningTaskResponse>;
    /**
     * @summary 提交记忆学习任务
     *
     * @param tmpReq SubmitMemoryLearningTaskRequest
     * @param headers SubmitMemoryLearningTaskHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SubmitMemoryLearningTaskResponse
     */
    submitMemoryLearningTaskWithOptions(tmpReq: SubmitMemoryLearningTaskRequest, headers: SubmitMemoryLearningTaskHeaders, runtime: $Util.RuntimeOptions): Promise<SubmitMemoryLearningTaskResponse>;
    /**
     * @summary 提交记忆学习任务
     *
     * @param request SubmitMemoryLearningTaskRequest
     * @return SubmitMemoryLearningTaskResponse
     */
    submitMemoryLearningTask(request: SubmitMemoryLearningTaskRequest): Promise<SubmitMemoryLearningTaskResponse>;
}
