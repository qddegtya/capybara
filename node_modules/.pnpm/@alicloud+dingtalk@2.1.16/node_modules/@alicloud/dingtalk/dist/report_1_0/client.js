"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryReportDetailResponseBodyContent = exports.QueryRemindResultsResponseBodyDataList = exports.QueryRemindResultsResponseBodyDataListToGroups = exports.GetSendAndReceiveReportListResponseBodyDataList = exports.CreateTemplatesRequestFields = exports.CreateTemplatesRequestFieldsDataValue = exports.CreateTemplatesRequestFieldsDataValueOpenInfo = exports.QueryReportDetailResponse = exports.QueryReportDetailResponseBody = exports.QueryReportDetailRequest = exports.QueryReportDetailHeaders = exports.QueryRemindResultsResponse = exports.QueryRemindResultsResponseBody = exports.QueryRemindResultsRequest = exports.QueryRemindResultsHeaders = exports.GetSubmitStatisticsResponse = exports.GetSubmitStatisticsResponseBody = exports.GetSubmitStatisticsRequest = exports.GetSubmitStatisticsHeaders = exports.GetSendAndReceiveReportListResponse = exports.GetSendAndReceiveReportListResponseBody = exports.GetSendAndReceiveReportListRequest = exports.GetSendAndReceiveReportListHeaders = exports.CreateTemplatesResponse = exports.CreateTemplatesResponseBody = exports.CreateTemplatesRequest = exports.CreateTemplatesHeaders = exports.UserMapValue = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class UserMapValue extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
            name: 'name',
            deptId: 'deptId',
        };
    }
    static types() {
        return {
            userId: 'string',
            name: 'string',
            deptId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserMapValue = UserMapValue;
class CreateTemplatesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTemplatesHeaders = CreateTemplatesHeaders;
class CreateTemplatesRequest extends $tea.Model {
    static names() {
        return {
            allowAddReceivers: 'allowAddReceivers',
            allowEdit: 'allowEdit',
            allowGetLocation: 'allowGetLocation',
            authDeptIds: 'authDeptIds',
            authUserIds: 'authUserIds',
            creator: 'creator',
            defaultReceivedCids: 'defaultReceivedCids',
            defaultReceivedMasterLevels: 'defaultReceivedMasterLevels',
            defaultReceivers: 'defaultReceivers',
            fields: 'fields',
            logo: 'logo',
            maxWordCount: 'maxWordCount',
            minWordCount: 'minWordCount',
            name: 'name',
            templateManagers: 'templateManagers',
        };
    }
    static types() {
        return {
            allowAddReceivers: 'boolean',
            allowEdit: 'boolean',
            allowGetLocation: 'boolean',
            authDeptIds: { 'type': 'array', 'itemType': 'string' },
            authUserIds: { 'type': 'array', 'itemType': 'string' },
            creator: 'string',
            defaultReceivedCids: { 'type': 'array', 'itemType': 'string' },
            defaultReceivedMasterLevels: { 'type': 'array', 'itemType': 'string' },
            defaultReceivers: { 'type': 'array', 'itemType': 'string' },
            fields: { 'type': 'array', 'itemType': CreateTemplatesRequestFields },
            logo: 'string',
            maxWordCount: 'number',
            minWordCount: 'number',
            name: 'string',
            templateManagers: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTemplatesRequest = CreateTemplatesRequest;
class CreateTemplatesResponseBody extends $tea.Model {
    static names() {
        return {
            templateId: 'templateId',
        };
    }
    static types() {
        return {
            templateId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTemplatesResponseBody = CreateTemplatesResponseBody;
class CreateTemplatesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateTemplatesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTemplatesResponse = CreateTemplatesResponse;
class GetSendAndReceiveReportListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSendAndReceiveReportListHeaders = GetSendAndReceiveReportListHeaders;
class GetSendAndReceiveReportListRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operationUserId: 'operationUserId',
            startTime: 'startTime',
        };
    }
    static types() {
        return {
            endTime: 'number',
            maxResults: 'number',
            nextToken: 'number',
            operationUserId: 'string',
            startTime: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSendAndReceiveReportListRequest = GetSendAndReceiveReportListRequest;
class GetSendAndReceiveReportListResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            hasMore: 'hasMore',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': GetSendAndReceiveReportListResponseBodyDataList },
            hasMore: 'boolean',
            maxResults: 'number',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSendAndReceiveReportListResponseBody = GetSendAndReceiveReportListResponseBody;
class GetSendAndReceiveReportListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSendAndReceiveReportListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSendAndReceiveReportListResponse = GetSendAndReceiveReportListResponse;
class GetSubmitStatisticsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSubmitStatisticsHeaders = GetSubmitStatisticsHeaders;
class GetSubmitStatisticsRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            operationUserId: 'operationUserId',
            remindId: 'remindId',
            startTime: 'startTime',
            templateId: 'templateId',
        };
    }
    static types() {
        return {
            endTime: 'number',
            operationUserId: 'string',
            remindId: 'number',
            startTime: 'number',
            templateId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSubmitStatisticsRequest = GetSubmitStatisticsRequest;
class GetSubmitStatisticsResponseBody extends $tea.Model {
    static names() {
        return {
            shouldRemindTimes: 'shouldRemindTimes',
            templateName: 'templateName',
            userDeptMap: 'userDeptMap',
            userIdCountMap: 'userIdCountMap',
            userIdStatusMap: 'userIdStatusMap',
            userIds: 'userIds',
            userMap: 'userMap',
        };
    }
    static types() {
        return {
            shouldRemindTimes: 'number',
            templateName: 'string',
            userDeptMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            userIdCountMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'number' },
            userIdStatusMap: { 'type': 'map', 'keyType': 'string', 'valueType': '{[key: string]: any}' },
            userIds: { 'type': 'array', 'itemType': 'string' },
            userMap: { 'type': 'map', 'keyType': 'string', 'valueType': UserMapValue },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSubmitStatisticsResponseBody = GetSubmitStatisticsResponseBody;
class GetSubmitStatisticsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSubmitStatisticsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSubmitStatisticsResponse = GetSubmitStatisticsResponse;
class QueryRemindResultsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemindResultsHeaders = QueryRemindResultsHeaders;
class QueryRemindResultsRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operationUserId: 'operationUserId',
            templateId: 'templateId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'number',
            operationUserId: 'string',
            templateId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemindResultsRequest = QueryRemindResultsRequest;
class QueryRemindResultsResponseBody extends $tea.Model {
    static names() {
        return {
            dataList: 'dataList',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            dataList: { 'type': 'array', 'itemType': QueryRemindResultsResponseBodyDataList },
            hasMore: 'boolean',
            nextToken: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemindResultsResponseBody = QueryRemindResultsResponseBody;
class QueryRemindResultsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryRemindResultsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemindResultsResponse = QueryRemindResultsResponse;
class QueryReportDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportDetailHeaders = QueryReportDetailHeaders;
class QueryReportDetailRequest extends $tea.Model {
    static names() {
        return {
            reportId: 'reportId',
        };
    }
    static types() {
        return {
            reportId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportDetailRequest = QueryReportDetailRequest;
class QueryReportDetailResponseBody extends $tea.Model {
    static names() {
        return {
            content: 'content',
            createTime: 'createTime',
            creatorId: 'creatorId',
            creatorName: 'creatorName',
            deptName: 'deptName',
            modifiedTime: 'modifiedTime',
            remark: 'remark',
            reportId: 'reportId',
            templateName: 'templateName',
        };
    }
    static types() {
        return {
            content: { 'type': 'array', 'itemType': QueryReportDetailResponseBodyContent },
            createTime: 'number',
            creatorId: 'string',
            creatorName: 'string',
            deptName: 'string',
            modifiedTime: 'number',
            remark: 'string',
            reportId: 'string',
            templateName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportDetailResponseBody = QueryReportDetailResponseBody;
class QueryReportDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryReportDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportDetailResponse = QueryReportDetailResponse;
class CreateTemplatesRequestFieldsDataValueOpenInfo extends $tea.Model {
    static names() {
        return {
            attribute: 'attribute',
            openId: 'openId',
        };
    }
    static types() {
        return {
            attribute: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            openId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTemplatesRequestFieldsDataValueOpenInfo = CreateTemplatesRequestFieldsDataValueOpenInfo;
class CreateTemplatesRequestFieldsDataValue extends $tea.Model {
    static names() {
        return {
            openInfo: 'openInfo',
            options: 'options',
            placeholder: 'placeholder',
        };
    }
    static types() {
        return {
            openInfo: CreateTemplatesRequestFieldsDataValueOpenInfo,
            options: { 'type': 'array', 'itemType': 'string' },
            placeholder: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTemplatesRequestFieldsDataValue = CreateTemplatesRequestFieldsDataValue;
class CreateTemplatesRequestFields extends $tea.Model {
    static names() {
        return {
            dataType: 'dataType',
            dataValue: 'dataValue',
            fieldName: 'fieldName',
            need: 'need',
            order: 'order',
            sort: 'sort',
        };
    }
    static types() {
        return {
            dataType: 'number',
            dataValue: CreateTemplatesRequestFieldsDataValue,
            fieldName: 'string',
            need: 'boolean',
            order: 'number',
            sort: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTemplatesRequestFields = CreateTemplatesRequestFields;
class GetSendAndReceiveReportListResponseBodyDataList extends $tea.Model {
    static names() {
        return {
            createTime: 'createTime',
            creatorId: 'creatorId',
            creatorName: 'creatorName',
            modifiedTime: 'modifiedTime',
            reportId: 'reportId',
            templateName: 'templateName',
        };
    }
    static types() {
        return {
            createTime: 'number',
            creatorId: 'string',
            creatorName: 'string',
            modifiedTime: 'number',
            reportId: 'string',
            templateName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSendAndReceiveReportListResponseBodyDataList = GetSendAndReceiveReportListResponseBodyDataList;
class QueryRemindResultsResponseBodyDataListToGroups extends $tea.Model {
    static names() {
        return {
            title: 'title',
        };
    }
    static types() {
        return {
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemindResultsResponseBodyDataListToGroups = QueryRemindResultsResponseBodyDataListToGroups;
class QueryRemindResultsResponseBodyDataList extends $tea.Model {
    static names() {
        return {
            creatorId: 'creatorId',
            endDateTime: 'endDateTime',
            modifierId: 'modifierId',
            periodType: 'periodType',
            remindId: 'remindId',
            startDateTime: 'startDateTime',
            templateId: 'templateId',
            toGroups: 'toGroups',
        };
    }
    static types() {
        return {
            creatorId: 'string',
            endDateTime: { 'type': 'array', 'itemType': 'string' },
            modifierId: 'string',
            periodType: 'number',
            remindId: 'number',
            startDateTime: { 'type': 'array', 'itemType': 'string' },
            templateId: 'string',
            toGroups: { 'type': 'array', 'itemType': QueryRemindResultsResponseBodyDataListToGroups },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRemindResultsResponseBodyDataList = QueryRemindResultsResponseBodyDataList;
class QueryReportDetailResponseBodyContent extends $tea.Model {
    static names() {
        return {
            images: 'images',
            key: 'key',
            sort: 'sort',
            type: 'type',
            value: 'value',
        };
    }
    static types() {
        return {
            images: { 'type': 'array', 'itemType': 'string' },
            key: 'string',
            sort: 'string',
            type: 'string',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryReportDetailResponseBodyContent = QueryReportDetailResponseBodyContent;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 创建模板
     *
     * @param request CreateTemplatesRequest
     * @param headers CreateTemplatesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateTemplatesResponse
     */
    async createTemplatesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.allowAddReceivers)) {
            body["allowAddReceivers"] = request.allowAddReceivers;
        }
        if (!tea_util_1.default.isUnset(request.allowEdit)) {
            body["allowEdit"] = request.allowEdit;
        }
        if (!tea_util_1.default.isUnset(request.allowGetLocation)) {
            body["allowGetLocation"] = request.allowGetLocation;
        }
        if (!tea_util_1.default.isUnset(request.authDeptIds)) {
            body["authDeptIds"] = request.authDeptIds;
        }
        if (!tea_util_1.default.isUnset(request.authUserIds)) {
            body["authUserIds"] = request.authUserIds;
        }
        if (!tea_util_1.default.isUnset(request.creator)) {
            body["creator"] = request.creator;
        }
        if (!tea_util_1.default.isUnset(request.defaultReceivedCids)) {
            body["defaultReceivedCids"] = request.defaultReceivedCids;
        }
        if (!tea_util_1.default.isUnset(request.defaultReceivedMasterLevels)) {
            body["defaultReceivedMasterLevels"] = request.defaultReceivedMasterLevels;
        }
        if (!tea_util_1.default.isUnset(request.defaultReceivers)) {
            body["defaultReceivers"] = request.defaultReceivers;
        }
        if (!tea_util_1.default.isUnset(request.fields)) {
            body["fields"] = request.fields;
        }
        if (!tea_util_1.default.isUnset(request.logo)) {
            body["logo"] = request.logo;
        }
        if (!tea_util_1.default.isUnset(request.maxWordCount)) {
            body["maxWordCount"] = request.maxWordCount;
        }
        if (!tea_util_1.default.isUnset(request.minWordCount)) {
            body["minWordCount"] = request.minWordCount;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.templateManagers)) {
            body["templateManagers"] = request.templateManagers;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTemplates",
            version: "report_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/report/templates`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTemplatesResponse({}));
    }
    /**
     * @summary 创建模板
     *
     * @param request CreateTemplatesRequest
     * @return CreateTemplatesResponse
     */
    async createTemplates(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTemplatesHeaders({});
        return await this.createTemplatesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询员工提交和收到的日志列表
     *
     * @param request GetSendAndReceiveReportListRequest
     * @param headers GetSendAndReceiveReportListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSendAndReceiveReportListResponse
     */
    async getSendAndReceiveReportListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operationUserId)) {
            query["operationUserId"] = request.operationUserId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSendAndReceiveReportList",
            version: "report_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/report/users/sendAndReceiveLists`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSendAndReceiveReportListResponse({}));
    }
    /**
     * @summary 查询员工提交和收到的日志列表
     *
     * @param request GetSendAndReceiveReportListRequest
     * @return GetSendAndReceiveReportListResponse
     */
    async getSendAndReceiveReportList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSendAndReceiveReportListHeaders({});
        return await this.getSendAndReceiveReportListWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取指定周期的提交统计结果
     *
     * @param request GetSubmitStatisticsRequest
     * @param headers GetSubmitStatisticsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSubmitStatisticsResponse
     */
    async getSubmitStatisticsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            query["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.operationUserId)) {
            query["operationUserId"] = request.operationUserId;
        }
        if (!tea_util_1.default.isUnset(request.remindId)) {
            query["remindId"] = request.remindId;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            query["templateId"] = request.templateId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSubmitStatistics",
            version: "report_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/report/submitStatisticalResults`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSubmitStatisticsResponse({}));
    }
    /**
     * @summary 获取指定周期的提交统计结果
     *
     * @param request GetSubmitStatisticsRequest
     * @return GetSubmitStatisticsResponse
     */
    async getSubmitStatistics(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSubmitStatisticsHeaders({});
        return await this.getSubmitStatisticsWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取创建的统计规则信息
     *
     * @param request QueryRemindResultsRequest
     * @param headers QueryRemindResultsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRemindResultsResponse
     */
    async queryRemindResultsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operationUserId)) {
            query["operationUserId"] = request.operationUserId;
        }
        if (!tea_util_1.default.isUnset(request.templateId)) {
            query["templateId"] = request.templateId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryRemindResults",
            version: "report_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/report/statisticalRules/results`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryRemindResultsResponse({}));
    }
    /**
     * @summary 获取创建的统计规则信息
     *
     * @param request QueryRemindResultsRequest
     * @return QueryRemindResultsResponse
     */
    async queryRemindResults(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRemindResultsHeaders({});
        return await this.queryRemindResultsWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取日志详情
     *
     * @param request QueryReportDetailRequest
     * @param headers QueryReportDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryReportDetailResponse
     */
    async queryReportDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.reportId)) {
            query["reportId"] = request.reportId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryReportDetail",
            version: "report_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/report/details`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryReportDetailResponse({}));
    }
    /**
     * @summary 获取日志详情
     *
     * @param request QueryReportDetailRequest
     * @return QueryReportDetailResponse
     */
    async queryReportDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryReportDetailHeaders({});
        return await this.queryReportDetailWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map