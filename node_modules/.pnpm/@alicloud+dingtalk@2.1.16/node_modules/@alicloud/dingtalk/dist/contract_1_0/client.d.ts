/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class ContractBenefitConsumeHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractBenefitConsumeRequest extends $tea.Model {
    benefitPoint?: string;
    bizRequestId?: string;
    consumeQuota?: number;
    corpId?: string;
    extParams?: {
        [key: string]: string;
    };
    isvCorpId?: string;
    optUnionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractBenefitConsumeResponseBody extends $tea.Model {
    result?: ContractBenefitConsumeResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractBenefitConsumeResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ContractBenefitConsumeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoRequest extends $tea.Model {
    corpId?: string;
    esignFlowId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoResponseBody extends $tea.Model {
    result?: EsignQueryApprovalInfoResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignQueryApprovalInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoRequest extends $tea.Model {
    corpId?: string;
    extension?: {
        [key: string]: string;
    };
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoResponseBody extends $tea.Model {
    result?: EsignQueryGrantInfoResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignQueryGrantInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketRequest extends $tea.Model {
    corpId?: string;
    extension?: {
        [key: string]: string;
    };
    ticket?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketResponseBody extends $tea.Model {
    result?: EsignQueryIdentityByTicketResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignQueryIdentityByTicketResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventRequest extends $tea.Model {
    action?: string;
    corpId?: string;
    esignData?: string;
    extension?: {
        [key: string]: string;
    };
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventResponseBody extends $tea.Model {
    result?: EsignSyncEventResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EsignSyncEventResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionRequest extends $tea.Model {
    corpId?: string;
    extension?: {
        [key: string]: string;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionResponseBody extends $tea.Model {
    result?: QueryAdvancedContractVersionResponseBodyResult;
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryAdvancedContractVersionResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardRequest extends $tea.Model {
    cardType?: string;
    contractInfo?: SendContractCardRequestContractInfo;
    corpId?: string;
    extension?: {
        [key: string]: string;
    };
    processInstanceId?: string;
    receiveGroups?: string[];
    receivers?: SendContractCardRequestReceivers[];
    sender?: SendContractCardRequestSender;
    syncSingleChat?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardResponseBody extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SendContractCardResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ContractBenefitConsumeResponseBodyResult extends $tea.Model {
    consumeResult?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryApprovalInfoResponseBodyResult extends $tea.Model {
    bpmsProcessBusinessId?: string;
    bpmsProcessInstanceId?: string;
    bpmsProcessInstanceUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryGrantInfoResponseBodyResult extends $tea.Model {
    legalPerson?: string;
    mobilePhoneNumber?: string;
    orgName?: string;
    stateCode?: string;
    unifiedSocialCredit?: string;
    userName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignQueryIdentityByTicketResponseBodyResult extends $tea.Model {
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EsignSyncEventResponseBodyResult extends $tea.Model {
    message?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryAdvancedContractVersionResponseBodyResult extends $tea.Model {
    enableEsignAttachmentSign?: boolean;
    extension?: {
        [key: string]: string;
    };
    version?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardRequestContractInfo extends $tea.Model {
    contractCode?: string;
    contractName?: string;
    createTime?: number;
    signUserName?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardRequestReceivers extends $tea.Model {
    corpId?: string;
    userId?: string;
    userType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SendContractCardRequestSender extends $tea.Model {
    corpId?: string;
    userId?: string;
    userType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 合同权益核销
     *
     * @param request ContractBenefitConsumeRequest
     * @param headers ContractBenefitConsumeHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ContractBenefitConsumeResponse
     */
    contractBenefitConsumeWithOptions(request: ContractBenefitConsumeRequest, headers: ContractBenefitConsumeHeaders, runtime: $Util.RuntimeOptions): Promise<ContractBenefitConsumeResponse>;
    /**
     * @summary 合同权益核销
     *
     * @param request ContractBenefitConsumeRequest
     * @return ContractBenefitConsumeResponse
     */
    contractBenefitConsume(request: ContractBenefitConsumeRequest): Promise<ContractBenefitConsumeResponse>;
    /**
     * @summary 天谷侧查询审批单
     *
     * @param request EsignQueryApprovalInfoRequest
     * @param headers EsignQueryApprovalInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EsignQueryApprovalInfoResponse
     */
    esignQueryApprovalInfoWithOptions(request: EsignQueryApprovalInfoRequest, headers: EsignQueryApprovalInfoHeaders, runtime: $Util.RuntimeOptions): Promise<EsignQueryApprovalInfoResponse>;
    /**
     * @summary 天谷侧查询审批单
     *
     * @param request EsignQueryApprovalInfoRequest
     * @return EsignQueryApprovalInfoResponse
     */
    esignQueryApprovalInfo(request: EsignQueryApprovalInfoRequest): Promise<EsignQueryApprovalInfoResponse>;
    /**
     * @summary 天谷侧查询授权信息接口
     *
     * @param request EsignQueryGrantInfoRequest
     * @param headers EsignQueryGrantInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EsignQueryGrantInfoResponse
     */
    esignQueryGrantInfoWithOptions(request: EsignQueryGrantInfoRequest, headers: EsignQueryGrantInfoHeaders, runtime: $Util.RuntimeOptions): Promise<EsignQueryGrantInfoResponse>;
    /**
     * @summary 天谷侧查询授权信息接口
     *
     * @param request EsignQueryGrantInfoRequest
     * @return EsignQueryGrantInfoResponse
     */
    esignQueryGrantInfo(request: EsignQueryGrantInfoRequest): Promise<EsignQueryGrantInfoResponse>;
    /**
     * @summary 天谷侧查询获取免登信息
     *
     * @param request EsignQueryIdentityByTicketRequest
     * @param headers EsignQueryIdentityByTicketHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EsignQueryIdentityByTicketResponse
     */
    esignQueryIdentityByTicketWithOptions(request: EsignQueryIdentityByTicketRequest, headers: EsignQueryIdentityByTicketHeaders, runtime: $Util.RuntimeOptions): Promise<EsignQueryIdentityByTicketResponse>;
    /**
     * @summary 天谷侧查询获取免登信息
     *
     * @param request EsignQueryIdentityByTicketRequest
     * @return EsignQueryIdentityByTicketResponse
     */
    esignQueryIdentityByTicket(request: EsignQueryIdentityByTicketRequest): Promise<EsignQueryIdentityByTicketResponse>;
    /**
     * @summary e签宝电子签事件同步回传接口
     *
     * @param request EsignSyncEventRequest
     * @param headers EsignSyncEventHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EsignSyncEventResponse
     */
    esignSyncEventWithOptions(request: EsignSyncEventRequest, headers: EsignSyncEventHeaders, runtime: $Util.RuntimeOptions): Promise<EsignSyncEventResponse>;
    /**
     * @summary e签宝电子签事件同步回传接口
     *
     * @param request EsignSyncEventRequest
     * @return EsignSyncEventResponse
     */
    esignSyncEvent(request: EsignSyncEventRequest): Promise<EsignSyncEventResponse>;
    /**
     * @summary e签宝查询智能合同版本接口
     *
     * @param request QueryAdvancedContractVersionRequest
     * @param headers QueryAdvancedContractVersionHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryAdvancedContractVersionResponse
     */
    queryAdvancedContractVersionWithOptions(request: QueryAdvancedContractVersionRequest, headers: QueryAdvancedContractVersionHeaders, runtime: $Util.RuntimeOptions): Promise<QueryAdvancedContractVersionResponse>;
    /**
     * @summary e签宝查询智能合同版本接口
     *
     * @param request QueryAdvancedContractVersionRequest
     * @return QueryAdvancedContractVersionResponse
     */
    queryAdvancedContractVersion(request: QueryAdvancedContractVersionRequest): Promise<QueryAdvancedContractVersionResponse>;
    /**
     * @summary 发送合同相关卡片
     *
     * @param request SendContractCardRequest
     * @param headers SendContractCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SendContractCardResponse
     */
    sendContractCardWithOptions(request: SendContractCardRequest, headers: SendContractCardHeaders, runtime: $Util.RuntimeOptions): Promise<SendContractCardResponse>;
    /**
     * @summary 发送合同相关卡片
     *
     * @param request SendContractCardRequest
     * @return SendContractCardResponse
     */
    sendContractCard(request: SendContractCardRequest): Promise<SendContractCardResponse>;
}
