"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryLiveInfoHeaders = exports.QueryFeedWhiteListResponse = exports.QueryFeedWhiteListResponseBody = exports.QueryFeedWhiteListRequest = exports.QueryFeedWhiteListHeaders = exports.ModifyFeedWhiteListResponse = exports.ModifyFeedWhiteListResponseBody = exports.ModifyFeedWhiteListShrinkRequest = exports.ModifyFeedWhiteListRequest = exports.ModifyFeedWhiteListHeaders = exports.GetUserWatchLiveListResponse = exports.GetUserWatchLiveListResponseBody = exports.GetUserWatchLiveListRequest = exports.GetUserWatchLiveListHeaders = exports.GetUserCreateLiveListResponse = exports.GetUserCreateLiveListResponseBody = exports.GetUserCreateLiveListRequest = exports.GetUserCreateLiveListHeaders = exports.GetUserAllLiveListResponse = exports.GetUserAllLiveListResponseBody = exports.GetUserAllLiveListRequest = exports.GetUserAllLiveListHeaders = exports.GetLiveReplayUrlResponse = exports.GetLiveReplayUrlResponseBody = exports.GetLiveReplayUrlRequest = exports.GetLiveReplayUrlHeaders = exports.EditFeedReplayResponse = exports.EditFeedReplayResponseBody = exports.EditFeedReplayRequest = exports.EditFeedReplayHeaders = exports.DeleteLiveFeedResponse = exports.DeleteLiveFeedResponseBody = exports.DeleteLiveFeedRequest = exports.DeleteLiveFeedHeaders = exports.DeleteLiveResponse = exports.DeleteLiveResponseBody = exports.DeleteLiveRequest = exports.DeleteLiveHeaders = exports.CreateLiveResponse = exports.CreateLiveResponseBody = exports.CreateLiveRequest = exports.CreateLiveHeaders = exports.CreateCloudFeedResponse = exports.CreateCloudFeedResponseBody = exports.CreateCloudFeedRequest = exports.CreateCloudFeedHeaders = exports.AddShareCidListResponse = exports.AddShareCidListResponseBody = exports.AddShareCidListRequest = exports.AddShareCidListHeaders = void 0;
exports.GetUserWatchLiveListResponseBodyResultLiveInfoPopModelList = exports.GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo = exports.GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListExtraInfo = exports.GetUserCreateLiveListResponseBodyResult = exports.GetUserCreateLiveListResponseBodyResultLiveInfoPopModelList = exports.GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo = exports.GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListHasSubscribed = exports.GetUserAllLiveListResponseBodyResult = exports.GetUserAllLiveListResponseBodyResultLiveInfoPopModelList = exports.GetUserAllLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo = exports.GetUserAllLiveListResponseBodyResultLiveInfoPopModelListExtraInfo = exports.GetLiveReplayUrlResponseBodyResult = exports.DeleteLiveResponseBodyResult = exports.CreateLiveResponseBodyResult = exports.UpdateLiveFeedResponse = exports.UpdateLiveFeedResponseBody = exports.UpdateLiveFeedRequest = exports.UpdateLiveFeedHeaders = exports.UpdateLiveResponse = exports.UpdateLiveResponseBody = exports.UpdateLiveRequest = exports.UpdateLiveHeaders = exports.SubscribeLiveResponse = exports.SubscribeLiveResponseBody = exports.SubscribeLiveRequest = exports.SubscribeLiveHeaders = exports.StopCloudFeedResponse = exports.StopCloudFeedResponseBody = exports.StopCloudFeedRequest = exports.StopCloudFeedHeaders = exports.StartCloudFeedResponse = exports.StartCloudFeedResponseBody = exports.StartCloudFeedRequest = exports.StartCloudFeedHeaders = exports.QuerySubscribeStatusResponse = exports.QuerySubscribeStatusResponseBody = exports.QuerySubscribeStatusShrinkRequest = exports.QuerySubscribeStatusRequest = exports.QuerySubscribeStatusHeaders = exports.QueryLiveWatchUserListResponse = exports.QueryLiveWatchUserListResponseBody = exports.QueryLiveWatchUserListRequest = exports.QueryLiveWatchUserListHeaders = exports.QueryLiveWatchDetailResponse = exports.QueryLiveWatchDetailResponseBody = exports.QueryLiveWatchDetailRequest = exports.QueryLiveWatchDetailHeaders = exports.QueryLiveInfoResponse = exports.QueryLiveInfoResponseBody = exports.QueryLiveInfoRequest = void 0;
exports.UpdateLiveResponseBodyResult = exports.SubscribeLiveResponseBodyResult = exports.QuerySubscribeStatusResponseBodyResult = exports.QuerySubscribeStatusResponseBodyResultSubscribeStatusDTOS = exports.QuerySubscribeStatusRequestBody = exports.QueryLiveWatchUserListResponseBodyResult = exports.QueryLiveWatchUserListResponseBodyResultOutOrgUserList = exports.QueryLiveWatchUserListResponseBodyResultOrgUsesList = exports.QueryLiveWatchDetailResponseBodyResult = exports.QueryLiveInfoResponseBodyResult = exports.QueryLiveInfoResponseBodyResultLiveInfo = exports.GetUserWatchLiveListResponseBodyResult = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class AddShareCidListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddShareCidListHeaders = AddShareCidListHeaders;
class AddShareCidListRequest extends $tea.Model {
    static names() {
        return {
            groupIdType: 'groupIdType',
            groupIds: 'groupIds',
            userId: 'userId',
        };
    }
    static types() {
        return {
            groupIdType: 'number',
            groupIds: { 'type': 'array', 'itemType': 'string' },
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddShareCidListRequest = AddShareCidListRequest;
class AddShareCidListResponseBody extends $tea.Model {
    static names() {
        return {
            hasShareSuccess: 'hasShareSuccess',
            shareSuccessGroupList: 'shareSuccessGroupList',
        };
    }
    static types() {
        return {
            hasShareSuccess: 'boolean',
            shareSuccessGroupList: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddShareCidListResponseBody = AddShareCidListResponseBody;
class AddShareCidListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AddShareCidListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AddShareCidListResponse = AddShareCidListResponse;
class CreateCloudFeedHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCloudFeedHeaders = CreateCloudFeedHeaders;
class CreateCloudFeedRequest extends $tea.Model {
    static names() {
        return {
            coverUrl: 'coverUrl',
            intro: 'intro',
            startTime: 'startTime',
            title: 'title',
            userId: 'userId',
            videoUrl: 'videoUrl',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            intro: 'string',
            startTime: 'number',
            title: 'string',
            userId: 'string',
            videoUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCloudFeedRequest = CreateCloudFeedRequest;
class CreateCloudFeedResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCloudFeedResponseBody = CreateCloudFeedResponseBody;
class CreateCloudFeedResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCloudFeedResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCloudFeedResponse = CreateCloudFeedResponse;
class CreateLiveHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateLiveHeaders = CreateLiveHeaders;
class CreateLiveRequest extends $tea.Model {
    static names() {
        return {
            coverUrl: 'coverUrl',
            introduction: 'introduction',
            preEndTime: 'preEndTime',
            preStartTime: 'preStartTime',
            publicType: 'publicType',
            title: 'title',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            introduction: 'string',
            preEndTime: 'number',
            preStartTime: 'number',
            publicType: 'number',
            title: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateLiveRequest = CreateLiveRequest;
class CreateLiveResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: CreateLiveResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateLiveResponseBody = CreateLiveResponseBody;
class CreateLiveResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateLiveResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateLiveResponse = CreateLiveResponse;
class DeleteLiveHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteLiveHeaders = DeleteLiveHeaders;
class DeleteLiveRequest extends $tea.Model {
    static names() {
        return {
            liveId: 'liveId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            liveId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteLiveRequest = DeleteLiveRequest;
class DeleteLiveResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: DeleteLiveResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteLiveResponseBody = DeleteLiveResponseBody;
class DeleteLiveResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteLiveResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteLiveResponse = DeleteLiveResponse;
class DeleteLiveFeedHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteLiveFeedHeaders = DeleteLiveFeedHeaders;
class DeleteLiveFeedRequest extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteLiveFeedRequest = DeleteLiveFeedRequest;
class DeleteLiveFeedResponseBody extends $tea.Model {
    static names() {
        return {
            hasDelete: 'hasDelete',
        };
    }
    static types() {
        return {
            hasDelete: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteLiveFeedResponseBody = DeleteLiveFeedResponseBody;
class DeleteLiveFeedResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeleteLiveFeedResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteLiveFeedResponse = DeleteLiveFeedResponse;
class EditFeedReplayHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditFeedReplayHeaders = EditFeedReplayHeaders;
class EditFeedReplayRequest extends $tea.Model {
    static names() {
        return {
            editEndTime: 'editEndTime',
            editStartTime: 'editStartTime',
            userId: 'userId',
        };
    }
    static types() {
        return {
            editEndTime: 'number',
            editStartTime: 'number',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditFeedReplayRequest = EditFeedReplayRequest;
class EditFeedReplayResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditFeedReplayResponseBody = EditFeedReplayResponseBody;
class EditFeedReplayResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: EditFeedReplayResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.EditFeedReplayResponse = EditFeedReplayResponse;
class GetLiveReplayUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetLiveReplayUrlHeaders = GetLiveReplayUrlHeaders;
class GetLiveReplayUrlRequest extends $tea.Model {
    static names() {
        return {
            liveId: 'liveId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            liveId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetLiveReplayUrlRequest = GetLiveReplayUrlRequest;
class GetLiveReplayUrlResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: GetLiveReplayUrlResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetLiveReplayUrlResponseBody = GetLiveReplayUrlResponseBody;
class GetLiveReplayUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetLiveReplayUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetLiveReplayUrlResponse = GetLiveReplayUrlResponse;
class GetUserAllLiveListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAllLiveListHeaders = GetUserAllLiveListHeaders;
class GetUserAllLiveListRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
            statuses: 'statuses',
            title: 'title',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            endTime: 'number',
            startTime: 'number',
            statuses: { 'type': 'array', 'itemType': 'number' },
            title: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAllLiveListRequest = GetUserAllLiveListRequest;
class GetUserAllLiveListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: GetUserAllLiveListResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAllLiveListResponseBody = GetUserAllLiveListResponseBody;
class GetUserAllLiveListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserAllLiveListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAllLiveListResponse = GetUserAllLiveListResponse;
class GetUserCreateLiveListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserCreateLiveListHeaders = GetUserCreateLiveListHeaders;
class GetUserCreateLiveListRequest extends $tea.Model {
    static names() {
        return {
            endTime: 'endTime',
            startTime: 'startTime',
            statuses: 'statuses',
            title: 'title',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            endTime: 'number',
            startTime: 'number',
            statuses: { 'type': 'array', 'itemType': 'number' },
            title: 'string',
            maxResults: 'number',
            nextToken: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserCreateLiveListRequest = GetUserCreateLiveListRequest;
class GetUserCreateLiveListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: GetUserCreateLiveListResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserCreateLiveListResponseBody = GetUserCreateLiveListResponseBody;
class GetUserCreateLiveListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserCreateLiveListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserCreateLiveListResponse = GetUserCreateLiveListResponse;
class GetUserWatchLiveListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserWatchLiveListHeaders = GetUserWatchLiveListHeaders;
class GetUserWatchLiveListRequest extends $tea.Model {
    static names() {
        return {
            filterType: 'filterType',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            filterType: 'number',
            maxResults: 'number',
            nextToken: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserWatchLiveListRequest = GetUserWatchLiveListRequest;
class GetUserWatchLiveListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: GetUserWatchLiveListResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserWatchLiveListResponseBody = GetUserWatchLiveListResponseBody;
class GetUserWatchLiveListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserWatchLiveListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserWatchLiveListResponse = GetUserWatchLiveListResponse;
class ModifyFeedWhiteListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ModifyFeedWhiteListHeaders = ModifyFeedWhiteListHeaders;
class ModifyFeedWhiteListRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            modifyUserList: 'modifyUserList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            action: 'number',
            modifyUserList: { 'type': 'array', 'itemType': 'string' },
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ModifyFeedWhiteListRequest = ModifyFeedWhiteListRequest;
class ModifyFeedWhiteListShrinkRequest extends $tea.Model {
    static names() {
        return {
            action: 'action',
            modifyUserListShrink: 'modifyUserList',
            userId: 'userId',
        };
    }
    static types() {
        return {
            action: 'number',
            modifyUserListShrink: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ModifyFeedWhiteListShrinkRequest = ModifyFeedWhiteListShrinkRequest;
class ModifyFeedWhiteListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ModifyFeedWhiteListResponseBody = ModifyFeedWhiteListResponseBody;
class ModifyFeedWhiteListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ModifyFeedWhiteListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ModifyFeedWhiteListResponse = ModifyFeedWhiteListResponse;
class QueryFeedWhiteListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryFeedWhiteListHeaders = QueryFeedWhiteListHeaders;
class QueryFeedWhiteListRequest extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryFeedWhiteListRequest = QueryFeedWhiteListRequest;
class QueryFeedWhiteListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryFeedWhiteListResponseBody = QueryFeedWhiteListResponseBody;
class QueryFeedWhiteListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryFeedWhiteListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryFeedWhiteListResponse = QueryFeedWhiteListResponse;
class QueryLiveInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveInfoHeaders = QueryLiveInfoHeaders;
class QueryLiveInfoRequest extends $tea.Model {
    static names() {
        return {
            liveId: 'liveId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            liveId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveInfoRequest = QueryLiveInfoRequest;
class QueryLiveInfoResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryLiveInfoResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveInfoResponseBody = QueryLiveInfoResponseBody;
class QueryLiveInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryLiveInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveInfoResponse = QueryLiveInfoResponse;
class QueryLiveWatchDetailHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchDetailHeaders = QueryLiveWatchDetailHeaders;
class QueryLiveWatchDetailRequest extends $tea.Model {
    static names() {
        return {
            liveId: 'liveId',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            liveId: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchDetailRequest = QueryLiveWatchDetailRequest;
class QueryLiveWatchDetailResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryLiveWatchDetailResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchDetailResponseBody = QueryLiveWatchDetailResponseBody;
class QueryLiveWatchDetailResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryLiveWatchDetailResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchDetailResponse = QueryLiveWatchDetailResponse;
class QueryLiveWatchUserListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchUserListHeaders = QueryLiveWatchUserListHeaders;
class QueryLiveWatchUserListRequest extends $tea.Model {
    static names() {
        return {
            liveId: 'liveId',
            pageNumber: 'pageNumber',
            pageSize: 'pageSize',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            liveId: 'string',
            pageNumber: 'number',
            pageSize: 'number',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchUserListRequest = QueryLiveWatchUserListRequest;
class QueryLiveWatchUserListResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QueryLiveWatchUserListResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchUserListResponseBody = QueryLiveWatchUserListResponseBody;
class QueryLiveWatchUserListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryLiveWatchUserListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchUserListResponse = QueryLiveWatchUserListResponse;
class QuerySubscribeStatusHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubscribeStatusHeaders = QuerySubscribeStatusHeaders;
class QuerySubscribeStatusRequest extends $tea.Model {
    static names() {
        return {
            body: 'body',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            body: QuerySubscribeStatusRequestBody,
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubscribeStatusRequest = QuerySubscribeStatusRequest;
class QuerySubscribeStatusShrinkRequest extends $tea.Model {
    static names() {
        return {
            bodyShrink: 'body',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            bodyShrink: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubscribeStatusShrinkRequest = QuerySubscribeStatusShrinkRequest;
class QuerySubscribeStatusResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: QuerySubscribeStatusResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubscribeStatusResponseBody = QuerySubscribeStatusResponseBody;
class QuerySubscribeStatusResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QuerySubscribeStatusResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubscribeStatusResponse = QuerySubscribeStatusResponse;
class StartCloudFeedHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCloudFeedHeaders = StartCloudFeedHeaders;
class StartCloudFeedRequest extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCloudFeedRequest = StartCloudFeedRequest;
class StartCloudFeedResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCloudFeedResponseBody = StartCloudFeedResponseBody;
class StartCloudFeedResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StartCloudFeedResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StartCloudFeedResponse = StartCloudFeedResponse;
class StopCloudFeedHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StopCloudFeedHeaders = StopCloudFeedHeaders;
class StopCloudFeedRequest extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StopCloudFeedRequest = StopCloudFeedRequest;
class StopCloudFeedResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StopCloudFeedResponseBody = StopCloudFeedResponseBody;
class StopCloudFeedResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StopCloudFeedResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StopCloudFeedResponse = StopCloudFeedResponse;
class SubscribeLiveHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeLiveHeaders = SubscribeLiveHeaders;
class SubscribeLiveRequest extends $tea.Model {
    static names() {
        return {
            liveId: 'liveId',
            subscribe: 'subscribe',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            liveId: 'string',
            subscribe: 'boolean',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeLiveRequest = SubscribeLiveRequest;
class SubscribeLiveResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: SubscribeLiveResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeLiveResponseBody = SubscribeLiveResponseBody;
class SubscribeLiveResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SubscribeLiveResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeLiveResponse = SubscribeLiveResponse;
class UpdateLiveHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateLiveHeaders = UpdateLiveHeaders;
class UpdateLiveRequest extends $tea.Model {
    static names() {
        return {
            coverUrl: 'coverUrl',
            introduction: 'introduction',
            liveId: 'liveId',
            preEndTime: 'preEndTime',
            preStartTime: 'preStartTime',
            title: 'title',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            introduction: 'string',
            liveId: 'string',
            preEndTime: 'number',
            preStartTime: 'number',
            title: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateLiveRequest = UpdateLiveRequest;
class UpdateLiveResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
        };
    }
    static types() {
        return {
            result: UpdateLiveResponseBodyResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateLiveResponseBody = UpdateLiveResponseBody;
class UpdateLiveResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateLiveResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateLiveResponse = UpdateLiveResponse;
class UpdateLiveFeedHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateLiveFeedHeaders = UpdateLiveFeedHeaders;
class UpdateLiveFeedRequest extends $tea.Model {
    static names() {
        return {
            coverUrl: 'coverUrl',
            introduction: 'introduction',
            startTime: 'startTime',
            title: 'title',
            userId: 'userId',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            introduction: 'string',
            startTime: 'number',
            title: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateLiveFeedRequest = UpdateLiveFeedRequest;
class UpdateLiveFeedResponseBody extends $tea.Model {
    static names() {
        return {
            hasUpdate: 'hasUpdate',
        };
    }
    static types() {
        return {
            hasUpdate: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateLiveFeedResponseBody = UpdateLiveFeedResponseBody;
class UpdateLiveFeedResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateLiveFeedResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateLiveFeedResponse = UpdateLiveFeedResponse;
class CreateLiveResponseBodyResult extends $tea.Model {
    static names() {
        return {
            liveId: 'liveId',
        };
    }
    static types() {
        return {
            liveId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateLiveResponseBodyResult = CreateLiveResponseBodyResult;
class DeleteLiveResponseBodyResult extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteLiveResponseBodyResult = DeleteLiveResponseBodyResult;
class GetLiveReplayUrlResponseBodyResult extends $tea.Model {
    static names() {
        return {
            replayUrl: 'replayUrl',
        };
    }
    static types() {
        return {
            replayUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetLiveReplayUrlResponseBodyResult = GetLiveReplayUrlResponseBodyResult;
class GetUserAllLiveListResponseBodyResultLiveInfoPopModelListExtraInfo extends $tea.Model {
    static names() {
        return {
            hasSubscribed: 'hasSubscribed',
            isForecastExpired: 'isForecastExpired',
            watchProgressMs: 'watchProgressMs',
        };
    }
    static types() {
        return {
            hasSubscribed: 'boolean',
            isForecastExpired: 'boolean',
            watchProgressMs: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAllLiveListResponseBodyResultLiveInfoPopModelListExtraInfo = GetUserAllLiveListResponseBodyResultLiveInfoPopModelListExtraInfo;
class GetUserAllLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo extends $tea.Model {
    static names() {
        return {
            coverUrl: 'coverUrl',
            duration: 'duration',
            endTime: 'endTime',
            introduction: 'introduction',
            liveId: 'liveId',
            livePlayUrl: 'livePlayUrl',
            liveStatus: 'liveStatus',
            startTime: 'startTime',
            subscribeCount: 'subscribeCount',
            title: 'title',
            unionId: 'unionId',
            uv: 'uv',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            duration: 'number',
            endTime: 'number',
            introduction: 'string',
            liveId: 'string',
            livePlayUrl: 'string',
            liveStatus: 'number',
            startTime: 'number',
            subscribeCount: 'number',
            title: 'string',
            unionId: 'string',
            uv: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAllLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo = GetUserAllLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo;
class GetUserAllLiveListResponseBodyResultLiveInfoPopModelList extends $tea.Model {
    static names() {
        return {
            extraInfo: 'extraInfo',
            liveBasicInfo: 'liveBasicInfo',
        };
    }
    static types() {
        return {
            extraInfo: GetUserAllLiveListResponseBodyResultLiveInfoPopModelListExtraInfo,
            liveBasicInfo: GetUserAllLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAllLiveListResponseBodyResultLiveInfoPopModelList = GetUserAllLiveListResponseBodyResultLiveInfoPopModelList;
class GetUserAllLiveListResponseBodyResult extends $tea.Model {
    static names() {
        return {
            hasFinish: 'hasFinish',
            liveInfoPopModelList: 'liveInfoPopModelList',
        };
    }
    static types() {
        return {
            hasFinish: 'boolean',
            liveInfoPopModelList: { 'type': 'array', 'itemType': GetUserAllLiveListResponseBodyResultLiveInfoPopModelList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserAllLiveListResponseBodyResult = GetUserAllLiveListResponseBodyResult;
class GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListHasSubscribed extends $tea.Model {
    static names() {
        return {
            hasSubscribed: 'hasSubscribed',
            isForecastExpired: 'isForecastExpired',
            watchProgressMs: 'watchProgressMs',
        };
    }
    static types() {
        return {
            hasSubscribed: 'boolean',
            isForecastExpired: 'boolean',
            watchProgressMs: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListHasSubscribed = GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListHasSubscribed;
class GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo extends $tea.Model {
    static names() {
        return {
            coverUrl: 'coverUrl',
            duration: 'duration',
            endTime: 'endTime',
            introduction: 'introduction',
            liveId: 'liveId',
            livePlayUrl: 'livePlayUrl',
            liveStatus: 'liveStatus',
            startTime: 'startTime',
            subscribeCount: 'subscribeCount',
            title: 'title',
            unionId: 'unionId',
            uv: 'uv',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            duration: 'number',
            endTime: 'number',
            introduction: 'string',
            liveId: 'string',
            livePlayUrl: 'string',
            liveStatus: 'number',
            startTime: 'number',
            subscribeCount: 'number',
            title: 'string',
            unionId: 'string',
            uv: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo = GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo;
class GetUserCreateLiveListResponseBodyResultLiveInfoPopModelList extends $tea.Model {
    static names() {
        return {
            hasSubscribed: 'hasSubscribed',
            liveBasicInfo: 'liveBasicInfo',
        };
    }
    static types() {
        return {
            hasSubscribed: GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListHasSubscribed,
            liveBasicInfo: GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserCreateLiveListResponseBodyResultLiveInfoPopModelList = GetUserCreateLiveListResponseBodyResultLiveInfoPopModelList;
class GetUserCreateLiveListResponseBodyResult extends $tea.Model {
    static names() {
        return {
            hasFinish: 'hasFinish',
            liveInfoPopModelList: 'liveInfoPopModelList',
            nextToken: 'nextToken',
            total: 'total',
        };
    }
    static types() {
        return {
            hasFinish: 'boolean',
            liveInfoPopModelList: { 'type': 'array', 'itemType': GetUserCreateLiveListResponseBodyResultLiveInfoPopModelList },
            nextToken: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserCreateLiveListResponseBodyResult = GetUserCreateLiveListResponseBodyResult;
class GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListExtraInfo extends $tea.Model {
    static names() {
        return {
            hasSubscribed: 'hasSubscribed',
            isForecastExpired: 'isForecastExpired',
            watchProgressMs: 'watchProgressMs',
        };
    }
    static types() {
        return {
            hasSubscribed: 'boolean',
            isForecastExpired: 'boolean',
            watchProgressMs: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListExtraInfo = GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListExtraInfo;
class GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo extends $tea.Model {
    static names() {
        return {
            coverUrl: 'coverUrl',
            duration: 'duration',
            endTime: 'endTime',
            introduction: 'introduction',
            liveId: 'liveId',
            livePlayUrl: 'livePlayUrl',
            liveStatus: 'liveStatus',
            startTime: 'startTime',
            subscribeCount: 'subscribeCount',
            title: 'title',
            unionId: 'unionId',
            uv: 'uv',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            duration: 'number',
            endTime: 'number',
            introduction: 'string',
            liveId: 'string',
            livePlayUrl: 'string',
            liveStatus: 'number',
            startTime: 'number',
            subscribeCount: 'number',
            title: 'string',
            unionId: 'string',
            uv: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo = GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo;
class GetUserWatchLiveListResponseBodyResultLiveInfoPopModelList extends $tea.Model {
    static names() {
        return {
            extraInfo: 'extraInfo',
            liveBasicInfo: 'liveBasicInfo',
        };
    }
    static types() {
        return {
            extraInfo: GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListExtraInfo,
            liveBasicInfo: GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserWatchLiveListResponseBodyResultLiveInfoPopModelList = GetUserWatchLiveListResponseBodyResultLiveInfoPopModelList;
class GetUserWatchLiveListResponseBodyResult extends $tea.Model {
    static names() {
        return {
            hasFinish: 'hasFinish',
            liveInfoPopModelList: 'liveInfoPopModelList',
            nextToken: 'nextToken',
            total: 'total',
        };
    }
    static types() {
        return {
            hasFinish: 'boolean',
            liveInfoPopModelList: { 'type': 'array', 'itemType': GetUserWatchLiveListResponseBodyResultLiveInfoPopModelList },
            nextToken: 'string',
            total: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserWatchLiveListResponseBodyResult = GetUserWatchLiveListResponseBodyResult;
class QueryLiveInfoResponseBodyResultLiveInfo extends $tea.Model {
    static names() {
        return {
            coverUrl: 'coverUrl',
            duration: 'duration',
            endTime: 'endTime',
            introduction: 'introduction',
            liveId: 'liveId',
            livePlayUrl: 'livePlayUrl',
            liveStatus: 'liveStatus',
            playbackDuration: 'playbackDuration',
            startTime: 'startTime',
            subscribeCount: 'subscribeCount',
            title: 'title',
            unionId: 'unionId',
            uv: 'uv',
        };
    }
    static types() {
        return {
            coverUrl: 'string',
            duration: 'number',
            endTime: 'number',
            introduction: 'string',
            liveId: 'string',
            livePlayUrl: 'string',
            liveStatus: 'number',
            playbackDuration: 'number',
            startTime: 'number',
            subscribeCount: 'number',
            title: 'string',
            unionId: 'string',
            uv: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveInfoResponseBodyResultLiveInfo = QueryLiveInfoResponseBodyResultLiveInfo;
class QueryLiveInfoResponseBodyResult extends $tea.Model {
    static names() {
        return {
            liveInfo: 'liveInfo',
        };
    }
    static types() {
        return {
            liveInfo: QueryLiveInfoResponseBodyResultLiveInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveInfoResponseBodyResult = QueryLiveInfoResponseBodyResult;
class QueryLiveWatchDetailResponseBodyResult extends $tea.Model {
    static names() {
        return {
            avgWatchTime: 'avgWatchTime',
            liveUv: 'liveUv',
            msgCount: 'msgCount',
            playbackUv: 'playbackUv',
            praiseCount: 'praiseCount',
            pv: 'pv',
            totalWatchTime: 'totalWatchTime',
            uv: 'uv',
        };
    }
    static types() {
        return {
            avgWatchTime: 'number',
            liveUv: 'number',
            msgCount: 'number',
            playbackUv: 'number',
            praiseCount: 'number',
            pv: 'number',
            totalWatchTime: 'number',
            uv: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchDetailResponseBodyResult = QueryLiveWatchDetailResponseBodyResult;
class QueryLiveWatchUserListResponseBodyResultOrgUsesList extends $tea.Model {
    static names() {
        return {
            deptName: 'deptName',
            name: 'name',
            unionId: 'unionId',
            userId: 'userId',
            watchLiveTime: 'watchLiveTime',
            watchPlaybackTime: 'watchPlaybackTime',
            watchProgressMs: 'watchProgressMs',
        };
    }
    static types() {
        return {
            deptName: 'string',
            name: 'string',
            unionId: 'string',
            userId: 'string',
            watchLiveTime: 'number',
            watchPlaybackTime: 'number',
            watchProgressMs: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchUserListResponseBodyResultOrgUsesList = QueryLiveWatchUserListResponseBodyResultOrgUsesList;
class QueryLiveWatchUserListResponseBodyResultOutOrgUserList extends $tea.Model {
    static names() {
        return {
            name: 'name',
            watchLiveTime: 'watchLiveTime',
            watchPlaybackTime: 'watchPlaybackTime',
            watchProgressMs: 'watchProgressMs',
        };
    }
    static types() {
        return {
            name: 'string',
            watchLiveTime: 'number',
            watchPlaybackTime: 'number',
            watchProgressMs: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchUserListResponseBodyResultOutOrgUserList = QueryLiveWatchUserListResponseBodyResultOutOrgUserList;
class QueryLiveWatchUserListResponseBodyResult extends $tea.Model {
    static names() {
        return {
            orgUsesList: 'orgUsesList',
            outOrgUserList: 'outOrgUserList',
        };
    }
    static types() {
        return {
            orgUsesList: { 'type': 'array', 'itemType': QueryLiveWatchUserListResponseBodyResultOrgUsesList },
            outOrgUserList: { 'type': 'array', 'itemType': QueryLiveWatchUserListResponseBodyResultOutOrgUserList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryLiveWatchUserListResponseBodyResult = QueryLiveWatchUserListResponseBodyResult;
class QuerySubscribeStatusRequestBody extends $tea.Model {
    static names() {
        return {
            liveIds: 'liveIds',
        };
    }
    static types() {
        return {
            liveIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubscribeStatusRequestBody = QuerySubscribeStatusRequestBody;
class QuerySubscribeStatusResponseBodyResultSubscribeStatusDTOS extends $tea.Model {
    static names() {
        return {
            liveId: 'liveId',
            subscribe: 'subscribe',
        };
    }
    static types() {
        return {
            liveId: 'string',
            subscribe: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubscribeStatusResponseBodyResultSubscribeStatusDTOS = QuerySubscribeStatusResponseBodyResultSubscribeStatusDTOS;
class QuerySubscribeStatusResponseBodyResult extends $tea.Model {
    static names() {
        return {
            subscribeStatusDTOS: 'subscribeStatusDTOS',
        };
    }
    static types() {
        return {
            subscribeStatusDTOS: { 'type': 'array', 'itemType': QuerySubscribeStatusResponseBodyResultSubscribeStatusDTOS },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySubscribeStatusResponseBodyResult = QuerySubscribeStatusResponseBodyResult;
class SubscribeLiveResponseBodyResult extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SubscribeLiveResponseBodyResult = SubscribeLiveResponseBodyResult;
class UpdateLiveResponseBodyResult extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateLiveResponseBodyResult = UpdateLiveResponseBodyResult;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 添加云导播联播群列表
     *
     * @param request AddShareCidListRequest
     * @param headers AddShareCidListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddShareCidListResponse
     */
    async addShareCidListWithOptions(feedId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.groupIdType)) {
            body["groupIdType"] = request.groupIdType;
        }
        if (!tea_util_1.default.isUnset(request.groupIds)) {
            body["groupIds"] = request.groupIds;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AddShareCidList",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/cloudFeeds/${feedId}/share`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AddShareCidListResponse({}));
    }
    /**
     * @summary 添加云导播联播群列表
     *
     * @param request AddShareCidListRequest
     * @return AddShareCidListResponse
     */
    async addShareCidList(feedId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AddShareCidListHeaders({});
        return await this.addShareCidListWithOptions(feedId, request, headers, runtime);
    }
    /**
     * @summary 创建云导播课程
     *
     * @param request CreateCloudFeedRequest
     * @param headers CreateCloudFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCloudFeedResponse
     */
    async createCloudFeedWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coverUrl)) {
            body["coverUrl"] = request.coverUrl;
        }
        if (!tea_util_1.default.isUnset(request.intro)) {
            body["intro"] = request.intro;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.videoUrl)) {
            body["videoUrl"] = request.videoUrl;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCloudFeed",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/cloudFeeds`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCloudFeedResponse({}));
    }
    /**
     * @summary 创建云导播课程
     *
     * @param request CreateCloudFeedRequest
     * @return CreateCloudFeedResponse
     */
    async createCloudFeed(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCloudFeedHeaders({});
        return await this.createCloudFeedWithOptions(request, headers, runtime);
    }
    /**
     * @summary 创建直播
     *
     * @param request CreateLiveRequest
     * @param headers CreateLiveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateLiveResponse
     */
    async createLiveWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coverUrl)) {
            body["coverUrl"] = request.coverUrl;
        }
        if (!tea_util_1.default.isUnset(request.introduction)) {
            body["introduction"] = request.introduction;
        }
        if (!tea_util_1.default.isUnset(request.preEndTime)) {
            body["preEndTime"] = request.preEndTime;
        }
        if (!tea_util_1.default.isUnset(request.preStartTime)) {
            body["preStartTime"] = request.preStartTime;
        }
        if (!tea_util_1.default.isUnset(request.publicType)) {
            body["publicType"] = request.publicType;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateLive",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/lives`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateLiveResponse({}));
    }
    /**
     * @summary 创建直播
     *
     * @param request CreateLiveRequest
     * @return CreateLiveResponse
     */
    async createLive(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateLiveHeaders({});
        return await this.createLiveWithOptions(request, headers, runtime);
    }
    /**
     * @summary 删除直播
     *
     * @param request DeleteLiveRequest
     * @param headers DeleteLiveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteLiveResponse
     */
    async deleteLiveWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.liveId)) {
            query["liveId"] = request.liveId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteLive",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/lives`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteLiveResponse({}));
    }
    /**
     * @summary 删除直播
     *
     * @param request DeleteLiveRequest
     * @return DeleteLiveResponse
     */
    async deleteLive(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteLiveHeaders({});
        return await this.deleteLiveWithOptions(request, headers, runtime);
    }
    /**
     * @summary 删除直播培训课程
     *
     * @param request DeleteLiveFeedRequest
     * @param headers DeleteLiveFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteLiveFeedResponse
     */
    async deleteLiveFeedWithOptions(feedId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteLiveFeed",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/openFeeds/${feedId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteLiveFeedResponse({}));
    }
    /**
     * @summary 删除直播培训课程
     *
     * @param request DeleteLiveFeedRequest
     * @return DeleteLiveFeedResponse
     */
    async deleteLiveFeed(feedId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteLiveFeedHeaders({});
        return await this.deleteLiveFeedWithOptions(feedId, request, headers, runtime);
    }
    /**
     * @summary 剪辑直播课程的回放
     *
     * @param request EditFeedReplayRequest
     * @param headers EditFeedReplayHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditFeedReplayResponse
     */
    async editFeedReplayWithOptions(feedId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.editEndTime)) {
            body["editEndTime"] = request.editEndTime;
        }
        if (!tea_util_1.default.isUnset(request.editStartTime)) {
            body["editStartTime"] = request.editStartTime;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "EditFeedReplay",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/openFeeds/${feedId}/cutReplay`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new EditFeedReplayResponse({}));
    }
    /**
     * @summary 剪辑直播课程的回放
     *
     * @param request EditFeedReplayRequest
     * @return EditFeedReplayResponse
     */
    async editFeedReplay(feedId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new EditFeedReplayHeaders({});
        return await this.editFeedReplayWithOptions(feedId, request, headers, runtime);
    }
    /**
     * @summary 获取直播的可下载回放地址
     *
     * @param request GetLiveReplayUrlRequest
     * @param headers GetLiveReplayUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetLiveReplayUrlResponse
     */
    async getLiveReplayUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.liveId)) {
            query["liveId"] = request.liveId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetLiveReplayUrl",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/lives/replayUrls`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetLiveReplayUrlResponse({}));
    }
    /**
     * @summary 获取直播的可下载回放地址
     *
     * @param request GetLiveReplayUrlRequest
     * @return GetLiveReplayUrlResponse
     */
    async getLiveReplayUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetLiveReplayUrlHeaders({});
        return await this.getLiveReplayUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 根据状态拉我相关的直播
     *
     * @param request GetUserAllLiveListRequest
     * @param headers GetUserAllLiveListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserAllLiveListResponse
     */
    async getUserAllLiveListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.statuses)) {
            body["statuses"] = request.statuses;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetUserAllLiveList",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/users/allLiveInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserAllLiveListResponse({}));
    }
    /**
     * @summary 根据状态拉我相关的直播
     *
     * @param request GetUserAllLiveListRequest
     * @return GetUserAllLiveListResponse
     */
    async getUserAllLiveList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserAllLiveListHeaders({});
        return await this.getUserAllLiveListWithOptions(request, headers, runtime);
    }
    /**
     * @summary 根据状态获取用户创建的直播
     *
     * @param request GetUserCreateLiveListRequest
     * @param headers GetUserCreateLiveListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserCreateLiveListResponse
     */
    async getUserCreateLiveListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.endTime)) {
            body["endTime"] = request.endTime;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            body["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.statuses)) {
            body["statuses"] = request.statuses;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "GetUserCreateLiveList",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/users/createLiveInfos/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserCreateLiveListResponse({}));
    }
    /**
     * @summary 根据状态获取用户创建的直播
     *
     * @param request GetUserCreateLiveListRequest
     * @return GetUserCreateLiveListResponse
     */
    async getUserCreateLiveList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserCreateLiveListHeaders({});
        return await this.getUserCreateLiveListWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取用户观看直播记录
     *
     * @param request GetUserWatchLiveListRequest
     * @param headers GetUserWatchLiveListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserWatchLiveListResponse
     */
    async getUserWatchLiveListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.filterType)) {
            query["filterType"] = request.filterType;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUserWatchLiveList",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/users/watchRecords`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserWatchLiveListResponse({}));
    }
    /**
     * @summary 获取用户观看直播记录
     *
     * @param request GetUserWatchLiveListRequest
     * @return GetUserWatchLiveListResponse
     */
    async getUserWatchLiveList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserWatchLiveListHeaders({});
        return await this.getUserWatchLiveListWithOptions(request, headers, runtime);
    }
    /**
     * @summary 修改直播课程可见白名单
     *
     * @param tmpReq ModifyFeedWhiteListRequest
     * @param headers ModifyFeedWhiteListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyFeedWhiteListResponse
     */
    async modifyFeedWhiteListWithOptions(feedId, tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new ModifyFeedWhiteListShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.modifyUserList)) {
            request.modifyUserListShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.modifyUserList, "modifyUserList", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.action)) {
            query["action"] = request.action;
        }
        if (!tea_util_1.default.isUnset(request.modifyUserListShrink)) {
            query["modifyUserList"] = request.modifyUserListShrink;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ModifyFeedWhiteList",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/openFeeds/${feedId}/whiteList`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ModifyFeedWhiteListResponse({}));
    }
    /**
     * @summary 修改直播课程可见白名单
     *
     * @param request ModifyFeedWhiteListRequest
     * @return ModifyFeedWhiteListResponse
     */
    async modifyFeedWhiteList(feedId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ModifyFeedWhiteListHeaders({});
        return await this.modifyFeedWhiteListWithOptions(feedId, request, headers, runtime);
    }
    /**
     * @summary 查询直播课程的观看白名单
     *
     * @param request QueryFeedWhiteListRequest
     * @param headers QueryFeedWhiteListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryFeedWhiteListResponse
     */
    async queryFeedWhiteListWithOptions(feedId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryFeedWhiteList",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/openFeeds/${feedId}/whiteList`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryFeedWhiteListResponse({}));
    }
    /**
     * @summary 查询直播课程的观看白名单
     *
     * @param request QueryFeedWhiteListRequest
     * @return QueryFeedWhiteListResponse
     */
    async queryFeedWhiteList(feedId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryFeedWhiteListHeaders({});
        return await this.queryFeedWhiteListWithOptions(feedId, request, headers, runtime);
    }
    /**
     * @summary 查询直播详情
     *
     * @param request QueryLiveInfoRequest
     * @param headers QueryLiveInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryLiveInfoResponse
     */
    async queryLiveInfoWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.liveId)) {
            query["liveId"] = request.liveId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryLiveInfo",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/lives`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryLiveInfoResponse({}));
    }
    /**
     * @summary 查询直播详情
     *
     * @param request QueryLiveInfoRequest
     * @return QueryLiveInfoResponse
     */
    async queryLiveInfo(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryLiveInfoHeaders({});
        return await this.queryLiveInfoWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取直播的观看数据
     *
     * @param request QueryLiveWatchDetailRequest
     * @param headers QueryLiveWatchDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryLiveWatchDetailResponse
     */
    async queryLiveWatchDetailWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.liveId)) {
            query["liveId"] = request.liveId;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryLiveWatchDetail",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/lives/watchDetails`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryLiveWatchDetailResponse({}));
    }
    /**
     * @summary 获取直播的观看数据
     *
     * @param request QueryLiveWatchDetailRequest
     * @return QueryLiveWatchDetailResponse
     */
    async queryLiveWatchDetail(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryLiveWatchDetailHeaders({});
        return await this.queryLiveWatchDetailWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取直播观看用户列表
     *
     * @param request QueryLiveWatchUserListRequest
     * @param headers QueryLiveWatchUserListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryLiveWatchUserListResponse
     */
    async queryLiveWatchUserListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.liveId)) {
            query["liveId"] = request.liveId;
        }
        if (!tea_util_1.default.isUnset(request.pageNumber)) {
            query["pageNumber"] = request.pageNumber;
        }
        if (!tea_util_1.default.isUnset(request.pageSize)) {
            query["pageSize"] = request.pageSize;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryLiveWatchUserList",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/lives/watchUsers`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryLiveWatchUserListResponse({}));
    }
    /**
     * @summary 获取直播观看用户列表
     *
     * @param request QueryLiveWatchUserListRequest
     * @return QueryLiveWatchUserListResponse
     */
    async queryLiveWatchUserList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryLiveWatchUserListHeaders({});
        return await this.queryLiveWatchUserListWithOptions(request, headers, runtime);
    }
    /**
     * @summary 批量查询直播是否订阅
     *
     * @param tmpReq QuerySubscribeStatusRequest
     * @param headers QuerySubscribeStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySubscribeStatusResponse
     */
    async querySubscribeStatusWithOptions(tmpReq, headers, runtime) {
        tea_util_1.default.validateModel(tmpReq);
        let request = new QuerySubscribeStatusShrinkRequest({});
        openapi_util_1.default.convert(tmpReq, request);
        if (!tea_util_1.default.isUnset(tmpReq.body)) {
            request.bodyShrink = openapi_util_1.default.arrayToStringWithSpecifiedStyle(tmpReq.body, "body", "json");
        }
        let query = {};
        if (!tea_util_1.default.isUnset(request.bodyShrink)) {
            query["body"] = request.bodyShrink;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySubscribeStatus",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/subscribeStatuses/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySubscribeStatusResponse({}));
    }
    /**
     * @summary 批量查询直播是否订阅
     *
     * @param request QuerySubscribeStatusRequest
     * @return QuerySubscribeStatusResponse
     */
    async querySubscribeStatus(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySubscribeStatusHeaders({});
        return await this.querySubscribeStatusWithOptions(request, headers, runtime);
    }
    /**
     * @summary 开始一场云导播
     *
     * @param request StartCloudFeedRequest
     * @param headers StartCloudFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartCloudFeedResponse
     */
    async startCloudFeedWithOptions(feedId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "StartCloudFeed",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/cloudFeeds/${feedId}/start`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new StartCloudFeedResponse({}));
    }
    /**
     * @summary 开始一场云导播
     *
     * @param request StartCloudFeedRequest
     * @return StartCloudFeedResponse
     */
    async startCloudFeed(feedId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StartCloudFeedHeaders({});
        return await this.startCloudFeedWithOptions(feedId, request, headers, runtime);
    }
    /**
     * @summary 结束一场云导播
     *
     * @param request StopCloudFeedRequest
     * @param headers StopCloudFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StopCloudFeedResponse
     */
    async stopCloudFeedWithOptions(feedId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "StopCloudFeed",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/cloudFeeds/${feedId}/stop`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new StopCloudFeedResponse({}));
    }
    /**
     * @summary 结束一场云导播
     *
     * @param request StopCloudFeedRequest
     * @return StopCloudFeedResponse
     */
    async stopCloudFeed(feedId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StopCloudFeedHeaders({});
        return await this.stopCloudFeedWithOptions(feedId, request, headers, runtime);
    }
    /**
     * @summary 预约直播
     *
     * @param request SubscribeLiveRequest
     * @param headers SubscribeLiveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SubscribeLiveResponse
     */
    async subscribeLiveWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.liveId)) {
            query["liveId"] = request.liveId;
        }
        if (!tea_util_1.default.isUnset(request.subscribe)) {
            query["subscribe"] = request.subscribe;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            query["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "SubscribeLive",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/lives/subscribe`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SubscribeLiveResponse({}));
    }
    /**
     * @summary 预约直播
     *
     * @param request SubscribeLiveRequest
     * @return SubscribeLiveResponse
     */
    async subscribeLive(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SubscribeLiveHeaders({});
        return await this.subscribeLiveWithOptions(request, headers, runtime);
    }
    /**
     * @summary 修改直播
     *
     * @param request UpdateLiveRequest
     * @param headers UpdateLiveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateLiveResponse
     */
    async updateLiveWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coverUrl)) {
            body["coverUrl"] = request.coverUrl;
        }
        if (!tea_util_1.default.isUnset(request.introduction)) {
            body["introduction"] = request.introduction;
        }
        if (!tea_util_1.default.isUnset(request.liveId)) {
            body["liveId"] = request.liveId;
        }
        if (!tea_util_1.default.isUnset(request.preEndTime)) {
            body["preEndTime"] = request.preEndTime;
        }
        if (!tea_util_1.default.isUnset(request.preStartTime)) {
            body["preStartTime"] = request.preStartTime;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            body["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.unionId)) {
            body["unionId"] = request.unionId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateLive",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/lives`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateLiveResponse({}));
    }
    /**
     * @summary 修改直播
     *
     * @param request UpdateLiveRequest
     * @return UpdateLiveResponse
     */
    async updateLive(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateLiveHeaders({});
        return await this.updateLiveWithOptions(request, headers, runtime);
    }
    /**
     * @summary 修改培训课程信息
     *
     * @param request UpdateLiveFeedRequest
     * @param headers UpdateLiveFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateLiveFeedResponse
     */
    async updateLiveFeedWithOptions(feedId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.coverUrl)) {
            query["coverUrl"] = request.coverUrl;
        }
        if (!tea_util_1.default.isUnset(request.introduction)) {
            query["introduction"] = request.introduction;
        }
        if (!tea_util_1.default.isUnset(request.startTime)) {
            query["startTime"] = request.startTime;
        }
        if (!tea_util_1.default.isUnset(request.title)) {
            query["title"] = request.title;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            query["userId"] = request.userId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UpdateLiveFeed",
            version: "live_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/live/openFeeds/${feedId}`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateLiveFeedResponse({}));
    }
    /**
     * @summary 修改培训课程信息
     *
     * @param request UpdateLiveFeedRequest
     * @return UpdateLiveFeedResponse
     */
    async updateLiveFeed(feedId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateLiveFeedHeaders({});
        return await this.updateLiveFeedWithOptions(feedId, request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map