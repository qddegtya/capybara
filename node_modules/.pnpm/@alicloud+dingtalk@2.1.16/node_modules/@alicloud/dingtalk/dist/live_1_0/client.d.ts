/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import SPI from '@alicloud/gateway-spi';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import * as $tea from '@alicloud/tea-typescript';
export declare class AddShareCidListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareCidListRequest extends $tea.Model {
    groupIdType?: number;
    groupIds?: string[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareCidListResponseBody extends $tea.Model {
    hasShareSuccess?: boolean;
    shareSuccessGroupList?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class AddShareCidListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: AddShareCidListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudFeedRequest extends $tea.Model {
    coverUrl?: string;
    intro?: string;
    startTime?: number;
    title?: string;
    userId?: string;
    videoUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudFeedResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateCloudFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateCloudFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveRequest extends $tea.Model {
    coverUrl?: string;
    introduction?: string;
    preEndTime?: number;
    preStartTime?: number;
    publicType?: number;
    title?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveResponseBody extends $tea.Model {
    result?: CreateLiveResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: CreateLiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveRequest extends $tea.Model {
    liveId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveResponseBody extends $tea.Model {
    result?: DeleteLiveResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteLiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveFeedRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveFeedResponseBody extends $tea.Model {
    hasDelete?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: DeleteLiveFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditFeedReplayHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditFeedReplayRequest extends $tea.Model {
    editEndTime?: number;
    editStartTime?: number;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditFeedReplayResponseBody extends $tea.Model {
    result?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EditFeedReplayResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: EditFeedReplayResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlRequest extends $tea.Model {
    liveId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlResponseBody extends $tea.Model {
    result?: GetLiveReplayUrlResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetLiveReplayUrlResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListRequest extends $tea.Model {
    endTime?: number;
    startTime?: number;
    statuses?: number[];
    title?: string;
    pageNumber?: number;
    pageSize?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBody extends $tea.Model {
    result?: GetUserAllLiveListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserAllLiveListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListRequest extends $tea.Model {
    endTime?: number;
    startTime?: number;
    statuses?: number[];
    title?: string;
    maxResults?: number;
    nextToken?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBody extends $tea.Model {
    result?: GetUserCreateLiveListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserCreateLiveListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListRequest extends $tea.Model {
    filterType?: number;
    maxResults?: number;
    nextToken?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBody extends $tea.Model {
    result?: GetUserWatchLiveListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: GetUserWatchLiveListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListRequest extends $tea.Model {
    action?: number;
    modifyUserList?: string[];
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListShrinkRequest extends $tea.Model {
    action?: number;
    modifyUserListShrink?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ModifyFeedWhiteListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: ModifyFeedWhiteListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFeedWhiteListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFeedWhiteListRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFeedWhiteListResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryFeedWhiteListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryFeedWhiteListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoRequest extends $tea.Model {
    liveId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoResponseBody extends $tea.Model {
    result?: QueryLiveInfoResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryLiveInfoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailRequest extends $tea.Model {
    liveId?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailResponseBody extends $tea.Model {
    result?: QueryLiveWatchDetailResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryLiveWatchDetailResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListRequest extends $tea.Model {
    liveId?: string;
    pageNumber?: number;
    pageSize?: number;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponseBody extends $tea.Model {
    result?: QueryLiveWatchUserListResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QueryLiveWatchUserListResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusRequest extends $tea.Model {
    body?: QuerySubscribeStatusRequestBody;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusShrinkRequest extends $tea.Model {
    bodyShrink?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusResponseBody extends $tea.Model {
    result?: QuerySubscribeStatusResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: QuerySubscribeStatusResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudFeedRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudFeedResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StartCloudFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StartCloudFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudFeedRequest extends $tea.Model {
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudFeedResponseBody extends $tea.Model {
    result?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class StopCloudFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: StopCloudFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveRequest extends $tea.Model {
    liveId?: string;
    subscribe?: boolean;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveResponseBody extends $tea.Model {
    result?: SubscribeLiveResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: SubscribeLiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveRequest extends $tea.Model {
    coverUrl?: string;
    introduction?: string;
    liveId?: string;
    preEndTime?: number;
    preStartTime?: number;
    title?: string;
    unionId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveResponseBody extends $tea.Model {
    result?: UpdateLiveResponseBodyResult;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateLiveResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveFeedHeaders extends $tea.Model {
    commonHeaders?: {
        [key: string]: string;
    };
    xAcsDingtalkAccessToken?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveFeedRequest extends $tea.Model {
    coverUrl?: string;
    introduction?: string;
    startTime?: number;
    title?: string;
    userId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveFeedResponseBody extends $tea.Model {
    hasUpdate?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveFeedResponse extends $tea.Model {
    headers?: {
        [key: string]: string;
    };
    statusCode?: number;
    body?: UpdateLiveFeedResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class CreateLiveResponseBodyResult extends $tea.Model {
    liveId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DeleteLiveResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetLiveReplayUrlResponseBodyResult extends $tea.Model {
    replayUrl?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBodyResultLiveInfoPopModelListExtraInfo extends $tea.Model {
    hasSubscribed?: boolean;
    isForecastExpired?: boolean;
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo extends $tea.Model {
    coverUrl?: string;
    duration?: number;
    endTime?: number;
    introduction?: string;
    liveId?: string;
    livePlayUrl?: string;
    liveStatus?: number;
    startTime?: number;
    subscribeCount?: number;
    title?: string;
    unionId?: string;
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBodyResultLiveInfoPopModelList extends $tea.Model {
    extraInfo?: GetUserAllLiveListResponseBodyResultLiveInfoPopModelListExtraInfo;
    liveBasicInfo?: GetUserAllLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserAllLiveListResponseBodyResult extends $tea.Model {
    hasFinish?: boolean;
    liveInfoPopModelList?: GetUserAllLiveListResponseBodyResultLiveInfoPopModelList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListHasSubscribed extends $tea.Model {
    hasSubscribed?: boolean;
    isForecastExpired?: boolean;
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo extends $tea.Model {
    coverUrl?: string;
    duration?: number;
    endTime?: number;
    introduction?: string;
    liveId?: string;
    livePlayUrl?: string;
    liveStatus?: number;
    startTime?: number;
    subscribeCount?: number;
    title?: string;
    unionId?: string;
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBodyResultLiveInfoPopModelList extends $tea.Model {
    hasSubscribed?: GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListHasSubscribed;
    liveBasicInfo?: GetUserCreateLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserCreateLiveListResponseBodyResult extends $tea.Model {
    hasFinish?: boolean;
    liveInfoPopModelList?: GetUserCreateLiveListResponseBodyResultLiveInfoPopModelList[];
    nextToken?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListExtraInfo extends $tea.Model {
    hasSubscribed?: boolean;
    isForecastExpired?: boolean;
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo extends $tea.Model {
    coverUrl?: string;
    duration?: number;
    endTime?: number;
    introduction?: string;
    liveId?: string;
    livePlayUrl?: string;
    liveStatus?: number;
    startTime?: number;
    subscribeCount?: number;
    title?: string;
    unionId?: string;
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBodyResultLiveInfoPopModelList extends $tea.Model {
    extraInfo?: GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListExtraInfo;
    liveBasicInfo?: GetUserWatchLiveListResponseBodyResultLiveInfoPopModelListLiveBasicInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetUserWatchLiveListResponseBodyResult extends $tea.Model {
    hasFinish?: boolean;
    liveInfoPopModelList?: GetUserWatchLiveListResponseBodyResultLiveInfoPopModelList[];
    nextToken?: string;
    total?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoResponseBodyResultLiveInfo extends $tea.Model {
    coverUrl?: string;
    duration?: number;
    endTime?: number;
    introduction?: string;
    liveId?: string;
    livePlayUrl?: string;
    liveStatus?: number;
    playbackDuration?: number;
    startTime?: number;
    subscribeCount?: number;
    title?: string;
    unionId?: string;
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveInfoResponseBodyResult extends $tea.Model {
    liveInfo?: QueryLiveInfoResponseBodyResultLiveInfo;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchDetailResponseBodyResult extends $tea.Model {
    avgWatchTime?: number;
    liveUv?: number;
    msgCount?: number;
    playbackUv?: number;
    praiseCount?: number;
    pv?: number;
    totalWatchTime?: number;
    uv?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponseBodyResultOrgUsesList extends $tea.Model {
    deptName?: string;
    name?: string;
    unionId?: string;
    userId?: string;
    watchLiveTime?: number;
    watchPlaybackTime?: number;
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponseBodyResultOutOrgUserList extends $tea.Model {
    name?: string;
    watchLiveTime?: number;
    watchPlaybackTime?: number;
    watchProgressMs?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QueryLiveWatchUserListResponseBodyResult extends $tea.Model {
    orgUsesList?: QueryLiveWatchUserListResponseBodyResultOrgUsesList[];
    outOrgUserList?: QueryLiveWatchUserListResponseBodyResultOutOrgUserList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusRequestBody extends $tea.Model {
    liveIds?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusResponseBodyResultSubscribeStatusDTOS extends $tea.Model {
    liveId?: string;
    subscribe?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class QuerySubscribeStatusResponseBodyResult extends $tea.Model {
    subscribeStatusDTOS?: QuerySubscribeStatusResponseBodyResultSubscribeStatusDTOS[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class SubscribeLiveResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class UpdateLiveResponseBodyResult extends $tea.Model {
    success?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    _client: SPI;
    constructor(config: $OpenApi.Config);
    /**
     * @summary 添加云导播联播群列表
     *
     * @param request AddShareCidListRequest
     * @param headers AddShareCidListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AddShareCidListResponse
     */
    addShareCidListWithOptions(feedId: string, request: AddShareCidListRequest, headers: AddShareCidListHeaders, runtime: $Util.RuntimeOptions): Promise<AddShareCidListResponse>;
    /**
     * @summary 添加云导播联播群列表
     *
     * @param request AddShareCidListRequest
     * @return AddShareCidListResponse
     */
    addShareCidList(feedId: string, request: AddShareCidListRequest): Promise<AddShareCidListResponse>;
    /**
     * @summary 创建云导播课程
     *
     * @param request CreateCloudFeedRequest
     * @param headers CreateCloudFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCloudFeedResponse
     */
    createCloudFeedWithOptions(request: CreateCloudFeedRequest, headers: CreateCloudFeedHeaders, runtime: $Util.RuntimeOptions): Promise<CreateCloudFeedResponse>;
    /**
     * @summary 创建云导播课程
     *
     * @param request CreateCloudFeedRequest
     * @return CreateCloudFeedResponse
     */
    createCloudFeed(request: CreateCloudFeedRequest): Promise<CreateCloudFeedResponse>;
    /**
     * @summary 创建直播
     *
     * @param request CreateLiveRequest
     * @param headers CreateLiveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateLiveResponse
     */
    createLiveWithOptions(request: CreateLiveRequest, headers: CreateLiveHeaders, runtime: $Util.RuntimeOptions): Promise<CreateLiveResponse>;
    /**
     * @summary 创建直播
     *
     * @param request CreateLiveRequest
     * @return CreateLiveResponse
     */
    createLive(request: CreateLiveRequest): Promise<CreateLiveResponse>;
    /**
     * @summary 删除直播
     *
     * @param request DeleteLiveRequest
     * @param headers DeleteLiveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteLiveResponse
     */
    deleteLiveWithOptions(request: DeleteLiveRequest, headers: DeleteLiveHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteLiveResponse>;
    /**
     * @summary 删除直播
     *
     * @param request DeleteLiveRequest
     * @return DeleteLiveResponse
     */
    deleteLive(request: DeleteLiveRequest): Promise<DeleteLiveResponse>;
    /**
     * @summary 删除直播培训课程
     *
     * @param request DeleteLiveFeedRequest
     * @param headers DeleteLiveFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteLiveFeedResponse
     */
    deleteLiveFeedWithOptions(feedId: string, request: DeleteLiveFeedRequest, headers: DeleteLiveFeedHeaders, runtime: $Util.RuntimeOptions): Promise<DeleteLiveFeedResponse>;
    /**
     * @summary 删除直播培训课程
     *
     * @param request DeleteLiveFeedRequest
     * @return DeleteLiveFeedResponse
     */
    deleteLiveFeed(feedId: string, request: DeleteLiveFeedRequest): Promise<DeleteLiveFeedResponse>;
    /**
     * @summary 剪辑直播课程的回放
     *
     * @param request EditFeedReplayRequest
     * @param headers EditFeedReplayHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return EditFeedReplayResponse
     */
    editFeedReplayWithOptions(feedId: string, request: EditFeedReplayRequest, headers: EditFeedReplayHeaders, runtime: $Util.RuntimeOptions): Promise<EditFeedReplayResponse>;
    /**
     * @summary 剪辑直播课程的回放
     *
     * @param request EditFeedReplayRequest
     * @return EditFeedReplayResponse
     */
    editFeedReplay(feedId: string, request: EditFeedReplayRequest): Promise<EditFeedReplayResponse>;
    /**
     * @summary 获取直播的可下载回放地址
     *
     * @param request GetLiveReplayUrlRequest
     * @param headers GetLiveReplayUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetLiveReplayUrlResponse
     */
    getLiveReplayUrlWithOptions(request: GetLiveReplayUrlRequest, headers: GetLiveReplayUrlHeaders, runtime: $Util.RuntimeOptions): Promise<GetLiveReplayUrlResponse>;
    /**
     * @summary 获取直播的可下载回放地址
     *
     * @param request GetLiveReplayUrlRequest
     * @return GetLiveReplayUrlResponse
     */
    getLiveReplayUrl(request: GetLiveReplayUrlRequest): Promise<GetLiveReplayUrlResponse>;
    /**
     * @summary 根据状态拉我相关的直播
     *
     * @param request GetUserAllLiveListRequest
     * @param headers GetUserAllLiveListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserAllLiveListResponse
     */
    getUserAllLiveListWithOptions(request: GetUserAllLiveListRequest, headers: GetUserAllLiveListHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserAllLiveListResponse>;
    /**
     * @summary 根据状态拉我相关的直播
     *
     * @param request GetUserAllLiveListRequest
     * @return GetUserAllLiveListResponse
     */
    getUserAllLiveList(request: GetUserAllLiveListRequest): Promise<GetUserAllLiveListResponse>;
    /**
     * @summary 根据状态获取用户创建的直播
     *
     * @param request GetUserCreateLiveListRequest
     * @param headers GetUserCreateLiveListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserCreateLiveListResponse
     */
    getUserCreateLiveListWithOptions(request: GetUserCreateLiveListRequest, headers: GetUserCreateLiveListHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserCreateLiveListResponse>;
    /**
     * @summary 根据状态获取用户创建的直播
     *
     * @param request GetUserCreateLiveListRequest
     * @return GetUserCreateLiveListResponse
     */
    getUserCreateLiveList(request: GetUserCreateLiveListRequest): Promise<GetUserCreateLiveListResponse>;
    /**
     * @summary 获取用户观看直播记录
     *
     * @param request GetUserWatchLiveListRequest
     * @param headers GetUserWatchLiveListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserWatchLiveListResponse
     */
    getUserWatchLiveListWithOptions(request: GetUserWatchLiveListRequest, headers: GetUserWatchLiveListHeaders, runtime: $Util.RuntimeOptions): Promise<GetUserWatchLiveListResponse>;
    /**
     * @summary 获取用户观看直播记录
     *
     * @param request GetUserWatchLiveListRequest
     * @return GetUserWatchLiveListResponse
     */
    getUserWatchLiveList(request: GetUserWatchLiveListRequest): Promise<GetUserWatchLiveListResponse>;
    /**
     * @summary 修改直播课程可见白名单
     *
     * @param tmpReq ModifyFeedWhiteListRequest
     * @param headers ModifyFeedWhiteListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ModifyFeedWhiteListResponse
     */
    modifyFeedWhiteListWithOptions(feedId: string, tmpReq: ModifyFeedWhiteListRequest, headers: ModifyFeedWhiteListHeaders, runtime: $Util.RuntimeOptions): Promise<ModifyFeedWhiteListResponse>;
    /**
     * @summary 修改直播课程可见白名单
     *
     * @param request ModifyFeedWhiteListRequest
     * @return ModifyFeedWhiteListResponse
     */
    modifyFeedWhiteList(feedId: string, request: ModifyFeedWhiteListRequest): Promise<ModifyFeedWhiteListResponse>;
    /**
     * @summary 查询直播课程的观看白名单
     *
     * @param request QueryFeedWhiteListRequest
     * @param headers QueryFeedWhiteListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryFeedWhiteListResponse
     */
    queryFeedWhiteListWithOptions(feedId: string, request: QueryFeedWhiteListRequest, headers: QueryFeedWhiteListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryFeedWhiteListResponse>;
    /**
     * @summary 查询直播课程的观看白名单
     *
     * @param request QueryFeedWhiteListRequest
     * @return QueryFeedWhiteListResponse
     */
    queryFeedWhiteList(feedId: string, request: QueryFeedWhiteListRequest): Promise<QueryFeedWhiteListResponse>;
    /**
     * @summary 查询直播详情
     *
     * @param request QueryLiveInfoRequest
     * @param headers QueryLiveInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryLiveInfoResponse
     */
    queryLiveInfoWithOptions(request: QueryLiveInfoRequest, headers: QueryLiveInfoHeaders, runtime: $Util.RuntimeOptions): Promise<QueryLiveInfoResponse>;
    /**
     * @summary 查询直播详情
     *
     * @param request QueryLiveInfoRequest
     * @return QueryLiveInfoResponse
     */
    queryLiveInfo(request: QueryLiveInfoRequest): Promise<QueryLiveInfoResponse>;
    /**
     * @summary 获取直播的观看数据
     *
     * @param request QueryLiveWatchDetailRequest
     * @param headers QueryLiveWatchDetailHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryLiveWatchDetailResponse
     */
    queryLiveWatchDetailWithOptions(request: QueryLiveWatchDetailRequest, headers: QueryLiveWatchDetailHeaders, runtime: $Util.RuntimeOptions): Promise<QueryLiveWatchDetailResponse>;
    /**
     * @summary 获取直播的观看数据
     *
     * @param request QueryLiveWatchDetailRequest
     * @return QueryLiveWatchDetailResponse
     */
    queryLiveWatchDetail(request: QueryLiveWatchDetailRequest): Promise<QueryLiveWatchDetailResponse>;
    /**
     * @summary 获取直播观看用户列表
     *
     * @param request QueryLiveWatchUserListRequest
     * @param headers QueryLiveWatchUserListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryLiveWatchUserListResponse
     */
    queryLiveWatchUserListWithOptions(request: QueryLiveWatchUserListRequest, headers: QueryLiveWatchUserListHeaders, runtime: $Util.RuntimeOptions): Promise<QueryLiveWatchUserListResponse>;
    /**
     * @summary 获取直播观看用户列表
     *
     * @param request QueryLiveWatchUserListRequest
     * @return QueryLiveWatchUserListResponse
     */
    queryLiveWatchUserList(request: QueryLiveWatchUserListRequest): Promise<QueryLiveWatchUserListResponse>;
    /**
     * @summary 批量查询直播是否订阅
     *
     * @param tmpReq QuerySubscribeStatusRequest
     * @param headers QuerySubscribeStatusHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySubscribeStatusResponse
     */
    querySubscribeStatusWithOptions(tmpReq: QuerySubscribeStatusRequest, headers: QuerySubscribeStatusHeaders, runtime: $Util.RuntimeOptions): Promise<QuerySubscribeStatusResponse>;
    /**
     * @summary 批量查询直播是否订阅
     *
     * @param request QuerySubscribeStatusRequest
     * @return QuerySubscribeStatusResponse
     */
    querySubscribeStatus(request: QuerySubscribeStatusRequest): Promise<QuerySubscribeStatusResponse>;
    /**
     * @summary 开始一场云导播
     *
     * @param request StartCloudFeedRequest
     * @param headers StartCloudFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StartCloudFeedResponse
     */
    startCloudFeedWithOptions(feedId: string, request: StartCloudFeedRequest, headers: StartCloudFeedHeaders, runtime: $Util.RuntimeOptions): Promise<StartCloudFeedResponse>;
    /**
     * @summary 开始一场云导播
     *
     * @param request StartCloudFeedRequest
     * @return StartCloudFeedResponse
     */
    startCloudFeed(feedId: string, request: StartCloudFeedRequest): Promise<StartCloudFeedResponse>;
    /**
     * @summary 结束一场云导播
     *
     * @param request StopCloudFeedRequest
     * @param headers StopCloudFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StopCloudFeedResponse
     */
    stopCloudFeedWithOptions(feedId: string, request: StopCloudFeedRequest, headers: StopCloudFeedHeaders, runtime: $Util.RuntimeOptions): Promise<StopCloudFeedResponse>;
    /**
     * @summary 结束一场云导播
     *
     * @param request StopCloudFeedRequest
     * @return StopCloudFeedResponse
     */
    stopCloudFeed(feedId: string, request: StopCloudFeedRequest): Promise<StopCloudFeedResponse>;
    /**
     * @summary 预约直播
     *
     * @param request SubscribeLiveRequest
     * @param headers SubscribeLiveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SubscribeLiveResponse
     */
    subscribeLiveWithOptions(request: SubscribeLiveRequest, headers: SubscribeLiveHeaders, runtime: $Util.RuntimeOptions): Promise<SubscribeLiveResponse>;
    /**
     * @summary 预约直播
     *
     * @param request SubscribeLiveRequest
     * @return SubscribeLiveResponse
     */
    subscribeLive(request: SubscribeLiveRequest): Promise<SubscribeLiveResponse>;
    /**
     * @summary 修改直播
     *
     * @param request UpdateLiveRequest
     * @param headers UpdateLiveHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateLiveResponse
     */
    updateLiveWithOptions(request: UpdateLiveRequest, headers: UpdateLiveHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateLiveResponse>;
    /**
     * @summary 修改直播
     *
     * @param request UpdateLiveRequest
     * @return UpdateLiveResponse
     */
    updateLive(request: UpdateLiveRequest): Promise<UpdateLiveResponse>;
    /**
     * @summary 修改培训课程信息
     *
     * @param request UpdateLiveFeedRequest
     * @param headers UpdateLiveFeedHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateLiveFeedResponse
     */
    updateLiveFeedWithOptions(feedId: string, request: UpdateLiveFeedRequest, headers: UpdateLiveFeedHeaders, runtime: $Util.RuntimeOptions): Promise<UpdateLiveFeedResponse>;
    /**
     * @summary 修改培训课程信息
     *
     * @param request UpdateLiveFeedRequest
     * @return UpdateLiveFeedResponse
     */
    updateLiveFeed(feedId: string, request: UpdateLiveFeedRequest): Promise<UpdateLiveFeedResponse>;
}
