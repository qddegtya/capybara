"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryTradeOrderResponse = exports.QueryTradeOrderResponseBody = exports.QueryTradeOrderRequest = exports.QueryTradeOrderHeaders = exports.CreateOpportunityResponse = exports.CreateOpportunityRequest = exports.CreateOpportunityHeaders = exports.CheckOpportunityResultResponse = exports.CheckOpportunityResultResponseBody = exports.CheckOpportunityResultRequest = exports.CheckOpportunityResultHeaders = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class CheckOpportunityResultHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckOpportunityResultHeaders = CheckOpportunityResultHeaders;
class CheckOpportunityResultRequest extends $tea.Model {
    static names() {
        return {
            belongToPhoneNum: 'belongToPhoneNum',
            contactPhoneNum: 'contactPhoneNum',
            corpId: 'corpId',
            deptId: 'deptId',
            marketCode: 'marketCode',
        };
    }
    static types() {
        return {
            belongToPhoneNum: 'string',
            contactPhoneNum: 'string',
            corpId: 'string',
            deptId: 'number',
            marketCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckOpportunityResultRequest = CheckOpportunityResultRequest;
class CheckOpportunityResultResponseBody extends $tea.Model {
    static names() {
        return {
            bizSuccess: 'bizSuccess',
        };
    }
    static types() {
        return {
            bizSuccess: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckOpportunityResultResponseBody = CheckOpportunityResultResponseBody;
class CheckOpportunityResultResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CheckOpportunityResultResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CheckOpportunityResultResponse = CheckOpportunityResultResponse;
class CreateOpportunityHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOpportunityHeaders = CreateOpportunityHeaders;
class CreateOpportunityRequest extends $tea.Model {
    static names() {
        return {
            belongToPhoneNum: 'belongToPhoneNum',
            contactPhoneNum: 'contactPhoneNum',
            corpId: 'corpId',
            deptId: 'deptId',
            marketCode: 'marketCode',
        };
    }
    static types() {
        return {
            belongToPhoneNum: 'string',
            contactPhoneNum: 'string',
            corpId: 'string',
            deptId: 'number',
            marketCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOpportunityRequest = CreateOpportunityRequest;
class CreateOpportunityResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateOpportunityResponse = CreateOpportunityResponse;
class QueryTradeOrderHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTradeOrderHeaders = QueryTradeOrderHeaders;
class QueryTradeOrderRequest extends $tea.Model {
    static names() {
        return {
            orderId: 'orderId',
            outerOrderId: 'outerOrderId',
        };
    }
    static types() {
        return {
            orderId: 'number',
            outerOrderId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTradeOrderRequest = QueryTradeOrderRequest;
class QueryTradeOrderResponseBody extends $tea.Model {
    static names() {
        return {
            articleCode: 'articleCode',
            articleItemCode: 'articleItemCode',
            articleItemName: 'articleItemName',
            articleName: 'articleName',
            closeTime: 'closeTime',
            createTime: 'createTime',
            fee: 'fee',
            isvCropId: 'isvCropId',
            orderId: 'orderId',
            outerOrderId: 'outerOrderId',
            payFee: 'payFee',
            payTime: 'payTime',
            quantity: 'quantity',
            refundTime: 'refundTime',
            status: 'status',
        };
    }
    static types() {
        return {
            articleCode: 'string',
            articleItemCode: 'string',
            articleItemName: 'string',
            articleName: 'string',
            closeTime: 'number',
            createTime: 'number',
            fee: 'number',
            isvCropId: 'string',
            orderId: 'number',
            outerOrderId: 'string',
            payFee: 'number',
            payTime: 'number',
            quantity: 'number',
            refundTime: 'number',
            status: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTradeOrderResponseBody = QueryTradeOrderResponseBody;
class QueryTradeOrderResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryTradeOrderResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryTradeOrderResponse = QueryTradeOrderResponse;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary isv检查商机创建是否符合预期
     *
     * @param request CheckOpportunityResultRequest
     * @param headers CheckOpportunityResultHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CheckOpportunityResultResponse
     */
    async checkOpportunityResultWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.belongToPhoneNum)) {
            query["belongToPhoneNum"] = request.belongToPhoneNum;
        }
        if (!tea_util_1.default.isUnset(request.contactPhoneNum)) {
            query["contactPhoneNum"] = request.contactPhoneNum;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            query["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            query["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.marketCode)) {
            query["marketCode"] = request.marketCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "CheckOpportunityResult",
            version: "trade_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/trade/opportunity/check`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CheckOpportunityResultResponse({}));
    }
    /**
     * @summary isv检查商机创建是否符合预期
     *
     * @param request CheckOpportunityResultRequest
     * @return CheckOpportunityResultResponse
     */
    async checkOpportunityResult(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CheckOpportunityResultHeaders({});
        return await this.checkOpportunityResultWithOptions(request, headers, runtime);
    }
    /**
     * @summary isv创建商机
     *
     * @param request CreateOpportunityRequest
     * @param headers CreateOpportunityHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateOpportunityResponse
     */
    async createOpportunityWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.belongToPhoneNum)) {
            body["belongToPhoneNum"] = request.belongToPhoneNum;
        }
        if (!tea_util_1.default.isUnset(request.contactPhoneNum)) {
            body["contactPhoneNum"] = request.contactPhoneNum;
        }
        if (!tea_util_1.default.isUnset(request.corpId)) {
            body["corpId"] = request.corpId;
        }
        if (!tea_util_1.default.isUnset(request.deptId)) {
            body["deptId"] = request.deptId;
        }
        if (!tea_util_1.default.isUnset(request.marketCode)) {
            body["marketCode"] = request.marketCode;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateOpportunity",
            version: "trade_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/trade/opportunities`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateOpportunityResponse({}));
    }
    /**
     * @summary isv创建商机
     *
     * @param request CreateOpportunityRequest
     * @return CreateOpportunityResponse
     */
    async createOpportunity(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateOpportunityHeaders({});
        return await this.createOpportunityWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询订单信息
     *
     * @param request QueryTradeOrderRequest
     * @param headers QueryTradeOrderHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryTradeOrderResponse
     */
    async queryTradeOrderWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.orderId)) {
            body["orderId"] = request.orderId;
        }
        if (!tea_util_1.default.isUnset(request.outerOrderId)) {
            body["outerOrderId"] = request.outerOrderId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "QueryTradeOrder",
            version: "trade_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/trade/orders/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "json",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryTradeOrderResponse({}));
    }
    /**
     * @summary 查询订单信息
     *
     * @param request QueryTradeOrderRequest
     * @return QueryTradeOrderResponse
     */
    async queryTradeOrder(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryTradeOrderHeaders({});
        return await this.queryTradeOrderWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map