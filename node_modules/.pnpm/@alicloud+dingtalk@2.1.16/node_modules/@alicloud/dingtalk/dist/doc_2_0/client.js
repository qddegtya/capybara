"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetDentryIdByUuidRequest = exports.GetDentryIdByUuidHeaders = exports.DocContentResponse = exports.DocContentResponseBody = exports.DocContentRequest = exports.DocContentHeaders = exports.DeleteTeamResponse = exports.DeleteTeamRequest = exports.DeleteTeamHeaders = exports.CrossOrgMigrateResponse = exports.CrossOrgMigrateResponseBody = exports.CrossOrgMigrateRequest = exports.CrossOrgMigrateHeaders = exports.CreateTeamResponse = exports.CreateTeamRequest = exports.CreateTeamHeaders = exports.CreateSpaceResponse = exports.CreateSpaceRequest = exports.CreateSpaceHeaders = exports.CreateDentryResponse = exports.CreateDentryRequest = exports.CreateDentryHeaders = exports.CopyDentryResponse = exports.CopyDentryRequest = exports.CopyDentryHeaders = exports.CategoryTemplatesResponse = exports.CategoryTemplatesResponseBody = exports.CategoryTemplatesRequest = exports.CategoryTemplatesHeaders = exports.CategoriesTemplatesResponse = exports.CategoriesTemplatesResponseBody = exports.CategoriesTemplatesRequest = exports.CategoriesTemplatesHeaders = exports.BatchDeleteRecentsResponse = exports.BatchDeleteRecentsResponseBody = exports.BatchDeleteRecentsRequest = exports.BatchDeleteRecentsHeaders = exports.BatchCreateTeamResponse = exports.BatchCreateTeamResponseBody = exports.BatchCreateTeamRequest = exports.BatchCreateTeamHeaders = exports.MapValue = exports.TeamVO = exports.TeamModel = exports.SpaceVO = exports.SpaceModel = exports.OpenActionModel = exports.LinkSourceInfo = exports.DentryVO = exports.DentryModel = void 0;
exports.ListPinSpacesHeaders = exports.ListHotDocsResponse = exports.ListHotDocsResponseBody = exports.ListHotDocsRequest = exports.ListHotDocsHeaders = exports.ListFeedsResponse = exports.ListFeedsResponseBody = exports.ListFeedsRequest = exports.ListFeedsHeaders = exports.GetUuidByDentryIdResponse = exports.GetUuidByDentryIdResponseBody = exports.GetUuidByDentryIdRequest = exports.GetUuidByDentryIdHeaders = exports.GetUserInfoByOpenTokenResponse = exports.GetUserInfoByOpenTokenResponseBody = exports.GetUserInfoByOpenTokenRequest = exports.GetUserInfoByOpenTokenHeaders = exports.GetTotalNumberOfSpacesResponse = exports.GetTotalNumberOfSpacesResponseBody = exports.GetTotalNumberOfSpacesRequest = exports.GetTotalNumberOfSpacesHeaders = exports.GetTotalNumberOfDentriesResponse = exports.GetTotalNumberOfDentriesResponseBody = exports.GetTotalNumberOfDentriesRequest = exports.GetTotalNumberOfDentriesHeaders = exports.GetTeamResponse = exports.GetTeamRequest = exports.GetTeamHeaders = exports.GetStarInfoResponse = exports.GetStarInfoResponseBody = exports.GetStarInfoRequest = exports.GetStarInfoHeaders = exports.GetSpaceDirectoriesResponse = exports.GetSpaceDirectoriesResponseBody = exports.GetSpaceDirectoriesRequest = exports.GetSpaceDirectoriesHeaders = exports.GetSchemaResponse = exports.GetSchemaResponseBody = exports.GetSchemaRequest = exports.GetSchemaHeaders = exports.GetMySpaceResponse = exports.GetMySpaceResponseBody = exports.GetMySpaceRequest = exports.GetMySpaceHeaders = exports.GetDocContentResponse = exports.GetDocContentResponseBody = exports.GetDocContentRequest = exports.GetDocContentHeaders = exports.GetDentryIdByUuidResponse = exports.GetDentryIdByUuidResponseBody = void 0;
exports.QueryMineSpaceHeaders = exports.QueryItemByUrlResponse = exports.QueryItemByUrlResponseBody = exports.QueryItemByUrlRequest = exports.QueryItemByUrlHeaders = exports.QueryDocContentResponse = exports.QueryDocContentResponseBody = exports.QueryDocContentRequest = exports.QueryDocContentHeaders = exports.QueryDentryResponse = exports.QueryDentryRequest = exports.QueryDentryHeaders = exports.PinSpaceResponse = exports.PinSpaceResponseBody = exports.PinSpaceRequest = exports.PinSpaceHeaders = exports.MoveDentryResponse = exports.MoveDentryRequest = exports.MoveDentryHeaders = exports.MarkStarResponse = exports.MarkStarResponseBody = exports.MarkStarRequest = exports.MarkStarHeaders = exports.ListTeamMembersResponse = exports.ListTeamMembersResponseBody = exports.ListTeamMembersRequest = exports.ListTeamMembersHeaders = exports.ListStarsResponse = exports.ListStarsResponseBody = exports.ListStarsRequest = exports.ListStarsHeaders = exports.ListSpaceSectionsResponse = exports.ListSpaceSectionsResponseBody = exports.ListSpaceSectionsRequest = exports.ListSpaceSectionsHeaders = exports.ListRelatedTeamsResponse = exports.ListRelatedTeamsResponseBody = exports.ListRelatedTeamsRequest = exports.ListRelatedTeamsHeaders = exports.ListRelatedSpaceTeamsResponse = exports.ListRelatedSpaceTeamsResponseBody = exports.ListRelatedSpaceTeamsRequest = exports.ListRelatedSpaceTeamsHeaders = exports.ListRecentsResponse = exports.ListRecentsResponseBody = exports.ListRecentsRequest = exports.ListRecentsHeaders = exports.ListPinSpacesResponse = exports.ListPinSpacesResponseBody = exports.ListPinSpacesRequest = void 0;
exports.UnpinSpaceResponseBody = exports.UnpinSpaceRequest = exports.UnpinSpaceHeaders = exports.UnmarkStarResponse = exports.UnmarkStarResponseBody = exports.UnmarkStarRequest = exports.UnmarkStarHeaders = exports.TemplateCategoriesResponse = exports.TemplateCategoriesResponseBody = exports.TemplateCategoriesRequest = exports.TemplateCategoriesHeaders = exports.TeamTemplatesResponse = exports.TeamTemplatesResponseBody = exports.TeamTemplatesRequest = exports.TeamTemplatesHeaders = exports.ShareUrlResponse = exports.ShareUrlResponseBody = exports.ShareUrlRequest = exports.ShareUrlHeaders = exports.SearchTemplatesResponse = exports.SearchTemplatesResponseBody = exports.SearchTemplatesRequest = exports.SearchTemplatesHeaders = exports.SearchResponse = exports.SearchResponseBody = exports.SearchRequest = exports.SearchHeaders = exports.SaveTeamMembersResponse = exports.SaveTeamMembersResponseBody = exports.SaveTeamMembersRequest = exports.SaveTeamMembersHeaders = exports.RenameDentryResponse = exports.RenameDentryRequest = exports.RenameDentryHeaders = exports.RemoveTeamMembersResponse = exports.RemoveTeamMembersResponseBody = exports.RemoveTeamMembersRequest = exports.RemoveTeamMembersHeaders = exports.RelatedSpacesResponse = exports.RelatedSpacesResponseBody = exports.RelatedSpacesRequest = exports.RelatedSpacesHeaders = exports.QuerySpaceResponse = exports.QuerySpaceRequest = exports.QuerySpaceHeaders = exports.QueryRecentListResponse = exports.QueryRecentListResponseBody = exports.QueryRecentListRequest = exports.QueryRecentListHeaders = exports.QueryMineSpaceResponse = void 0;
exports.ListPinSpacesResponseBodyResultItemsSpaceInfo = exports.ListPinSpacesResponseBodyResultItemsSpaceInfoModifier = exports.ListPinSpacesResponseBodyResultItemsSpaceInfoIconVO = exports.ListPinSpacesResponseBodyResultItemsSpaceInfoCreator = exports.ListPinSpacesRequestOption = exports.ListFeedsResponseBodyItems = exports.DocContentRequestOption = exports.CrossOrgMigrateRequestParam = exports.CrossOrgMigrateRequestOption = exports.CreateTeamRequestMembers = exports.CreateSpaceRequestShareScope = exports.CategoryTemplatesResponseBodyList = exports.CategoryTemplatesRequestParam = exports.CategoryTemplatesRequestOption = exports.CategoriesTemplatesRequestParam = exports.CategoriesTemplatesRequestOption = exports.BatchCreateTeamRequestParam = exports.BatchCreateTeamRequestParamCreateTeamParamList = exports.TeamVOVisitInfo = exports.TeamVOUpdater = exports.TeamVOShareScopeInfo = exports.TeamVORelatedDeptInfo = exports.TeamVOCreator = exports.TeamModelVisitInfo = exports.TeamModelUpdater = exports.TeamModelRelatedDeptInfo = exports.TeamModelCreator = exports.SpaceVOVisitorInfo = exports.SpaceVOOwner = exports.SpaceVOIconVO = exports.SpaceModelVisitorInfo = exports.SpaceModelOwner = exports.SpaceModelIconVO = exports.SpaceModelHdIconVO = exports.LinkSourceInfoIconUrl = exports.DentryVOVisitorInfo = exports.DentryVOUpdater = exports.DentryVOCreator = exports.DentryModelVisitorInfo = exports.DentryModelUpdater = exports.DentryModelStatisticalInfo = exports.DentryModelCreator = exports.UserTemplatesResponse = exports.UserTemplatesResponseBody = exports.UserTemplatesRequest = exports.UserTemplatesHeaders = exports.UpdateTeamResponse = exports.UpdateTeamRequest = exports.UpdateTeamHeaders = exports.UnpinSpaceResponse = void 0;
exports.UserTemplatesResponseBodyTemplateList = exports.UserTemplatesRequestOption = exports.TemplateCategoriesResponseBodyList = exports.TemplateCategoriesRequestParam = exports.TemplateCategoriesRequestOption = exports.TeamTemplatesResponseBodyTemplateList = exports.TeamTemplatesRequestOption = exports.ShareUrlResponseBodyShareUrlInfo = exports.ShareUrlRequestParam = exports.SearchTemplatesResponseBodyTemplateList = exports.SearchTemplatesRequestParam = exports.SearchTemplatesRequestOption = exports.SearchResponseBodySpaceResult = exports.SearchResponseBodySpaceResultItems = exports.SearchResponseBodySpaceResultItemsUserLastOperation = exports.SearchResponseBodySpaceResultItemsTeamVO = exports.SearchResponseBodySpaceResultItemsIconVO = exports.SearchResponseBodyDentryResult = exports.SearchResponseBodyDentryResultItems = exports.SearchRequestSpaceRequest = exports.SearchRequestDentryRequest = exports.SearchRequestDentryRequestVisitTimeRange = exports.SaveTeamMembersResponseBodyNotInOrgMembers = exports.SaveTeamMembersRequestMembers = exports.RemoveTeamMembersResponseBodyNotInOrgMembers = exports.RemoveTeamMembersRequestMembers = exports.RelatedSpacesResponseBodyItems = exports.RelatedSpacesResponseBodyItemsVisitorInfo = exports.RelatedSpacesResponseBodyItemsOwner = exports.RelatedSpacesResponseBodyItemsIconVO = exports.RelatedSpacesResponseBodyItemsHdIconVO = exports.QueryRecentListResponseBodyRecentList = exports.QueryRecentListResponseBodyRecentListTeam = exports.QueryItemByUrlResponseBodySpace = exports.QueryItemByUrlResponseBodySpaceOwner = exports.ListTeamMembersResponseBodyMembers = exports.ListStarsResponseBodyStarList = exports.ListStarsResponseBodyStarListTeamInfo = exports.ListStarsResponseBodyStarListSpaceInfo = exports.ListStarsResponseBodyStarListDentryInfo = exports.ListStarsResponseBodyStarListDentryInfoModifier = exports.ListStarsResponseBodyStarListDentryInfoCreator = exports.ListStarsRequestOption = exports.ListSpaceSectionsResponseBodyItems = exports.ListRecentsResponseBodyRecentDentryList = exports.ListRecentsResponseBodyRecentDentryListResource = exports.ListRecentsResponseBodyRecentDentryListResourceSpaceInfo = exports.ListRecentsRequestParam = exports.ListPinSpacesResponseBodyResultItems = exports.ListPinSpacesResponseBodyResultItemsTeamInfo = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class DentryModel extends $tea.Model {
    static names() {
        return {
            contentType: 'contentType',
            createdTime: 'createdTime',
            creator: 'creator',
            dentryId: 'dentryId',
            dentryType: 'dentryType',
            dentryUuid: 'dentryUuid',
            docKey: 'docKey',
            extension: 'extension',
            hasChildren: 'hasChildren',
            linkSourceInfo: 'linkSourceInfo',
            name: 'name',
            path: 'path',
            space: 'space',
            spaceId: 'spaceId',
            statisticalInfo: 'statisticalInfo',
            updatedTime: 'updatedTime',
            updater: 'updater',
            url: 'url',
            visitorInfo: 'visitorInfo',
        };
    }
    static types() {
        return {
            contentType: 'string',
            createdTime: 'number',
            creator: DentryModelCreator,
            dentryId: 'string',
            dentryType: 'string',
            dentryUuid: 'string',
            docKey: 'string',
            extension: 'string',
            hasChildren: 'boolean',
            linkSourceInfo: LinkSourceInfo,
            name: 'string',
            path: 'string',
            space: SpaceModel,
            spaceId: 'string',
            statisticalInfo: DentryModelStatisticalInfo,
            updatedTime: 'number',
            updater: DentryModelUpdater,
            url: 'string',
            visitorInfo: DentryModelVisitorInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryModel = DentryModel;
class DentryVO extends $tea.Model {
    static names() {
        return {
            contentType: 'contentType',
            createdTime: 'createdTime',
            creator: 'creator',
            dentryId: 'dentryId',
            dentryType: 'dentryType',
            dentryUuid: 'dentryUuid',
            docKey: 'docKey',
            extension: 'extension',
            hasChildren: 'hasChildren',
            linkSourceInfo: 'linkSourceInfo',
            name: 'name',
            path: 'path',
            space: 'space',
            spaceId: 'spaceId',
            updatedTime: 'updatedTime',
            updater: 'updater',
            url: 'url',
            visitorInfo: 'visitorInfo',
        };
    }
    static types() {
        return {
            contentType: 'string',
            createdTime: 'number',
            creator: DentryVOCreator,
            dentryId: 'string',
            dentryType: 'string',
            dentryUuid: 'string',
            docKey: 'string',
            extension: 'string',
            hasChildren: 'boolean',
            linkSourceInfo: LinkSourceInfo,
            name: 'string',
            path: 'string',
            space: SpaceModel,
            spaceId: 'string',
            updatedTime: 'number',
            updater: DentryVOUpdater,
            url: 'string',
            visitorInfo: DentryVOVisitorInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryVO = DentryVO;
class LinkSourceInfo extends $tea.Model {
    static names() {
        return {
            extension: 'extension',
            iconUrl: 'iconUrl',
            id: 'id',
            linkType: 'linkType',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            extension: 'string',
            iconUrl: LinkSourceInfoIconUrl,
            id: 'string',
            linkType: 'number',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkSourceInfo = LinkSourceInfo;
class OpenActionModel extends $tea.Model {
    static names() {
        return {
            name: 'name',
            timestamp: 'timestamp',
        };
    }
    static types() {
        return {
            name: 'string',
            timestamp: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.OpenActionModel = OpenActionModel;
class SpaceModel extends $tea.Model {
    static names() {
        return {
            cover: 'cover',
            description: 'description',
            hdIconVO: 'hdIconVO',
            iconVO: 'iconVO',
            id: 'id',
            name: 'name',
            owner: 'owner',
            recentList: 'recentList',
            type: 'type',
            url: 'url',
            visitorInfo: 'visitorInfo',
        };
    }
    static types() {
        return {
            cover: 'string',
            description: 'string',
            hdIconVO: SpaceModelHdIconVO,
            iconVO: SpaceModelIconVO,
            id: 'string',
            name: 'string',
            owner: SpaceModelOwner,
            recentList: { 'type': 'array', 'itemType': DentryModel },
            type: 'number',
            url: 'string',
            visitorInfo: SpaceModelVisitorInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpaceModel = SpaceModel;
class SpaceVO extends $tea.Model {
    static names() {
        return {
            cover: 'cover',
            description: 'description',
            iconVO: 'iconVO',
            id: 'id',
            name: 'name',
            owner: 'owner',
            type: 'type',
            url: 'url',
            visitorInfo: 'visitorInfo',
        };
    }
    static types() {
        return {
            cover: 'string',
            description: 'string',
            iconVO: SpaceVOIconVO,
            id: 'string',
            name: 'string',
            owner: SpaceVOOwner,
            type: 'number',
            url: 'string',
            visitorInfo: SpaceVOVisitorInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpaceVO = SpaceVO;
class TeamModel extends $tea.Model {
    static names() {
        return {
            cover: 'cover',
            createdTime: 'createdTime',
            creator: 'creator',
            description: 'description',
            icon: 'icon',
            id: 'id',
            name: 'name',
            relatedDeptInfo: 'relatedDeptInfo',
            status: 'status',
            type: 'type',
            updatedTime: 'updatedTime',
            updater: 'updater',
            url: 'url',
            visitInfo: 'visitInfo',
        };
    }
    static types() {
        return {
            cover: 'string',
            createdTime: 'number',
            creator: TeamModelCreator,
            description: 'string',
            icon: 'string',
            id: 'string',
            name: 'string',
            relatedDeptInfo: TeamModelRelatedDeptInfo,
            status: 'number',
            type: 'number',
            updatedTime: 'number',
            updater: TeamModelUpdater,
            url: 'string',
            visitInfo: TeamModelVisitInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamModel = TeamModel;
class TeamVO extends $tea.Model {
    static names() {
        return {
            cover: 'cover',
            createdTime: 'createdTime',
            creator: 'creator',
            description: 'description',
            icon: 'icon',
            id: 'id',
            name: 'name',
            relatedDeptInfo: 'relatedDeptInfo',
            shareScopeInfo: 'shareScopeInfo',
            status: 'status',
            type: 'type',
            updatedTime: 'updatedTime',
            updater: 'updater',
            url: 'url',
            visitInfo: 'visitInfo',
        };
    }
    static types() {
        return {
            cover: 'string',
            createdTime: 'number',
            creator: TeamVOCreator,
            description: 'string',
            icon: 'string',
            id: 'string',
            name: 'string',
            relatedDeptInfo: TeamVORelatedDeptInfo,
            shareScopeInfo: TeamVOShareScopeInfo,
            status: 'number',
            type: 'number',
            updatedTime: 'number',
            updater: TeamVOUpdater,
            url: 'string',
            visitInfo: TeamVOVisitInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamVO = TeamVO;
class MapValue extends $tea.Model {
    static names() {
        return {
            templateId: 'templateId',
            title: 'title',
            type: 'type',
            coverDownloadUrl: 'coverDownloadUrl',
            description: 'description',
            authorName: 'authorName',
            createTime: 'createTime',
            modifiedTime: 'modifiedTime',
            workspaceId: 'workspaceId',
            workspaceName: 'workspaceName',
            usedCount: 'usedCount',
            belong: 'belong',
            contentDownloadUrl: 'contentDownloadUrl',
        };
    }
    static types() {
        return {
            templateId: 'string',
            title: 'string',
            type: 'number',
            coverDownloadUrl: 'string',
            description: 'string',
            authorName: 'string',
            createTime: 'string',
            modifiedTime: 'string',
            workspaceId: 'string',
            workspaceName: 'string',
            usedCount: 'number',
            belong: 'string',
            contentDownloadUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MapValue = MapValue;
class BatchCreateTeamHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeamHeaders = BatchCreateTeamHeaders;
class BatchCreateTeamRequest extends $tea.Model {
    static names() {
        return {
            param: 'param',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            param: BatchCreateTeamRequestParam,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeamRequest = BatchCreateTeamRequest;
class BatchCreateTeamResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeamResponseBody = BatchCreateTeamResponseBody;
class BatchCreateTeamResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchCreateTeamResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeamResponse = BatchCreateTeamResponse;
class BatchDeleteRecentsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteRecentsHeaders = BatchDeleteRecentsHeaders;
class BatchDeleteRecentsRequest extends $tea.Model {
    static names() {
        return {
            dentryUuids: 'dentryUuids',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            dentryUuids: { 'type': 'array', 'itemType': 'string' },
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteRecentsRequest = BatchDeleteRecentsRequest;
class BatchDeleteRecentsResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteRecentsResponseBody = BatchDeleteRecentsResponseBody;
class BatchDeleteRecentsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: BatchDeleteRecentsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchDeleteRecentsResponse = BatchDeleteRecentsResponse;
class CategoriesTemplatesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoriesTemplatesHeaders = CategoriesTemplatesHeaders;
class CategoriesTemplatesRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            param: 'param',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: CategoriesTemplatesRequestOption,
            param: CategoriesTemplatesRequestParam,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoriesTemplatesRequest = CategoriesTemplatesRequest;
class CategoriesTemplatesResponseBody extends $tea.Model {
    static names() {
        return {
            map: 'map',
        };
    }
    static types() {
        return {
            map: { 'type': 'map', 'keyType': 'string', 'valueType': { 'type': 'array', 'itemType': MapValue } },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoriesTemplatesResponseBody = CategoriesTemplatesResponseBody;
class CategoriesTemplatesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CategoriesTemplatesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoriesTemplatesResponse = CategoriesTemplatesResponse;
class CategoryTemplatesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoryTemplatesHeaders = CategoryTemplatesHeaders;
class CategoryTemplatesRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            param: 'param',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: CategoryTemplatesRequestOption,
            param: CategoryTemplatesRequestParam,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoryTemplatesRequest = CategoryTemplatesRequest;
class CategoryTemplatesResponseBody extends $tea.Model {
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': CategoryTemplatesResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoryTemplatesResponseBody = CategoryTemplatesResponseBody;
class CategoryTemplatesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CategoryTemplatesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoryTemplatesResponse = CategoryTemplatesResponse;
class CopyDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryHeaders = CopyDentryHeaders;
class CopyDentryRequest extends $tea.Model {
    static names() {
        return {
            name: 'name',
            operatorId: 'operatorId',
            targetSpaceId: 'targetSpaceId',
            toNextDentryId: 'toNextDentryId',
            toParentDentryId: 'toParentDentryId',
            toPrevDentryId: 'toPrevDentryId',
        };
    }
    static types() {
        return {
            name: 'string',
            operatorId: 'string',
            targetSpaceId: 'string',
            toNextDentryId: 'string',
            toParentDentryId: 'string',
            toPrevDentryId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryRequest = CopyDentryRequest;
class CopyDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DentryVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CopyDentryResponse = CopyDentryResponse;
class CreateDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDentryHeaders = CreateDentryHeaders;
class CreateDentryRequest extends $tea.Model {
    static names() {
        return {
            dentryType: 'dentryType',
            documentType: 'documentType',
            name: 'name',
            operatorId: 'operatorId',
            parentDentryId: 'parentDentryId',
        };
    }
    static types() {
        return {
            dentryType: 'string',
            documentType: 'number',
            name: 'string',
            operatorId: 'string',
            parentDentryId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDentryRequest = CreateDentryRequest;
class CreateDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DentryVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateDentryResponse = CreateDentryResponse;
class CreateSpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSpaceHeaders = CreateSpaceHeaders;
class CreateSpaceRequest extends $tea.Model {
    static names() {
        return {
            description: 'description',
            icon: 'icon',
            name: 'name',
            operatorId: 'operatorId',
            sectionId: 'sectionId',
            shareScope: 'shareScope',
            teamId: 'teamId',
        };
    }
    static types() {
        return {
            description: 'string',
            icon: 'string',
            name: 'string',
            operatorId: 'string',
            sectionId: 'string',
            shareScope: CreateSpaceRequestShareScope,
            teamId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSpaceRequest = CreateSpaceRequest;
class CreateSpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SpaceVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSpaceResponse = CreateSpaceResponse;
class CreateTeamHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTeamHeaders = CreateTeamHeaders;
class CreateTeamRequest extends $tea.Model {
    static names() {
        return {
            cover: 'cover',
            description: 'description',
            icon: 'icon',
            members: 'members',
            name: 'name',
            operatorId: 'operatorId',
            teamType: 'teamType',
        };
    }
    static types() {
        return {
            cover: 'string',
            description: 'string',
            icon: 'string',
            members: { 'type': 'array', 'itemType': CreateTeamRequestMembers },
            name: 'string',
            operatorId: 'string',
            teamType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTeamRequest = CreateTeamRequest;
class CreateTeamResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TeamVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTeamResponse = CreateTeamResponse;
class CrossOrgMigrateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CrossOrgMigrateHeaders = CrossOrgMigrateHeaders;
class CrossOrgMigrateRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            param: 'param',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: CrossOrgMigrateRequestOption,
            param: CrossOrgMigrateRequestParam,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CrossOrgMigrateRequest = CrossOrgMigrateRequest;
class CrossOrgMigrateResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CrossOrgMigrateResponseBody = CrossOrgMigrateResponseBody;
class CrossOrgMigrateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CrossOrgMigrateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CrossOrgMigrateResponse = CrossOrgMigrateResponse;
class DeleteTeamHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTeamHeaders = DeleteTeamHeaders;
class DeleteTeamRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTeamRequest = DeleteTeamRequest;
class DeleteTeamResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TeamVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeleteTeamResponse = DeleteTeamResponse;
class DocContentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DocContentHeaders = DocContentHeaders;
class DocContentRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: DocContentRequestOption,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DocContentRequest = DocContentRequest;
class DocContentResponseBody extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DocContentResponseBody = DocContentResponseBody;
class DocContentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DocContentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DocContentResponse = DocContentResponse;
class GetDentryIdByUuidHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryIdByUuidHeaders = GetDentryIdByUuidHeaders;
class GetDentryIdByUuidRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryIdByUuidRequest = GetDentryIdByUuidRequest;
class GetDentryIdByUuidResponseBody extends $tea.Model {
    static names() {
        return {
            dentryId: 'dentryId',
            dentryUuid: 'dentryUuid',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            dentryId: 'string',
            dentryUuid: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryIdByUuidResponseBody = GetDentryIdByUuidResponseBody;
class GetDentryIdByUuidResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDentryIdByUuidResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDentryIdByUuidResponse = GetDentryIdByUuidResponse;
class GetDocContentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocContentHeaders = GetDocContentHeaders;
class GetDocContentRequest extends $tea.Model {
    static names() {
        return {
            targetFormat: 'targetFormat',
        };
    }
    static types() {
        return {
            targetFormat: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocContentRequest = GetDocContentRequest;
class GetDocContentResponseBody extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocContentResponseBody = GetDocContentResponseBody;
class GetDocContentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetDocContentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetDocContentResponse = GetDocContentResponse;
class GetMySpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMySpaceHeaders = GetMySpaceHeaders;
class GetMySpaceRequest extends $tea.Model {
    static names() {
        return {
            isMySpace: 'isMySpace',
        };
    }
    static types() {
        return {
            isMySpace: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMySpaceRequest = GetMySpaceRequest;
class GetMySpaceResponseBody extends $tea.Model {
    static names() {
        return {
            createTime: 'createTime',
            modifyTime: 'modifyTime',
            quota: 'quota',
            spaceId: 'spaceId',
            spaceName: 'spaceName',
            spaceType: 'spaceType',
            usedQuota: 'usedQuota',
        };
    }
    static types() {
        return {
            createTime: 'string',
            modifyTime: 'string',
            quota: 'number',
            spaceId: 'string',
            spaceName: 'string',
            spaceType: 'string',
            usedQuota: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMySpaceResponseBody = GetMySpaceResponseBody;
class GetMySpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetMySpaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetMySpaceResponse = GetMySpaceResponse;
class GetSchemaHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSchemaHeaders = GetSchemaHeaders;
class GetSchemaRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSchemaRequest = GetSchemaRequest;
class GetSchemaResponseBody extends $tea.Model {
    static names() {
        return {
            revision: 'revision',
            value: 'value',
        };
    }
    static types() {
        return {
            revision: 'number',
            value: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSchemaResponseBody = GetSchemaResponseBody;
class GetSchemaResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSchemaResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSchemaResponse = GetSchemaResponse;
class GetSpaceDirectoriesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceDirectoriesHeaders = GetSpaceDirectoriesHeaders;
class GetSpaceDirectoriesRequest extends $tea.Model {
    static names() {
        return {
            dentryId: 'dentryId',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            dentryId: 'string',
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceDirectoriesRequest = GetSpaceDirectoriesRequest;
class GetSpaceDirectoriesResponseBody extends $tea.Model {
    static names() {
        return {
            children: 'children',
            hasMore: 'hasMore',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            children: { 'type': 'array', 'itemType': DentryModel },
            hasMore: 'boolean',
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceDirectoriesResponseBody = GetSpaceDirectoriesResponseBody;
class GetSpaceDirectoriesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetSpaceDirectoriesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetSpaceDirectoriesResponse = GetSpaceDirectoriesResponse;
class GetStarInfoHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetStarInfoHeaders = GetStarInfoHeaders;
class GetStarInfoRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetStarInfoRequest = GetStarInfoRequest;
class GetStarInfoResponseBody extends $tea.Model {
    static names() {
        return {
            starred: 'starred',
        };
    }
    static types() {
        return {
            starred: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetStarInfoResponseBody = GetStarInfoResponseBody;
class GetStarInfoResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetStarInfoResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetStarInfoResponse = GetStarInfoResponse;
class GetTeamHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTeamHeaders = GetTeamHeaders;
class GetTeamRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTeamRequest = GetTeamRequest;
class GetTeamResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TeamVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTeamResponse = GetTeamResponse;
class GetTotalNumberOfDentriesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTotalNumberOfDentriesHeaders = GetTotalNumberOfDentriesHeaders;
class GetTotalNumberOfDentriesRequest extends $tea.Model {
    static names() {
        return {
            includeFolder: 'includeFolder',
            operatorId: 'operatorId',
            spaceTypes: 'spaceTypes',
        };
    }
    static types() {
        return {
            includeFolder: 'boolean',
            operatorId: 'string',
            spaceTypes: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTotalNumberOfDentriesRequest = GetTotalNumberOfDentriesRequest;
class GetTotalNumberOfDentriesResponseBody extends $tea.Model {
    static names() {
        return {
            dentriesCount: 'dentriesCount',
        };
    }
    static types() {
        return {
            dentriesCount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTotalNumberOfDentriesResponseBody = GetTotalNumberOfDentriesResponseBody;
class GetTotalNumberOfDentriesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTotalNumberOfDentriesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTotalNumberOfDentriesResponse = GetTotalNumberOfDentriesResponse;
class GetTotalNumberOfSpacesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTotalNumberOfSpacesHeaders = GetTotalNumberOfSpacesHeaders;
class GetTotalNumberOfSpacesRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTotalNumberOfSpacesRequest = GetTotalNumberOfSpacesRequest;
class GetTotalNumberOfSpacesResponseBody extends $tea.Model {
    static names() {
        return {
            spacesCount: 'spacesCount',
        };
    }
    static types() {
        return {
            spacesCount: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTotalNumberOfSpacesResponseBody = GetTotalNumberOfSpacesResponseBody;
class GetTotalNumberOfSpacesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetTotalNumberOfSpacesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetTotalNumberOfSpacesResponse = GetTotalNumberOfSpacesResponse;
class GetUserInfoByOpenTokenHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserInfoByOpenTokenHeaders = GetUserInfoByOpenTokenHeaders;
class GetUserInfoByOpenTokenRequest extends $tea.Model {
    static names() {
        return {
            docKey: 'docKey',
            openToken: 'openToken',
        };
    }
    static types() {
        return {
            docKey: 'string',
            openToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserInfoByOpenTokenRequest = GetUserInfoByOpenTokenRequest;
class GetUserInfoByOpenTokenResponseBody extends $tea.Model {
    static names() {
        return {
            unionId: 'unionId',
            userId: 'userId',
        };
    }
    static types() {
        return {
            unionId: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserInfoByOpenTokenResponseBody = GetUserInfoByOpenTokenResponseBody;
class GetUserInfoByOpenTokenResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUserInfoByOpenTokenResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUserInfoByOpenTokenResponse = GetUserInfoByOpenTokenResponse;
class GetUuidByDentryIdHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUuidByDentryIdHeaders = GetUuidByDentryIdHeaders;
class GetUuidByDentryIdRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUuidByDentryIdRequest = GetUuidByDentryIdRequest;
class GetUuidByDentryIdResponseBody extends $tea.Model {
    static names() {
        return {
            dentryId: 'dentryId',
            dentryUuid: 'dentryUuid',
            spaceId: 'spaceId',
        };
    }
    static types() {
        return {
            dentryId: 'string',
            dentryUuid: 'string',
            spaceId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUuidByDentryIdResponseBody = GetUuidByDentryIdResponseBody;
class GetUuidByDentryIdResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: GetUuidByDentryIdResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.GetUuidByDentryIdResponse = GetUuidByDentryIdResponse;
class ListFeedsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFeedsHeaders = ListFeedsHeaders;
class ListFeedsRequest extends $tea.Model {
    static names() {
        return {
            excludeFile: 'excludeFile',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            excludeFile: 'boolean',
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFeedsRequest = ListFeedsRequest;
class ListFeedsResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            items: 'items',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            items: { 'type': 'array', 'itemType': ListFeedsResponseBodyItems },
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFeedsResponseBody = ListFeedsResponseBody;
class ListFeedsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListFeedsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFeedsResponse = ListFeedsResponse;
class ListHotDocsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListHotDocsHeaders = ListHotDocsHeaders;
class ListHotDocsRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListHotDocsRequest = ListHotDocsRequest;
class ListHotDocsResponseBody extends $tea.Model {
    static names() {
        return {
            items: 'items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': DentryModel },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListHotDocsResponseBody = ListHotDocsResponseBody;
class ListHotDocsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListHotDocsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListHotDocsResponse = ListHotDocsResponse;
class ListPinSpacesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesHeaders = ListPinSpacesHeaders;
class ListPinSpacesRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: ListPinSpacesRequestOption,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesRequest = ListPinSpacesRequest;
class ListPinSpacesResponseBody extends $tea.Model {
    static names() {
        return {
            nextToken: 'nextToken',
            resultItems: 'resultItems',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            resultItems: { 'type': 'array', 'itemType': ListPinSpacesResponseBodyResultItems },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesResponseBody = ListPinSpacesResponseBody;
class ListPinSpacesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListPinSpacesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesResponse = ListPinSpacesResponse;
class ListRecentsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecentsHeaders = ListRecentsHeaders;
class ListRecentsRequest extends $tea.Model {
    static names() {
        return {
            param: 'param',
        };
    }
    static types() {
        return {
            param: ListRecentsRequestParam,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecentsRequest = ListRecentsRequest;
class ListRecentsResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            recentDentryList: 'recentDentryList',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'string',
            recentDentryList: { 'type': 'array', 'itemType': ListRecentsResponseBodyRecentDentryList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecentsResponseBody = ListRecentsResponseBody;
class ListRecentsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListRecentsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecentsResponse = ListRecentsResponse;
class ListRelatedSpaceTeamsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRelatedSpaceTeamsHeaders = ListRelatedSpaceTeamsHeaders;
class ListRelatedSpaceTeamsRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
            type: 'type',
        };
    }
    static types() {
        return {
            operatorId: 'string',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRelatedSpaceTeamsRequest = ListRelatedSpaceTeamsRequest;
class ListRelatedSpaceTeamsResponseBody extends $tea.Model {
    static names() {
        return {
            items: 'items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': TeamModel },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRelatedSpaceTeamsResponseBody = ListRelatedSpaceTeamsResponseBody;
class ListRelatedSpaceTeamsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListRelatedSpaceTeamsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRelatedSpaceTeamsResponse = ListRelatedSpaceTeamsResponse;
class ListRelatedTeamsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRelatedTeamsHeaders = ListRelatedTeamsHeaders;
class ListRelatedTeamsRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
            type: 'type',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRelatedTeamsRequest = ListRelatedTeamsRequest;
class ListRelatedTeamsResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            items: 'items',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            items: { 'type': 'array', 'itemType': TeamModel },
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRelatedTeamsResponseBody = ListRelatedTeamsResponseBody;
class ListRelatedTeamsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListRelatedTeamsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRelatedTeamsResponse = ListRelatedTeamsResponse;
class ListSpaceSectionsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSpaceSectionsHeaders = ListSpaceSectionsHeaders;
class ListSpaceSectionsRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSpaceSectionsRequest = ListSpaceSectionsRequest;
class ListSpaceSectionsResponseBody extends $tea.Model {
    static names() {
        return {
            items: 'items',
        };
    }
    static types() {
        return {
            items: { 'type': 'array', 'itemType': ListSpaceSectionsResponseBodyItems },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSpaceSectionsResponseBody = ListSpaceSectionsResponseBody;
class ListSpaceSectionsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListSpaceSectionsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSpaceSectionsResponse = ListSpaceSectionsResponse;
class ListStarsHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsHeaders = ListStarsHeaders;
class ListStarsRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: ListStarsRequestOption,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsRequest = ListStarsRequest;
class ListStarsResponseBody extends $tea.Model {
    static names() {
        return {
            nextToken: 'nextToken',
            starList: 'starList',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            starList: { 'type': 'array', 'itemType': ListStarsResponseBodyStarList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsResponseBody = ListStarsResponseBody;
class ListStarsResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListStarsResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsResponse = ListStarsResponse;
class ListTeamMembersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTeamMembersHeaders = ListTeamMembersHeaders;
class ListTeamMembersRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTeamMembersRequest = ListTeamMembersRequest;
class ListTeamMembersResponseBody extends $tea.Model {
    static names() {
        return {
            members: 'members',
            teamName: 'teamName',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': ListTeamMembersResponseBodyMembers },
            teamName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTeamMembersResponseBody = ListTeamMembersResponseBody;
class ListTeamMembersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ListTeamMembersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTeamMembersResponse = ListTeamMembersResponse;
class MarkStarHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MarkStarHeaders = MarkStarHeaders;
class MarkStarRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MarkStarRequest = MarkStarRequest;
class MarkStarResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MarkStarResponseBody = MarkStarResponseBody;
class MarkStarResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: MarkStarResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MarkStarResponse = MarkStarResponse;
class MoveDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryHeaders = MoveDentryHeaders;
class MoveDentryRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
            targetSpaceId: 'targetSpaceId',
            toNextDentryId: 'toNextDentryId',
            toParentDentryId: 'toParentDentryId',
            toPrevDentryId: 'toPrevDentryId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
            targetSpaceId: 'string',
            toNextDentryId: 'string',
            toParentDentryId: 'string',
            toPrevDentryId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryRequest = MoveDentryRequest;
class MoveDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DentryVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.MoveDentryResponse = MoveDentryResponse;
class PinSpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PinSpaceHeaders = PinSpaceHeaders;
class PinSpaceRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PinSpaceRequest = PinSpaceRequest;
class PinSpaceResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PinSpaceResponseBody = PinSpaceResponseBody;
class PinSpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: PinSpaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PinSpaceResponse = PinSpaceResponse;
class QueryDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDentryHeaders = QueryDentryHeaders;
class QueryDentryRequest extends $tea.Model {
    static names() {
        return {
            includeSpace: 'includeSpace',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            includeSpace: 'boolean',
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDentryRequest = QueryDentryRequest;
class QueryDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DentryVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDentryResponse = QueryDentryResponse;
class QueryDocContentHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDocContentHeaders = QueryDocContentHeaders;
class QueryDocContentRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
            targetFormat: 'targetFormat',
        };
    }
    static types() {
        return {
            operatorId: 'string',
            targetFormat: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDocContentRequest = QueryDocContentRequest;
class QueryDocContentResponseBody extends $tea.Model {
    static names() {
        return {
            taskId: 'taskId',
        };
    }
    static types() {
        return {
            taskId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDocContentResponseBody = QueryDocContentResponseBody;
class QueryDocContentResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryDocContentResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryDocContentResponse = QueryDocContentResponse;
class QueryItemByUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryItemByUrlHeaders = QueryItemByUrlHeaders;
class QueryItemByUrlRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
            url: 'url',
            withStatisticalInfo: 'withStatisticalInfo',
        };
    }
    static types() {
        return {
            operatorId: 'string',
            url: 'string',
            withStatisticalInfo: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryItemByUrlRequest = QueryItemByUrlRequest;
class QueryItemByUrlResponseBody extends $tea.Model {
    static names() {
        return {
            bizType: 'bizType',
            dentry: 'dentry',
            resourceType: 'resourceType',
            space: 'space',
        };
    }
    static types() {
        return {
            bizType: 'string',
            dentry: DentryModel,
            resourceType: 'string',
            space: QueryItemByUrlResponseBodySpace,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryItemByUrlResponseBody = QueryItemByUrlResponseBody;
class QueryItemByUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryItemByUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryItemByUrlResponse = QueryItemByUrlResponse;
class QueryMineSpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMineSpaceHeaders = QueryMineSpaceHeaders;
class QueryMineSpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SpaceVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryMineSpaceResponse = QueryMineSpaceResponse;
class QueryRecentListHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRecentListHeaders = QueryRecentListHeaders;
class QueryRecentListRequest extends $tea.Model {
    static names() {
        return {
            creatorType: 'creatorType',
            fileType: 'fileType',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
            recentType: 'recentType',
        };
    }
    static types() {
        return {
            creatorType: 'number',
            fileType: 'number',
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
            recentType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRecentListRequest = QueryRecentListRequest;
class QueryRecentListResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            nextToken: 'nextToken',
            recentList: 'recentList',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            nextToken: 'string',
            recentList: { 'type': 'array', 'itemType': QueryRecentListResponseBodyRecentList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRecentListResponseBody = QueryRecentListResponseBody;
class QueryRecentListResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: QueryRecentListResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRecentListResponse = QueryRecentListResponse;
class QuerySpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySpaceHeaders = QuerySpaceHeaders;
class QuerySpaceRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySpaceRequest = QuerySpaceRequest;
class QuerySpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SpaceVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QuerySpaceResponse = QuerySpaceResponse;
class RelatedSpacesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RelatedSpacesHeaders = RelatedSpacesHeaders;
class RelatedSpacesRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operatorId: 'operatorId',
            teamId: 'teamId',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            operatorId: 'string',
            teamId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RelatedSpacesRequest = RelatedSpacesRequest;
class RelatedSpacesResponseBody extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            items: 'items',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            items: { 'type': 'array', 'itemType': RelatedSpacesResponseBodyItems },
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RelatedSpacesResponseBody = RelatedSpacesResponseBody;
class RelatedSpacesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RelatedSpacesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RelatedSpacesResponse = RelatedSpacesResponse;
class RemoveTeamMembersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveTeamMembersHeaders = RemoveTeamMembersHeaders;
class RemoveTeamMembersRequest extends $tea.Model {
    static names() {
        return {
            members: 'members',
            notify: 'notify',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': RemoveTeamMembersRequestMembers },
            notify: 'boolean',
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveTeamMembersRequest = RemoveTeamMembersRequest;
class RemoveTeamMembersResponseBody extends $tea.Model {
    static names() {
        return {
            notInOrgMembers: 'notInOrgMembers',
            saveSuccess: 'saveSuccess',
        };
    }
    static types() {
        return {
            notInOrgMembers: { 'type': 'array', 'itemType': RemoveTeamMembersResponseBodyNotInOrgMembers },
            saveSuccess: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveTeamMembersResponseBody = RemoveTeamMembersResponseBody;
class RemoveTeamMembersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RemoveTeamMembersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveTeamMembersResponse = RemoveTeamMembersResponse;
class RenameDentryHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RenameDentryHeaders = RenameDentryHeaders;
class RenameDentryRequest extends $tea.Model {
    static names() {
        return {
            name: 'name',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            name: 'string',
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RenameDentryRequest = RenameDentryRequest;
class RenameDentryResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DentryVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RenameDentryResponse = RenameDentryResponse;
class SaveTeamMembersHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveTeamMembersHeaders = SaveTeamMembersHeaders;
class SaveTeamMembersRequest extends $tea.Model {
    static names() {
        return {
            members: 'members',
            notify: 'notify',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            members: { 'type': 'array', 'itemType': SaveTeamMembersRequestMembers },
            notify: 'boolean',
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveTeamMembersRequest = SaveTeamMembersRequest;
class SaveTeamMembersResponseBody extends $tea.Model {
    static names() {
        return {
            notInOrgMembers: 'notInOrgMembers',
            saveSuccess: 'saveSuccess',
        };
    }
    static types() {
        return {
            notInOrgMembers: { 'type': 'array', 'itemType': SaveTeamMembersResponseBodyNotInOrgMembers },
            saveSuccess: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveTeamMembersResponseBody = SaveTeamMembersResponseBody;
class SaveTeamMembersResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SaveTeamMembersResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveTeamMembersResponse = SaveTeamMembersResponse;
class SearchHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchHeaders = SearchHeaders;
class SearchRequest extends $tea.Model {
    static names() {
        return {
            dentryRequest: 'dentryRequest',
            keyword: 'keyword',
            operatorId: 'operatorId',
            spaceRequest: 'spaceRequest',
        };
    }
    static types() {
        return {
            dentryRequest: SearchRequestDentryRequest,
            keyword: 'string',
            operatorId: 'string',
            spaceRequest: SearchRequestSpaceRequest,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchRequest = SearchRequest;
class SearchResponseBody extends $tea.Model {
    static names() {
        return {
            dentryResult: 'dentryResult',
            spaceResult: 'spaceResult',
        };
    }
    static types() {
        return {
            dentryResult: SearchResponseBodyDentryResult,
            spaceResult: SearchResponseBodySpaceResult,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchResponseBody = SearchResponseBody;
class SearchResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchResponse = SearchResponse;
class SearchTemplatesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTemplatesHeaders = SearchTemplatesHeaders;
class SearchTemplatesRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            param: 'param',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: SearchTemplatesRequestOption,
            param: SearchTemplatesRequestParam,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTemplatesRequest = SearchTemplatesRequest;
class SearchTemplatesResponseBody extends $tea.Model {
    static names() {
        return {
            nextToken: 'nextToken',
            templateList: 'templateList',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            templateList: { 'type': 'array', 'itemType': SearchTemplatesResponseBodyTemplateList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTemplatesResponseBody = SearchTemplatesResponseBody;
class SearchTemplatesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: SearchTemplatesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTemplatesResponse = SearchTemplatesResponse;
class ShareUrlHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ShareUrlHeaders = ShareUrlHeaders;
class ShareUrlRequest extends $tea.Model {
    static names() {
        return {
            param: 'param',
        };
    }
    static types() {
        return {
            param: ShareUrlRequestParam,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ShareUrlRequest = ShareUrlRequest;
class ShareUrlResponseBody extends $tea.Model {
    static names() {
        return {
            shareUrlInfo: 'shareUrlInfo',
        };
    }
    static types() {
        return {
            shareUrlInfo: ShareUrlResponseBodyShareUrlInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ShareUrlResponseBody = ShareUrlResponseBody;
class ShareUrlResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: ShareUrlResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ShareUrlResponse = ShareUrlResponse;
class TeamTemplatesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamTemplatesHeaders = TeamTemplatesHeaders;
class TeamTemplatesRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: TeamTemplatesRequestOption,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamTemplatesRequest = TeamTemplatesRequest;
class TeamTemplatesResponseBody extends $tea.Model {
    static names() {
        return {
            nextToken: 'nextToken',
            templateList: 'templateList',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            templateList: { 'type': 'array', 'itemType': TeamTemplatesResponseBodyTemplateList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamTemplatesResponseBody = TeamTemplatesResponseBody;
class TeamTemplatesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TeamTemplatesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamTemplatesResponse = TeamTemplatesResponse;
class TemplateCategoriesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TemplateCategoriesHeaders = TemplateCategoriesHeaders;
class TemplateCategoriesRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            param: 'param',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: TemplateCategoriesRequestOption,
            param: TemplateCategoriesRequestParam,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TemplateCategoriesRequest = TemplateCategoriesRequest;
class TemplateCategoriesResponseBody extends $tea.Model {
    static names() {
        return {
            list: 'list',
        };
    }
    static types() {
        return {
            list: { 'type': 'array', 'itemType': TemplateCategoriesResponseBodyList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TemplateCategoriesResponseBody = TemplateCategoriesResponseBody;
class TemplateCategoriesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TemplateCategoriesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TemplateCategoriesResponse = TemplateCategoriesResponse;
class UnmarkStarHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnmarkStarHeaders = UnmarkStarHeaders;
class UnmarkStarRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnmarkStarRequest = UnmarkStarRequest;
class UnmarkStarResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnmarkStarResponseBody = UnmarkStarResponseBody;
class UnmarkStarResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnmarkStarResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnmarkStarResponse = UnmarkStarResponse;
class UnpinSpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnpinSpaceHeaders = UnpinSpaceHeaders;
class UnpinSpaceRequest extends $tea.Model {
    static names() {
        return {
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnpinSpaceRequest = UnpinSpaceRequest;
class UnpinSpaceResponseBody extends $tea.Model {
    static names() {
        return {
            success: 'success',
        };
    }
    static types() {
        return {
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnpinSpaceResponseBody = UnpinSpaceResponseBody;
class UnpinSpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UnpinSpaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UnpinSpaceResponse = UnpinSpaceResponse;
class UpdateTeamHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateTeamHeaders = UpdateTeamHeaders;
class UpdateTeamRequest extends $tea.Model {
    static names() {
        return {
            description: 'description',
            name: 'name',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            description: 'string',
            name: 'string',
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateTeamRequest = UpdateTeamRequest;
class UpdateTeamResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: TeamVO,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateTeamResponse = UpdateTeamResponse;
class UserTemplatesHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserTemplatesHeaders = UserTemplatesHeaders;
class UserTemplatesRequest extends $tea.Model {
    static names() {
        return {
            option: 'option',
            operatorId: 'operatorId',
        };
    }
    static types() {
        return {
            option: UserTemplatesRequestOption,
            operatorId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserTemplatesRequest = UserTemplatesRequest;
class UserTemplatesResponseBody extends $tea.Model {
    static names() {
        return {
            nextToken: 'nextToken',
            templateList: 'templateList',
        };
    }
    static types() {
        return {
            nextToken: 'string',
            templateList: { 'type': 'array', 'itemType': UserTemplatesResponseBodyTemplateList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserTemplatesResponseBody = UserTemplatesResponseBody;
class UserTemplatesResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UserTemplatesResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserTemplatesResponse = UserTemplatesResponse;
class DentryModelCreator extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryModelCreator = DentryModelCreator;
class DentryModelStatisticalInfo extends $tea.Model {
    static names() {
        return {
            wordCount: 'wordCount',
        };
    }
    static types() {
        return {
            wordCount: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryModelStatisticalInfo = DentryModelStatisticalInfo;
class DentryModelUpdater extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryModelUpdater = DentryModelUpdater;
class DentryModelVisitorInfo extends $tea.Model {
    static names() {
        return {
            dentryActions: 'dentryActions',
            roleCode: 'roleCode',
            spaceActions: 'spaceActions',
        };
    }
    static types() {
        return {
            dentryActions: { 'type': 'array', 'itemType': 'string' },
            roleCode: 'string',
            spaceActions: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryModelVisitorInfo = DentryModelVisitorInfo;
class DentryVOCreator extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryVOCreator = DentryVOCreator;
class DentryVOUpdater extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryVOUpdater = DentryVOUpdater;
class DentryVOVisitorInfo extends $tea.Model {
    static names() {
        return {
            dentryActions: 'dentryActions',
            roleCode: 'roleCode',
            spaceActions: 'spaceActions',
        };
    }
    static types() {
        return {
            dentryActions: { 'type': 'array', 'itemType': 'string' },
            roleCode: 'string',
            spaceActions: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DentryVOVisitorInfo = DentryVOVisitorInfo;
class LinkSourceInfoIconUrl extends $tea.Model {
    static names() {
        return {
            line: 'line',
            small: 'small',
        };
    }
    static types() {
        return {
            line: 'string',
            small: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.LinkSourceInfoIconUrl = LinkSourceInfoIconUrl;
class SpaceModelHdIconVO extends $tea.Model {
    static names() {
        return {
            icon: 'icon',
            type: 'type',
        };
    }
    static types() {
        return {
            icon: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpaceModelHdIconVO = SpaceModelHdIconVO;
class SpaceModelIconVO extends $tea.Model {
    static names() {
        return {
            icon: 'icon',
            type: 'type',
        };
    }
    static types() {
        return {
            icon: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpaceModelIconVO = SpaceModelIconVO;
class SpaceModelOwner extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpaceModelOwner = SpaceModelOwner;
class SpaceModelVisitorInfo extends $tea.Model {
    static names() {
        return {
            dentryActions: 'dentryActions',
            roleCode: 'roleCode',
            spaceActions: 'spaceActions',
        };
    }
    static types() {
        return {
            dentryActions: { 'type': 'array', 'itemType': 'string' },
            roleCode: 'string',
            spaceActions: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpaceModelVisitorInfo = SpaceModelVisitorInfo;
class SpaceVOIconVO extends $tea.Model {
    static names() {
        return {
            icon: 'icon',
            type: 'type',
        };
    }
    static types() {
        return {
            icon: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpaceVOIconVO = SpaceVOIconVO;
class SpaceVOOwner extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpaceVOOwner = SpaceVOOwner;
class SpaceVOVisitorInfo extends $tea.Model {
    static names() {
        return {
            dentryActions: 'dentryActions',
            roleCode: 'roleCode',
            spaceActions: 'spaceActions',
        };
    }
    static types() {
        return {
            dentryActions: { 'type': 'array', 'itemType': 'string' },
            roleCode: 'string',
            spaceActions: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SpaceVOVisitorInfo = SpaceVOVisitorInfo;
class TeamModelCreator extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamModelCreator = TeamModelCreator;
class TeamModelRelatedDeptInfo extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamModelRelatedDeptInfo = TeamModelRelatedDeptInfo;
class TeamModelUpdater extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamModelUpdater = TeamModelUpdater;
class TeamModelVisitInfo extends $tea.Model {
    static names() {
        return {
            joinTime: 'joinTime',
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            joinTime: 'string',
            roleCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamModelVisitInfo = TeamModelVisitInfo;
class TeamVOCreator extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamVOCreator = TeamVOCreator;
class TeamVORelatedDeptInfo extends $tea.Model {
    static names() {
        return {
            deptId: 'deptId',
            deptName: 'deptName',
        };
    }
    static types() {
        return {
            deptId: 'string',
            deptName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamVORelatedDeptInfo = TeamVORelatedDeptInfo;
class TeamVOShareScopeInfo extends $tea.Model {
    static names() {
        return {
            roleId: 'roleId',
            scope: 'scope',
        };
    }
    static types() {
        return {
            roleId: 'string',
            scope: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamVOShareScopeInfo = TeamVOShareScopeInfo;
class TeamVOUpdater extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamVOUpdater = TeamVOUpdater;
class TeamVOVisitInfo extends $tea.Model {
    static names() {
        return {
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            roleCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamVOVisitInfo = TeamVOVisitInfo;
class BatchCreateTeamRequestParamCreateTeamParamList extends $tea.Model {
    static names() {
        return {
            adminUnionIdList: 'adminUnionIdList',
            creatorUnionId: 'creatorUnionId',
            deptId: 'deptId',
            teamName: 'teamName',
        };
    }
    static types() {
        return {
            adminUnionIdList: { 'type': 'array', 'itemType': 'string' },
            creatorUnionId: 'string',
            deptId: 'string',
            teamName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeamRequestParamCreateTeamParamList = BatchCreateTeamRequestParamCreateTeamParamList;
class BatchCreateTeamRequestParam extends $tea.Model {
    static names() {
        return {
            createTeamParamList: 'createTeamParamList',
        };
    }
    static types() {
        return {
            createTeamParamList: { 'type': 'array', 'itemType': BatchCreateTeamRequestParamCreateTeamParamList },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.BatchCreateTeamRequestParam = BatchCreateTeamRequestParam;
class CategoriesTemplatesRequestOption extends $tea.Model {
    static names() {
        return {
            categoryStatus: 'categoryStatus',
            queryPlatform: 'queryPlatform',
            size: 'size',
            templateStatus: 'templateStatus',
        };
    }
    static types() {
        return {
            categoryStatus: 'number',
            queryPlatform: 'string',
            size: 'number',
            templateStatus: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoriesTemplatesRequestOption = CategoriesTemplatesRequestOption;
class CategoriesTemplatesRequestParam extends $tea.Model {
    static names() {
        return {
            categoryIds: 'categoryIds',
        };
    }
    static types() {
        return {
            categoryIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoriesTemplatesRequestParam = CategoriesTemplatesRequestParam;
class CategoryTemplatesRequestOption extends $tea.Model {
    static names() {
        return {
            categoryStatus: 'categoryStatus',
            templateStatus: 'templateStatus',
        };
    }
    static types() {
        return {
            categoryStatus: 'number',
            templateStatus: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoryTemplatesRequestOption = CategoryTemplatesRequestOption;
class CategoryTemplatesRequestParam extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
        };
    }
    static types() {
        return {
            categoryId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoryTemplatesRequestParam = CategoryTemplatesRequestParam;
class CategoryTemplatesResponseBodyList extends $tea.Model {
    static names() {
        return {
            authorName: 'authorName',
            belong: 'belong',
            contentDownloadUrl: 'contentDownloadUrl',
            coverDownloadUrl: 'coverDownloadUrl',
            createTime: 'createTime',
            description: 'description',
            modifiedTime: 'modifiedTime',
            templateId: 'templateId',
            title: 'title',
            type: 'type',
            usedCount: 'usedCount',
            workspaceId: 'workspaceId',
            workspaceName: 'workspaceName',
        };
    }
    static types() {
        return {
            authorName: 'string',
            belong: 'string',
            contentDownloadUrl: 'string',
            coverDownloadUrl: 'string',
            createTime: 'string',
            description: 'string',
            modifiedTime: 'string',
            templateId: 'string',
            title: 'string',
            type: 'number',
            usedCount: 'number',
            workspaceId: 'string',
            workspaceName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CategoryTemplatesResponseBodyList = CategoryTemplatesResponseBodyList;
class CreateSpaceRequestShareScope extends $tea.Model {
    static names() {
        return {
            scope: 'scope',
        };
    }
    static types() {
        return {
            scope: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateSpaceRequestShareScope = CreateSpaceRequestShareScope;
class CreateTeamRequestMembers extends $tea.Model {
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'number',
            roleCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateTeamRequestMembers = CreateTeamRequestMembers;
class CrossOrgMigrateRequestOption extends $tea.Model {
    static names() {
        return {
            checkOperatorSourceRole: 'checkOperatorSourceRole',
            deleteSource: 'deleteSource',
            needRecycleFailedWorkspaceId: 'needRecycleFailedWorkspaceId',
            relateTeamId: 'relateTeamId',
            relateTeamIdStr: 'relateTeamIdStr',
            retainOrgGroup: 'retainOrgGroup',
            skipRole: 'skipRole',
            workspaceIdStrs: 'workspaceIdStrs',
            workspaceIds: 'workspaceIds',
        };
    }
    static types() {
        return {
            checkOperatorSourceRole: 'boolean',
            deleteSource: 'boolean',
            needRecycleFailedWorkspaceId: 'boolean',
            relateTeamId: 'number',
            relateTeamIdStr: 'string',
            retainOrgGroup: 'boolean',
            skipRole: 'boolean',
            workspaceIdStrs: { 'type': 'array', 'itemType': 'string' },
            workspaceIds: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CrossOrgMigrateRequestOption = CrossOrgMigrateRequestOption;
class CrossOrgMigrateRequestParam extends $tea.Model {
    static names() {
        return {
            corpId: 'corpId',
        };
    }
    static types() {
        return {
            corpId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CrossOrgMigrateRequestParam = CrossOrgMigrateRequestParam;
class DocContentRequestOption extends $tea.Model {
    static names() {
        return {
            targetFormat: 'targetFormat',
        };
    }
    static types() {
        return {
            targetFormat: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DocContentRequestOption = DocContentRequestOption;
class ListFeedsResponseBodyItems extends $tea.Model {
    static names() {
        return {
            content: 'content',
            time: 'time',
            type: 'type',
        };
    }
    static types() {
        return {
            content: 'string',
            time: 'number',
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListFeedsResponseBodyItems = ListFeedsResponseBodyItems;
class ListPinSpacesRequestOption extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            withSpaceCreatorInfo: 'withSpaceCreatorInfo',
            withSpaceModifierInfo: 'withSpaceModifierInfo',
            withSpacePermissionRole: 'withSpacePermissionRole',
            withTeamDetail: 'withTeamDetail',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            withSpaceCreatorInfo: 'boolean',
            withSpaceModifierInfo: 'boolean',
            withSpacePermissionRole: 'boolean',
            withTeamDetail: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesRequestOption = ListPinSpacesRequestOption;
class ListPinSpacesResponseBodyResultItemsSpaceInfoCreator extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesResponseBodyResultItemsSpaceInfoCreator = ListPinSpacesResponseBodyResultItemsSpaceInfoCreator;
class ListPinSpacesResponseBodyResultItemsSpaceInfoIconVO extends $tea.Model {
    static names() {
        return {
            icon: 'icon',
            type: 'type',
        };
    }
    static types() {
        return {
            icon: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesResponseBodyResultItemsSpaceInfoIconVO = ListPinSpacesResponseBodyResultItemsSpaceInfoIconVO;
class ListPinSpacesResponseBodyResultItemsSpaceInfoModifier extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesResponseBodyResultItemsSpaceInfoModifier = ListPinSpacesResponseBodyResultItemsSpaceInfoModifier;
class ListPinSpacesResponseBodyResultItemsSpaceInfo extends $tea.Model {
    static names() {
        return {
            cover: 'cover',
            createTime: 'createTime',
            creator: 'creator',
            description: 'description',
            iconVO: 'iconVO',
            id: 'id',
            mobileUrl: 'mobileUrl',
            modifiedTime: 'modifiedTime',
            modifier: 'modifier',
            name: 'name',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            cover: 'string',
            createTime: 'string',
            creator: ListPinSpacesResponseBodyResultItemsSpaceInfoCreator,
            description: 'string',
            iconVO: ListPinSpacesResponseBodyResultItemsSpaceInfoIconVO,
            id: 'string',
            mobileUrl: 'string',
            modifiedTime: 'string',
            modifier: ListPinSpacesResponseBodyResultItemsSpaceInfoModifier,
            name: 'string',
            pcUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesResponseBodyResultItemsSpaceInfo = ListPinSpacesResponseBodyResultItemsSpaceInfo;
class ListPinSpacesResponseBodyResultItemsTeamInfo extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesResponseBodyResultItemsTeamInfo = ListPinSpacesResponseBodyResultItemsTeamInfo;
class ListPinSpacesResponseBodyResultItems extends $tea.Model {
    static names() {
        return {
            createTime: 'createTime',
            modifiedTime: 'modifiedTime',
            spaceInfo: 'spaceInfo',
            spacePermissionRole: 'spacePermissionRole',
            teamInfo: 'teamInfo',
        };
    }
    static types() {
        return {
            createTime: 'string',
            modifiedTime: 'string',
            spaceInfo: ListPinSpacesResponseBodyResultItemsSpaceInfo,
            spacePermissionRole: 'string',
            teamInfo: ListPinSpacesResponseBodyResultItemsTeamInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListPinSpacesResponseBodyResultItems = ListPinSpacesResponseBodyResultItems;
class ListRecentsRequestParam extends $tea.Model {
    static names() {
        return {
            fileTypes: 'fileTypes',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            operateTypes: 'operateTypes',
        };
    }
    static types() {
        return {
            fileTypes: { 'type': 'array', 'itemType': 'number' },
            maxResults: 'number',
            nextToken: 'string',
            operateTypes: { 'type': 'array', 'itemType': 'number' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecentsRequestParam = ListRecentsRequestParam;
class ListRecentsResponseBodyRecentDentryListResourceSpaceInfo extends $tea.Model {
    static names() {
        return {
            sceneType: 'sceneType',
        };
    }
    static types() {
        return {
            sceneType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecentsResponseBodyRecentDentryListResourceSpaceInfo = ListRecentsResponseBodyRecentDentryListResourceSpaceInfo;
class ListRecentsResponseBodyRecentDentryListResource extends $tea.Model {
    static names() {
        return {
            dentryUuid: 'dentryUuid',
            driveDentryId: 'driveDentryId',
            driveSpaceId: 'driveSpaceId',
            extension: 'extension',
            name: 'name',
            spaceInfo: 'spaceInfo',
            url: 'url',
        };
    }
    static types() {
        return {
            dentryUuid: 'string',
            driveDentryId: 'string',
            driveSpaceId: 'string',
            extension: 'string',
            name: 'string',
            spaceInfo: ListRecentsResponseBodyRecentDentryListResourceSpaceInfo,
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecentsResponseBodyRecentDentryListResource = ListRecentsResponseBodyRecentDentryListResource;
class ListRecentsResponseBodyRecentDentryList extends $tea.Model {
    static names() {
        return {
            accessTime: 'accessTime',
            deleted: 'deleted',
            icon: 'icon',
            operateType: 'operateType',
            resource: 'resource',
        };
    }
    static types() {
        return {
            accessTime: 'number',
            deleted: 'boolean',
            icon: 'string',
            operateType: 'number',
            resource: ListRecentsResponseBodyRecentDentryListResource,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListRecentsResponseBodyRecentDentryList = ListRecentsResponseBodyRecentDentryList;
class ListSpaceSectionsResponseBodyItems extends $tea.Model {
    static names() {
        return {
            displayType: 'displayType',
            id: 'id',
            name: 'name',
            spaceNum: 'spaceNum',
            spaces: 'spaces',
        };
    }
    static types() {
        return {
            displayType: 'string',
            id: 'string',
            name: 'string',
            spaceNum: 'number',
            spaces: { 'type': 'array', 'itemType': SpaceModel },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListSpaceSectionsResponseBodyItems = ListSpaceSectionsResponseBodyItems;
class ListStarsRequestOption extends $tea.Model {
    static names() {
        return {
            contentTypeList: 'contentTypeList',
            filterDocTypes: 'filterDocTypes',
            listV2: 'listV2',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            order: 'order',
            orderBy: 'orderBy',
            withDentryCreatorInfo: 'withDentryCreatorInfo',
            withDentryModifierInfo: 'withDentryModifierInfo',
            withDentryPermissionRole: 'withDentryPermissionRole',
            withSpaceDetail: 'withSpaceDetail',
            withSpacePermissionRole: 'withSpacePermissionRole',
            withTeamDetail: 'withTeamDetail',
        };
    }
    static types() {
        return {
            contentTypeList: { 'type': 'array', 'itemType': 'string' },
            filterDocTypes: { 'type': 'array', 'itemType': 'string' },
            listV2: 'boolean',
            maxResults: 'number',
            nextToken: 'string',
            order: 'string',
            orderBy: 'string',
            withDentryCreatorInfo: 'boolean',
            withDentryModifierInfo: 'boolean',
            withDentryPermissionRole: 'boolean',
            withSpaceDetail: 'boolean',
            withSpacePermissionRole: 'boolean',
            withTeamDetail: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsRequestOption = ListStarsRequestOption;
class ListStarsResponseBodyStarListDentryInfoCreator extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsResponseBodyStarListDentryInfoCreator = ListStarsResponseBodyStarListDentryInfoCreator;
class ListStarsResponseBodyStarListDentryInfoModifier extends $tea.Model {
    static names() {
        return {
            name: 'name',
            userId: 'userId',
        };
    }
    static types() {
        return {
            name: 'string',
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsResponseBodyStarListDentryInfoModifier = ListStarsResponseBodyStarListDentryInfoModifier;
class ListStarsResponseBodyStarListDentryInfo extends $tea.Model {
    static names() {
        return {
            createTime: 'createTime',
            creator: 'creator',
            extension: 'extension',
            id: 'id',
            mobileUrl: 'mobileUrl',
            modifiedTime: 'modifiedTime',
            modifier: 'modifier',
            name: 'name',
            pcUrl: 'pcUrl',
            spaceId: 'spaceId',
            status: 'status',
            type: 'type',
            uuid: 'uuid',
        };
    }
    static types() {
        return {
            createTime: 'string',
            creator: ListStarsResponseBodyStarListDentryInfoCreator,
            extension: 'string',
            id: 'string',
            mobileUrl: 'string',
            modifiedTime: 'string',
            modifier: ListStarsResponseBodyStarListDentryInfoModifier,
            name: 'string',
            pcUrl: 'string',
            spaceId: 'string',
            status: 'string',
            type: 'string',
            uuid: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsResponseBodyStarListDentryInfo = ListStarsResponseBodyStarListDentryInfo;
class ListStarsResponseBodyStarListSpaceInfo extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsResponseBodyStarListSpaceInfo = ListStarsResponseBodyStarListSpaceInfo;
class ListStarsResponseBodyStarListTeamInfo extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsResponseBodyStarListTeamInfo = ListStarsResponseBodyStarListTeamInfo;
class ListStarsResponseBodyStarList extends $tea.Model {
    static names() {
        return {
            createTime: 'createTime',
            dentryInfo: 'dentryInfo',
            dentryPermissionRole: 'dentryPermissionRole',
            id: 'id',
            isDeleted: 'isDeleted',
            modifiedTime: 'modifiedTime',
            spaceInfo: 'spaceInfo',
            spacePermissionRole: 'spacePermissionRole',
            starType: 'starType',
            teamInfo: 'teamInfo',
        };
    }
    static types() {
        return {
            createTime: 'string',
            dentryInfo: ListStarsResponseBodyStarListDentryInfo,
            dentryPermissionRole: 'string',
            id: 'string',
            isDeleted: 'boolean',
            modifiedTime: 'string',
            spaceInfo: ListStarsResponseBodyStarListSpaceInfo,
            spacePermissionRole: 'string',
            starType: 'string',
            teamInfo: ListStarsResponseBodyStarListTeamInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListStarsResponseBodyStarList = ListStarsResponseBodyStarList;
class ListTeamMembersResponseBodyMembers extends $tea.Model {
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            name: 'name',
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'number',
            name: 'string',
            roleCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ListTeamMembersResponseBodyMembers = ListTeamMembersResponseBodyMembers;
class QueryItemByUrlResponseBodySpaceOwner extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryItemByUrlResponseBodySpaceOwner = QueryItemByUrlResponseBodySpaceOwner;
class QueryItemByUrlResponseBodySpace extends $tea.Model {
    static names() {
        return {
            description: 'description',
            id: 'id',
            name: 'name',
            owner: 'owner',
            type: 'type',
        };
    }
    static types() {
        return {
            description: 'string',
            id: 'string',
            name: 'string',
            owner: QueryItemByUrlResponseBodySpaceOwner,
            type: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryItemByUrlResponseBodySpace = QueryItemByUrlResponseBodySpace;
class QueryRecentListResponseBodyRecentListTeam extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRecentListResponseBodyRecentListTeam = QueryRecentListResponseBodyRecentListTeam;
class QueryRecentListResponseBodyRecentList extends $tea.Model {
    static names() {
        return {
            deleted: 'deleted',
            dentry: 'dentry',
            recentTime: 'recentTime',
            team: 'team',
        };
    }
    static types() {
        return {
            deleted: 'boolean',
            dentry: DentryModel,
            recentTime: 'number',
            team: QueryRecentListResponseBodyRecentListTeam,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.QueryRecentListResponseBodyRecentList = QueryRecentListResponseBodyRecentList;
class RelatedSpacesResponseBodyItemsHdIconVO extends $tea.Model {
    static names() {
        return {
            icon: 'icon',
            type: 'type',
        };
    }
    static types() {
        return {
            icon: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RelatedSpacesResponseBodyItemsHdIconVO = RelatedSpacesResponseBodyItemsHdIconVO;
class RelatedSpacesResponseBodyItemsIconVO extends $tea.Model {
    static names() {
        return {
            icon: 'icon',
            type: 'type',
        };
    }
    static types() {
        return {
            icon: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RelatedSpacesResponseBodyItemsIconVO = RelatedSpacesResponseBodyItemsIconVO;
class RelatedSpacesResponseBodyItemsOwner extends $tea.Model {
    static names() {
        return {
            name: 'name',
            unionId: 'unionId',
        };
    }
    static types() {
        return {
            name: 'string',
            unionId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RelatedSpacesResponseBodyItemsOwner = RelatedSpacesResponseBodyItemsOwner;
class RelatedSpacesResponseBodyItemsVisitorInfo extends $tea.Model {
    static names() {
        return {
            dentryActions: 'dentryActions',
            pinned: 'pinned',
            roleCode: 'roleCode',
            spaceActions: 'spaceActions',
        };
    }
    static types() {
        return {
            dentryActions: { 'type': 'array', 'itemType': 'string' },
            pinned: 'boolean',
            roleCode: 'string',
            spaceActions: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RelatedSpacesResponseBodyItemsVisitorInfo = RelatedSpacesResponseBodyItemsVisitorInfo;
class RelatedSpacesResponseBodyItems extends $tea.Model {
    static names() {
        return {
            cover: 'cover',
            description: 'description',
            hdIconVO: 'hdIconVO',
            iconVO: 'iconVO',
            id: 'id',
            name: 'name',
            owner: 'owner',
            recentList: 'recentList',
            type: 'type',
            url: 'url',
            visitorInfo: 'visitorInfo',
        };
    }
    static types() {
        return {
            cover: 'string',
            description: 'string',
            hdIconVO: RelatedSpacesResponseBodyItemsHdIconVO,
            iconVO: RelatedSpacesResponseBodyItemsIconVO,
            id: 'string',
            name: 'string',
            owner: RelatedSpacesResponseBodyItemsOwner,
            recentList: { 'type': 'array', 'itemType': DentryModel },
            type: 'number',
            url: 'string',
            visitorInfo: RelatedSpacesResponseBodyItemsVisitorInfo,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RelatedSpacesResponseBodyItems = RelatedSpacesResponseBodyItems;
class RemoveTeamMembersRequestMembers extends $tea.Model {
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'number',
            roleCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveTeamMembersRequestMembers = RemoveTeamMembersRequestMembers;
class RemoveTeamMembersResponseBodyNotInOrgMembers extends $tea.Model {
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            name: 'name',
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'number',
            name: 'string',
            roleCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RemoveTeamMembersResponseBodyNotInOrgMembers = RemoveTeamMembersResponseBodyNotInOrgMembers;
class SaveTeamMembersRequestMembers extends $tea.Model {
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'number',
            roleCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveTeamMembersRequestMembers = SaveTeamMembersRequestMembers;
class SaveTeamMembersResponseBodyNotInOrgMembers extends $tea.Model {
    static names() {
        return {
            memberId: 'memberId',
            memberType: 'memberType',
            name: 'name',
            roleCode: 'roleCode',
        };
    }
    static types() {
        return {
            memberId: 'string',
            memberType: 'number',
            name: 'string',
            roleCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SaveTeamMembersResponseBodyNotInOrgMembers = SaveTeamMembersResponseBodyNotInOrgMembers;
class SearchRequestDentryRequestVisitTimeRange extends $tea.Model {
    static names() {
        return {
            end: 'end',
            start: 'start',
        };
    }
    static types() {
        return {
            end: 'number',
            start: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchRequestDentryRequestVisitTimeRange = SearchRequestDentryRequestVisitTimeRange;
class SearchRequestDentryRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            searchField: 'searchField',
            searchFileType: 'searchFileType',
            spaceId: 'spaceId',
            spaceIds: 'spaceIds',
            summaryLength: 'summaryLength',
            visitTimeRange: 'visitTimeRange',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            searchField: 'number',
            searchFileType: 'number',
            spaceId: 'string',
            spaceIds: { 'type': 'array', 'itemType': 'string' },
            summaryLength: 'number',
            visitTimeRange: SearchRequestDentryRequestVisitTimeRange,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchRequestDentryRequest = SearchRequestDentryRequest;
class SearchRequestSpaceRequest extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            withTeamInfo: 'withTeamInfo',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            withTeamInfo: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchRequestSpaceRequest = SearchRequestSpaceRequest;
class SearchResponseBodyDentryResultItems extends $tea.Model {
    static names() {
        return {
            content: 'content',
            creation: 'creation',
            dentryId: 'dentryId',
            dentryUuid: 'dentryUuid',
            extension: 'extension',
            iconUrl: 'iconUrl',
            lastEdition: 'lastEdition',
            name: 'name',
            originName: 'originName',
            path: 'path',
            sceneType: 'sceneType',
            searchFileType: 'searchFileType',
            spaceId: 'spaceId',
            thumbnailUrl: 'thumbnailUrl',
            url: 'url',
        };
    }
    static types() {
        return {
            content: 'string',
            creation: OpenActionModel,
            dentryId: 'string',
            dentryUuid: 'string',
            extension: 'string',
            iconUrl: 'string',
            lastEdition: OpenActionModel,
            name: 'string',
            originName: 'string',
            path: 'string',
            sceneType: 'number',
            searchFileType: 'number',
            spaceId: 'string',
            thumbnailUrl: 'string',
            url: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchResponseBodyDentryResultItems = SearchResponseBodyDentryResultItems;
class SearchResponseBodyDentryResult extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            items: 'items',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            items: { 'type': 'array', 'itemType': SearchResponseBodyDentryResultItems },
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchResponseBodyDentryResult = SearchResponseBodyDentryResult;
class SearchResponseBodySpaceResultItemsIconVO extends $tea.Model {
    static names() {
        return {
            icon: 'icon',
            type: 'type',
        };
    }
    static types() {
        return {
            icon: 'string',
            type: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchResponseBodySpaceResultItemsIconVO = SearchResponseBodySpaceResultItemsIconVO;
class SearchResponseBodySpaceResultItemsTeamVO extends $tea.Model {
    static names() {
        return {
            id: 'id',
            name: 'name',
        };
    }
    static types() {
        return {
            id: 'string',
            name: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchResponseBodySpaceResultItemsTeamVO = SearchResponseBodySpaceResultItemsTeamVO;
class SearchResponseBodySpaceResultItemsUserLastOperation extends $tea.Model {
    static names() {
        return {
            name: 'name',
            time: 'time',
        };
    }
    static types() {
        return {
            name: 'string',
            time: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchResponseBodySpaceResultItemsUserLastOperation = SearchResponseBodySpaceResultItemsUserLastOperation;
class SearchResponseBodySpaceResultItems extends $tea.Model {
    static names() {
        return {
            iconVO: 'iconVO',
            name: 'name',
            originName: 'originName',
            spaceId: 'spaceId',
            teamVO: 'teamVO',
            url: 'url',
            userLastOperation: 'userLastOperation',
        };
    }
    static types() {
        return {
            iconVO: SearchResponseBodySpaceResultItemsIconVO,
            name: 'string',
            originName: 'string',
            spaceId: 'string',
            teamVO: SearchResponseBodySpaceResultItemsTeamVO,
            url: 'string',
            userLastOperation: SearchResponseBodySpaceResultItemsUserLastOperation,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchResponseBodySpaceResultItems = SearchResponseBodySpaceResultItems;
class SearchResponseBodySpaceResult extends $tea.Model {
    static names() {
        return {
            hasMore: 'hasMore',
            items: 'items',
            nextToken: 'nextToken',
        };
    }
    static types() {
        return {
            hasMore: 'boolean',
            items: { 'type': 'array', 'itemType': SearchResponseBodySpaceResultItems },
            nextToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchResponseBodySpaceResult = SearchResponseBodySpaceResult;
class SearchTemplatesRequestOption extends $tea.Model {
    static names() {
        return {
            excludeWorkspaceIds: 'excludeWorkspaceIds',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            platform: 'platform',
            templateTypes: 'templateTypes',
            version: 'version',
            workspaceIds: 'workspaceIds',
        };
    }
    static types() {
        return {
            excludeWorkspaceIds: { 'type': 'array', 'itemType': 'string' },
            maxResults: 'number',
            nextToken: 'string',
            platform: 'string',
            templateTypes: { 'type': 'array', 'itemType': 'number' },
            version: 'number',
            workspaceIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTemplatesRequestOption = SearchTemplatesRequestOption;
class SearchTemplatesRequestParam extends $tea.Model {
    static names() {
        return {
            belong: 'belong',
            searchName: 'searchName',
        };
    }
    static types() {
        return {
            belong: 'string',
            searchName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTemplatesRequestParam = SearchTemplatesRequestParam;
class SearchTemplatesResponseBodyTemplateList extends $tea.Model {
    static names() {
        return {
            authorName: 'authorName',
            belong: 'belong',
            contentDownloadUrl: 'contentDownloadUrl',
            coverDownloadUrl: 'coverDownloadUrl',
            createTime: 'createTime',
            description: 'description',
            modifiedTime: 'modifiedTime',
            templateId: 'templateId',
            title: 'title',
            type: 'type',
            usedCount: 'usedCount',
            workspaceId: 'workspaceId',
            workspaceName: 'workspaceName',
        };
    }
    static types() {
        return {
            authorName: 'string',
            belong: 'string',
            contentDownloadUrl: 'string',
            coverDownloadUrl: 'string',
            createTime: 'string',
            description: 'string',
            modifiedTime: 'string',
            templateId: 'string',
            title: 'string',
            type: 'number',
            usedCount: 'number',
            workspaceId: 'string',
            workspaceName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.SearchTemplatesResponseBodyTemplateList = SearchTemplatesResponseBodyTemplateList;
class ShareUrlRequestParam extends $tea.Model {
    static names() {
        return {
            dentryUuid: 'dentryUuid',
            triggerShare: 'triggerShare',
        };
    }
    static types() {
        return {
            dentryUuid: 'string',
            triggerShare: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ShareUrlRequestParam = ShareUrlRequestParam;
class ShareUrlResponseBodyShareUrlInfo extends $tea.Model {
    static names() {
        return {
            mobileUrl: 'mobileUrl',
            pcUrl: 'pcUrl',
        };
    }
    static types() {
        return {
            mobileUrl: 'string',
            pcUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.ShareUrlResponseBodyShareUrlInfo = ShareUrlResponseBodyShareUrlInfo;
class TeamTemplatesRequestOption extends $tea.Model {
    static names() {
        return {
            excludeWorkspaceIds: 'excludeWorkspaceIds',
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            platform: 'platform',
            templateTypes: 'templateTypes',
            version: 'version',
            workspaceIds: 'workspaceIds',
        };
    }
    static types() {
        return {
            excludeWorkspaceIds: { 'type': 'array', 'itemType': 'string' },
            maxResults: 'number',
            nextToken: 'string',
            platform: 'string',
            templateTypes: { 'type': 'array', 'itemType': 'number' },
            version: 'number',
            workspaceIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamTemplatesRequestOption = TeamTemplatesRequestOption;
class TeamTemplatesResponseBodyTemplateList extends $tea.Model {
    static names() {
        return {
            authorName: 'authorName',
            belong: 'belong',
            contentDownloadUrl: 'contentDownloadUrl',
            coverDownloadUrl: 'coverDownloadUrl',
            createTime: 'createTime',
            description: 'description',
            modifiedTime: 'modifiedTime',
            templateId: 'templateId',
            title: 'title',
            type: 'type',
            usedCount: 'usedCount',
            workspaceId: 'workspaceId',
            workspaceName: 'workspaceName',
        };
    }
    static types() {
        return {
            authorName: 'string',
            belong: 'string',
            contentDownloadUrl: 'string',
            coverDownloadUrl: 'string',
            createTime: 'string',
            description: 'string',
            modifiedTime: 'string',
            templateId: 'string',
            title: 'string',
            type: 'number',
            usedCount: 'number',
            workspaceId: 'string',
            workspaceName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TeamTemplatesResponseBodyTemplateList = TeamTemplatesResponseBodyTemplateList;
class TemplateCategoriesRequestOption extends $tea.Model {
    static names() {
        return {
            categoryStatus: 'categoryStatus',
            industryId: 'industryId',
        };
    }
    static types() {
        return {
            categoryStatus: 'number',
            industryId: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TemplateCategoriesRequestOption = TemplateCategoriesRequestOption;
class TemplateCategoriesRequestParam extends $tea.Model {
    static names() {
        return {
            tenantId: 'tenantId',
        };
    }
    static types() {
        return {
            tenantId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TemplateCategoriesRequestParam = TemplateCategoriesRequestParam;
class TemplateCategoriesResponseBodyList extends $tea.Model {
    static names() {
        return {
            categoryId: 'categoryId',
            categoryName: 'categoryName',
            sort: 'sort',
        };
    }
    static types() {
        return {
            categoryId: 'string',
            categoryName: 'string',
            sort: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.TemplateCategoriesResponseBodyList = TemplateCategoriesResponseBodyList;
class UserTemplatesRequestOption extends $tea.Model {
    static names() {
        return {
            maxResults: 'maxResults',
            nextToken: 'nextToken',
            platform: 'platform',
            templateTypes: 'templateTypes',
            version: 'version',
        };
    }
    static types() {
        return {
            maxResults: 'number',
            nextToken: 'string',
            platform: 'string',
            templateTypes: { 'type': 'array', 'itemType': 'number' },
            version: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserTemplatesRequestOption = UserTemplatesRequestOption;
class UserTemplatesResponseBodyTemplateList extends $tea.Model {
    static names() {
        return {
            authorName: 'authorName',
            belong: 'belong',
            contentDownloadUrl: 'contentDownloadUrl',
            coverDownloadUrl: 'coverDownloadUrl',
            createTime: 'createTime',
            description: 'description',
            modifiedTime: 'modifiedTime',
            templateId: 'templateId',
            title: 'title',
            type: 'type',
            usedCount: 'usedCount',
            workspaceId: 'workspaceId',
            workspaceName: 'workspaceName',
        };
    }
    static types() {
        return {
            authorName: 'string',
            belong: 'string',
            contentDownloadUrl: 'string',
            coverDownloadUrl: 'string',
            createTime: 'string',
            description: 'string',
            modifiedTime: 'string',
            templateId: 'string',
            title: 'string',
            type: 'number',
            usedCount: 'number',
            workspaceId: 'string',
            workspaceName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UserTemplatesResponseBodyTemplateList = UserTemplatesResponseBodyTemplateList;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 批量创建小组
     *
     * @param request BatchCreateTeamRequest
     * @param headers BatchCreateTeamHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchCreateTeamResponse
     */
    async batchCreateTeamWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchCreateTeam",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/batch`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchCreateTeamResponse({}));
    }
    /**
     * @summary 批量创建小组
     *
     * @param request BatchCreateTeamRequest
     * @return BatchCreateTeamResponse
     */
    async batchCreateTeam(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchCreateTeamHeaders({});
        return await this.batchCreateTeamWithOptions(request, headers, runtime);
    }
    /**
     * @summary 批量删除文档最近记录
     *
     * @param request BatchDeleteRecentsRequest
     * @param headers BatchDeleteRecentsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return BatchDeleteRecentsResponse
     */
    async batchDeleteRecentsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryUuids)) {
            body["dentryUuids"] = request.dentryUuids;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "BatchDeleteRecents",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/recentRecords/batchRemove`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new BatchDeleteRecentsResponse({}));
    }
    /**
     * @summary 批量删除文档最近记录
     *
     * @param request BatchDeleteRecentsRequest
     * @return BatchDeleteRecentsResponse
     */
    async batchDeleteRecents(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new BatchDeleteRecentsHeaders({});
        return await this.batchDeleteRecentsWithOptions(request, headers, runtime);
    }
    /**
     * @summary 按分类列表查询模板列表
     *
     * @param request CategoriesTemplatesRequest
     * @param headers CategoriesTemplatesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CategoriesTemplatesResponse
     */
    async categoriesTemplatesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CategoriesTemplates",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/categoryLists/templates/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CategoriesTemplatesResponse({}));
    }
    /**
     * @summary 按分类列表查询模板列表
     *
     * @param request CategoriesTemplatesRequest
     * @return CategoriesTemplatesResponse
     */
    async categoriesTemplates(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CategoriesTemplatesHeaders({});
        return await this.categoriesTemplatesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 按分类查询模板列表
     *
     * @param request CategoryTemplatesRequest
     * @param headers CategoryTemplatesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CategoryTemplatesResponse
     */
    async categoryTemplatesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CategoryTemplates",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/categories/templates/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CategoryTemplatesResponse({}));
    }
    /**
     * @summary 按分类查询模板列表
     *
     * @param request CategoryTemplatesRequest
     * @return CategoryTemplatesResponse
     */
    async categoryTemplates(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CategoryTemplatesHeaders({});
        return await this.categoryTemplatesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 拷贝知识库节点
     *
     * @param request CopyDentryRequest
     * @param headers CopyDentryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CopyDentryResponse
     */
    async copyDentryWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.targetSpaceId)) {
            body["targetSpaceId"] = request.targetSpaceId;
        }
        if (!tea_util_1.default.isUnset(request.toNextDentryId)) {
            body["toNextDentryId"] = request.toNextDentryId;
        }
        if (!tea_util_1.default.isUnset(request.toParentDentryId)) {
            body["toParentDentryId"] = request.toParentDentryId;
        }
        if (!tea_util_1.default.isUnset(request.toPrevDentryId)) {
            body["toPrevDentryId"] = request.toPrevDentryId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CopyDentry",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/${spaceId}/dentries/${dentryId}/copy`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CopyDentryResponse({}));
    }
    /**
     * @summary 拷贝知识库节点
     *
     * @param request CopyDentryRequest
     * @return CopyDentryResponse
     */
    async copyDentry(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CopyDentryHeaders({});
        return await this.copyDentryWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * @summary 创建知识库节点（包括文档和文件夹）
     *
     * @param request CreateDentryRequest
     * @param headers CreateDentryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateDentryResponse
     */
    async createDentryWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryType)) {
            body["dentryType"] = request.dentryType;
        }
        if (!tea_util_1.default.isUnset(request.documentType)) {
            body["documentType"] = request.documentType;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.parentDentryId)) {
            body["parentDentryId"] = request.parentDentryId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateDentry",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/${spaceId}/dentries`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateDentryResponse({}));
    }
    /**
     * @summary 创建知识库节点（包括文档和文件夹）
     *
     * @param request CreateDentryRequest
     * @return CreateDentryResponse
     */
    async createDentry(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateDentryHeaders({});
        return await this.createDentryWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * @summary 创建知识库
     *
     * @param request CreateSpaceRequest
     * @param headers CreateSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateSpaceResponse
     */
    async createSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.sectionId)) {
            body["sectionId"] = request.sectionId;
        }
        if (!tea_util_1.default.isUnset(request.shareScope)) {
            body["shareScope"] = request.shareScope;
        }
        if (!tea_util_1.default.isUnset(request.teamId)) {
            body["teamId"] = request.teamId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateSpace",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateSpaceResponse({}));
    }
    /**
     * @summary 创建知识库
     *
     * @param request CreateSpaceRequest
     * @return CreateSpaceResponse
     */
    async createSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateSpaceHeaders({});
        return await this.createSpaceWithOptions(request, headers, runtime);
    }
    /**
     * @summary 创建小组
     *
     * @param request CreateTeamRequest
     * @param headers CreateTeamHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateTeamResponse
     */
    async createTeamWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cover)) {
            body["cover"] = request.cover;
        }
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.icon)) {
            body["icon"] = request.icon;
        }
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.teamType)) {
            body["teamType"] = request.teamType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateTeam",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateTeamResponse({}));
    }
    /**
     * @summary 创建小组
     *
     * @param request CreateTeamRequest
     * @return CreateTeamResponse
     */
    async createTeam(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateTeamHeaders({});
        return await this.createTeamWithOptions(request, headers, runtime);
    }
    /**
     * @summary 跨组织迁移知识库
     *
     * @param request CrossOrgMigrateRequest
     * @param headers CrossOrgMigrateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CrossOrgMigrateResponse
     */
    async crossOrgMigrateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CrossOrgMigrate",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/crossOrganizations/spaces/migrate`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CrossOrgMigrateResponse({}));
    }
    /**
     * @summary 跨组织迁移知识库
     *
     * @param request CrossOrgMigrateRequest
     * @return CrossOrgMigrateResponse
     */
    async crossOrgMigrate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CrossOrgMigrateHeaders({});
        return await this.crossOrgMigrateWithOptions(request, headers, runtime);
    }
    /**
     * @summary 删除小组
     *
     * @param request DeleteTeamRequest
     * @param headers DeleteTeamHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeleteTeamResponse
     */
    async deleteTeamWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "DeleteTeam",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}`,
            method: "DELETE",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeleteTeamResponse({}));
    }
    /**
     * @summary 删除小组
     *
     * @param request DeleteTeamRequest
     * @return DeleteTeamResponse
     */
    async deleteTeam(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeleteTeamHeaders({});
        return await this.deleteTeamWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 获取文档内容
     *
     * @param request DocContentRequest
     * @param headers DocContentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DocContentResponse
     */
    async docContentWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DocContent",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/${dentryUuid}/contents`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DocContentResponse({}));
    }
    /**
     * @summary 获取文档内容
     *
     * @param request DocContentRequest
     * @return DocContentResponse
     */
    async docContent(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DocContentHeaders({});
        return await this.docContentWithOptions(dentryUuid, request, headers, runtime);
    }
    /**
     * @summary 根据文件DentryUuid获取文件DentryId
     *
     * @param request GetDentryIdByUuidRequest
     * @param headers GetDentryIdByUuidHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDentryIdByUuidResponse
     */
    async getDentryIdByUuidWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDentryIdByUuid",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/${dentryUuid}/queryDentryId`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDentryIdByUuidResponse({}));
    }
    /**
     * @summary 根据文件DentryUuid获取文件DentryId
     *
     * @param request GetDentryIdByUuidRequest
     * @return GetDentryIdByUuidResponse
     */
    async getDentryIdByUuid(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDentryIdByUuidHeaders({});
        return await this.getDentryIdByUuidWithOptions(dentryUuid, request, headers, runtime);
    }
    /**
     * @summary 委托权限获取文档内容
     *
     * @param request GetDocContentRequest
     * @param headers GetDocContentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetDocContentResponse
     */
    async getDocContentWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.targetFormat)) {
            query["targetFormat"] = request.targetFormat;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetDocContent",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/me/query/${dentryUuid}/contents`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetDocContentResponse({}));
    }
    /**
     * @summary 委托权限获取文档内容
     *
     * @param request GetDocContentRequest
     * @return GetDocContentResponse
     */
    async getDocContent(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetDocContentHeaders({});
        return await this.getDocContentWithOptions(dentryUuid, request, headers, runtime);
    }
    /**
     * @summary 获取当前企业下钉盘目录我的文件对应的空间信息
     *
     * @param request GetMySpaceRequest
     * @param headers GetMySpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetMySpaceResponse
     */
    async getMySpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.isMySpace)) {
            query["isMySpace"] = request.isMySpace;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetMySpace",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/me/mySpace/infos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetMySpaceResponse({}));
    }
    /**
     * @summary 获取当前企业下钉盘目录我的文件对应的空间信息
     *
     * @param request GetMySpaceRequest
     * @return GetMySpaceResponse
     */
    async getMySpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetMySpaceHeaders({});
        return await this.getMySpaceWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询小组主页schema （包括轮播图、公告、便捷入口）
     *
     * @param request GetSchemaRequest
     * @param headers GetSchemaHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSchemaResponse
     */
    async getSchemaWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSchema",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}/schemas`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSchemaResponse({}));
    }
    /**
     * @summary 查询小组主页schema （包括轮播图、公告、便捷入口）
     *
     * @param request GetSchemaRequest
     * @return GetSchemaResponse
     */
    async getSchema(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSchemaHeaders({});
        return await this.getSchemaWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 查询目录树
     *
     * @param request GetSpaceDirectoriesRequest
     * @param headers GetSpaceDirectoriesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetSpaceDirectoriesResponse
     */
    async getSpaceDirectoriesWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.dentryId)) {
            query["dentryId"] = request.dentryId;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetSpaceDirectories",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/${spaceId}/directories`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetSpaceDirectoriesResponse({}));
    }
    /**
     * @summary 查询目录树
     *
     * @param request GetSpaceDirectoriesRequest
     * @return GetSpaceDirectoriesResponse
     */
    async getSpaceDirectories(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetSpaceDirectoriesHeaders({});
        return await this.getSpaceDirectoriesWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * @summary 获取星标信息
     *
     * @param request GetStarInfoRequest
     * @param headers GetStarInfoHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetStarInfoResponse
     */
    async getStarInfoWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetStarInfo",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/${dentryUuid}/starInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetStarInfoResponse({}));
    }
    /**
     * @summary 获取星标信息
     *
     * @param request GetStarInfoRequest
     * @return GetStarInfoResponse
     */
    async getStarInfo(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetStarInfoHeaders({});
        return await this.getStarInfoWithOptions(dentryUuid, request, headers, runtime);
    }
    /**
     * @summary 查询小组详情
     *
     * @param request GetTeamRequest
     * @param headers GetTeamHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTeamResponse
     */
    async getTeamWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTeam",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTeamResponse({}));
    }
    /**
     * @summary 查询小组详情
     *
     * @param request GetTeamRequest
     * @return GetTeamResponse
     */
    async getTeam(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTeamHeaders({});
        return await this.getTeamWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 获取知识库下的总节点数
     *
     * @param request GetTotalNumberOfDentriesRequest
     * @param headers GetTotalNumberOfDentriesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTotalNumberOfDentriesResponse
     */
    async getTotalNumberOfDentriesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.includeFolder)) {
            query["includeFolder"] = request.includeFolder;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.spaceTypes)) {
            query["spaceTypes"] = request.spaceTypes;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTotalNumberOfDentries",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/statistics/dentryCounts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTotalNumberOfDentriesResponse({}));
    }
    /**
     * @summary 获取知识库下的总节点数
     *
     * @param request GetTotalNumberOfDentriesRequest
     * @return GetTotalNumberOfDentriesResponse
     */
    async getTotalNumberOfDentries(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTotalNumberOfDentriesHeaders({});
        return await this.getTotalNumberOfDentriesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取知识库总数
     *
     * @param request GetTotalNumberOfSpacesRequest
     * @param headers GetTotalNumberOfSpacesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetTotalNumberOfSpacesResponse
     */
    async getTotalNumberOfSpacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetTotalNumberOfSpaces",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/statistics/spaceCounts`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetTotalNumberOfSpacesResponse({}));
    }
    /**
     * @summary 获取知识库总数
     *
     * @param request GetTotalNumberOfSpacesRequest
     * @return GetTotalNumberOfSpacesResponse
     */
    async getTotalNumberOfSpaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetTotalNumberOfSpacesHeaders({});
        return await this.getTotalNumberOfSpacesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询文档免登的用户信息
     *
     * @param request GetUserInfoByOpenTokenRequest
     * @param headers GetUserInfoByOpenTokenHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUserInfoByOpenTokenResponse
     */
    async getUserInfoByOpenTokenWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.docKey)) {
            query["docKey"] = request.docKey;
        }
        if (!tea_util_1.default.isUnset(request.openToken)) {
            query["openToken"] = request.openToken;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUserInfoByOpenToken",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/userInfos`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUserInfoByOpenTokenResponse({}));
    }
    /**
     * @summary 查询文档免登的用户信息
     *
     * @param request GetUserInfoByOpenTokenRequest
     * @return GetUserInfoByOpenTokenResponse
     */
    async getUserInfoByOpenToken(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUserInfoByOpenTokenHeaders({});
        return await this.getUserInfoByOpenTokenWithOptions(request, headers, runtime);
    }
    /**
     * @summary 根据文件DentryId获取文件DentryUuid
     *
     * @param request GetUuidByDentryIdRequest
     * @param headers GetUuidByDentryIdHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return GetUuidByDentryIdResponse
     */
    async getUuidByDentryIdWithOptions(dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.spaceId)) {
            query["spaceId"] = request.spaceId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "GetUuidByDentryId",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/${dentryId}/queryDentryUuid`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new GetUuidByDentryIdResponse({}));
    }
    /**
     * @summary 根据文件DentryId获取文件DentryUuid
     *
     * @param request GetUuidByDentryIdRequest
     * @return GetUuidByDentryIdResponse
     */
    async getUuidByDentryId(dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new GetUuidByDentryIdHeaders({});
        return await this.getUuidByDentryIdWithOptions(dentryId, request, headers, runtime);
    }
    /**
     * @summary 查询小组动态
     *
     * @param request ListFeedsRequest
     * @param headers ListFeedsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListFeedsResponse
     */
    async listFeedsWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.excludeFile)) {
            query["excludeFile"] = request.excludeFile;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListFeeds",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}/feeds`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListFeedsResponse({}));
    }
    /**
     * @summary 查询小组动态
     *
     * @param request ListFeedsRequest
     * @return ListFeedsResponse
     */
    async listFeeds(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListFeedsHeaders({});
        return await this.listFeedsWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 查询小组热门文档
     *
     * @param request ListHotDocsRequest
     * @param headers ListHotDocsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListHotDocsResponse
     */
    async listHotDocsWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListHotDocs",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}/hotDocs`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListHotDocsResponse({}));
    }
    /**
     * @summary 查询小组热门文档
     *
     * @param request ListHotDocsRequest
     * @return ListHotDocsResponse
     */
    async listHotDocs(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListHotDocsHeaders({});
        return await this.listHotDocsWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 获取置顶知识库列表
     *
     * @param request ListPinSpacesRequest
     * @param headers ListPinSpacesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListPinSpacesResponse
     */
    async listPinSpacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListPinSpaces",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/pinLists/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListPinSpacesResponse({}));
    }
    /**
     * @summary 获取置顶知识库列表
     *
     * @param request ListPinSpacesRequest
     * @return ListPinSpacesResponse
     */
    async listPinSpaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListPinSpacesHeaders({});
        return await this.listPinSpacesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询文档最近记录列表
     *
     * @param request ListRecentsRequest
     * @param headers ListRecentsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListRecentsResponse
     */
    async listRecentsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListRecents",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/recentRecords/lists/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListRecentsResponse({}));
    }
    /**
     * @summary 查询文档最近记录列表
     *
     * @param request ListRecentsRequest
     * @return ListRecentsResponse
     */
    async listRecents(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListRecentsHeaders({});
        return await this.listRecentsWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询关联了知识库的团队列表
     *
     * @param request ListRelatedSpaceTeamsRequest
     * @param headers ListRelatedSpaceTeamsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListRelatedSpaceTeamsResponse
     */
    async listRelatedSpaceTeamsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListRelatedSpaceTeams",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/relations/spaceTeams`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListRelatedSpaceTeamsResponse({}));
    }
    /**
     * @summary 查询关联了知识库的团队列表
     *
     * @param request ListRelatedSpaceTeamsRequest
     * @return ListRelatedSpaceTeamsResponse
     */
    async listRelatedSpaceTeams(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListRelatedSpaceTeamsHeaders({});
        return await this.listRelatedSpaceTeamsWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询小组列表
     *
     * @param request ListRelatedTeamsRequest
     * @param headers ListRelatedTeamsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListRelatedTeamsResponse
     */
    async listRelatedTeamsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.type)) {
            query["type"] = request.type;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListRelatedTeams",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListRelatedTeamsResponse({}));
    }
    /**
     * @summary 查询小组列表
     *
     * @param request ListRelatedTeamsRequest
     * @return ListRelatedTeamsResponse
     */
    async listRelatedTeams(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListRelatedTeamsHeaders({});
        return await this.listRelatedTeamsWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询知识库分组
     *
     * @param request ListSpaceSectionsRequest
     * @param headers ListSpaceSectionsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListSpaceSectionsResponse
     */
    async listSpaceSectionsWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListSpaceSections",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}/spaceSections`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListSpaceSectionsResponse({}));
    }
    /**
     * @summary 查询知识库分组
     *
     * @param request ListSpaceSectionsRequest
     * @return ListSpaceSectionsResponse
     */
    async listSpaceSections(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListSpaceSectionsHeaders({});
        return await this.listSpaceSectionsWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 获取星标列表
     *
     * @param request ListStarsRequest
     * @param headers ListStarsHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListStarsResponse
     */
    async listStarsWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ListStars",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/starLists/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListStarsResponse({}));
    }
    /**
     * @summary 获取星标列表
     *
     * @param request ListStarsRequest
     * @return ListStarsResponse
     */
    async listStars(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListStarsHeaders({});
        return await this.listStarsWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询小组成员列表
     *
     * @param request ListTeamMembersRequest
     * @param headers ListTeamMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ListTeamMembersResponse
     */
    async listTeamMembersWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "ListTeamMembers",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}/members`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ListTeamMembersResponse({}));
    }
    /**
     * @summary 查询小组成员列表
     *
     * @param request ListTeamMembersRequest
     * @return ListTeamMembersResponse
     */
    async listTeamMembers(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ListTeamMembersHeaders({});
        return await this.listTeamMembersWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 标记星标
     *
     * @param request MarkStarRequest
     * @param headers MarkStarHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MarkStarResponse
     */
    async markStarWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "MarkStar",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/${dentryUuid}/stars/mark`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new MarkStarResponse({}));
    }
    /**
     * @summary 标记星标
     *
     * @param request MarkStarRequest
     * @return MarkStarResponse
     */
    async markStar(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new MarkStarHeaders({});
        return await this.markStarWithOptions(dentryUuid, request, headers, runtime);
    }
    /**
     * @summary 移动知识库节点
     *
     * @param request MoveDentryRequest
     * @param headers MoveDentryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return MoveDentryResponse
     */
    async moveDentryWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.targetSpaceId)) {
            body["targetSpaceId"] = request.targetSpaceId;
        }
        if (!tea_util_1.default.isUnset(request.toNextDentryId)) {
            body["toNextDentryId"] = request.toNextDentryId;
        }
        if (!tea_util_1.default.isUnset(request.toParentDentryId)) {
            body["toParentDentryId"] = request.toParentDentryId;
        }
        if (!tea_util_1.default.isUnset(request.toPrevDentryId)) {
            body["toPrevDentryId"] = request.toPrevDentryId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "MoveDentry",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/${spaceId}/dentries/${dentryId}/move`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new MoveDentryResponse({}));
    }
    /**
     * @summary 移动知识库节点
     *
     * @param request MoveDentryRequest
     * @return MoveDentryResponse
     */
    async moveDentry(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new MoveDentryHeaders({});
        return await this.moveDentryWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * @summary 置顶知识库
     *
     * @param request PinSpaceRequest
     * @param headers PinSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return PinSpaceResponse
     */
    async pinSpaceWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "PinSpace",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/${spaceId}/pin`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new PinSpaceResponse({}));
    }
    /**
     * @summary 置顶知识库
     *
     * @param request PinSpaceRequest
     * @return PinSpaceResponse
     */
    async pinSpace(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new PinSpaceHeaders({});
        return await this.pinSpaceWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * @summary 查询知识库节点（包括文档和文件夹）
     *
     * @param request QueryDentryRequest
     * @param headers QueryDentryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDentryResponse
     */
    async queryDentryWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.includeSpace)) {
            query["includeSpace"] = request.includeSpace;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDentry",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/${spaceId}/dentries/${dentryId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDentryResponse({}));
    }
    /**
     * @summary 查询知识库节点（包括文档和文件夹）
     *
     * @param request QueryDentryRequest
     * @return QueryDentryResponse
     */
    async queryDentry(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDentryHeaders({});
        return await this.queryDentryWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * @summary 获取文档内容
     *
     * @param request QueryDocContentRequest
     * @param headers QueryDocContentHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryDocContentResponse
     */
    async queryDocContentWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.targetFormat)) {
            query["targetFormat"] = request.targetFormat;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryDocContent",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/query/${dentryUuid}/contents`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryDocContentResponse({}));
    }
    /**
     * @summary 获取文档内容
     *
     * @param request QueryDocContentRequest
     * @return QueryDocContentResponse
     */
    async queryDocContent(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryDocContentHeaders({});
        return await this.queryDocContentWithOptions(dentryUuid, request, headers, runtime);
    }
    /**
     * @summary 根据链接查询节点或知识库信息
     *
     * @param request QueryItemByUrlRequest
     * @param headers QueryItemByUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryItemByUrlResponse
     */
    async queryItemByUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.url)) {
            query["url"] = request.url;
        }
        if (!tea_util_1.default.isUnset(request.withStatisticalInfo)) {
            query["withStatisticalInfo"] = request.withStatisticalInfo;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryItemByUrl",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/items`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryItemByUrlResponse({}));
    }
    /**
     * @summary 根据链接查询节点或知识库信息
     *
     * @param request QueryItemByUrlRequest
     * @return QueryItemByUrlResponse
     */
    async queryItemByUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryItemByUrlHeaders({});
        return await this.queryItemByUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询用户的「我的文档」
     *
     * @param headers QueryMineSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryMineSpaceResponse
     */
    async queryMineSpaceWithOptions(unionId, headers, runtime) {
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
        });
        let params = new $OpenApi.Params({
            action: "QueryMineSpace",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/users/${unionId}/mine`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryMineSpaceResponse({}));
    }
    /**
     * @summary 查询用户的「我的文档」
     *
     * @return QueryMineSpaceResponse
     */
    async queryMineSpace(unionId) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryMineSpaceHeaders({});
        return await this.queryMineSpaceWithOptions(unionId, headers, runtime);
    }
    /**
     * @summary 查询最近列表
     *
     * @param request QueryRecentListRequest
     * @param headers QueryRecentListHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QueryRecentListResponse
     */
    async queryRecentListWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.creatorType)) {
            query["creatorType"] = request.creatorType;
        }
        if (!tea_util_1.default.isUnset(request.fileType)) {
            query["fileType"] = request.fileType;
        }
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.recentType)) {
            query["recentType"] = request.recentType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QueryRecentList",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/docs/recent`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QueryRecentListResponse({}));
    }
    /**
     * @summary 查询最近列表
     *
     * @param request QueryRecentListRequest
     * @return QueryRecentListResponse
     */
    async queryRecentList(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QueryRecentListHeaders({});
        return await this.queryRecentListWithOptions(request, headers, runtime);
    }
    /**
     * @summary 查询指定知识库信息
     *
     * @param request QuerySpaceRequest
     * @param headers QuerySpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return QuerySpaceResponse
     */
    async querySpaceWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "QuerySpace",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/${spaceId}`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new QuerySpaceResponse({}));
    }
    /**
     * @summary 查询指定知识库信息
     *
     * @param request QuerySpaceRequest
     * @return QuerySpaceResponse
     */
    async querySpace(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new QuerySpaceHeaders({});
        return await this.querySpaceWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * @summary 查询与我关联的知识库列表（支持筛选小组）
     *
     * @param request RelatedSpacesRequest
     * @param headers RelatedSpacesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RelatedSpacesResponse
     */
    async relatedSpacesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.maxResults)) {
            query["maxResults"] = request.maxResults;
        }
        if (!tea_util_1.default.isUnset(request.nextToken)) {
            query["nextToken"] = request.nextToken;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.teamId)) {
            query["teamId"] = request.teamId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RelatedSpaces",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/relations/spaces`,
            method: "GET",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RelatedSpacesResponse({}));
    }
    /**
     * @summary 查询与我关联的知识库列表（支持筛选小组）
     *
     * @param request RelatedSpacesRequest
     * @return RelatedSpacesResponse
     */
    async relatedSpaces(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RelatedSpacesHeaders({});
        return await this.relatedSpacesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 移除小组成员
     *
     * @param request RemoveTeamMembersRequest
     * @param headers RemoveTeamMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RemoveTeamMembersResponse
     */
    async removeTeamMembersWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.notify)) {
            body["notify"] = request.notify;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RemoveTeamMembers",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}/members/remove`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RemoveTeamMembersResponse({}));
    }
    /**
     * @summary 移除小组成员
     *
     * @param request RemoveTeamMembersRequest
     * @return RemoveTeamMembersResponse
     */
    async removeTeamMembers(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RemoveTeamMembersHeaders({});
        return await this.removeTeamMembersWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 知识库节点（包括文档和文件夹）重命名
     *
     * @param request RenameDentryRequest
     * @param headers RenameDentryHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RenameDentryResponse
     */
    async renameDentryWithOptions(spaceId, dentryId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.name)) {
            query["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "RenameDentry",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/${spaceId}/dentries/${dentryId}/rename`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RenameDentryResponse({}));
    }
    /**
     * @summary 知识库节点（包括文档和文件夹）重命名
     *
     * @param request RenameDentryRequest
     * @return RenameDentryResponse
     */
    async renameDentry(spaceId, dentryId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RenameDentryHeaders({});
        return await this.renameDentryWithOptions(spaceId, dentryId, request, headers, runtime);
    }
    /**
     * @summary 添加或修改小组成员
     *
     * @param request SaveTeamMembersRequest
     * @param headers SaveTeamMembersHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SaveTeamMembersResponse
     */
    async saveTeamMembersWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.members)) {
            body["members"] = request.members;
        }
        if (!tea_util_1.default.isUnset(request.notify)) {
            body["notify"] = request.notify;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SaveTeamMembers",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}/members`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SaveTeamMembersResponse({}));
    }
    /**
     * @summary 添加或修改小组成员
     *
     * @param request SaveTeamMembersRequest
     * @return SaveTeamMembersResponse
     */
    async saveTeamMembers(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SaveTeamMembersHeaders({});
        return await this.saveTeamMembersWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 搜索知识库和节点
     *
     * @param request SearchRequest
     * @param headers SearchHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchResponse
     */
    async searchWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.dentryRequest)) {
            body["dentryRequest"] = request.dentryRequest;
        }
        if (!tea_util_1.default.isUnset(request.keyword)) {
            body["keyword"] = request.keyword;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        if (!tea_util_1.default.isUnset(request.spaceRequest)) {
            body["spaceRequest"] = request.spaceRequest;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "Search",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchResponse({}));
    }
    /**
     * @summary 搜索知识库和节点
     *
     * @param request SearchRequest
     * @return SearchResponse
     */
    async search(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchHeaders({});
        return await this.searchWithOptions(request, headers, runtime);
    }
    /**
     * @summary 搜索模板中心模板
     *
     * @param request SearchTemplatesRequest
     * @param headers SearchTemplatesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return SearchTemplatesResponse
     */
    async searchTemplatesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "SearchTemplates",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/templates/search`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new SearchTemplatesResponse({}));
    }
    /**
     * @summary 搜索模板中心模板
     *
     * @param request SearchTemplatesRequest
     * @return SearchTemplatesResponse
     */
    async searchTemplates(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new SearchTemplatesHeaders({});
        return await this.searchTemplatesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取文件打开链接
     *
     * @param request ShareUrlRequest
     * @param headers ShareUrlHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return ShareUrlResponse
     */
    async shareUrlWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "ShareUrl",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/shareUrls/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new ShareUrlResponse({}));
    }
    /**
     * @summary 获取文件打开链接
     *
     * @param request ShareUrlRequest
     * @return ShareUrlResponse
     */
    async shareUrl(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new ShareUrlHeaders({});
        return await this.shareUrlWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取知识库模板列表
     *
     * @param request TeamTemplatesRequest
     * @param headers TeamTemplatesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return TeamTemplatesResponse
     */
    async teamTemplatesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TeamTemplates",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/workspaces/templates/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TeamTemplatesResponse({}));
    }
    /**
     * @summary 获取知识库模板列表
     *
     * @param request TeamTemplatesRequest
     * @return TeamTemplatesResponse
     */
    async teamTemplates(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TeamTemplatesHeaders({});
        return await this.teamTemplatesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 获取模板分类列表
     *
     * @param request TemplateCategoriesRequest
     * @param headers TemplateCategoriesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return TemplateCategoriesResponse
     */
    async templateCategoriesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        if (!tea_util_1.default.isUnset(request.param)) {
            body["param"] = request.param;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "TemplateCategories",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/templates/categories/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new TemplateCategoriesResponse({}));
    }
    /**
     * @summary 获取模板分类列表
     *
     * @param request TemplateCategoriesRequest
     * @return TemplateCategoriesResponse
     */
    async templateCategories(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new TemplateCategoriesHeaders({});
        return await this.templateCategoriesWithOptions(request, headers, runtime);
    }
    /**
     * @summary 取消标记星标
     *
     * @param request UnmarkStarRequest
     * @param headers UnmarkStarHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnmarkStarResponse
     */
    async unmarkStarWithOptions(dentryUuid, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UnmarkStar",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/dentries/${dentryUuid}/stars/unmark`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UnmarkStarResponse({}));
    }
    /**
     * @summary 取消标记星标
     *
     * @param request UnmarkStarRequest
     * @return UnmarkStarResponse
     */
    async unmarkStar(dentryUuid, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnmarkStarHeaders({});
        return await this.unmarkStarWithOptions(dentryUuid, request, headers, runtime);
    }
    /**
     * @summary 取消置顶知识库
     *
     * @param request UnpinSpaceRequest
     * @param headers UnpinSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UnpinSpaceResponse
     */
    async unpinSpaceWithOptions(spaceId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
        });
        let params = new $OpenApi.Params({
            action: "UnpinSpace",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/spaces/${spaceId}/unpin`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UnpinSpaceResponse({}));
    }
    /**
     * @summary 取消置顶知识库
     *
     * @param request UnpinSpaceRequest
     * @return UnpinSpaceResponse
     */
    async unpinSpace(spaceId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UnpinSpaceHeaders({});
        return await this.unpinSpaceWithOptions(spaceId, request, headers, runtime);
    }
    /**
     * @summary 更新小组
     *
     * @param request UpdateTeamRequest
     * @param headers UpdateTeamHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateTeamResponse
     */
    async updateTeamWithOptions(teamId, request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.description)) {
            body["description"] = request.description;
        }
        if (!tea_util_1.default.isUnset(request.name)) {
            body["name"] = request.name;
        }
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            body["operatorId"] = request.operatorId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateTeam",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/teams/${teamId}`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateTeamResponse({}));
    }
    /**
     * @summary 更新小组
     *
     * @param request UpdateTeamRequest
     * @return UpdateTeamResponse
     */
    async updateTeam(teamId, request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateTeamHeaders({});
        return await this.updateTeamWithOptions(teamId, request, headers, runtime);
    }
    /**
     * @summary 用户模板列表
     *
     * @param request UserTemplatesRequest
     * @param headers UserTemplatesHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UserTemplatesResponse
     */
    async userTemplatesWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let query = {};
        if (!tea_util_1.default.isUnset(request.operatorId)) {
            query["operatorId"] = request.operatorId;
        }
        let body = {};
        if (!tea_util_1.default.isUnset(request.option)) {
            body["option"] = request.option;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            query: openapi_util_1.default.query(query),
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UserTemplates",
            version: "doc_2.0",
            protocol: "HTTP",
            pathname: `/v2.0/doc/users/templates/query`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UserTemplatesResponse({}));
    }
    /**
     * @summary 用户模板列表
     *
     * @param request UserTemplatesRequest
     * @return UserTemplatesResponse
     */
    async userTemplates(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UserTemplatesHeaders({});
        return await this.userTemplatesWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map