"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateCardWithDelegateHeaders = exports.UpdateCardResponse = exports.UpdateCardResponseBody = exports.UpdateCardRequest = exports.UpdateCardHeaders = exports.StreamingUpdateResponse = exports.StreamingUpdateResponseBody = exports.StreamingUpdateRequest = exports.StreamingUpdateHeaders = exports.RegisterCallbackWithDelegateResponse = exports.RegisterCallbackWithDelegateResponseBody = exports.RegisterCallbackWithDelegateRequest = exports.RegisterCallbackWithDelegateHeaders = exports.RegisterCallbackResponse = exports.RegisterCallbackResponseBody = exports.RegisterCallbackRequest = exports.RegisterCallbackHeaders = exports.DeliverCardWithDelegateResponse = exports.DeliverCardWithDelegateResponseBody = exports.DeliverCardWithDelegateRequest = exports.DeliverCardWithDelegateHeaders = exports.DeliverCardResponse = exports.DeliverCardResponseBody = exports.DeliverCardRequest = exports.DeliverCardHeaders = exports.CreateCardWithDelegateResponse = exports.CreateCardWithDelegateResponseBody = exports.CreateCardWithDelegateRequest = exports.CreateCardWithDelegateHeaders = exports.CreateCardResponse = exports.CreateCardResponseBody = exports.CreateCardRequest = exports.CreateCardHeaders = exports.CreateAndDeliverWithDelegateResponse = exports.CreateAndDeliverWithDelegateResponseBody = exports.CreateAndDeliverWithDelegateRequest = exports.CreateAndDeliverWithDelegateHeaders = exports.CreateAndDeliverResponse = exports.CreateAndDeliverResponseBody = exports.CreateAndDeliverRequest = exports.CreateAndDeliverHeaders = exports.AppendSpaceWithDelegateResponse = exports.AppendSpaceWithDelegateResponseBody = exports.AppendSpaceWithDelegateRequest = exports.AppendSpaceWithDelegateHeaders = exports.AppendSpaceResponse = exports.AppendSpaceResponseBody = exports.AppendSpaceRequest = exports.AppendSpaceHeaders = exports.PrivateDataValue = void 0;
exports.CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModel = exports.CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelSearchSupport = exports.CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelNotification = exports.CreateAndDeliverWithDelegateRequestImGroupOpenDeliverModel = exports.CreateAndDeliverWithDelegateRequestDocOpenDeliverModel = exports.CreateAndDeliverWithDelegateRequestCoFeedOpenSpaceModel = exports.CreateAndDeliverWithDelegateRequestCoFeedOpenDeliverModel = exports.CreateAndDeliverWithDelegateRequestCardData = exports.CreateAndDeliverResponseBodyResult = exports.CreateAndDeliverResponseBodyResultDeliverResults = exports.CreateAndDeliverRequestTopOpenSpaceModel = exports.CreateAndDeliverRequestTopOpenDeliverModel = exports.CreateAndDeliverRequestOpenDynamicDataConfig = exports.CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs = exports.CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = exports.CreateAndDeliverRequestImSingleOpenSpaceModel = exports.CreateAndDeliverRequestImSingleOpenSpaceModelSearchSupport = exports.CreateAndDeliverRequestImSingleOpenSpaceModelNotification = exports.CreateAndDeliverRequestImSingleOpenDeliverModel = exports.CreateAndDeliverRequestImRobotOpenSpaceModel = exports.CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport = exports.CreateAndDeliverRequestImRobotOpenSpaceModelNotification = exports.CreateAndDeliverRequestImRobotOpenDeliverModel = exports.CreateAndDeliverRequestImGroupOpenSpaceModel = exports.CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport = exports.CreateAndDeliverRequestImGroupOpenSpaceModelNotification = exports.CreateAndDeliverRequestImGroupOpenDeliverModel = exports.CreateAndDeliverRequestDocOpenDeliverModel = exports.CreateAndDeliverRequestCoFeedOpenSpaceModel = exports.CreateAndDeliverRequestCoFeedOpenDeliverModel = exports.CreateAndDeliverRequestCardData = exports.AppendSpaceWithDelegateRequestTopOpenSpaceModel = exports.AppendSpaceWithDelegateRequestImRobotOpenSpaceModel = exports.AppendSpaceWithDelegateRequestImRobotOpenSpaceModelSearchSupport = exports.AppendSpaceWithDelegateRequestImRobotOpenSpaceModelNotification = exports.AppendSpaceWithDelegateRequestImGroupOpenSpaceModel = exports.AppendSpaceWithDelegateRequestImGroupOpenSpaceModelSearchSupport = exports.AppendSpaceWithDelegateRequestImGroupOpenSpaceModelNotification = exports.AppendSpaceWithDelegateRequestCoFeedOpenSpaceModel = exports.AppendSpaceRequestTopOpenSpaceModel = exports.AppendSpaceRequestImRobotOpenSpaceModel = exports.AppendSpaceRequestImRobotOpenSpaceModelSearchSupport = exports.AppendSpaceRequestImRobotOpenSpaceModelNotification = exports.AppendSpaceRequestImGroupOpenSpaceModel = exports.AppendSpaceRequestImGroupOpenSpaceModelSearchSupport = exports.AppendSpaceRequestImGroupOpenSpaceModelNotification = exports.AppendSpaceRequestCoFeedOpenSpaceModel = exports.UpdateCardWithDelegateResponse = exports.UpdateCardWithDelegateResponseBody = exports.UpdateCardWithDelegateRequest = void 0;
exports.DeliverCardRequestImSingleOpenDeliverModel = exports.DeliverCardRequestImRobotOpenDeliverModel = exports.DeliverCardRequestImGroupOpenDeliverModel = exports.DeliverCardRequestDocOpenDeliverModel = exports.DeliverCardRequestCoFeedOpenDeliverModel = exports.CreateCardWithDelegateRequestTopOpenSpaceModel = exports.CreateCardWithDelegateRequestOpenDynamicDataConfig = exports.CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs = exports.CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = exports.CreateCardWithDelegateRequestImSingleOpenSpaceModel = exports.CreateCardWithDelegateRequestImSingleOpenSpaceModelSearchSupport = exports.CreateCardWithDelegateRequestImSingleOpenSpaceModelNotification = exports.CreateCardWithDelegateRequestImRobotOpenSpaceModel = exports.CreateCardWithDelegateRequestImRobotOpenSpaceModelSearchSupport = exports.CreateCardWithDelegateRequestImRobotOpenSpaceModelNotification = exports.CreateCardWithDelegateRequestImGroupOpenSpaceModel = exports.CreateCardWithDelegateRequestImGroupOpenSpaceModelSearchSupport = exports.CreateCardWithDelegateRequestImGroupOpenSpaceModelNotification = exports.CreateCardWithDelegateRequestCoFeedOpenSpaceModel = exports.CreateCardWithDelegateRequestCardData = exports.CreateCardRequestTopOpenSpaceModel = exports.CreateCardRequestOpenDynamicDataConfig = exports.CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs = exports.CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = exports.CreateCardRequestImSingleOpenSpaceModel = exports.CreateCardRequestImSingleOpenSpaceModelSearchSupport = exports.CreateCardRequestImSingleOpenSpaceModelNotification = exports.CreateCardRequestImRobotOpenSpaceModel = exports.CreateCardRequestImRobotOpenSpaceModelSearchSupport = exports.CreateCardRequestImRobotOpenSpaceModelNotification = exports.CreateCardRequestImGroupOpenSpaceModel = exports.CreateCardRequestImGroupOpenSpaceModelSearchSupport = exports.CreateCardRequestImGroupOpenSpaceModelNotification = exports.CreateCardRequestCoFeedOpenSpaceModel = exports.CreateCardRequestCardData = exports.CreateAndDeliverWithDelegateResponseBodyResult = exports.CreateAndDeliverWithDelegateResponseBodyResultDeliverResults = exports.CreateAndDeliverWithDelegateRequestTopOpenSpaceModel = exports.CreateAndDeliverWithDelegateRequestTopOpenDeliverModel = exports.CreateAndDeliverWithDelegateRequestOpenDynamicDataConfig = exports.CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs = exports.CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = exports.CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModel = exports.CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelSearchSupport = exports.CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelNotification = exports.CreateAndDeliverWithDelegateRequestImSingleOpenDeliverModel = exports.CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModel = exports.CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelSearchSupport = exports.CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelNotification = exports.CreateAndDeliverWithDelegateRequestImRobotOpenDeliverModel = void 0;
exports.UpdateCardWithDelegateRequestCardUpdateOptions = exports.UpdateCardWithDelegateRequestCardData = exports.UpdateCardRequestCardUpdateOptions = exports.UpdateCardRequestCardData = exports.RegisterCallbackWithDelegateResponseBodyResult = exports.RegisterCallbackResponseBodyResult = exports.DeliverCardWithDelegateResponseBodyResult = exports.DeliverCardWithDelegateRequestTopOpenDeliverModel = exports.DeliverCardWithDelegateRequestImSingleOpenDeliverModel = exports.DeliverCardWithDelegateRequestImRobotOpenDeliverModel = exports.DeliverCardWithDelegateRequestImGroupOpenDeliverModel = exports.DeliverCardWithDelegateRequestDocOpenDeliverModel = exports.DeliverCardWithDelegateRequestCoFeedOpenDeliverModel = exports.DeliverCardResponseBodyResult = exports.DeliverCardRequestTopOpenDeliverModel = void 0;
// This file is auto-generated, don't edit it
/**
 *
 */
const tea_util_1 = __importStar(require("@alicloud/tea-util")), $Util = tea_util_1;
const gateway_dingtalk_1 = __importDefault(require("@alicloud/gateway-dingtalk"));
const openapi_client_1 = __importStar(require("@alicloud/openapi-client")), $OpenApi = openapi_client_1;
const openapi_util_1 = __importDefault(require("@alicloud/openapi-util"));
const $tea = __importStar(require("@alicloud/tea-typescript"));
class PrivateDataValue extends $tea.Model {
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.PrivateDataValue = PrivateDataValue;
class AppendSpaceHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceHeaders = AppendSpaceHeaders;
class AppendSpaceRequest extends $tea.Model {
    static names() {
        return {
            coFeedOpenSpaceModel: 'coFeedOpenSpaceModel',
            imGroupOpenSpaceModel: 'imGroupOpenSpaceModel',
            imRobotOpenSpaceModel: 'imRobotOpenSpaceModel',
            outTrackId: 'outTrackId',
            topOpenSpaceModel: 'topOpenSpaceModel',
        };
    }
    static types() {
        return {
            coFeedOpenSpaceModel: AppendSpaceRequestCoFeedOpenSpaceModel,
            imGroupOpenSpaceModel: AppendSpaceRequestImGroupOpenSpaceModel,
            imRobotOpenSpaceModel: AppendSpaceRequestImRobotOpenSpaceModel,
            outTrackId: 'string',
            topOpenSpaceModel: AppendSpaceRequestTopOpenSpaceModel,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceRequest = AppendSpaceRequest;
class AppendSpaceResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceResponseBody = AppendSpaceResponseBody;
class AppendSpaceResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AppendSpaceResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceResponse = AppendSpaceResponse;
class AppendSpaceWithDelegateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateHeaders = AppendSpaceWithDelegateHeaders;
class AppendSpaceWithDelegateRequest extends $tea.Model {
    static names() {
        return {
            coFeedOpenSpaceModel: 'coFeedOpenSpaceModel',
            imGroupOpenSpaceModel: 'imGroupOpenSpaceModel',
            imRobotOpenSpaceModel: 'imRobotOpenSpaceModel',
            outTrackId: 'outTrackId',
            topOpenSpaceModel: 'topOpenSpaceModel',
        };
    }
    static types() {
        return {
            coFeedOpenSpaceModel: AppendSpaceWithDelegateRequestCoFeedOpenSpaceModel,
            imGroupOpenSpaceModel: AppendSpaceWithDelegateRequestImGroupOpenSpaceModel,
            imRobotOpenSpaceModel: AppendSpaceWithDelegateRequestImRobotOpenSpaceModel,
            outTrackId: 'string',
            topOpenSpaceModel: AppendSpaceWithDelegateRequestTopOpenSpaceModel,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateRequest = AppendSpaceWithDelegateRequest;
class AppendSpaceWithDelegateResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateResponseBody = AppendSpaceWithDelegateResponseBody;
class AppendSpaceWithDelegateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: AppendSpaceWithDelegateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateResponse = AppendSpaceWithDelegateResponse;
class CreateAndDeliverHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverHeaders = CreateAndDeliverHeaders;
class CreateAndDeliverRequest extends $tea.Model {
    static names() {
        return {
            callbackRouteKey: 'callbackRouteKey',
            callbackType: 'callbackType',
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            coFeedOpenDeliverModel: 'coFeedOpenDeliverModel',
            coFeedOpenSpaceModel: 'coFeedOpenSpaceModel',
            docOpenDeliverModel: 'docOpenDeliverModel',
            imGroupOpenDeliverModel: 'imGroupOpenDeliverModel',
            imGroupOpenSpaceModel: 'imGroupOpenSpaceModel',
            imRobotOpenDeliverModel: 'imRobotOpenDeliverModel',
            imRobotOpenSpaceModel: 'imRobotOpenSpaceModel',
            imSingleOpenDeliverModel: 'imSingleOpenDeliverModel',
            imSingleOpenSpaceModel: 'imSingleOpenSpaceModel',
            openDynamicDataConfig: 'openDynamicDataConfig',
            openSpaceId: 'openSpaceId',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            topOpenDeliverModel: 'topOpenDeliverModel',
            topOpenSpaceModel: 'topOpenSpaceModel',
            userId: 'userId',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            callbackRouteKey: 'string',
            callbackType: 'string',
            cardData: CreateAndDeliverRequestCardData,
            cardTemplateId: 'string',
            coFeedOpenDeliverModel: CreateAndDeliverRequestCoFeedOpenDeliverModel,
            coFeedOpenSpaceModel: CreateAndDeliverRequestCoFeedOpenSpaceModel,
            docOpenDeliverModel: CreateAndDeliverRequestDocOpenDeliverModel,
            imGroupOpenDeliverModel: CreateAndDeliverRequestImGroupOpenDeliverModel,
            imGroupOpenSpaceModel: CreateAndDeliverRequestImGroupOpenSpaceModel,
            imRobotOpenDeliverModel: CreateAndDeliverRequestImRobotOpenDeliverModel,
            imRobotOpenSpaceModel: CreateAndDeliverRequestImRobotOpenSpaceModel,
            imSingleOpenDeliverModel: CreateAndDeliverRequestImSingleOpenDeliverModel,
            imSingleOpenSpaceModel: CreateAndDeliverRequestImSingleOpenSpaceModel,
            openDynamicDataConfig: CreateAndDeliverRequestOpenDynamicDataConfig,
            openSpaceId: 'string',
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            topOpenDeliverModel: CreateAndDeliverRequestTopOpenDeliverModel,
            topOpenSpaceModel: CreateAndDeliverRequestTopOpenSpaceModel,
            userId: 'string',
            userIdType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequest = CreateAndDeliverRequest;
class CreateAndDeliverResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateAndDeliverResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverResponseBody = CreateAndDeliverResponseBody;
class CreateAndDeliverResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateAndDeliverResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverResponse = CreateAndDeliverResponse;
class CreateAndDeliverWithDelegateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateHeaders = CreateAndDeliverWithDelegateHeaders;
class CreateAndDeliverWithDelegateRequest extends $tea.Model {
    static names() {
        return {
            callbackRouteKey: 'callbackRouteKey',
            callbackType: 'callbackType',
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            coFeedOpenDeliverModel: 'coFeedOpenDeliverModel',
            coFeedOpenSpaceModel: 'coFeedOpenSpaceModel',
            docOpenDeliverModel: 'docOpenDeliverModel',
            imGroupOpenDeliverModel: 'imGroupOpenDeliverModel',
            imGroupOpenSpaceModel: 'imGroupOpenSpaceModel',
            imRobotOpenDeliverModel: 'imRobotOpenDeliverModel',
            imRobotOpenSpaceModel: 'imRobotOpenSpaceModel',
            imSingleOpenDeliverModel: 'imSingleOpenDeliverModel',
            imSingleOpenSpaceModel: 'imSingleOpenSpaceModel',
            openDynamicDataConfig: 'openDynamicDataConfig',
            openSpaceId: 'openSpaceId',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            topOpenDeliverModel: 'topOpenDeliverModel',
            topOpenSpaceModel: 'topOpenSpaceModel',
            userId: 'userId',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            callbackRouteKey: 'string',
            callbackType: 'string',
            cardData: CreateAndDeliverWithDelegateRequestCardData,
            cardTemplateId: 'string',
            coFeedOpenDeliverModel: CreateAndDeliverWithDelegateRequestCoFeedOpenDeliverModel,
            coFeedOpenSpaceModel: CreateAndDeliverWithDelegateRequestCoFeedOpenSpaceModel,
            docOpenDeliverModel: CreateAndDeliverWithDelegateRequestDocOpenDeliverModel,
            imGroupOpenDeliverModel: CreateAndDeliverWithDelegateRequestImGroupOpenDeliverModel,
            imGroupOpenSpaceModel: CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModel,
            imRobotOpenDeliverModel: CreateAndDeliverWithDelegateRequestImRobotOpenDeliverModel,
            imRobotOpenSpaceModel: CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModel,
            imSingleOpenDeliverModel: CreateAndDeliverWithDelegateRequestImSingleOpenDeliverModel,
            imSingleOpenSpaceModel: CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModel,
            openDynamicDataConfig: CreateAndDeliverWithDelegateRequestOpenDynamicDataConfig,
            openSpaceId: 'string',
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            topOpenDeliverModel: CreateAndDeliverWithDelegateRequestTopOpenDeliverModel,
            topOpenSpaceModel: CreateAndDeliverWithDelegateRequestTopOpenSpaceModel,
            userId: 'string',
            userIdType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequest = CreateAndDeliverWithDelegateRequest;
class CreateAndDeliverWithDelegateResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: CreateAndDeliverWithDelegateResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateResponseBody = CreateAndDeliverWithDelegateResponseBody;
class CreateAndDeliverWithDelegateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateAndDeliverWithDelegateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateResponse = CreateAndDeliverWithDelegateResponse;
class CreateCardHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardHeaders = CreateCardHeaders;
class CreateCardRequest extends $tea.Model {
    static names() {
        return {
            callbackRouteKey: 'callbackRouteKey',
            callbackType: 'callbackType',
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            coFeedOpenSpaceModel: 'coFeedOpenSpaceModel',
            imGroupOpenSpaceModel: 'imGroupOpenSpaceModel',
            imRobotOpenSpaceModel: 'imRobotOpenSpaceModel',
            imSingleOpenSpaceModel: 'imSingleOpenSpaceModel',
            openDynamicDataConfig: 'openDynamicDataConfig',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            topOpenSpaceModel: 'topOpenSpaceModel',
            userId: 'userId',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            callbackRouteKey: 'string',
            callbackType: 'string',
            cardData: CreateCardRequestCardData,
            cardTemplateId: 'string',
            coFeedOpenSpaceModel: CreateCardRequestCoFeedOpenSpaceModel,
            imGroupOpenSpaceModel: CreateCardRequestImGroupOpenSpaceModel,
            imRobotOpenSpaceModel: CreateCardRequestImRobotOpenSpaceModel,
            imSingleOpenSpaceModel: CreateCardRequestImSingleOpenSpaceModel,
            openDynamicDataConfig: CreateCardRequestOpenDynamicDataConfig,
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            topOpenSpaceModel: CreateCardRequestTopOpenSpaceModel,
            userId: 'string',
            userIdType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequest = CreateCardRequest;
class CreateCardResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardResponseBody = CreateCardResponseBody;
class CreateCardResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCardResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardResponse = CreateCardResponse;
class CreateCardWithDelegateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateHeaders = CreateCardWithDelegateHeaders;
class CreateCardWithDelegateRequest extends $tea.Model {
    static names() {
        return {
            callbackRouteKey: 'callbackRouteKey',
            callbackType: 'callbackType',
            cardData: 'cardData',
            cardTemplateId: 'cardTemplateId',
            coFeedOpenSpaceModel: 'coFeedOpenSpaceModel',
            imGroupOpenSpaceModel: 'imGroupOpenSpaceModel',
            imRobotOpenSpaceModel: 'imRobotOpenSpaceModel',
            imSingleOpenSpaceModel: 'imSingleOpenSpaceModel',
            openDynamicDataConfig: 'openDynamicDataConfig',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            topOpenSpaceModel: 'topOpenSpaceModel',
            userId: 'userId',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            callbackRouteKey: 'string',
            callbackType: 'string',
            cardData: CreateCardWithDelegateRequestCardData,
            cardTemplateId: 'string',
            coFeedOpenSpaceModel: CreateCardWithDelegateRequestCoFeedOpenSpaceModel,
            imGroupOpenSpaceModel: CreateCardWithDelegateRequestImGroupOpenSpaceModel,
            imRobotOpenSpaceModel: CreateCardWithDelegateRequestImRobotOpenSpaceModel,
            imSingleOpenSpaceModel: CreateCardWithDelegateRequestImSingleOpenSpaceModel,
            openDynamicDataConfig: CreateCardWithDelegateRequestOpenDynamicDataConfig,
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            topOpenSpaceModel: CreateCardWithDelegateRequestTopOpenSpaceModel,
            userId: 'string',
            userIdType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequest = CreateCardWithDelegateRequest;
class CreateCardWithDelegateResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateResponseBody = CreateCardWithDelegateResponseBody;
class CreateCardWithDelegateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: CreateCardWithDelegateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateResponse = CreateCardWithDelegateResponse;
class DeliverCardHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardHeaders = DeliverCardHeaders;
class DeliverCardRequest extends $tea.Model {
    static names() {
        return {
            coFeedOpenDeliverModel: 'coFeedOpenDeliverModel',
            docOpenDeliverModel: 'docOpenDeliverModel',
            imGroupOpenDeliverModel: 'imGroupOpenDeliverModel',
            imRobotOpenDeliverModel: 'imRobotOpenDeliverModel',
            imSingleOpenDeliverModel: 'imSingleOpenDeliverModel',
            openSpaceId: 'openSpaceId',
            outTrackId: 'outTrackId',
            topOpenDeliverModel: 'topOpenDeliverModel',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            coFeedOpenDeliverModel: DeliverCardRequestCoFeedOpenDeliverModel,
            docOpenDeliverModel: DeliverCardRequestDocOpenDeliverModel,
            imGroupOpenDeliverModel: DeliverCardRequestImGroupOpenDeliverModel,
            imRobotOpenDeliverModel: DeliverCardRequestImRobotOpenDeliverModel,
            imSingleOpenDeliverModel: DeliverCardRequestImSingleOpenDeliverModel,
            openSpaceId: 'string',
            outTrackId: 'string',
            topOpenDeliverModel: DeliverCardRequestTopOpenDeliverModel,
            userIdType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardRequest = DeliverCardRequest;
class DeliverCardResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': DeliverCardResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardResponseBody = DeliverCardResponseBody;
class DeliverCardResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeliverCardResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardResponse = DeliverCardResponse;
class DeliverCardWithDelegateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateHeaders = DeliverCardWithDelegateHeaders;
class DeliverCardWithDelegateRequest extends $tea.Model {
    static names() {
        return {
            coFeedOpenDeliverModel: 'coFeedOpenDeliverModel',
            docOpenDeliverModel: 'docOpenDeliverModel',
            imGroupOpenDeliverModel: 'imGroupOpenDeliverModel',
            imRobotOpenDeliverModel: 'imRobotOpenDeliverModel',
            imSingleOpenDeliverModel: 'imSingleOpenDeliverModel',
            openSpaceId: 'openSpaceId',
            outTrackId: 'outTrackId',
            topOpenDeliverModel: 'topOpenDeliverModel',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            coFeedOpenDeliverModel: DeliverCardWithDelegateRequestCoFeedOpenDeliverModel,
            docOpenDeliverModel: DeliverCardWithDelegateRequestDocOpenDeliverModel,
            imGroupOpenDeliverModel: DeliverCardWithDelegateRequestImGroupOpenDeliverModel,
            imRobotOpenDeliverModel: DeliverCardWithDelegateRequestImRobotOpenDeliverModel,
            imSingleOpenDeliverModel: DeliverCardWithDelegateRequestImSingleOpenDeliverModel,
            openSpaceId: 'string',
            outTrackId: 'string',
            topOpenDeliverModel: DeliverCardWithDelegateRequestTopOpenDeliverModel,
            userIdType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateRequest = DeliverCardWithDelegateRequest;
class DeliverCardWithDelegateResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: { 'type': 'array', 'itemType': DeliverCardWithDelegateResponseBodyResult },
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateResponseBody = DeliverCardWithDelegateResponseBody;
class DeliverCardWithDelegateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: DeliverCardWithDelegateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateResponse = DeliverCardWithDelegateResponse;
class RegisterCallbackHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackHeaders = RegisterCallbackHeaders;
class RegisterCallbackRequest extends $tea.Model {
    static names() {
        return {
            apiSecret: 'apiSecret',
            callbackRouteKey: 'callbackRouteKey',
            callbackUrl: 'callbackUrl',
            forceUpdate: 'forceUpdate',
        };
    }
    static types() {
        return {
            apiSecret: 'string',
            callbackRouteKey: 'string',
            callbackUrl: 'string',
            forceUpdate: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackRequest = RegisterCallbackRequest;
class RegisterCallbackResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: RegisterCallbackResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackResponseBody = RegisterCallbackResponseBody;
class RegisterCallbackResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RegisterCallbackResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackResponse = RegisterCallbackResponse;
class RegisterCallbackWithDelegateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackWithDelegateHeaders = RegisterCallbackWithDelegateHeaders;
class RegisterCallbackWithDelegateRequest extends $tea.Model {
    static names() {
        return {
            apiSecret: 'apiSecret',
            callbackRouteKey: 'callbackRouteKey',
            callbackUrl: 'callbackUrl',
            forceUpdate: 'forceUpdate',
        };
    }
    static types() {
        return {
            apiSecret: 'string',
            callbackRouteKey: 'string',
            callbackUrl: 'string',
            forceUpdate: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackWithDelegateRequest = RegisterCallbackWithDelegateRequest;
class RegisterCallbackWithDelegateResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: RegisterCallbackWithDelegateResponseBodyResult,
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackWithDelegateResponseBody = RegisterCallbackWithDelegateResponseBody;
class RegisterCallbackWithDelegateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: RegisterCallbackWithDelegateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackWithDelegateResponse = RegisterCallbackWithDelegateResponse;
class StreamingUpdateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StreamingUpdateHeaders = StreamingUpdateHeaders;
class StreamingUpdateRequest extends $tea.Model {
    static names() {
        return {
            content: 'content',
            guid: 'guid',
            isError: 'isError',
            isFinalize: 'isFinalize',
            isFull: 'isFull',
            key: 'key',
            outTrackId: 'outTrackId',
        };
    }
    static types() {
        return {
            content: 'string',
            guid: 'string',
            isError: 'boolean',
            isFinalize: 'boolean',
            isFull: 'boolean',
            key: 'string',
            outTrackId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StreamingUpdateRequest = StreamingUpdateRequest;
class StreamingUpdateResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StreamingUpdateResponseBody = StreamingUpdateResponseBody;
class StreamingUpdateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: StreamingUpdateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.StreamingUpdateResponse = StreamingUpdateResponse;
class UpdateCardHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardHeaders = UpdateCardHeaders;
class UpdateCardRequest extends $tea.Model {
    static names() {
        return {
            cardData: 'cardData',
            cardUpdateOptions: 'cardUpdateOptions',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            cardData: UpdateCardRequestCardData,
            cardUpdateOptions: UpdateCardRequestCardUpdateOptions,
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            userIdType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardRequest = UpdateCardRequest;
class UpdateCardResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardResponseBody = UpdateCardResponseBody;
class UpdateCardResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCardResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardResponse = UpdateCardResponse;
class UpdateCardWithDelegateHeaders extends $tea.Model {
    static names() {
        return {
            commonHeaders: 'commonHeaders',
            xAcsDingtalkAccessToken: 'x-acs-dingtalk-access-token',
        };
    }
    static types() {
        return {
            commonHeaders: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            xAcsDingtalkAccessToken: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardWithDelegateHeaders = UpdateCardWithDelegateHeaders;
class UpdateCardWithDelegateRequest extends $tea.Model {
    static names() {
        return {
            cardData: 'cardData',
            cardUpdateOptions: 'cardUpdateOptions',
            outTrackId: 'outTrackId',
            privateData: 'privateData',
            userIdType: 'userIdType',
        };
    }
    static types() {
        return {
            cardData: UpdateCardWithDelegateRequestCardData,
            cardUpdateOptions: UpdateCardWithDelegateRequestCardUpdateOptions,
            outTrackId: 'string',
            privateData: { 'type': 'map', 'keyType': 'string', 'valueType': PrivateDataValue },
            userIdType: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardWithDelegateRequest = UpdateCardWithDelegateRequest;
class UpdateCardWithDelegateResponseBody extends $tea.Model {
    static names() {
        return {
            result: 'result',
            success: 'success',
        };
    }
    static types() {
        return {
            result: 'boolean',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardWithDelegateResponseBody = UpdateCardWithDelegateResponseBody;
class UpdateCardWithDelegateResponse extends $tea.Model {
    static names() {
        return {
            headers: 'headers',
            statusCode: 'statusCode',
            body: 'body',
        };
    }
    static types() {
        return {
            headers: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            statusCode: 'number',
            body: UpdateCardWithDelegateResponseBody,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardWithDelegateResponse = UpdateCardWithDelegateResponse;
class AppendSpaceRequestCoFeedOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            title: 'title',
        };
    }
    static types() {
        return {
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceRequestCoFeedOpenSpaceModel = AppendSpaceRequestCoFeedOpenSpaceModel;
class AppendSpaceRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceRequestImGroupOpenSpaceModelNotification = AppendSpaceRequestImGroupOpenSpaceModelNotification;
class AppendSpaceRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceRequestImGroupOpenSpaceModelSearchSupport = AppendSpaceRequestImGroupOpenSpaceModelSearchSupport;
class AppendSpaceRequestImGroupOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: AppendSpaceRequestImGroupOpenSpaceModelNotification,
            searchSupport: AppendSpaceRequestImGroupOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceRequestImGroupOpenSpaceModel = AppendSpaceRequestImGroupOpenSpaceModel;
class AppendSpaceRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceRequestImRobotOpenSpaceModelNotification = AppendSpaceRequestImRobotOpenSpaceModelNotification;
class AppendSpaceRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceRequestImRobotOpenSpaceModelSearchSupport = AppendSpaceRequestImRobotOpenSpaceModelSearchSupport;
class AppendSpaceRequestImRobotOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: AppendSpaceRequestImRobotOpenSpaceModelNotification,
            searchSupport: AppendSpaceRequestImRobotOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceRequestImRobotOpenSpaceModel = AppendSpaceRequestImRobotOpenSpaceModel;
class AppendSpaceRequestTopOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceRequestTopOpenSpaceModel = AppendSpaceRequestTopOpenSpaceModel;
class AppendSpaceWithDelegateRequestCoFeedOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            title: 'title',
        };
    }
    static types() {
        return {
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateRequestCoFeedOpenSpaceModel = AppendSpaceWithDelegateRequestCoFeedOpenSpaceModel;
class AppendSpaceWithDelegateRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateRequestImGroupOpenSpaceModelNotification = AppendSpaceWithDelegateRequestImGroupOpenSpaceModelNotification;
class AppendSpaceWithDelegateRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateRequestImGroupOpenSpaceModelSearchSupport = AppendSpaceWithDelegateRequestImGroupOpenSpaceModelSearchSupport;
class AppendSpaceWithDelegateRequestImGroupOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: AppendSpaceWithDelegateRequestImGroupOpenSpaceModelNotification,
            searchSupport: AppendSpaceWithDelegateRequestImGroupOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateRequestImGroupOpenSpaceModel = AppendSpaceWithDelegateRequestImGroupOpenSpaceModel;
class AppendSpaceWithDelegateRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateRequestImRobotOpenSpaceModelNotification = AppendSpaceWithDelegateRequestImRobotOpenSpaceModelNotification;
class AppendSpaceWithDelegateRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateRequestImRobotOpenSpaceModelSearchSupport = AppendSpaceWithDelegateRequestImRobotOpenSpaceModelSearchSupport;
class AppendSpaceWithDelegateRequestImRobotOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: AppendSpaceWithDelegateRequestImRobotOpenSpaceModelNotification,
            searchSupport: AppendSpaceWithDelegateRequestImRobotOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateRequestImRobotOpenSpaceModel = AppendSpaceWithDelegateRequestImRobotOpenSpaceModel;
class AppendSpaceWithDelegateRequestTopOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.AppendSpaceWithDelegateRequestTopOpenSpaceModel = AppendSpaceWithDelegateRequestTopOpenSpaceModel;
class CreateAndDeliverRequestCardData extends $tea.Model {
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestCardData = CreateAndDeliverRequestCardData;
class CreateAndDeliverRequestCoFeedOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            bizTag: 'bizTag',
            gmtTimeLine: 'gmtTimeLine',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            gmtTimeLine: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestCoFeedOpenDeliverModel = CreateAndDeliverRequestCoFeedOpenDeliverModel;
class CreateAndDeliverRequestCoFeedOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            title: 'title',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestCoFeedOpenSpaceModel = CreateAndDeliverRequestCoFeedOpenSpaceModel;
class CreateAndDeliverRequestDocOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestDocOpenDeliverModel = CreateAndDeliverRequestDocOpenDeliverModel;
class CreateAndDeliverRequestImGroupOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
            recipients: 'recipients',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            recipients: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImGroupOpenDeliverModel = CreateAndDeliverRequestImGroupOpenDeliverModel;
class CreateAndDeliverRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImGroupOpenSpaceModelNotification = CreateAndDeliverRequestImGroupOpenSpaceModelNotification;
class CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport = CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport;
class CreateAndDeliverRequestImGroupOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateAndDeliverRequestImGroupOpenSpaceModelNotification,
            searchSupport: CreateAndDeliverRequestImGroupOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImGroupOpenSpaceModel = CreateAndDeliverRequestImGroupOpenSpaceModel;
class CreateAndDeliverRequestImRobotOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            extension: 'extension',
            robotCode: 'robotCode',
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            robotCode: 'string',
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImRobotOpenDeliverModel = CreateAndDeliverRequestImRobotOpenDeliverModel;
class CreateAndDeliverRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImRobotOpenSpaceModelNotification = CreateAndDeliverRequestImRobotOpenSpaceModelNotification;
class CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport = CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport;
class CreateAndDeliverRequestImRobotOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateAndDeliverRequestImRobotOpenSpaceModelNotification,
            searchSupport: CreateAndDeliverRequestImRobotOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImRobotOpenSpaceModel = CreateAndDeliverRequestImRobotOpenSpaceModel;
class CreateAndDeliverRequestImSingleOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImSingleOpenDeliverModel = CreateAndDeliverRequestImSingleOpenDeliverModel;
class CreateAndDeliverRequestImSingleOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImSingleOpenSpaceModelNotification = CreateAndDeliverRequestImSingleOpenSpaceModelNotification;
class CreateAndDeliverRequestImSingleOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImSingleOpenSpaceModelSearchSupport = CreateAndDeliverRequestImSingleOpenSpaceModelSearchSupport;
class CreateAndDeliverRequestImSingleOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateAndDeliverRequestImSingleOpenSpaceModelNotification,
            searchSupport: CreateAndDeliverRequestImSingleOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestImSingleOpenSpaceModel = CreateAndDeliverRequestImSingleOpenSpaceModel;
class CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig extends $tea.Model {
    static names() {
        return {
            interval: 'interval',
            pullStrategy: 'pullStrategy',
            timeUnit: 'timeUnit',
        };
    }
    static types() {
        return {
            interval: 'number',
            pullStrategy: 'string',
            timeUnit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig;
class CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs extends $tea.Model {
    static names() {
        return {
            constParams: 'constParams',
            dynamicDataSourceId: 'dynamicDataSourceId',
            pullConfig: 'pullConfig',
        };
    }
    static types() {
        return {
            constParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dynamicDataSourceId: 'string',
            pullConfig: CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs = CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs;
class CreateAndDeliverRequestOpenDynamicDataConfig extends $tea.Model {
    static names() {
        return {
            dynamicDataSourceConfigs: 'dynamicDataSourceConfigs',
        };
    }
    static types() {
        return {
            dynamicDataSourceConfigs: { 'type': 'array', 'itemType': CreateAndDeliverRequestOpenDynamicDataConfigDynamicDataSourceConfigs },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestOpenDynamicDataConfig = CreateAndDeliverRequestOpenDynamicDataConfig;
class CreateAndDeliverRequestTopOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            expiredTimeMillis: 'expiredTimeMillis',
            platforms: 'platforms',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            expiredTimeMillis: 'number',
            platforms: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestTopOpenDeliverModel = CreateAndDeliverRequestTopOpenDeliverModel;
class CreateAndDeliverRequestTopOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverRequestTopOpenSpaceModel = CreateAndDeliverRequestTopOpenSpaceModel;
class CreateAndDeliverResponseBodyResultDeliverResults extends $tea.Model {
    static names() {
        return {
            carrierId: 'carrierId',
            errorMsg: 'errorMsg',
            spaceId: 'spaceId',
            spaceType: 'spaceType',
            success: 'success',
        };
    }
    static types() {
        return {
            carrierId: 'string',
            errorMsg: 'string',
            spaceId: 'string',
            spaceType: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverResponseBodyResultDeliverResults = CreateAndDeliverResponseBodyResultDeliverResults;
class CreateAndDeliverResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deliverResults: 'deliverResults',
            outTrackId: 'outTrackId',
        };
    }
    static types() {
        return {
            deliverResults: { 'type': 'array', 'itemType': CreateAndDeliverResponseBodyResultDeliverResults },
            outTrackId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverResponseBodyResult = CreateAndDeliverResponseBodyResult;
class CreateAndDeliverWithDelegateRequestCardData extends $tea.Model {
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestCardData = CreateAndDeliverWithDelegateRequestCardData;
class CreateAndDeliverWithDelegateRequestCoFeedOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            bizTag: 'bizTag',
            gmtTimeLine: 'gmtTimeLine',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            gmtTimeLine: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestCoFeedOpenDeliverModel = CreateAndDeliverWithDelegateRequestCoFeedOpenDeliverModel;
class CreateAndDeliverWithDelegateRequestCoFeedOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            coolAppCode: 'coolAppCode',
            title: 'title',
        };
    }
    static types() {
        return {
            coolAppCode: 'string',
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestCoFeedOpenSpaceModel = CreateAndDeliverWithDelegateRequestCoFeedOpenSpaceModel;
class CreateAndDeliverWithDelegateRequestDocOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestDocOpenDeliverModel = CreateAndDeliverWithDelegateRequestDocOpenDeliverModel;
class CreateAndDeliverWithDelegateRequestImGroupOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
            recipients: 'recipients',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            recipients: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImGroupOpenDeliverModel = CreateAndDeliverWithDelegateRequestImGroupOpenDeliverModel;
class CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelNotification = CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelNotification;
class CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelSearchSupport = CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelSearchSupport;
class CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelNotification,
            searchSupport: CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModel = CreateAndDeliverWithDelegateRequestImGroupOpenSpaceModel;
class CreateAndDeliverWithDelegateRequestImRobotOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            extension: 'extension',
            robotCode: 'robotCode',
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            robotCode: 'string',
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImRobotOpenDeliverModel = CreateAndDeliverWithDelegateRequestImRobotOpenDeliverModel;
class CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelNotification = CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelNotification;
class CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelSearchSupport = CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelSearchSupport;
class CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelNotification,
            searchSupport: CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModel = CreateAndDeliverWithDelegateRequestImRobotOpenSpaceModel;
class CreateAndDeliverWithDelegateRequestImSingleOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImSingleOpenDeliverModel = CreateAndDeliverWithDelegateRequestImSingleOpenDeliverModel;
class CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelNotification = CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelNotification;
class CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelSearchSupport = CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelSearchSupport;
class CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelNotification,
            searchSupport: CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModel = CreateAndDeliverWithDelegateRequestImSingleOpenSpaceModel;
class CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig extends $tea.Model {
    static names() {
        return {
            interval: 'interval',
            pullStrategy: 'pullStrategy',
            timeUnit: 'timeUnit',
        };
    }
    static types() {
        return {
            interval: 'number',
            pullStrategy: 'string',
            timeUnit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig;
class CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs extends $tea.Model {
    static names() {
        return {
            constParams: 'constParams',
            dynamicDataSourceId: 'dynamicDataSourceId',
            pullConfig: 'pullConfig',
        };
    }
    static types() {
        return {
            constParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dynamicDataSourceId: 'string',
            pullConfig: CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs = CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs;
class CreateAndDeliverWithDelegateRequestOpenDynamicDataConfig extends $tea.Model {
    static names() {
        return {
            dynamicDataSourceConfigs: 'dynamicDataSourceConfigs',
        };
    }
    static types() {
        return {
            dynamicDataSourceConfigs: { 'type': 'array', 'itemType': CreateAndDeliverWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestOpenDynamicDataConfig = CreateAndDeliverWithDelegateRequestOpenDynamicDataConfig;
class CreateAndDeliverWithDelegateRequestTopOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            expiredTimeMillis: 'expiredTimeMillis',
            platforms: 'platforms',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            expiredTimeMillis: 'number',
            platforms: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestTopOpenDeliverModel = CreateAndDeliverWithDelegateRequestTopOpenDeliverModel;
class CreateAndDeliverWithDelegateRequestTopOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateRequestTopOpenSpaceModel = CreateAndDeliverWithDelegateRequestTopOpenSpaceModel;
class CreateAndDeliverWithDelegateResponseBodyResultDeliverResults extends $tea.Model {
    static names() {
        return {
            carrierId: 'carrierId',
            errorMsg: 'errorMsg',
            spaceId: 'spaceId',
            spaceType: 'spaceType',
            success: 'success',
        };
    }
    static types() {
        return {
            carrierId: 'string',
            errorMsg: 'string',
            spaceId: 'string',
            spaceType: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateResponseBodyResultDeliverResults = CreateAndDeliverWithDelegateResponseBodyResultDeliverResults;
class CreateAndDeliverWithDelegateResponseBodyResult extends $tea.Model {
    static names() {
        return {
            deliverResults: 'deliverResults',
            outTrackId: 'outTrackId',
        };
    }
    static types() {
        return {
            deliverResults: { 'type': 'array', 'itemType': CreateAndDeliverWithDelegateResponseBodyResultDeliverResults },
            outTrackId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateAndDeliverWithDelegateResponseBodyResult = CreateAndDeliverWithDelegateResponseBodyResult;
class CreateCardRequestCardData extends $tea.Model {
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestCardData = CreateCardRequestCardData;
class CreateCardRequestCoFeedOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            title: 'title',
        };
    }
    static types() {
        return {
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestCoFeedOpenSpaceModel = CreateCardRequestCoFeedOpenSpaceModel;
class CreateCardRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestImGroupOpenSpaceModelNotification = CreateCardRequestImGroupOpenSpaceModelNotification;
class CreateCardRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestImGroupOpenSpaceModelSearchSupport = CreateCardRequestImGroupOpenSpaceModelSearchSupport;
class CreateCardRequestImGroupOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateCardRequestImGroupOpenSpaceModelNotification,
            searchSupport: CreateCardRequestImGroupOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestImGroupOpenSpaceModel = CreateCardRequestImGroupOpenSpaceModel;
class CreateCardRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestImRobotOpenSpaceModelNotification = CreateCardRequestImRobotOpenSpaceModelNotification;
class CreateCardRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestImRobotOpenSpaceModelSearchSupport = CreateCardRequestImRobotOpenSpaceModelSearchSupport;
class CreateCardRequestImRobotOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateCardRequestImRobotOpenSpaceModelNotification,
            searchSupport: CreateCardRequestImRobotOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestImRobotOpenSpaceModel = CreateCardRequestImRobotOpenSpaceModel;
class CreateCardRequestImSingleOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestImSingleOpenSpaceModelNotification = CreateCardRequestImSingleOpenSpaceModelNotification;
class CreateCardRequestImSingleOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestImSingleOpenSpaceModelSearchSupport = CreateCardRequestImSingleOpenSpaceModelSearchSupport;
class CreateCardRequestImSingleOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateCardRequestImSingleOpenSpaceModelNotification,
            searchSupport: CreateCardRequestImSingleOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestImSingleOpenSpaceModel = CreateCardRequestImSingleOpenSpaceModel;
class CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig extends $tea.Model {
    static names() {
        return {
            interval: 'interval',
            pullStrategy: 'pullStrategy',
            timeUnit: 'timeUnit',
        };
    }
    static types() {
        return {
            interval: 'number',
            pullStrategy: 'string',
            timeUnit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig;
class CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs extends $tea.Model {
    static names() {
        return {
            constParams: 'constParams',
            dynamicDataSourceId: 'dynamicDataSourceId',
            pullConfig: 'pullConfig',
        };
    }
    static types() {
        return {
            constParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dynamicDataSourceId: 'string',
            pullConfig: CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs = CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs;
class CreateCardRequestOpenDynamicDataConfig extends $tea.Model {
    static names() {
        return {
            dynamicDataSourceConfigs: 'dynamicDataSourceConfigs',
        };
    }
    static types() {
        return {
            dynamicDataSourceConfigs: { 'type': 'array', 'itemType': CreateCardRequestOpenDynamicDataConfigDynamicDataSourceConfigs },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestOpenDynamicDataConfig = CreateCardRequestOpenDynamicDataConfig;
class CreateCardRequestTopOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardRequestTopOpenSpaceModel = CreateCardRequestTopOpenSpaceModel;
class CreateCardWithDelegateRequestCardData extends $tea.Model {
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestCardData = CreateCardWithDelegateRequestCardData;
class CreateCardWithDelegateRequestCoFeedOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            title: 'title',
        };
    }
    static types() {
        return {
            title: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestCoFeedOpenSpaceModel = CreateCardWithDelegateRequestCoFeedOpenSpaceModel;
class CreateCardWithDelegateRequestImGroupOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestImGroupOpenSpaceModelNotification = CreateCardWithDelegateRequestImGroupOpenSpaceModelNotification;
class CreateCardWithDelegateRequestImGroupOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestImGroupOpenSpaceModelSearchSupport = CreateCardWithDelegateRequestImGroupOpenSpaceModelSearchSupport;
class CreateCardWithDelegateRequestImGroupOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateCardWithDelegateRequestImGroupOpenSpaceModelNotification,
            searchSupport: CreateCardWithDelegateRequestImGroupOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestImGroupOpenSpaceModel = CreateCardWithDelegateRequestImGroupOpenSpaceModel;
class CreateCardWithDelegateRequestImRobotOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestImRobotOpenSpaceModelNotification = CreateCardWithDelegateRequestImRobotOpenSpaceModelNotification;
class CreateCardWithDelegateRequestImRobotOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestImRobotOpenSpaceModelSearchSupport = CreateCardWithDelegateRequestImRobotOpenSpaceModelSearchSupport;
class CreateCardWithDelegateRequestImRobotOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateCardWithDelegateRequestImRobotOpenSpaceModelNotification,
            searchSupport: CreateCardWithDelegateRequestImRobotOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestImRobotOpenSpaceModel = CreateCardWithDelegateRequestImRobotOpenSpaceModel;
class CreateCardWithDelegateRequestImSingleOpenSpaceModelNotification extends $tea.Model {
    static names() {
        return {
            alertContent: 'alertContent',
            notificationOff: 'notificationOff',
        };
    }
    static types() {
        return {
            alertContent: 'string',
            notificationOff: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestImSingleOpenSpaceModelNotification = CreateCardWithDelegateRequestImSingleOpenSpaceModelNotification;
class CreateCardWithDelegateRequestImSingleOpenSpaceModelSearchSupport extends $tea.Model {
    static names() {
        return {
            searchDesc: 'searchDesc',
            searchIcon: 'searchIcon',
            searchTypeName: 'searchTypeName',
        };
    }
    static types() {
        return {
            searchDesc: 'string',
            searchIcon: 'string',
            searchTypeName: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestImSingleOpenSpaceModelSearchSupport = CreateCardWithDelegateRequestImSingleOpenSpaceModelSearchSupport;
class CreateCardWithDelegateRequestImSingleOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            lastMessageI18n: 'lastMessageI18n',
            notification: 'notification',
            searchSupport: 'searchSupport',
            supportForward: 'supportForward',
        };
    }
    static types() {
        return {
            lastMessageI18n: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            notification: CreateCardWithDelegateRequestImSingleOpenSpaceModelNotification,
            searchSupport: CreateCardWithDelegateRequestImSingleOpenSpaceModelSearchSupport,
            supportForward: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestImSingleOpenSpaceModel = CreateCardWithDelegateRequestImSingleOpenSpaceModel;
class CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig extends $tea.Model {
    static names() {
        return {
            interval: 'interval',
            pullStrategy: 'pullStrategy',
            timeUnit: 'timeUnit',
        };
    }
    static types() {
        return {
            interval: 'number',
            pullStrategy: 'string',
            timeUnit: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig = CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig;
class CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs extends $tea.Model {
    static names() {
        return {
            constParams: 'constParams',
            dynamicDataSourceId: 'dynamicDataSourceId',
            pullConfig: 'pullConfig',
        };
    }
    static types() {
        return {
            constParams: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            dynamicDataSourceId: 'string',
            pullConfig: CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigsPullConfig,
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs = CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs;
class CreateCardWithDelegateRequestOpenDynamicDataConfig extends $tea.Model {
    static names() {
        return {
            dynamicDataSourceConfigs: 'dynamicDataSourceConfigs',
        };
    }
    static types() {
        return {
            dynamicDataSourceConfigs: { 'type': 'array', 'itemType': CreateCardWithDelegateRequestOpenDynamicDataConfigDynamicDataSourceConfigs },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestOpenDynamicDataConfig = CreateCardWithDelegateRequestOpenDynamicDataConfig;
class CreateCardWithDelegateRequestTopOpenSpaceModel extends $tea.Model {
    static names() {
        return {
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.CreateCardWithDelegateRequestTopOpenSpaceModel = CreateCardWithDelegateRequestTopOpenSpaceModel;
class DeliverCardRequestCoFeedOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            bizTag: 'bizTag',
            gmtTimeLine: 'gmtTimeLine',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            gmtTimeLine: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardRequestCoFeedOpenDeliverModel = DeliverCardRequestCoFeedOpenDeliverModel;
class DeliverCardRequestDocOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardRequestDocOpenDeliverModel = DeliverCardRequestDocOpenDeliverModel;
class DeliverCardRequestImGroupOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
            recipients: 'recipients',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            recipients: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardRequestImGroupOpenDeliverModel = DeliverCardRequestImGroupOpenDeliverModel;
class DeliverCardRequestImRobotOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            extension: 'extension',
            robotCode: 'robotCode',
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            robotCode: 'string',
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardRequestImRobotOpenDeliverModel = DeliverCardRequestImRobotOpenDeliverModel;
class DeliverCardRequestImSingleOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardRequestImSingleOpenDeliverModel = DeliverCardRequestImSingleOpenDeliverModel;
class DeliverCardRequestTopOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            expiredTimeMillis: 'expiredTimeMillis',
            platforms: 'platforms',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            expiredTimeMillis: 'number',
            platforms: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardRequestTopOpenDeliverModel = DeliverCardRequestTopOpenDeliverModel;
class DeliverCardResponseBodyResult extends $tea.Model {
    static names() {
        return {
            carrierId: 'carrierId',
            errorMsg: 'errorMsg',
            spaceId: 'spaceId',
            spaceType: 'spaceType',
            success: 'success',
        };
    }
    static types() {
        return {
            carrierId: 'string',
            errorMsg: 'string',
            spaceId: 'string',
            spaceType: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardResponseBodyResult = DeliverCardResponseBodyResult;
class DeliverCardWithDelegateRequestCoFeedOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            bizTag: 'bizTag',
            gmtTimeLine: 'gmtTimeLine',
        };
    }
    static types() {
        return {
            bizTag: 'string',
            gmtTimeLine: 'number',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateRequestCoFeedOpenDeliverModel = DeliverCardWithDelegateRequestCoFeedOpenDeliverModel;
class DeliverCardWithDelegateRequestDocOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            userId: 'userId',
        };
    }
    static types() {
        return {
            userId: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateRequestDocOpenDeliverModel = DeliverCardWithDelegateRequestDocOpenDeliverModel;
class DeliverCardWithDelegateRequestImGroupOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
            recipients: 'recipients',
            robotCode: 'robotCode',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            recipients: { 'type': 'array', 'itemType': 'string' },
            robotCode: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateRequestImGroupOpenDeliverModel = DeliverCardWithDelegateRequestImGroupOpenDeliverModel;
class DeliverCardWithDelegateRequestImRobotOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            extension: 'extension',
            robotCode: 'robotCode',
            spaceType: 'spaceType',
        };
    }
    static types() {
        return {
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            robotCode: 'string',
            spaceType: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateRequestImRobotOpenDeliverModel = DeliverCardWithDelegateRequestImRobotOpenDeliverModel;
class DeliverCardWithDelegateRequestImSingleOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            atUserIds: 'atUserIds',
            extension: 'extension',
        };
    }
    static types() {
        return {
            atUserIds: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
            extension: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateRequestImSingleOpenDeliverModel = DeliverCardWithDelegateRequestImSingleOpenDeliverModel;
class DeliverCardWithDelegateRequestTopOpenDeliverModel extends $tea.Model {
    static names() {
        return {
            expiredTimeMillis: 'expiredTimeMillis',
            platforms: 'platforms',
            userIds: 'userIds',
        };
    }
    static types() {
        return {
            expiredTimeMillis: 'number',
            platforms: { 'type': 'array', 'itemType': 'string' },
            userIds: { 'type': 'array', 'itemType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateRequestTopOpenDeliverModel = DeliverCardWithDelegateRequestTopOpenDeliverModel;
class DeliverCardWithDelegateResponseBodyResult extends $tea.Model {
    static names() {
        return {
            carrierId: 'carrierId',
            errorMsg: 'errorMsg',
            spaceId: 'spaceId',
            spaceType: 'spaceType',
            success: 'success',
        };
    }
    static types() {
        return {
            carrierId: 'string',
            errorMsg: 'string',
            spaceId: 'string',
            spaceType: 'string',
            success: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.DeliverCardWithDelegateResponseBodyResult = DeliverCardWithDelegateResponseBodyResult;
class RegisterCallbackResponseBodyResult extends $tea.Model {
    static names() {
        return {
            apiSecret: 'apiSecret',
            callbackUrl: 'callbackUrl',
        };
    }
    static types() {
        return {
            apiSecret: 'string',
            callbackUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackResponseBodyResult = RegisterCallbackResponseBodyResult;
class RegisterCallbackWithDelegateResponseBodyResult extends $tea.Model {
    static names() {
        return {
            apiSecret: 'apiSecret',
            callbackUrl: 'callbackUrl',
        };
    }
    static types() {
        return {
            apiSecret: 'string',
            callbackUrl: 'string',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.RegisterCallbackWithDelegateResponseBodyResult = RegisterCallbackWithDelegateResponseBodyResult;
class UpdateCardRequestCardData extends $tea.Model {
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardRequestCardData = UpdateCardRequestCardData;
class UpdateCardRequestCardUpdateOptions extends $tea.Model {
    static names() {
        return {
            updateCardDataByKey: 'updateCardDataByKey',
            updatePrivateDataByKey: 'updatePrivateDataByKey',
        };
    }
    static types() {
        return {
            updateCardDataByKey: 'boolean',
            updatePrivateDataByKey: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardRequestCardUpdateOptions = UpdateCardRequestCardUpdateOptions;
class UpdateCardWithDelegateRequestCardData extends $tea.Model {
    static names() {
        return {
            cardParamMap: 'cardParamMap',
        };
    }
    static types() {
        return {
            cardParamMap: { 'type': 'map', 'keyType': 'string', 'valueType': 'string' },
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardWithDelegateRequestCardData = UpdateCardWithDelegateRequestCardData;
class UpdateCardWithDelegateRequestCardUpdateOptions extends $tea.Model {
    static names() {
        return {
            updateCardDataByKey: 'updateCardDataByKey',
            updatePrivateDataByKey: 'updatePrivateDataByKey',
        };
    }
    static types() {
        return {
            updateCardDataByKey: 'boolean',
            updatePrivateDataByKey: 'boolean',
        };
    }
    constructor(map) {
        super(map);
    }
}
exports.UpdateCardWithDelegateRequestCardUpdateOptions = UpdateCardWithDelegateRequestCardUpdateOptions;
class Client extends openapi_client_1.default {
    constructor(config) {
        super(config);
        this._client = new gateway_dingtalk_1.default();
        this._spi = this._client;
        this._endpointRule = "";
        if (tea_util_1.default.empty(this._endpoint)) {
            this._endpoint = "api.dingtalk.com";
        }
    }
    /**
     * @summary 新增或更新卡片的场域信息
     *
     * @param request AppendSpaceRequest
     * @param headers AppendSpaceHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AppendSpaceResponse
     */
    async appendSpaceWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coFeedOpenSpaceModel)) {
            body["coFeedOpenSpaceModel"] = request.coFeedOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenSpaceModel)) {
            body["imGroupOpenSpaceModel"] = request.imGroupOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenSpaceModel)) {
            body["imRobotOpenSpaceModel"] = request.imRobotOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.topOpenSpaceModel)) {
            body["topOpenSpaceModel"] = request.topOpenSpaceModel;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AppendSpace",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances/spaces`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AppendSpaceResponse({}));
    }
    /**
     * @summary 新增或更新卡片的场域信息
     *
     * @param request AppendSpaceRequest
     * @return AppendSpaceResponse
     */
    async appendSpace(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AppendSpaceHeaders({});
        return await this.appendSpaceWithOptions(request, headers, runtime);
    }
    /**
     * @summary 新增或更新卡片的场域信息
     *
     * @param request AppendSpaceWithDelegateRequest
     * @param headers AppendSpaceWithDelegateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return AppendSpaceWithDelegateResponse
     */
    async appendSpaceWithDelegateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coFeedOpenSpaceModel)) {
            body["coFeedOpenSpaceModel"] = request.coFeedOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenSpaceModel)) {
            body["imGroupOpenSpaceModel"] = request.imGroupOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenSpaceModel)) {
            body["imRobotOpenSpaceModel"] = request.imRobotOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.topOpenSpaceModel)) {
            body["topOpenSpaceModel"] = request.topOpenSpaceModel;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "AppendSpaceWithDelegate",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/me/instances/spaces`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new AppendSpaceWithDelegateResponse({}));
    }
    /**
     * @summary 新增或更新卡片的场域信息
     *
     * @param request AppendSpaceWithDelegateRequest
     * @return AppendSpaceWithDelegateResponse
     */
    async appendSpaceWithDelegate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new AppendSpaceWithDelegateHeaders({});
        return await this.appendSpaceWithDelegateWithOptions(request, headers, runtime);
    }
    /**
     * @summary 创建并投放卡片
     *
     * @param request CreateAndDeliverRequest
     * @param headers CreateAndDeliverHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAndDeliverResponse
     */
    async createAndDeliverWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.callbackType)) {
            body["callbackType"] = request.callbackType;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.coFeedOpenDeliverModel)) {
            body["coFeedOpenDeliverModel"] = request.coFeedOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.coFeedOpenSpaceModel)) {
            body["coFeedOpenSpaceModel"] = request.coFeedOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.docOpenDeliverModel)) {
            body["docOpenDeliverModel"] = request.docOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenDeliverModel)) {
            body["imGroupOpenDeliverModel"] = request.imGroupOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenSpaceModel)) {
            body["imGroupOpenSpaceModel"] = request.imGroupOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenDeliverModel)) {
            body["imRobotOpenDeliverModel"] = request.imRobotOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenSpaceModel)) {
            body["imRobotOpenSpaceModel"] = request.imRobotOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imSingleOpenDeliverModel)) {
            body["imSingleOpenDeliverModel"] = request.imSingleOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imSingleOpenSpaceModel)) {
            body["imSingleOpenSpaceModel"] = request.imSingleOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.openDynamicDataConfig)) {
            body["openDynamicDataConfig"] = request.openDynamicDataConfig;
        }
        if (!tea_util_1.default.isUnset(request.openSpaceId)) {
            body["openSpaceId"] = request.openSpaceId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.topOpenDeliverModel)) {
            body["topOpenDeliverModel"] = request.topOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.topOpenSpaceModel)) {
            body["topOpenSpaceModel"] = request.topOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateAndDeliver",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances/createAndDeliver`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateAndDeliverResponse({}));
    }
    /**
     * @summary 创建并投放卡片
     *
     * @param request CreateAndDeliverRequest
     * @return CreateAndDeliverResponse
     */
    async createAndDeliver(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateAndDeliverHeaders({});
        return await this.createAndDeliverWithOptions(request, headers, runtime);
    }
    /**
     * @summary 创建并投放卡片
     *
     * @param request CreateAndDeliverWithDelegateRequest
     * @param headers CreateAndDeliverWithDelegateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateAndDeliverWithDelegateResponse
     */
    async createAndDeliverWithDelegateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.callbackType)) {
            body["callbackType"] = request.callbackType;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.coFeedOpenDeliverModel)) {
            body["coFeedOpenDeliverModel"] = request.coFeedOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.coFeedOpenSpaceModel)) {
            body["coFeedOpenSpaceModel"] = request.coFeedOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.docOpenDeliverModel)) {
            body["docOpenDeliverModel"] = request.docOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenDeliverModel)) {
            body["imGroupOpenDeliverModel"] = request.imGroupOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenSpaceModel)) {
            body["imGroupOpenSpaceModel"] = request.imGroupOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenDeliverModel)) {
            body["imRobotOpenDeliverModel"] = request.imRobotOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenSpaceModel)) {
            body["imRobotOpenSpaceModel"] = request.imRobotOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imSingleOpenDeliverModel)) {
            body["imSingleOpenDeliverModel"] = request.imSingleOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imSingleOpenSpaceModel)) {
            body["imSingleOpenSpaceModel"] = request.imSingleOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.openDynamicDataConfig)) {
            body["openDynamicDataConfig"] = request.openDynamicDataConfig;
        }
        if (!tea_util_1.default.isUnset(request.openSpaceId)) {
            body["openSpaceId"] = request.openSpaceId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.topOpenDeliverModel)) {
            body["topOpenDeliverModel"] = request.topOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.topOpenSpaceModel)) {
            body["topOpenSpaceModel"] = request.topOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateAndDeliverWithDelegate",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/me/instances/createAndDeliver`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateAndDeliverWithDelegateResponse({}));
    }
    /**
     * @summary 创建并投放卡片
     *
     * @param request CreateAndDeliverWithDelegateRequest
     * @return CreateAndDeliverWithDelegateResponse
     */
    async createAndDeliverWithDelegate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateAndDeliverWithDelegateHeaders({});
        return await this.createAndDeliverWithDelegateWithOptions(request, headers, runtime);
    }
    /**
     * @summary 创建卡片
     *
     * @param request CreateCardRequest
     * @param headers CreateCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCardResponse
     */
    async createCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.callbackType)) {
            body["callbackType"] = request.callbackType;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.coFeedOpenSpaceModel)) {
            body["coFeedOpenSpaceModel"] = request.coFeedOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenSpaceModel)) {
            body["imGroupOpenSpaceModel"] = request.imGroupOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenSpaceModel)) {
            body["imRobotOpenSpaceModel"] = request.imRobotOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imSingleOpenSpaceModel)) {
            body["imSingleOpenSpaceModel"] = request.imSingleOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.openDynamicDataConfig)) {
            body["openDynamicDataConfig"] = request.openDynamicDataConfig;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.topOpenSpaceModel)) {
            body["topOpenSpaceModel"] = request.topOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCard",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCardResponse({}));
    }
    /**
     * @summary 创建卡片
     *
     * @param request CreateCardRequest
     * @return CreateCardResponse
     */
    async createCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCardHeaders({});
        return await this.createCardWithOptions(request, headers, runtime);
    }
    /**
     * @summary 创建卡片
     *
     * @param request CreateCardWithDelegateRequest
     * @param headers CreateCardWithDelegateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return CreateCardWithDelegateResponse
     */
    async createCardWithDelegateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.callbackType)) {
            body["callbackType"] = request.callbackType;
        }
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardTemplateId)) {
            body["cardTemplateId"] = request.cardTemplateId;
        }
        if (!tea_util_1.default.isUnset(request.coFeedOpenSpaceModel)) {
            body["coFeedOpenSpaceModel"] = request.coFeedOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenSpaceModel)) {
            body["imGroupOpenSpaceModel"] = request.imGroupOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenSpaceModel)) {
            body["imRobotOpenSpaceModel"] = request.imRobotOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.imSingleOpenSpaceModel)) {
            body["imSingleOpenSpaceModel"] = request.imSingleOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.openDynamicDataConfig)) {
            body["openDynamicDataConfig"] = request.openDynamicDataConfig;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.topOpenSpaceModel)) {
            body["topOpenSpaceModel"] = request.topOpenSpaceModel;
        }
        if (!tea_util_1.default.isUnset(request.userId)) {
            body["userId"] = request.userId;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "CreateCardWithDelegate",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/me/instances`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new CreateCardWithDelegateResponse({}));
    }
    /**
     * @summary 创建卡片
     *
     * @param request CreateCardWithDelegateRequest
     * @return CreateCardWithDelegateResponse
     */
    async createCardWithDelegate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new CreateCardWithDelegateHeaders({});
        return await this.createCardWithDelegateWithOptions(request, headers, runtime);
    }
    /**
     * @summary 投放卡片
     *
     * @param request DeliverCardRequest
     * @param headers DeliverCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeliverCardResponse
     */
    async deliverCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coFeedOpenDeliverModel)) {
            body["coFeedOpenDeliverModel"] = request.coFeedOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.docOpenDeliverModel)) {
            body["docOpenDeliverModel"] = request.docOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenDeliverModel)) {
            body["imGroupOpenDeliverModel"] = request.imGroupOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenDeliverModel)) {
            body["imRobotOpenDeliverModel"] = request.imRobotOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imSingleOpenDeliverModel)) {
            body["imSingleOpenDeliverModel"] = request.imSingleOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.openSpaceId)) {
            body["openSpaceId"] = request.openSpaceId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.topOpenDeliverModel)) {
            body["topOpenDeliverModel"] = request.topOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeliverCard",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances/deliver`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeliverCardResponse({}));
    }
    /**
     * @summary 投放卡片
     *
     * @param request DeliverCardRequest
     * @return DeliverCardResponse
     */
    async deliverCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeliverCardHeaders({});
        return await this.deliverCardWithOptions(request, headers, runtime);
    }
    /**
     * @summary 投放卡片
     *
     * @param request DeliverCardWithDelegateRequest
     * @param headers DeliverCardWithDelegateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return DeliverCardWithDelegateResponse
     */
    async deliverCardWithDelegateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.coFeedOpenDeliverModel)) {
            body["coFeedOpenDeliverModel"] = request.coFeedOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.docOpenDeliverModel)) {
            body["docOpenDeliverModel"] = request.docOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imGroupOpenDeliverModel)) {
            body["imGroupOpenDeliverModel"] = request.imGroupOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imRobotOpenDeliverModel)) {
            body["imRobotOpenDeliverModel"] = request.imRobotOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.imSingleOpenDeliverModel)) {
            body["imSingleOpenDeliverModel"] = request.imSingleOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.openSpaceId)) {
            body["openSpaceId"] = request.openSpaceId;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.topOpenDeliverModel)) {
            body["topOpenDeliverModel"] = request.topOpenDeliverModel;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "DeliverCardWithDelegate",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/me/instances/deliver`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new DeliverCardWithDelegateResponse({}));
    }
    /**
     * @summary 投放卡片
     *
     * @param request DeliverCardWithDelegateRequest
     * @return DeliverCardWithDelegateResponse
     */
    async deliverCardWithDelegate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new DeliverCardWithDelegateHeaders({});
        return await this.deliverCardWithDelegateWithOptions(request, headers, runtime);
    }
    /**
     * @summary 注册卡片回调地址
     *
     * @param request RegisterCallbackRequest
     * @param headers RegisterCallbackHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RegisterCallbackResponse
     */
    async registerCallbackWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.apiSecret)) {
            body["apiSecret"] = request.apiSecret;
        }
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.callbackUrl)) {
            body["callbackUrl"] = request.callbackUrl;
        }
        if (!tea_util_1.default.isUnset(request.forceUpdate)) {
            body["forceUpdate"] = request.forceUpdate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RegisterCallback",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/callbacks/register`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RegisterCallbackResponse({}));
    }
    /**
     * @summary 注册卡片回调地址
     *
     * @param request RegisterCallbackRequest
     * @return RegisterCallbackResponse
     */
    async registerCallback(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RegisterCallbackHeaders({});
        return await this.registerCallbackWithOptions(request, headers, runtime);
    }
    /**
     * @summary 注册卡片回调地址
     *
     * @param request RegisterCallbackWithDelegateRequest
     * @param headers RegisterCallbackWithDelegateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return RegisterCallbackWithDelegateResponse
     */
    async registerCallbackWithDelegateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.apiSecret)) {
            body["apiSecret"] = request.apiSecret;
        }
        if (!tea_util_1.default.isUnset(request.callbackRouteKey)) {
            body["callbackRouteKey"] = request.callbackRouteKey;
        }
        if (!tea_util_1.default.isUnset(request.callbackUrl)) {
            body["callbackUrl"] = request.callbackUrl;
        }
        if (!tea_util_1.default.isUnset(request.forceUpdate)) {
            body["forceUpdate"] = request.forceUpdate;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "RegisterCallbackWithDelegate",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/me/callbacks/register`,
            method: "POST",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new RegisterCallbackWithDelegateResponse({}));
    }
    /**
     * @summary 注册卡片回调地址
     *
     * @param request RegisterCallbackWithDelegateRequest
     * @return RegisterCallbackWithDelegateResponse
     */
    async registerCallbackWithDelegate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new RegisterCallbackWithDelegateHeaders({});
        return await this.registerCallbackWithDelegateWithOptions(request, headers, runtime);
    }
    /**
     * @summary AI互动卡片流式更新
     *
     * @param request StreamingUpdateRequest
     * @param headers StreamingUpdateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return StreamingUpdateResponse
     */
    async streamingUpdateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.content)) {
            body["content"] = request.content;
        }
        if (!tea_util_1.default.isUnset(request.guid)) {
            body["guid"] = request.guid;
        }
        if (!tea_util_1.default.isUnset(request.isError)) {
            body["isError"] = request.isError;
        }
        if (!tea_util_1.default.isUnset(request.isFinalize)) {
            body["isFinalize"] = request.isFinalize;
        }
        if (!tea_util_1.default.isUnset(request.isFull)) {
            body["isFull"] = request.isFull;
        }
        if (!tea_util_1.default.isUnset(request.key)) {
            body["key"] = request.key;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "StreamingUpdate",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/streaming`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new StreamingUpdateResponse({}));
    }
    /**
     * @summary AI互动卡片流式更新
     *
     * @param request StreamingUpdateRequest
     * @return StreamingUpdateResponse
     */
    async streamingUpdate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new StreamingUpdateHeaders({});
        return await this.streamingUpdateWithOptions(request, headers, runtime);
    }
    /**
     * @summary 更新卡片
     *
     * @param request UpdateCardRequest
     * @param headers UpdateCardHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateCardResponse
     */
    async updateCardWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardUpdateOptions)) {
            body["cardUpdateOptions"] = request.cardUpdateOptions;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCard",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/instances`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCardResponse({}));
    }
    /**
     * @summary 更新卡片
     *
     * @param request UpdateCardRequest
     * @return UpdateCardResponse
     */
    async updateCard(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCardHeaders({});
        return await this.updateCardWithOptions(request, headers, runtime);
    }
    /**
     * @summary 更新卡片
     *
     * @param request UpdateCardWithDelegateRequest
     * @param headers UpdateCardWithDelegateHeaders
     * @param runtime runtime options for this request RuntimeOptions
     * @return UpdateCardWithDelegateResponse
     */
    async updateCardWithDelegateWithOptions(request, headers, runtime) {
        tea_util_1.default.validateModel(request);
        let body = {};
        if (!tea_util_1.default.isUnset(request.cardData)) {
            body["cardData"] = request.cardData;
        }
        if (!tea_util_1.default.isUnset(request.cardUpdateOptions)) {
            body["cardUpdateOptions"] = request.cardUpdateOptions;
        }
        if (!tea_util_1.default.isUnset(request.outTrackId)) {
            body["outTrackId"] = request.outTrackId;
        }
        if (!tea_util_1.default.isUnset(request.privateData)) {
            body["privateData"] = request.privateData;
        }
        if (!tea_util_1.default.isUnset(request.userIdType)) {
            body["userIdType"] = request.userIdType;
        }
        let realHeaders = {};
        if (!tea_util_1.default.isUnset(headers.commonHeaders)) {
            realHeaders = headers.commonHeaders;
        }
        if (!tea_util_1.default.isUnset(headers.xAcsDingtalkAccessToken)) {
            realHeaders["x-acs-dingtalk-access-token"] = tea_util_1.default.toJSONString(headers.xAcsDingtalkAccessToken);
        }
        let req = new $OpenApi.OpenApiRequest({
            headers: realHeaders,
            body: openapi_util_1.default.parseToMap(body),
        });
        let params = new $OpenApi.Params({
            action: "UpdateCardWithDelegate",
            version: "card_1.0",
            protocol: "HTTP",
            pathname: `/v1.0/card/me/instances`,
            method: "PUT",
            authType: "AK",
            style: "ROA",
            reqBodyType: "none",
            bodyType: "json",
        });
        return $tea.cast(await this.execute(params, req, runtime), new UpdateCardWithDelegateResponse({}));
    }
    /**
     * @summary 更新卡片
     *
     * @param request UpdateCardWithDelegateRequest
     * @return UpdateCardWithDelegateResponse
     */
    async updateCardWithDelegate(request) {
        let runtime = new $Util.RuntimeOptions({});
        let headers = new UpdateCardWithDelegateHeaders({});
        return await this.updateCardWithDelegateWithOptions(request, headers, runtime);
    }
}
exports.default = Client;
//# sourceMappingURL=client.js.map